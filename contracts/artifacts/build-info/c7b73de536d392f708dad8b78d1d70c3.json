{
	"id": "c7b73de536d392f708dad8b78d1d70c3",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.9",
	"solcLongVersion": "0.8.9+commit.e5eed63a",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/RewradPool.sol": {
				"content": "//SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.9;\r\nimport \"../libraries/SafeERC20.sol\";\r\nimport \"../interfaces/IERC20Metadata.sol\";\r\nimport \"../interfaces/IRewardPool.sol\";\r\ncontract RewardPool is IRewardPool{\r\n    using SafeERC20 for IERC20;\r\n    address private TFAddress;  //mint的TF TOKEN\r\n\r\n    constructor(address _TFAddress){\r\n        TFAddress=_TFAddress;\r\n    }\r\n\r\n    //用户是否提取\r\n    mapping(address=>bool)private userIfWithdraw;\r\n\r\n    //提取奖励(50%)\r\n    function withdrawReward(address stableAddress)external{\r\n        uint256 personlTFERC20Amount=getTFERC20Amount(msg.sender);\r\n        if(personlTFERC20Amount>0){revert NoTFERC20();}\r\n        uint256 userProfit=profit(stableAddress);\r\n        //用户授权该合约并销毁TF token\r\n        IERC20(TFAddress).safeTransfer(address(0),personlTFERC20Amount);\r\n        IERC20(stableAddress).safeTransfer(msg.sender,userProfit);\r\n        userIfWithdraw[msg.sender]=true;\r\n    }\r\n\r\n    //计算用户的收益\r\n    function profit(address stableAddress)public view returns(uint256 userEarn){\r\n        uint256 stableAmount=IERC20(stableAddress).balanceOf(address(this));\r\n        uint256 personlTFERC20Amount=getTFERC20Amount(msg.sender);\r\n        if(userIfWithdraw[msg.sender]){revert AlreadyWithdraw();}\r\n        //个人数量/TFERC20总数*稳定币数量\r\n        userEarn = personlTFERC20Amount/getTotal()*stableAmount;\r\n    }\r\n\r\n    //获取token的总量\r\n    function getTotal()public view returns(uint256){\r\n        return IERC20Metadata(TFAddress).totalSupply();\r\n    }\r\n\r\n    //获取个人Mint的TFERC20总量\r\n    function getTFERC20Amount(address userAddress)public view returns(uint256){\r\n        return IERC20(TFAddress).balanceOf(userAddress);\r\n    }\r\n}"
			},
			"interfaces/IRewardPool.sol": {
				"content": "//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.9;\r\n\r\ninterface IRewardPool{\r\n    //转移失败\r\n    error FailTransfer();\r\n    //已经提取\r\n    error AlreadyWithdraw();\r\n    //没有持有TFERC20\r\n    error NoTFERC20();\r\n}"
			},
			"interfaces/IERC20Metadata.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../interfaces/IERC20.sol\";\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}"
			},
			"libraries/SafeERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\r\n\r\npragma solidity >=0.8.0;\r\n\r\nimport {IERC20} from \"../interfaces/IERC20.sol\";\r\nimport {IERC20Permit} from \"../interfaces/IERC20Permit.sol\";\r\nimport {Address} from \"../libraries/Address.sol\";\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    /**\r\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\r\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 oldAllowance = token.allowance(address(this), spender);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\r\n     * to be set to zero before setting it to a non-zero value, such as USDT.\r\n     */\r\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\r\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\r\n\r\n        if (!_callOptionalReturnBool(token, approvalCall)) {\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\r\n            _callOptionalReturn(token, approvalCall);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\r\n     * Revert on invalid signature.\r\n     */\r\n    function safePermit(\r\n        IERC20Permit token,\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal {\r\n        uint256 nonceBefore = token.nonces(owner);\r\n        token.permit(owner, spender, value, deadline, v, r, s);\r\n        uint256 nonceAfter = token.nonces(owner);\r\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     *\r\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\r\n     */\r\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\r\n        // and not revert is the subcall reverts.\r\n\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        return\r\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\r\n    }\r\n}\r\n"
			},
			"libraries/Address.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\r\n\r\npragma solidity >=0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     *\r\n     * Furthermore, `isContract` will also return true if the target contract within\r\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\r\n     * which only has an effect at the end of a transaction.\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\r\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\r\n     *\r\n     * _Available since v4.8._\r\n     */\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        if (success) {\r\n            if (returndata.length == 0) {\r\n                // only check isContract if the call was successful and the return data is empty\r\n                // otherwise we already know that it was a contract\r\n                require(isContract(target), \"Address: call to non-contract\");\r\n            }\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason or using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length > 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert(errorMessage);\r\n        }\r\n    }\r\n}\r\n"
			},
			"interfaces/IERC20Permit.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\r\n\r\npragma solidity >=0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\r\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\r\n *\r\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\r\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\r\n * need to send a transaction, and thus is not required to hold Ether at all.\r\n *\r\n * ==== Security Considerations\r\n *\r\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\r\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\r\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\r\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\r\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\r\n * generally recommended is:\r\n *\r\n * ```solidity\r\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\r\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\r\n *     doThing(..., value);\r\n * }\r\n *\r\n * function doThing(..., uint256 value) public {\r\n *     token.safeTransferFrom(msg.sender, address(this), value);\r\n *     ...\r\n * }\r\n * ```\r\n *\r\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\r\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\r\n * {SafeERC20-safeTransferFrom}).\r\n *\r\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\r\n * contracts should have entry points that don't rely on permit.\r\n */\r\ninterface IERC20Permit {\r\n    /**\r\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\r\n     * given ``owner``'s signed approval.\r\n     *\r\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\r\n     * ordering also apply here.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `deadline` must be a timestamp in the future.\r\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\r\n     * over the EIP712-formatted function arguments.\r\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\r\n     *\r\n     * For more information on the signature format, see the\r\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\r\n     * section].\r\n     *\r\n     * CAUTION: See Security Considerations above.\r\n     */\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Returns the current nonce for `owner`. This value must be\r\n     * included whenever a signature is generated for {permit}.\r\n     *\r\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\r\n     * prevents a signature from being used multiple times.\r\n     */\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\r\n     */\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n}\r\n"
			},
			"interfaces/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"contracts/RewradPool.sol": {
				"RewardPool": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_TFAddress",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"inputs": [],
							"name": "AlreadyWithdraw",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "FailTransfer",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "NoTFERC20",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "userAddress",
									"type": "address"
								}
							],
							"name": "getTFERC20Amount",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getTotal",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "stableAddress",
									"type": "address"
								}
							],
							"name": "profit",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "userEarn",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "stableAddress",
									"type": "address"
								}
							],
							"name": "withdrawReward",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/RewradPool.sol\":181:1754  contract RewardPool is IRewardPool{... */\n  mstore(0x40, 0x80)\n    /* \"contracts/RewradPool.sol\":308:378  constructor(address _TFAddress){... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  mload(0x40)\n  sub(codesize, bytecodeSize)\n  dup1\n  bytecodeSize\n  dup4\n  codecopy\n  dup2\n  dup2\n  add\n  0x40\n  mstore\n  dup2\n  add\n  swap1\n  tag_2\n  swap2\n  swap1\n  tag_3\n  jump\t// in\ntag_2:\n    /* \"contracts/RewradPool.sol\":360:370  _TFAddress */\n  dup1\n    /* \"contracts/RewradPool.sol\":350:359  TFAddress */\n  0x00\n  dup1\n    /* \"contracts/RewradPool.sol\":350:370  TFAddress=_TFAddress */\n  0x0100\n  exp\n  dup2\n  sload\n  dup2\n  0xffffffffffffffffffffffffffffffffffffffff\n  mul\n  not\n  and\n  swap1\n  dup4\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  mul\n  or\n  swap1\n  sstore\n  pop\n    /* \"contracts/RewradPool.sol\":308:378  constructor(address _TFAddress){... */\n  pop\n    /* \"contracts/RewradPool.sol\":181:1754  contract RewardPool is IRewardPool{... */\n  jump(tag_6)\n    /* \"#utility.yul\":88:205   */\ntag_8:\n    /* \"#utility.yul\":197:198   */\n  0x00\n    /* \"#utility.yul\":194:195   */\n  dup1\n    /* \"#utility.yul\":187:199   */\n  revert\n    /* \"#utility.yul\":334:460   */\ntag_10:\n    /* \"#utility.yul\":371:378   */\n  0x00\n    /* \"#utility.yul\":411:453   */\n  0xffffffffffffffffffffffffffffffffffffffff\n    /* \"#utility.yul\":404:409   */\n  dup3\n    /* \"#utility.yul\":400:454   */\n  and\n    /* \"#utility.yul\":389:454   */\n  swap1\n  pop\n    /* \"#utility.yul\":334:460   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":466:562   */\ntag_11:\n    /* \"#utility.yul\":503:510   */\n  0x00\n    /* \"#utility.yul\":532:556   */\n  tag_20\n    /* \"#utility.yul\":550:555   */\n  dup3\n    /* \"#utility.yul\":532:556   */\n  tag_10\n  jump\t// in\ntag_20:\n    /* \"#utility.yul\":521:556   */\n  swap1\n  pop\n    /* \"#utility.yul\":466:562   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":568:690   */\ntag_12:\n    /* \"#utility.yul\":641:665   */\n  tag_22\n    /* \"#utility.yul\":659:664   */\n  dup2\n    /* \"#utility.yul\":641:665   */\n  tag_11\n  jump\t// in\ntag_22:\n    /* \"#utility.yul\":634:639   */\n  dup2\n    /* \"#utility.yul\":631:666   */\n  eq\n    /* \"#utility.yul\":621:684   */\n  tag_23\n  jumpi\n    /* \"#utility.yul\":680:681   */\n  0x00\n    /* \"#utility.yul\":677:678   */\n  dup1\n    /* \"#utility.yul\":670:682   */\n  revert\n    /* \"#utility.yul\":621:684   */\ntag_23:\n    /* \"#utility.yul\":568:690   */\n  pop\n  jump\t// out\n    /* \"#utility.yul\":696:839   */\ntag_13:\n    /* \"#utility.yul\":753:758   */\n  0x00\n    /* \"#utility.yul\":784:790   */\n  dup2\n    /* \"#utility.yul\":778:791   */\n  mload\n    /* \"#utility.yul\":769:791   */\n  swap1\n  pop\n    /* \"#utility.yul\":800:833   */\n  tag_25\n    /* \"#utility.yul\":827:832   */\n  dup2\n    /* \"#utility.yul\":800:833   */\n  tag_12\n  jump\t// in\ntag_25:\n    /* \"#utility.yul\":696:839   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":845:1196   */\ntag_3:\n    /* \"#utility.yul\":915:921   */\n  0x00\n    /* \"#utility.yul\":964:966   */\n  0x20\n    /* \"#utility.yul\":952:961   */\n  dup3\n    /* \"#utility.yul\":943:950   */\n  dup5\n    /* \"#utility.yul\":939:962   */\n  sub\n    /* \"#utility.yul\":935:967   */\n  slt\n    /* \"#utility.yul\":932:1051   */\n  iszero\n  tag_27\n  jumpi\n    /* \"#utility.yul\":970:1049   */\n  tag_28\n  tag_8\n  jump\t// in\ntag_28:\n    /* \"#utility.yul\":932:1051   */\ntag_27:\n    /* \"#utility.yul\":1090:1091   */\n  0x00\n    /* \"#utility.yul\":1115:1179   */\n  tag_29\n    /* \"#utility.yul\":1171:1178   */\n  dup5\n    /* \"#utility.yul\":1162:1168   */\n  dup3\n    /* \"#utility.yul\":1151:1160   */\n  dup6\n    /* \"#utility.yul\":1147:1169   */\n  add\n    /* \"#utility.yul\":1115:1179   */\n  tag_13\n  jump\t// in\ntag_29:\n    /* \"#utility.yul\":1105:1179   */\n  swap2\n  pop\n    /* \"#utility.yul\":1061:1189   */\n  pop\n    /* \"#utility.yul\":845:1196   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"contracts/RewradPool.sol\":181:1754  contract RewardPool is IRewardPool{... */\ntag_6:\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/RewradPool.sol\":181:1754  contract RewardPool is IRewardPool{... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x02550e4d\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x775a25e3\n      eq\n      tag_4\n      jumpi\n      dup1\n      0xaf32b7a1\n      eq\n      tag_5\n      jumpi\n      dup1\n      0xb86e321c\n      eq\n      tag_6\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"contracts/RewradPool.sol\":999:1415  function profit(address stableAddress)public view returns(uint256 userEarn){... */\n    tag_3:\n      tag_7\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_8\n      swap2\n      swap1\n      tag_9\n      jump\t// in\n    tag_8:\n      tag_10\n      jump\t// in\n    tag_7:\n      mload(0x40)\n      tag_11\n      swap2\n      swap1\n      tag_12\n      jump\t// in\n    tag_11:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/RewradPool.sol\":1451:1563  function getTotal()public view returns(uint256){... */\n    tag_4:\n      tag_13\n      tag_14\n      jump\t// in\n    tag_13:\n      mload(0x40)\n      tag_15\n      swap2\n      swap1\n      tag_12\n      jump\t// in\n    tag_15:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/RewradPool.sol\":1611:1751  function getTFERC20Amount(address userAddress)public view returns(uint256){... */\n    tag_5:\n      tag_16\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_17\n      swap2\n      swap1\n      tag_9\n      jump\t// in\n    tag_17:\n      tag_18\n      jump\t// in\n    tag_16:\n      mload(0x40)\n      tag_19\n      swap2\n      swap1\n      tag_12\n      jump\t// in\n    tag_19:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/RewradPool.sol\":490:962  function withdrawReward(address stableAddress)external{... */\n    tag_6:\n      tag_20\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_21\n      swap2\n      swap1\n      tag_9\n      jump\t// in\n    tag_21:\n      tag_22\n      jump\t// in\n    tag_20:\n      stop\n        /* \"contracts/RewradPool.sol\":999:1415  function profit(address stableAddress)public view returns(uint256 userEarn){... */\n    tag_10:\n        /* \"contracts/RewradPool.sol\":1057:1073  uint256 userEarn */\n      0x00\n        /* \"contracts/RewradPool.sol\":1085:1105  uint256 stableAmount */\n      dup1\n        /* \"contracts/RewradPool.sol\":1113:1126  stableAddress */\n      dup3\n        /* \"contracts/RewradPool.sol\":1106:1137  IERC20(stableAddress).balanceOf */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x70a08231\n        /* \"contracts/RewradPool.sol\":1146:1150  this */\n      address\n        /* \"contracts/RewradPool.sol\":1106:1152  IERC20(stableAddress).balanceOf(address(this)) */\n      mload(0x40)\n      dup3\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      tag_24\n      swap2\n      swap1\n      tag_25\n      jump\t// in\n    tag_24:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_26\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_26:\n      pop\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_28\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_28:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_29\n      swap2\n      swap1\n      tag_30\n      jump\t// in\n    tag_29:\n        /* \"contracts/RewradPool.sol\":1085:1152  uint256 stableAmount=IERC20(stableAddress).balanceOf(address(this)) */\n      swap1\n      pop\n        /* \"contracts/RewradPool.sol\":1163:1191  uint256 personlTFERC20Amount */\n      0x00\n        /* \"contracts/RewradPool.sol\":1192:1220  getTFERC20Amount(msg.sender) */\n      tag_31\n        /* \"contracts/RewradPool.sol\":1209:1219  msg.sender */\n      caller\n        /* \"contracts/RewradPool.sol\":1192:1208  getTFERC20Amount */\n      tag_18\n        /* \"contracts/RewradPool.sol\":1192:1220  getTFERC20Amount(msg.sender) */\n      jump\t// in\n    tag_31:\n        /* \"contracts/RewradPool.sol\":1163:1220  uint256 personlTFERC20Amount=getTFERC20Amount(msg.sender) */\n      swap1\n      pop\n        /* \"contracts/RewradPool.sol\":1234:1248  userIfWithdraw */\n      0x01\n        /* \"contracts/RewradPool.sol\":1234:1260  userIfWithdraw[msg.sender] */\n      0x00\n        /* \"contracts/RewradPool.sol\":1249:1259  msg.sender */\n      caller\n        /* \"contracts/RewradPool.sol\":1234:1260  userIfWithdraw[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n        /* \"contracts/RewradPool.sol\":1231:1288  if(userIfWithdraw[msg.sender]){revert AlreadyWithdraw();} */\n      iszero\n      tag_32\n      jumpi\n        /* \"contracts/RewradPool.sol\":1269:1286  AlreadyWithdraw() */\n      mload(0x40)\n      0xa727014000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/RewradPool.sol\":1231:1288  if(userIfWithdraw[msg.sender]){revert AlreadyWithdraw();} */\n    tag_32:\n        /* \"contracts/RewradPool.sol\":1395:1407  stableAmount */\n      dup2\n        /* \"contracts/RewradPool.sol\":1384:1394  getTotal() */\n      tag_33\n        /* \"contracts/RewradPool.sol\":1384:1392  getTotal */\n      tag_14\n        /* \"contracts/RewradPool.sol\":1384:1394  getTotal() */\n      jump\t// in\n    tag_33:\n        /* \"contracts/RewradPool.sol\":1363:1383  personlTFERC20Amount */\n      dup3\n        /* \"contracts/RewradPool.sol\":1363:1394  personlTFERC20Amount/getTotal() */\n      tag_34\n      swap2\n      swap1\n      tag_35\n      jump\t// in\n    tag_34:\n        /* \"contracts/RewradPool.sol\":1363:1407  personlTFERC20Amount/getTotal()*stableAmount */\n      tag_36\n      swap2\n      swap1\n      tag_37\n      jump\t// in\n    tag_36:\n        /* \"contracts/RewradPool.sol\":1352:1407  userEarn = personlTFERC20Amount/getTotal()*stableAmount */\n      swap3\n      pop\n        /* \"contracts/RewradPool.sol\":1074:1415  {... */\n      pop\n      pop\n        /* \"contracts/RewradPool.sol\":999:1415  function profit(address stableAddress)public view returns(uint256 userEarn){... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"contracts/RewradPool.sol\":1451:1563  function getTotal()public view returns(uint256){... */\n    tag_14:\n        /* \"contracts/RewradPool.sol\":1490:1497  uint256 */\n      0x00\n        /* \"contracts/RewradPool.sol\":1531:1540  TFAddress */\n      dup1\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/RewradPool.sol\":1516:1553  IERC20Metadata(TFAddress).totalSupply */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x18160ddd\n        /* \"contracts/RewradPool.sol\":1516:1555  IERC20Metadata(TFAddress).totalSupply() */\n      mload(0x40)\n      dup2\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_39\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_39:\n      pop\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_41\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_41:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_42\n      swap2\n      swap1\n      tag_30\n      jump\t// in\n    tag_42:\n        /* \"contracts/RewradPool.sol\":1509:1555  return IERC20Metadata(TFAddress).totalSupply() */\n      swap1\n      pop\n        /* \"contracts/RewradPool.sol\":1451:1563  function getTotal()public view returns(uint256){... */\n      swap1\n      jump\t// out\n        /* \"contracts/RewradPool.sol\":1611:1751  function getTFERC20Amount(address userAddress)public view returns(uint256){... */\n    tag_18:\n        /* \"contracts/RewradPool.sol\":1677:1684  uint256 */\n      0x00\n        /* \"contracts/RewradPool.sol\":1710:1719  TFAddress */\n      dup1\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/RewradPool.sol\":1703:1730  IERC20(TFAddress).balanceOf */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x70a08231\n        /* \"contracts/RewradPool.sol\":1731:1742  userAddress */\n      dup4\n        /* \"contracts/RewradPool.sol\":1703:1743  IERC20(TFAddress).balanceOf(userAddress) */\n      mload(0x40)\n      dup3\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      tag_44\n      swap2\n      swap1\n      tag_25\n      jump\t// in\n    tag_44:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_45\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_45:\n      pop\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_47\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_47:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_48\n      swap2\n      swap1\n      tag_30\n      jump\t// in\n    tag_48:\n        /* \"contracts/RewradPool.sol\":1696:1743  return IERC20(TFAddress).balanceOf(userAddress) */\n      swap1\n      pop\n        /* \"contracts/RewradPool.sol\":1611:1751  function getTFERC20Amount(address userAddress)public view returns(uint256){... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"contracts/RewradPool.sol\":490:962  function withdrawReward(address stableAddress)external{... */\n    tag_22:\n        /* \"contracts/RewradPool.sol\":555:583  uint256 personlTFERC20Amount */\n      0x00\n        /* \"contracts/RewradPool.sol\":584:612  getTFERC20Amount(msg.sender) */\n      tag_50\n        /* \"contracts/RewradPool.sol\":601:611  msg.sender */\n      caller\n        /* \"contracts/RewradPool.sol\":584:600  getTFERC20Amount */\n      tag_18\n        /* \"contracts/RewradPool.sol\":584:612  getTFERC20Amount(msg.sender) */\n      jump\t// in\n    tag_50:\n        /* \"contracts/RewradPool.sol\":555:612  uint256 personlTFERC20Amount=getTFERC20Amount(msg.sender) */\n      swap1\n      pop\n        /* \"contracts/RewradPool.sol\":647:648  0 */\n      0x00\n        /* \"contracts/RewradPool.sol\":626:646  personlTFERC20Amount */\n      dup2\n        /* \"contracts/RewradPool.sol\":626:648  personlTFERC20Amount>0 */\n      gt\n        /* \"contracts/RewradPool.sol\":623:670  if(personlTFERC20Amount>0){revert NoTFERC20();} */\n      iszero\n      tag_51\n      jumpi\n        /* \"contracts/RewradPool.sol\":657:668  NoTFERC20() */\n      mload(0x40)\n      0x5695054900000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/RewradPool.sol\":623:670  if(personlTFERC20Amount>0){revert NoTFERC20();} */\n    tag_51:\n        /* \"contracts/RewradPool.sol\":680:698  uint256 userProfit */\n      0x00\n        /* \"contracts/RewradPool.sol\":699:720  profit(stableAddress) */\n      tag_52\n        /* \"contracts/RewradPool.sol\":706:719  stableAddress */\n      dup4\n        /* \"contracts/RewradPool.sol\":699:705  profit */\n      tag_10\n        /* \"contracts/RewradPool.sol\":699:720  profit(stableAddress) */\n      jump\t// in\n    tag_52:\n        /* \"contracts/RewradPool.sol\":680:720  uint256 userProfit=profit(stableAddress) */\n      swap1\n      pop\n        /* \"contracts/RewradPool.sol\":781:844  IERC20(TFAddress).safeTransfer(address(0),personlTFERC20Amount) */\n      tag_53\n        /* \"contracts/RewradPool.sol\":820:821  0 */\n      0x00\n        /* \"contracts/RewradPool.sol\":823:843  personlTFERC20Amount */\n      dup4\n        /* \"contracts/RewradPool.sol\":788:797  TFAddress */\n      0x00\n      dup1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/RewradPool.sol\":781:811  IERC20(TFAddress).safeTransfer */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      tag_54\n      swap1\n        /* \"contracts/RewradPool.sol\":781:844  IERC20(TFAddress).safeTransfer(address(0),personlTFERC20Amount) */\n      swap3\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_53:\n        /* \"contracts/RewradPool.sol\":855:912  IERC20(stableAddress).safeTransfer(msg.sender,userProfit) */\n      tag_55\n        /* \"contracts/RewradPool.sol\":890:900  msg.sender */\n      caller\n        /* \"contracts/RewradPool.sol\":901:911  userProfit */\n      dup3\n        /* \"contracts/RewradPool.sol\":862:875  stableAddress */\n      dup6\n        /* \"contracts/RewradPool.sol\":855:889  IERC20(stableAddress).safeTransfer */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      tag_54\n      swap1\n        /* \"contracts/RewradPool.sol\":855:912  IERC20(stableAddress).safeTransfer(msg.sender,userProfit) */\n      swap3\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_55:\n        /* \"contracts/RewradPool.sol\":950:954  true */\n      0x01\n        /* \"contracts/RewradPool.sol\":923:937  userIfWithdraw */\n      dup1\n        /* \"contracts/RewradPool.sol\":923:949  userIfWithdraw[msg.sender] */\n      0x00\n        /* \"contracts/RewradPool.sol\":938:948  msg.sender */\n      caller\n        /* \"contracts/RewradPool.sol\":923:949  userIfWithdraw[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n        /* \"contracts/RewradPool.sol\":923:954  userIfWithdraw[msg.sender]=true */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xff\n      mul\n      not\n      and\n      swap1\n      dup4\n      iszero\n      iszero\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"contracts/RewradPool.sol\":544:962  {... */\n      pop\n      pop\n        /* \"contracts/RewradPool.sol\":490:962  function withdrawReward(address stableAddress)external{... */\n      pop\n      jump\t// out\n        /* \"libraries/SafeERC20.sol\":1025:1202  function safeTransfer(IERC20 token, address to, uint256 value) internal {... */\n    tag_54:\n        /* \"libraries/SafeERC20.sol\":1108:1194  _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value)) */\n      tag_57\n        /* \"libraries/SafeERC20.sol\":1128:1133  token */\n      dup4\n        /* \"libraries/SafeERC20.sol\":1158:1181  token.transfer.selector */\n      shl(0xe0, 0xa9059cbb)\n        /* \"libraries/SafeERC20.sol\":1183:1185  to */\n      dup5\n        /* \"libraries/SafeERC20.sol\":1187:1192  value */\n      dup5\n        /* \"libraries/SafeERC20.sol\":1135:1193  abi.encodeWithSelector(token.transfer.selector, to, value) */\n      add(0x24, mload(0x40))\n      tag_58\n      swap3\n      swap2\n      swap1\n      tag_59\n      jump\t// in\n    tag_58:\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n      swap1\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n      0x20\n      dup3\n      add\n      dup1\n      mload\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n      dup4\n      dup2\n      dup4\n      and\n      or\n      dup4\n      mstore\n      pop\n      pop\n      pop\n      pop\n        /* \"libraries/SafeERC20.sol\":1108:1127  _callOptionalReturn */\n      tag_60\n        /* \"libraries/SafeERC20.sol\":1108:1194  _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value)) */\n      jump\t// in\n    tag_57:\n        /* \"libraries/SafeERC20.sol\":1025:1202  function safeTransfer(IERC20 token, address to, uint256 value) internal {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"libraries/SafeERC20.sol\":5371:6020  function _callOptionalReturn(IERC20 token, bytes memory data) private {... */\n    tag_60:\n        /* \"libraries/SafeERC20.sol\":5795:5818  bytes memory returndata */\n      0x00\n        /* \"libraries/SafeERC20.sol\":5821:5890  address(token).functionCall(data, \"SafeERC20: low-level call failed\") */\n      tag_62\n        /* \"libraries/SafeERC20.sol\":5849:5853  data */\n      dup3\n        /* \"libraries/SafeERC20.sol\":5821:5890  address(token).functionCall(data, \"SafeERC20: low-level call failed\") */\n      mload(0x40)\n      dup1\n      0x40\n      add\n      0x40\n      mstore\n      dup1\n      0x20\n      dup2\n      mstore\n      0x20\n      add\n      0x5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564\n      dup2\n      mstore\n      pop\n        /* \"libraries/SafeERC20.sol\":5829:5834  token */\n      dup6\n        /* \"libraries/SafeERC20.sol\":5821:5848  address(token).functionCall */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      tag_63\n      swap1\n        /* \"libraries/SafeERC20.sol\":5821:5890  address(token).functionCall(data, \"SafeERC20: low-level call failed\") */\n      swap3\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_62:\n        /* \"libraries/SafeERC20.sol\":5795:5890  bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\") */\n      swap1\n      pop\n        /* \"libraries/SafeERC20.sol\":5930:5931  0 */\n      0x00\n        /* \"libraries/SafeERC20.sol\":5909:5919  returndata */\n      dup2\n        /* \"libraries/SafeERC20.sol\":5909:5926  returndata.length */\n      mload\n        /* \"libraries/SafeERC20.sol\":5909:5931  returndata.length == 0 */\n      eq\n        /* \"libraries/SafeERC20.sol\":5909:5965  returndata.length == 0 || abi.decode(returndata, (bool)) */\n      dup1\n      tag_64\n      jumpi\n      pop\n        /* \"libraries/SafeERC20.sol\":5946:5956  returndata */\n      dup1\n        /* \"libraries/SafeERC20.sol\":5935:5965  abi.decode(returndata, (bool)) */\n      dup1\n      0x20\n      add\n      swap1\n      mload\n      dup2\n      add\n      swap1\n      tag_65\n      swap2\n      swap1\n      tag_66\n      jump\t// in\n    tag_65:\n        /* \"libraries/SafeERC20.sol\":5909:5965  returndata.length == 0 || abi.decode(returndata, (bool)) */\n    tag_64:\n        /* \"libraries/SafeERC20.sol\":5901:6012  require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\") */\n      tag_67\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_68\n      swap1\n      tag_69\n      jump\t// in\n    tag_68:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_67:\n        /* \"libraries/SafeERC20.sol\":5441:6020  {... */\n      pop\n        /* \"libraries/SafeERC20.sol\":5371:6020  function _callOptionalReturn(IERC20 token, bytes memory data) private {... */\n      pop\n      pop\n      jump\t// out\n        /* \"libraries/Address.sol\":4207:4436  function functionCall(... */\n    tag_63:\n        /* \"libraries/Address.sol\":4344:4356  bytes memory */\n      0x60\n        /* \"libraries/Address.sol\":4376:4428  functionCallWithValue(target, data, 0, errorMessage) */\n      tag_71\n        /* \"libraries/Address.sol\":4398:4404  target */\n      dup5\n        /* \"libraries/Address.sol\":4406:4410  data */\n      dup5\n        /* \"libraries/Address.sol\":4412:4413  0 */\n      0x00\n        /* \"libraries/Address.sol\":4415:4427  errorMessage */\n      dup6\n        /* \"libraries/Address.sol\":4376:4397  functionCallWithValue */\n      tag_72\n        /* \"libraries/Address.sol\":4376:4428  functionCallWithValue(target, data, 0, errorMessage) */\n      jump\t// in\n    tag_71:\n        /* \"libraries/Address.sol\":4369:4428  return functionCallWithValue(target, data, 0, errorMessage) */\n      swap1\n      pop\n        /* \"libraries/Address.sol\":4207:4436  function functionCall(... */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"libraries/Address.sol\":5293:5748  function functionCallWithValue(... */\n    tag_72:\n        /* \"libraries/Address.sol\":5463:5475  bytes memory */\n      0x60\n        /* \"libraries/Address.sol\":5521:5526  value */\n      dup3\n        /* \"libraries/Address.sol\":5496:5517  address(this).balance */\n      selfbalance\n        /* \"libraries/Address.sol\":5496:5526  address(this).balance >= value */\n      lt\n      iszero\n        /* \"libraries/Address.sol\":5488:5569  require(address(this).balance >= value, \"Address: insufficient balance for call\") */\n      tag_74\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_75\n      swap1\n      tag_76\n      jump\t// in\n    tag_75:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_74:\n        /* \"libraries/Address.sol\":5581:5593  bool success */\n      0x00\n        /* \"libraries/Address.sol\":5595:5618  bytes memory returndata */\n      dup1\n        /* \"libraries/Address.sol\":5622:5628  target */\n      dup7\n        /* \"libraries/Address.sol\":5622:5633  target.call */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"libraries/Address.sol\":5641:5646  value */\n      dup6\n        /* \"libraries/Address.sol\":5648:5652  data */\n      dup8\n        /* \"libraries/Address.sol\":5622:5653  target.call{value: value}(data) */\n      mload(0x40)\n      tag_77\n      swap2\n      swap1\n      tag_78\n      jump\t// in\n    tag_77:\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup6\n      dup8\n      gas\n      call\n      swap3\n      pop\n      pop\n      pop\n      returndatasize\n      dup1\n      0x00\n      dup2\n      eq\n      tag_81\n      jumpi\n      mload(0x40)\n      swap2\n      pop\n      and(add(returndatasize, 0x3f), not(0x1f))\n      dup3\n      add\n      0x40\n      mstore\n      returndatasize\n      dup3\n      mstore\n      returndatasize\n      0x00\n      0x20\n      dup5\n      add\n      returndatacopy\n      jump(tag_80)\n    tag_81:\n      0x60\n      swap2\n      pop\n    tag_80:\n      pop\n        /* \"libraries/Address.sol\":5580:5653  (bool success, bytes memory returndata) = target.call{value: value}(data) */\n      swap2\n      pop\n      swap2\n      pop\n        /* \"libraries/Address.sol\":5671:5740  verifyCallResultFromTarget(target, success, returndata, errorMessage) */\n      tag_82\n        /* \"libraries/Address.sol\":5698:5704  target */\n      dup8\n        /* \"libraries/Address.sol\":5706:5713  success */\n      dup4\n        /* \"libraries/Address.sol\":5715:5725  returndata */\n      dup4\n        /* \"libraries/Address.sol\":5727:5739  errorMessage */\n      dup8\n        /* \"libraries/Address.sol\":5671:5697  verifyCallResultFromTarget */\n      tag_83\n        /* \"libraries/Address.sol\":5671:5740  verifyCallResultFromTarget(target, success, returndata, errorMessage) */\n      jump\t// in\n    tag_82:\n        /* \"libraries/Address.sol\":5664:5740  return verifyCallResultFromTarget(target, success, returndata, errorMessage) */\n      swap3\n      pop\n      pop\n      pop\n        /* \"libraries/Address.sol\":5293:5748  function functionCallWithValue(... */\n      swap5\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"libraries/Address.sol\":7866:8510  function verifyCallResultFromTarget(... */\n    tag_83:\n        /* \"libraries/Address.sol\":8051:8063  bytes memory */\n      0x60\n        /* \"libraries/Address.sol\":8080:8087  success */\n      dup4\n        /* \"libraries/Address.sol\":8076:8503  if (success) {... */\n      iszero\n      tag_85\n      jumpi\n        /* \"libraries/Address.sol\":8129:8130  0 */\n      0x00\n        /* \"libraries/Address.sol\":8108:8118  returndata */\n      dup4\n        /* \"libraries/Address.sol\":8108:8125  returndata.length */\n      mload\n        /* \"libraries/Address.sol\":8108:8130  returndata.length == 0 */\n      eq\n        /* \"libraries/Address.sol\":8104:8394  if (returndata.length == 0) {... */\n      iszero\n      tag_86\n      jumpi\n        /* \"libraries/Address.sol\":8326:8344  isContract(target) */\n      tag_87\n        /* \"libraries/Address.sol\":8337:8343  target */\n      dup6\n        /* \"libraries/Address.sol\":8326:8336  isContract */\n      tag_88\n        /* \"libraries/Address.sol\":8326:8344  isContract(target) */\n      jump\t// in\n    tag_87:\n        /* \"libraries/Address.sol\":8318:8378  require(isContract(target), \"Address: call to non-contract\") */\n      tag_89\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_90\n      swap1\n      tag_91\n      jump\t// in\n    tag_90:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_89:\n        /* \"libraries/Address.sol\":8104:8394  if (returndata.length == 0) {... */\n    tag_86:\n        /* \"libraries/Address.sol\":8415:8425  returndata */\n      dup3\n        /* \"libraries/Address.sol\":8408:8425  return returndata */\n      swap1\n      pop\n      jump(tag_84)\n        /* \"libraries/Address.sol\":8076:8503  if (success) {... */\n    tag_85:\n        /* \"libraries/Address.sol\":8458:8491  _revert(returndata, errorMessage) */\n      tag_93\n        /* \"libraries/Address.sol\":8466:8476  returndata */\n      dup4\n        /* \"libraries/Address.sol\":8478:8490  errorMessage */\n      dup4\n        /* \"libraries/Address.sol\":8458:8465  _revert */\n      tag_94\n        /* \"libraries/Address.sol\":8458:8491  _revert(returndata, errorMessage) */\n      jump\t// in\n    tag_93:\n        /* \"libraries/Address.sol\":7866:8510  function verifyCallResultFromTarget(... */\n    tag_84:\n      swap5\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"libraries/Address.sol\":1452:1778  function isContract(address account) internal view returns (bool) {... */\n    tag_88:\n        /* \"libraries/Address.sol\":1512:1516  bool */\n      0x00\n        /* \"libraries/Address.sol\":1769:1770  0 */\n      dup1\n        /* \"libraries/Address.sol\":1747:1754  account */\n      dup3\n        /* \"libraries/Address.sol\":1747:1766  account.code.length */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      extcodesize\n        /* \"libraries/Address.sol\":1747:1770  account.code.length > 0 */\n      gt\n        /* \"libraries/Address.sol\":1740:1770  return account.code.length > 0 */\n      swap1\n      pop\n        /* \"libraries/Address.sol\":1452:1778  function isContract(address account) internal view returns (bool) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"libraries/Address.sol\":9052:9604  function _revert(bytes memory returndata, string memory errorMessage) private pure {... */\n    tag_94:\n        /* \"libraries/Address.sol\":9233:9234  0 */\n      0x00\n        /* \"libraries/Address.sol\":9213:9223  returndata */\n      dup3\n        /* \"libraries/Address.sol\":9213:9230  returndata.length */\n      mload\n        /* \"libraries/Address.sol\":9213:9234  returndata.length > 0 */\n      gt\n        /* \"libraries/Address.sol\":9209:9597  if (returndata.length > 0) {... */\n      iszero\n      tag_97\n      jumpi\n        /* \"libraries/Address.sol\":9445:9455  returndata */\n      dup2\n        /* \"libraries/Address.sol\":9439:9456  mload(returndata) */\n      mload\n        /* \"libraries/Address.sol\":9502:9517  returndata_size */\n      dup1\n        /* \"libraries/Address.sol\":9489:9499  returndata */\n      dup4\n        /* \"libraries/Address.sol\":9485:9487  32 */\n      0x20\n        /* \"libraries/Address.sol\":9481:9500  add(32, returndata) */\n      add\n        /* \"libraries/Address.sol\":9474:9518  revert(add(32, returndata), returndata_size) */\n      revert\n        /* \"libraries/Address.sol\":9209:9597  if (returndata.length > 0) {... */\n    tag_97:\n        /* \"libraries/Address.sol\":9572:9584  errorMessage */\n      dup1\n        /* \"libraries/Address.sol\":9565:9585  revert(errorMessage) */\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_99\n      swap2\n      swap1\n      tag_100\n      jump\t// in\n    tag_99:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"#utility.yul\":88:205   */\n    tag_102:\n        /* \"#utility.yul\":197:198   */\n      0x00\n        /* \"#utility.yul\":194:195   */\n      dup1\n        /* \"#utility.yul\":187:199   */\n      revert\n        /* \"#utility.yul\":334:460   */\n    tag_104:\n        /* \"#utility.yul\":371:378   */\n      0x00\n        /* \"#utility.yul\":411:453   */\n      0xffffffffffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":404:409   */\n      dup3\n        /* \"#utility.yul\":400:454   */\n      and\n        /* \"#utility.yul\":389:454   */\n      swap1\n      pop\n        /* \"#utility.yul\":334:460   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":466:562   */\n    tag_105:\n        /* \"#utility.yul\":503:510   */\n      0x00\n        /* \"#utility.yul\":532:556   */\n      tag_138\n        /* \"#utility.yul\":550:555   */\n      dup3\n        /* \"#utility.yul\":532:556   */\n      tag_104\n      jump\t// in\n    tag_138:\n        /* \"#utility.yul\":521:556   */\n      swap1\n      pop\n        /* \"#utility.yul\":466:562   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":568:690   */\n    tag_106:\n        /* \"#utility.yul\":641:665   */\n      tag_140\n        /* \"#utility.yul\":659:664   */\n      dup2\n        /* \"#utility.yul\":641:665   */\n      tag_105\n      jump\t// in\n    tag_140:\n        /* \"#utility.yul\":634:639   */\n      dup2\n        /* \"#utility.yul\":631:666   */\n      eq\n        /* \"#utility.yul\":621:684   */\n      tag_141\n      jumpi\n        /* \"#utility.yul\":680:681   */\n      0x00\n        /* \"#utility.yul\":677:678   */\n      dup1\n        /* \"#utility.yul\":670:682   */\n      revert\n        /* \"#utility.yul\":621:684   */\n    tag_141:\n        /* \"#utility.yul\":568:690   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":696:835   */\n    tag_107:\n        /* \"#utility.yul\":742:747   */\n      0x00\n        /* \"#utility.yul\":780:786   */\n      dup2\n        /* \"#utility.yul\":767:787   */\n      calldataload\n        /* \"#utility.yul\":758:787   */\n      swap1\n      pop\n        /* \"#utility.yul\":796:829   */\n      tag_143\n        /* \"#utility.yul\":823:828   */\n      dup2\n        /* \"#utility.yul\":796:829   */\n      tag_106\n      jump\t// in\n    tag_143:\n        /* \"#utility.yul\":696:835   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":841:1170   */\n    tag_9:\n        /* \"#utility.yul\":900:906   */\n      0x00\n        /* \"#utility.yul\":949:951   */\n      0x20\n        /* \"#utility.yul\":937:946   */\n      dup3\n        /* \"#utility.yul\":928:935   */\n      dup5\n        /* \"#utility.yul\":924:947   */\n      sub\n        /* \"#utility.yul\":920:952   */\n      slt\n        /* \"#utility.yul\":917:1036   */\n      iszero\n      tag_145\n      jumpi\n        /* \"#utility.yul\":955:1034   */\n      tag_146\n      tag_102\n      jump\t// in\n    tag_146:\n        /* \"#utility.yul\":917:1036   */\n    tag_145:\n        /* \"#utility.yul\":1075:1076   */\n      0x00\n        /* \"#utility.yul\":1100:1153   */\n      tag_147\n        /* \"#utility.yul\":1145:1152   */\n      dup5\n        /* \"#utility.yul\":1136:1142   */\n      dup3\n        /* \"#utility.yul\":1125:1134   */\n      dup6\n        /* \"#utility.yul\":1121:1143   */\n      add\n        /* \"#utility.yul\":1100:1153   */\n      tag_107\n      jump\t// in\n    tag_147:\n        /* \"#utility.yul\":1090:1153   */\n      swap2\n      pop\n        /* \"#utility.yul\":1046:1163   */\n      pop\n        /* \"#utility.yul\":841:1170   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1176:1253   */\n    tag_108:\n        /* \"#utility.yul\":1213:1220   */\n      0x00\n        /* \"#utility.yul\":1242:1247   */\n      dup2\n        /* \"#utility.yul\":1231:1247   */\n      swap1\n      pop\n        /* \"#utility.yul\":1176:1253   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1259:1377   */\n    tag_109:\n        /* \"#utility.yul\":1346:1370   */\n      tag_150\n        /* \"#utility.yul\":1364:1369   */\n      dup2\n        /* \"#utility.yul\":1346:1370   */\n      tag_108\n      jump\t// in\n    tag_150:\n        /* \"#utility.yul\":1341:1344   */\n      dup3\n        /* \"#utility.yul\":1334:1371   */\n      mstore\n        /* \"#utility.yul\":1259:1377   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1383:1605   */\n    tag_12:\n        /* \"#utility.yul\":1476:1480   */\n      0x00\n        /* \"#utility.yul\":1514:1516   */\n      0x20\n        /* \"#utility.yul\":1503:1512   */\n      dup3\n        /* \"#utility.yul\":1499:1517   */\n      add\n        /* \"#utility.yul\":1491:1517   */\n      swap1\n      pop\n        /* \"#utility.yul\":1527:1598   */\n      tag_152\n        /* \"#utility.yul\":1595:1596   */\n      0x00\n        /* \"#utility.yul\":1584:1593   */\n      dup4\n        /* \"#utility.yul\":1580:1597   */\n      add\n        /* \"#utility.yul\":1571:1577   */\n      dup5\n        /* \"#utility.yul\":1527:1598   */\n      tag_109\n      jump\t// in\n    tag_152:\n        /* \"#utility.yul\":1383:1605   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1611:1729   */\n    tag_110:\n        /* \"#utility.yul\":1698:1722   */\n      tag_154\n        /* \"#utility.yul\":1716:1721   */\n      dup2\n        /* \"#utility.yul\":1698:1722   */\n      tag_105\n      jump\t// in\n    tag_154:\n        /* \"#utility.yul\":1693:1696   */\n      dup3\n        /* \"#utility.yul\":1686:1723   */\n      mstore\n        /* \"#utility.yul\":1611:1729   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1735:1957   */\n    tag_25:\n        /* \"#utility.yul\":1828:1832   */\n      0x00\n        /* \"#utility.yul\":1866:1868   */\n      0x20\n        /* \"#utility.yul\":1855:1864   */\n      dup3\n        /* \"#utility.yul\":1851:1869   */\n      add\n        /* \"#utility.yul\":1843:1869   */\n      swap1\n      pop\n        /* \"#utility.yul\":1879:1950   */\n      tag_156\n        /* \"#utility.yul\":1947:1948   */\n      0x00\n        /* \"#utility.yul\":1936:1945   */\n      dup4\n        /* \"#utility.yul\":1932:1949   */\n      add\n        /* \"#utility.yul\":1923:1929   */\n      dup5\n        /* \"#utility.yul\":1879:1950   */\n      tag_110\n      jump\t// in\n    tag_156:\n        /* \"#utility.yul\":1735:1957   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1963:2085   */\n    tag_111:\n        /* \"#utility.yul\":2036:2060   */\n      tag_158\n        /* \"#utility.yul\":2054:2059   */\n      dup2\n        /* \"#utility.yul\":2036:2060   */\n      tag_108\n      jump\t// in\n    tag_158:\n        /* \"#utility.yul\":2029:2034   */\n      dup2\n        /* \"#utility.yul\":2026:2061   */\n      eq\n        /* \"#utility.yul\":2016:2079   */\n      tag_159\n      jumpi\n        /* \"#utility.yul\":2075:2076   */\n      0x00\n        /* \"#utility.yul\":2072:2073   */\n      dup1\n        /* \"#utility.yul\":2065:2077   */\n      revert\n        /* \"#utility.yul\":2016:2079   */\n    tag_159:\n        /* \"#utility.yul\":1963:2085   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2091:2234   */\n    tag_112:\n        /* \"#utility.yul\":2148:2153   */\n      0x00\n        /* \"#utility.yul\":2179:2185   */\n      dup2\n        /* \"#utility.yul\":2173:2186   */\n      mload\n        /* \"#utility.yul\":2164:2186   */\n      swap1\n      pop\n        /* \"#utility.yul\":2195:2228   */\n      tag_161\n        /* \"#utility.yul\":2222:2227   */\n      dup2\n        /* \"#utility.yul\":2195:2228   */\n      tag_111\n      jump\t// in\n    tag_161:\n        /* \"#utility.yul\":2091:2234   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2240:2591   */\n    tag_30:\n        /* \"#utility.yul\":2310:2316   */\n      0x00\n        /* \"#utility.yul\":2359:2361   */\n      0x20\n        /* \"#utility.yul\":2347:2356   */\n      dup3\n        /* \"#utility.yul\":2338:2345   */\n      dup5\n        /* \"#utility.yul\":2334:2357   */\n      sub\n        /* \"#utility.yul\":2330:2362   */\n      slt\n        /* \"#utility.yul\":2327:2446   */\n      iszero\n      tag_163\n      jumpi\n        /* \"#utility.yul\":2365:2444   */\n      tag_164\n      tag_102\n      jump\t// in\n    tag_164:\n        /* \"#utility.yul\":2327:2446   */\n    tag_163:\n        /* \"#utility.yul\":2485:2486   */\n      0x00\n        /* \"#utility.yul\":2510:2574   */\n      tag_165\n        /* \"#utility.yul\":2566:2573   */\n      dup5\n        /* \"#utility.yul\":2557:2563   */\n      dup3\n        /* \"#utility.yul\":2546:2555   */\n      dup6\n        /* \"#utility.yul\":2542:2564   */\n      add\n        /* \"#utility.yul\":2510:2574   */\n      tag_112\n      jump\t// in\n    tag_165:\n        /* \"#utility.yul\":2500:2574   */\n      swap2\n      pop\n        /* \"#utility.yul\":2456:2584   */\n      pop\n        /* \"#utility.yul\":2240:2591   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2597:2777   */\n    tag_113:\n        /* \"#utility.yul\":2645:2722   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":2642:2643   */\n      0x00\n        /* \"#utility.yul\":2635:2723   */\n      mstore\n        /* \"#utility.yul\":2742:2746   */\n      0x12\n        /* \"#utility.yul\":2739:2740   */\n      0x04\n        /* \"#utility.yul\":2732:2747   */\n      mstore\n        /* \"#utility.yul\":2766:2770   */\n      0x24\n        /* \"#utility.yul\":2763:2764   */\n      0x00\n        /* \"#utility.yul\":2756:2771   */\n      revert\n        /* \"#utility.yul\":2783:2963   */\n    tag_114:\n        /* \"#utility.yul\":2831:2908   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":2828:2829   */\n      0x00\n        /* \"#utility.yul\":2821:2909   */\n      mstore\n        /* \"#utility.yul\":2928:2932   */\n      0x11\n        /* \"#utility.yul\":2925:2926   */\n      0x04\n        /* \"#utility.yul\":2918:2933   */\n      mstore\n        /* \"#utility.yul\":2952:2956   */\n      0x24\n        /* \"#utility.yul\":2949:2950   */\n      0x00\n        /* \"#utility.yul\":2942:2957   */\n      revert\n        /* \"#utility.yul\":2969:3154   */\n    tag_35:\n        /* \"#utility.yul\":3009:3010   */\n      0x00\n        /* \"#utility.yul\":3026:3046   */\n      tag_169\n        /* \"#utility.yul\":3044:3045   */\n      dup3\n        /* \"#utility.yul\":3026:3046   */\n      tag_108\n      jump\t// in\n    tag_169:\n        /* \"#utility.yul\":3021:3046   */\n      swap2\n      pop\n        /* \"#utility.yul\":3060:3080   */\n      tag_170\n        /* \"#utility.yul\":3078:3079   */\n      dup4\n        /* \"#utility.yul\":3060:3080   */\n      tag_108\n      jump\t// in\n    tag_170:\n        /* \"#utility.yul\":3055:3080   */\n      swap3\n      pop\n        /* \"#utility.yul\":3099:3100   */\n      dup3\n        /* \"#utility.yul\":3089:3124   */\n      tag_171\n      jumpi\n        /* \"#utility.yul\":3104:3122   */\n      tag_172\n      tag_113\n      jump\t// in\n    tag_172:\n        /* \"#utility.yul\":3089:3124   */\n    tag_171:\n        /* \"#utility.yul\":3146:3147   */\n      dup3\n        /* \"#utility.yul\":3143:3144   */\n      dup3\n        /* \"#utility.yul\":3139:3148   */\n      div\n        /* \"#utility.yul\":3134:3148   */\n      swap1\n      pop\n        /* \"#utility.yul\":2969:3154   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3160:3508   */\n    tag_37:\n        /* \"#utility.yul\":3200:3207   */\n      0x00\n        /* \"#utility.yul\":3223:3243   */\n      tag_174\n        /* \"#utility.yul\":3241:3242   */\n      dup3\n        /* \"#utility.yul\":3223:3243   */\n      tag_108\n      jump\t// in\n    tag_174:\n        /* \"#utility.yul\":3218:3243   */\n      swap2\n      pop\n        /* \"#utility.yul\":3257:3277   */\n      tag_175\n        /* \"#utility.yul\":3275:3276   */\n      dup4\n        /* \"#utility.yul\":3257:3277   */\n      tag_108\n      jump\t// in\n    tag_175:\n        /* \"#utility.yul\":3252:3277   */\n      swap3\n      pop\n        /* \"#utility.yul\":3445:3446   */\n      dup2\n        /* \"#utility.yul\":3377:3443   */\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":3373:3447   */\n      div\n        /* \"#utility.yul\":3370:3371   */\n      dup4\n        /* \"#utility.yul\":3367:3448   */\n      gt\n        /* \"#utility.yul\":3362:3363   */\n      dup3\n        /* \"#utility.yul\":3355:3364   */\n      iszero\n        /* \"#utility.yul\":3348:3365   */\n      iszero\n        /* \"#utility.yul\":3344:3449   */\n      and\n        /* \"#utility.yul\":3341:3472   */\n      iszero\n      tag_176\n      jumpi\n        /* \"#utility.yul\":3452:3470   */\n      tag_177\n      tag_114\n      jump\t// in\n    tag_177:\n        /* \"#utility.yul\":3341:3472   */\n    tag_176:\n        /* \"#utility.yul\":3500:3501   */\n      dup3\n        /* \"#utility.yul\":3497:3498   */\n      dup3\n        /* \"#utility.yul\":3493:3502   */\n      mul\n        /* \"#utility.yul\":3482:3502   */\n      swap1\n      pop\n        /* \"#utility.yul\":3160:3508   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3514:3846   */\n    tag_59:\n        /* \"#utility.yul\":3635:3639   */\n      0x00\n        /* \"#utility.yul\":3673:3675   */\n      0x40\n        /* \"#utility.yul\":3662:3671   */\n      dup3\n        /* \"#utility.yul\":3658:3676   */\n      add\n        /* \"#utility.yul\":3650:3676   */\n      swap1\n      pop\n        /* \"#utility.yul\":3686:3757   */\n      tag_179\n        /* \"#utility.yul\":3754:3755   */\n      0x00\n        /* \"#utility.yul\":3743:3752   */\n      dup4\n        /* \"#utility.yul\":3739:3756   */\n      add\n        /* \"#utility.yul\":3730:3736   */\n      dup6\n        /* \"#utility.yul\":3686:3757   */\n      tag_110\n      jump\t// in\n    tag_179:\n        /* \"#utility.yul\":3767:3839   */\n      tag_180\n        /* \"#utility.yul\":3835:3837   */\n      0x20\n        /* \"#utility.yul\":3824:3833   */\n      dup4\n        /* \"#utility.yul\":3820:3838   */\n      add\n        /* \"#utility.yul\":3811:3817   */\n      dup5\n        /* \"#utility.yul\":3767:3839   */\n      tag_109\n      jump\t// in\n    tag_180:\n        /* \"#utility.yul\":3514:3846   */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3852:3942   */\n    tag_115:\n        /* \"#utility.yul\":3886:3893   */\n      0x00\n        /* \"#utility.yul\":3929:3934   */\n      dup2\n        /* \"#utility.yul\":3922:3935   */\n      iszero\n        /* \"#utility.yul\":3915:3936   */\n      iszero\n        /* \"#utility.yul\":3904:3936   */\n      swap1\n      pop\n        /* \"#utility.yul\":3852:3942   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3948:4064   */\n    tag_116:\n        /* \"#utility.yul\":4018:4039   */\n      tag_183\n        /* \"#utility.yul\":4033:4038   */\n      dup2\n        /* \"#utility.yul\":4018:4039   */\n      tag_115\n      jump\t// in\n    tag_183:\n        /* \"#utility.yul\":4011:4016   */\n      dup2\n        /* \"#utility.yul\":4008:4040   */\n      eq\n        /* \"#utility.yul\":3998:4058   */\n      tag_184\n      jumpi\n        /* \"#utility.yul\":4054:4055   */\n      0x00\n        /* \"#utility.yul\":4051:4052   */\n      dup1\n        /* \"#utility.yul\":4044:4056   */\n      revert\n        /* \"#utility.yul\":3998:4058   */\n    tag_184:\n        /* \"#utility.yul\":3948:4064   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4070:4207   */\n    tag_117:\n        /* \"#utility.yul\":4124:4129   */\n      0x00\n        /* \"#utility.yul\":4155:4161   */\n      dup2\n        /* \"#utility.yul\":4149:4162   */\n      mload\n        /* \"#utility.yul\":4140:4162   */\n      swap1\n      pop\n        /* \"#utility.yul\":4171:4201   */\n      tag_186\n        /* \"#utility.yul\":4195:4200   */\n      dup2\n        /* \"#utility.yul\":4171:4201   */\n      tag_116\n      jump\t// in\n    tag_186:\n        /* \"#utility.yul\":4070:4207   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4213:4558   */\n    tag_66:\n        /* \"#utility.yul\":4280:4286   */\n      0x00\n        /* \"#utility.yul\":4329:4331   */\n      0x20\n        /* \"#utility.yul\":4317:4326   */\n      dup3\n        /* \"#utility.yul\":4308:4315   */\n      dup5\n        /* \"#utility.yul\":4304:4327   */\n      sub\n        /* \"#utility.yul\":4300:4332   */\n      slt\n        /* \"#utility.yul\":4297:4416   */\n      iszero\n      tag_188\n      jumpi\n        /* \"#utility.yul\":4335:4414   */\n      tag_189\n      tag_102\n      jump\t// in\n    tag_189:\n        /* \"#utility.yul\":4297:4416   */\n    tag_188:\n        /* \"#utility.yul\":4455:4456   */\n      0x00\n        /* \"#utility.yul\":4480:4541   */\n      tag_190\n        /* \"#utility.yul\":4533:4540   */\n      dup5\n        /* \"#utility.yul\":4524:4530   */\n      dup3\n        /* \"#utility.yul\":4513:4522   */\n      dup6\n        /* \"#utility.yul\":4509:4531   */\n      add\n        /* \"#utility.yul\":4480:4541   */\n      tag_117\n      jump\t// in\n    tag_190:\n        /* \"#utility.yul\":4470:4541   */\n      swap2\n      pop\n        /* \"#utility.yul\":4426:4551   */\n      pop\n        /* \"#utility.yul\":4213:4558   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4564:4733   */\n    tag_118:\n        /* \"#utility.yul\":4648:4659   */\n      0x00\n        /* \"#utility.yul\":4682:4688   */\n      dup3\n        /* \"#utility.yul\":4677:4680   */\n      dup3\n        /* \"#utility.yul\":4670:4689   */\n      mstore\n        /* \"#utility.yul\":4722:4726   */\n      0x20\n        /* \"#utility.yul\":4717:4720   */\n      dup3\n        /* \"#utility.yul\":4713:4727   */\n      add\n        /* \"#utility.yul\":4698:4727   */\n      swap1\n      pop\n        /* \"#utility.yul\":4564:4733   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4739:4968   */\n    tag_119:\n        /* \"#utility.yul\":4879:4913   */\n      0x5361666545524332303a204552433230206f7065726174696f6e20646964206e\n        /* \"#utility.yul\":4875:4876   */\n      0x00\n        /* \"#utility.yul\":4867:4873   */\n      dup3\n        /* \"#utility.yul\":4863:4877   */\n      add\n        /* \"#utility.yul\":4856:4914   */\n      mstore\n        /* \"#utility.yul\":4948:4960   */\n      0x6f74207375636365656400000000000000000000000000000000000000000000\n        /* \"#utility.yul\":4943:4945   */\n      0x20\n        /* \"#utility.yul\":4935:4941   */\n      dup3\n        /* \"#utility.yul\":4931:4946   */\n      add\n        /* \"#utility.yul\":4924:4961   */\n      mstore\n        /* \"#utility.yul\":4739:4968   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4974:5340   */\n    tag_120:\n        /* \"#utility.yul\":5116:5119   */\n      0x00\n        /* \"#utility.yul\":5137:5204   */\n      tag_194\n        /* \"#utility.yul\":5201:5203   */\n      0x2a\n        /* \"#utility.yul\":5196:5199   */\n      dup4\n        /* \"#utility.yul\":5137:5204   */\n      tag_118\n      jump\t// in\n    tag_194:\n        /* \"#utility.yul\":5130:5204   */\n      swap2\n      pop\n        /* \"#utility.yul\":5213:5306   */\n      tag_195\n        /* \"#utility.yul\":5302:5305   */\n      dup3\n        /* \"#utility.yul\":5213:5306   */\n      tag_119\n      jump\t// in\n    tag_195:\n        /* \"#utility.yul\":5331:5333   */\n      0x40\n        /* \"#utility.yul\":5326:5329   */\n      dup3\n        /* \"#utility.yul\":5322:5334   */\n      add\n        /* \"#utility.yul\":5315:5334   */\n      swap1\n      pop\n        /* \"#utility.yul\":4974:5340   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5346:5765   */\n    tag_69:\n        /* \"#utility.yul\":5512:5516   */\n      0x00\n        /* \"#utility.yul\":5550:5552   */\n      0x20\n        /* \"#utility.yul\":5539:5548   */\n      dup3\n        /* \"#utility.yul\":5535:5553   */\n      add\n        /* \"#utility.yul\":5527:5553   */\n      swap1\n      pop\n        /* \"#utility.yul\":5599:5608   */\n      dup2\n        /* \"#utility.yul\":5593:5597   */\n      dup2\n        /* \"#utility.yul\":5589:5609   */\n      sub\n        /* \"#utility.yul\":5585:5586   */\n      0x00\n        /* \"#utility.yul\":5574:5583   */\n      dup4\n        /* \"#utility.yul\":5570:5587   */\n      add\n        /* \"#utility.yul\":5563:5610   */\n      mstore\n        /* \"#utility.yul\":5627:5758   */\n      tag_197\n        /* \"#utility.yul\":5753:5757   */\n      dup2\n        /* \"#utility.yul\":5627:5758   */\n      tag_120\n      jump\t// in\n    tag_197:\n        /* \"#utility.yul\":5619:5758   */\n      swap1\n      pop\n        /* \"#utility.yul\":5346:5765   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5771:5996   */\n    tag_121:\n        /* \"#utility.yul\":5911:5945   */\n      0x416464726573733a20696e73756666696369656e742062616c616e636520666f\n        /* \"#utility.yul\":5907:5908   */\n      0x00\n        /* \"#utility.yul\":5899:5905   */\n      dup3\n        /* \"#utility.yul\":5895:5909   */\n      add\n        /* \"#utility.yul\":5888:5946   */\n      mstore\n        /* \"#utility.yul\":5980:5988   */\n      0x722063616c6c0000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":5975:5977   */\n      0x20\n        /* \"#utility.yul\":5967:5973   */\n      dup3\n        /* \"#utility.yul\":5963:5978   */\n      add\n        /* \"#utility.yul\":5956:5989   */\n      mstore\n        /* \"#utility.yul\":5771:5996   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6002:6368   */\n    tag_122:\n        /* \"#utility.yul\":6144:6147   */\n      0x00\n        /* \"#utility.yul\":6165:6232   */\n      tag_200\n        /* \"#utility.yul\":6229:6231   */\n      0x26\n        /* \"#utility.yul\":6224:6227   */\n      dup4\n        /* \"#utility.yul\":6165:6232   */\n      tag_118\n      jump\t// in\n    tag_200:\n        /* \"#utility.yul\":6158:6232   */\n      swap2\n      pop\n        /* \"#utility.yul\":6241:6334   */\n      tag_201\n        /* \"#utility.yul\":6330:6333   */\n      dup3\n        /* \"#utility.yul\":6241:6334   */\n      tag_121\n      jump\t// in\n    tag_201:\n        /* \"#utility.yul\":6359:6361   */\n      0x40\n        /* \"#utility.yul\":6354:6357   */\n      dup3\n        /* \"#utility.yul\":6350:6362   */\n      add\n        /* \"#utility.yul\":6343:6362   */\n      swap1\n      pop\n        /* \"#utility.yul\":6002:6368   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6374:6793   */\n    tag_76:\n        /* \"#utility.yul\":6540:6544   */\n      0x00\n        /* \"#utility.yul\":6578:6580   */\n      0x20\n        /* \"#utility.yul\":6567:6576   */\n      dup3\n        /* \"#utility.yul\":6563:6581   */\n      add\n        /* \"#utility.yul\":6555:6581   */\n      swap1\n      pop\n        /* \"#utility.yul\":6627:6636   */\n      dup2\n        /* \"#utility.yul\":6621:6625   */\n      dup2\n        /* \"#utility.yul\":6617:6637   */\n      sub\n        /* \"#utility.yul\":6613:6614   */\n      0x00\n        /* \"#utility.yul\":6602:6611   */\n      dup4\n        /* \"#utility.yul\":6598:6615   */\n      add\n        /* \"#utility.yul\":6591:6638   */\n      mstore\n        /* \"#utility.yul\":6655:6786   */\n      tag_203\n        /* \"#utility.yul\":6781:6785   */\n      dup2\n        /* \"#utility.yul\":6655:6786   */\n      tag_122\n      jump\t// in\n    tag_203:\n        /* \"#utility.yul\":6647:6786   */\n      swap1\n      pop\n        /* \"#utility.yul\":6374:6793   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6799:6897   */\n    tag_123:\n        /* \"#utility.yul\":6850:6856   */\n      0x00\n        /* \"#utility.yul\":6884:6889   */\n      dup2\n        /* \"#utility.yul\":6878:6890   */\n      mload\n        /* \"#utility.yul\":6868:6890   */\n      swap1\n      pop\n        /* \"#utility.yul\":6799:6897   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6903:7050   */\n    tag_124:\n        /* \"#utility.yul\":7004:7015   */\n      0x00\n        /* \"#utility.yul\":7041:7044   */\n      dup2\n        /* \"#utility.yul\":7026:7044   */\n      swap1\n      pop\n        /* \"#utility.yul\":6903:7050   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7056:7363   */\n    tag_125:\n        /* \"#utility.yul\":7124:7125   */\n      0x00\n        /* \"#utility.yul\":7134:7247   */\n    tag_207:\n        /* \"#utility.yul\":7148:7154   */\n      dup4\n        /* \"#utility.yul\":7145:7146   */\n      dup2\n        /* \"#utility.yul\":7142:7155   */\n      lt\n        /* \"#utility.yul\":7134:7247   */\n      iszero\n      tag_209\n      jumpi\n        /* \"#utility.yul\":7233:7234   */\n      dup1\n        /* \"#utility.yul\":7228:7231   */\n      dup3\n        /* \"#utility.yul\":7224:7235   */\n      add\n        /* \"#utility.yul\":7218:7236   */\n      mload\n        /* \"#utility.yul\":7214:7215   */\n      dup2\n        /* \"#utility.yul\":7209:7212   */\n      dup5\n        /* \"#utility.yul\":7205:7216   */\n      add\n        /* \"#utility.yul\":7198:7237   */\n      mstore\n        /* \"#utility.yul\":7170:7172   */\n      0x20\n        /* \"#utility.yul\":7167:7168   */\n      dup2\n        /* \"#utility.yul\":7163:7173   */\n      add\n        /* \"#utility.yul\":7158:7173   */\n      swap1\n      pop\n        /* \"#utility.yul\":7134:7247   */\n      jump(tag_207)\n    tag_209:\n        /* \"#utility.yul\":7265:7271   */\n      dup4\n        /* \"#utility.yul\":7262:7263   */\n      dup2\n        /* \"#utility.yul\":7259:7272   */\n      gt\n        /* \"#utility.yul\":7256:7357   */\n      iszero\n      tag_210\n      jumpi\n        /* \"#utility.yul\":7345:7346   */\n      0x00\n        /* \"#utility.yul\":7336:7342   */\n      dup5\n        /* \"#utility.yul\":7331:7334   */\n      dup5\n        /* \"#utility.yul\":7327:7343   */\n      add\n        /* \"#utility.yul\":7320:7347   */\n      mstore\n        /* \"#utility.yul\":7256:7357   */\n    tag_210:\n        /* \"#utility.yul\":7105:7363   */\n      pop\n        /* \"#utility.yul\":7056:7363   */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7369:7742   */\n    tag_126:\n        /* \"#utility.yul\":7473:7476   */\n      0x00\n        /* \"#utility.yul\":7501:7539   */\n      tag_212\n        /* \"#utility.yul\":7533:7538   */\n      dup3\n        /* \"#utility.yul\":7501:7539   */\n      tag_123\n      jump\t// in\n    tag_212:\n        /* \"#utility.yul\":7555:7643   */\n      tag_213\n        /* \"#utility.yul\":7636:7642   */\n      dup2\n        /* \"#utility.yul\":7631:7634   */\n      dup6\n        /* \"#utility.yul\":7555:7643   */\n      tag_124\n      jump\t// in\n    tag_213:\n        /* \"#utility.yul\":7548:7643   */\n      swap4\n      pop\n        /* \"#utility.yul\":7652:7704   */\n      tag_214\n        /* \"#utility.yul\":7697:7703   */\n      dup2\n        /* \"#utility.yul\":7692:7695   */\n      dup6\n        /* \"#utility.yul\":7685:7689   */\n      0x20\n        /* \"#utility.yul\":7678:7683   */\n      dup7\n        /* \"#utility.yul\":7674:7690   */\n      add\n        /* \"#utility.yul\":7652:7704   */\n      tag_125\n      jump\t// in\n    tag_214:\n        /* \"#utility.yul\":7729:7735   */\n      dup1\n        /* \"#utility.yul\":7724:7727   */\n      dup5\n        /* \"#utility.yul\":7720:7736   */\n      add\n        /* \"#utility.yul\":7713:7736   */\n      swap2\n      pop\n        /* \"#utility.yul\":7477:7742   */\n      pop\n        /* \"#utility.yul\":7369:7742   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7748:8019   */\n    tag_78:\n        /* \"#utility.yul\":7878:7881   */\n      0x00\n        /* \"#utility.yul\":7900:7993   */\n      tag_216\n        /* \"#utility.yul\":7989:7992   */\n      dup3\n        /* \"#utility.yul\":7980:7986   */\n      dup5\n        /* \"#utility.yul\":7900:7993   */\n      tag_126\n      jump\t// in\n    tag_216:\n        /* \"#utility.yul\":7893:7993   */\n      swap2\n      pop\n        /* \"#utility.yul\":8010:8013   */\n      dup2\n        /* \"#utility.yul\":8003:8013   */\n      swap1\n      pop\n        /* \"#utility.yul\":7748:8019   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8025:8204   */\n    tag_127:\n        /* \"#utility.yul\":8165:8196   */\n      0x416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000\n        /* \"#utility.yul\":8161:8162   */\n      0x00\n        /* \"#utility.yul\":8153:8159   */\n      dup3\n        /* \"#utility.yul\":8149:8163   */\n      add\n        /* \"#utility.yul\":8142:8197   */\n      mstore\n        /* \"#utility.yul\":8025:8204   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8210:8576   */\n    tag_128:\n        /* \"#utility.yul\":8352:8355   */\n      0x00\n        /* \"#utility.yul\":8373:8440   */\n      tag_219\n        /* \"#utility.yul\":8437:8439   */\n      0x1d\n        /* \"#utility.yul\":8432:8435   */\n      dup4\n        /* \"#utility.yul\":8373:8440   */\n      tag_118\n      jump\t// in\n    tag_219:\n        /* \"#utility.yul\":8366:8440   */\n      swap2\n      pop\n        /* \"#utility.yul\":8449:8542   */\n      tag_220\n        /* \"#utility.yul\":8538:8541   */\n      dup3\n        /* \"#utility.yul\":8449:8542   */\n      tag_127\n      jump\t// in\n    tag_220:\n        /* \"#utility.yul\":8567:8569   */\n      0x20\n        /* \"#utility.yul\":8562:8565   */\n      dup3\n        /* \"#utility.yul\":8558:8570   */\n      add\n        /* \"#utility.yul\":8551:8570   */\n      swap1\n      pop\n        /* \"#utility.yul\":8210:8576   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8582:9001   */\n    tag_91:\n        /* \"#utility.yul\":8748:8752   */\n      0x00\n        /* \"#utility.yul\":8786:8788   */\n      0x20\n        /* \"#utility.yul\":8775:8784   */\n      dup3\n        /* \"#utility.yul\":8771:8789   */\n      add\n        /* \"#utility.yul\":8763:8789   */\n      swap1\n      pop\n        /* \"#utility.yul\":8835:8844   */\n      dup2\n        /* \"#utility.yul\":8829:8833   */\n      dup2\n        /* \"#utility.yul\":8825:8845   */\n      sub\n        /* \"#utility.yul\":8821:8822   */\n      0x00\n        /* \"#utility.yul\":8810:8819   */\n      dup4\n        /* \"#utility.yul\":8806:8823   */\n      add\n        /* \"#utility.yul\":8799:8846   */\n      mstore\n        /* \"#utility.yul\":8863:8994   */\n      tag_222\n        /* \"#utility.yul\":8989:8993   */\n      dup2\n        /* \"#utility.yul\":8863:8994   */\n      tag_128\n      jump\t// in\n    tag_222:\n        /* \"#utility.yul\":8855:8994   */\n      swap1\n      pop\n        /* \"#utility.yul\":8582:9001   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9007:9106   */\n    tag_129:\n        /* \"#utility.yul\":9059:9065   */\n      0x00\n        /* \"#utility.yul\":9093:9098   */\n      dup2\n        /* \"#utility.yul\":9087:9099   */\n      mload\n        /* \"#utility.yul\":9077:9099   */\n      swap1\n      pop\n        /* \"#utility.yul\":9007:9106   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9112:9214   */\n    tag_130:\n        /* \"#utility.yul\":9153:9159   */\n      0x00\n        /* \"#utility.yul\":9204:9206   */\n      0x1f\n        /* \"#utility.yul\":9200:9207   */\n      not\n        /* \"#utility.yul\":9195:9197   */\n      0x1f\n        /* \"#utility.yul\":9188:9193   */\n      dup4\n        /* \"#utility.yul\":9184:9198   */\n      add\n        /* \"#utility.yul\":9180:9208   */\n      and\n        /* \"#utility.yul\":9170:9208   */\n      swap1\n      pop\n        /* \"#utility.yul\":9112:9214   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9220:9584   */\n    tag_131:\n        /* \"#utility.yul\":9308:9311   */\n      0x00\n        /* \"#utility.yul\":9336:9375   */\n      tag_226\n        /* \"#utility.yul\":9369:9374   */\n      dup3\n        /* \"#utility.yul\":9336:9375   */\n      tag_129\n      jump\t// in\n    tag_226:\n        /* \"#utility.yul\":9391:9462   */\n      tag_227\n        /* \"#utility.yul\":9455:9461   */\n      dup2\n        /* \"#utility.yul\":9450:9453   */\n      dup6\n        /* \"#utility.yul\":9391:9462   */\n      tag_118\n      jump\t// in\n    tag_227:\n        /* \"#utility.yul\":9384:9462   */\n      swap4\n      pop\n        /* \"#utility.yul\":9471:9523   */\n      tag_228\n        /* \"#utility.yul\":9516:9522   */\n      dup2\n        /* \"#utility.yul\":9511:9514   */\n      dup6\n        /* \"#utility.yul\":9504:9508   */\n      0x20\n        /* \"#utility.yul\":9497:9502   */\n      dup7\n        /* \"#utility.yul\":9493:9509   */\n      add\n        /* \"#utility.yul\":9471:9523   */\n      tag_125\n      jump\t// in\n    tag_228:\n        /* \"#utility.yul\":9548:9577   */\n      tag_229\n        /* \"#utility.yul\":9570:9576   */\n      dup2\n        /* \"#utility.yul\":9548:9577   */\n      tag_130\n      jump\t// in\n    tag_229:\n        /* \"#utility.yul\":9543:9546   */\n      dup5\n        /* \"#utility.yul\":9539:9578   */\n      add\n        /* \"#utility.yul\":9532:9578   */\n      swap2\n      pop\n        /* \"#utility.yul\":9312:9584   */\n      pop\n        /* \"#utility.yul\":9220:9584   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9590:9903   */\n    tag_100:\n        /* \"#utility.yul\":9703:9707   */\n      0x00\n        /* \"#utility.yul\":9741:9743   */\n      0x20\n        /* \"#utility.yul\":9730:9739   */\n      dup3\n        /* \"#utility.yul\":9726:9744   */\n      add\n        /* \"#utility.yul\":9718:9744   */\n      swap1\n      pop\n        /* \"#utility.yul\":9790:9799   */\n      dup2\n        /* \"#utility.yul\":9784:9788   */\n      dup2\n        /* \"#utility.yul\":9780:9800   */\n      sub\n        /* \"#utility.yul\":9776:9777   */\n      0x00\n        /* \"#utility.yul\":9765:9774   */\n      dup4\n        /* \"#utility.yul\":9761:9778   */\n      add\n        /* \"#utility.yul\":9754:9801   */\n      mstore\n        /* \"#utility.yul\":9818:9896   */\n      tag_231\n        /* \"#utility.yul\":9891:9895   */\n      dup2\n        /* \"#utility.yul\":9882:9888   */\n      dup5\n        /* \"#utility.yul\":9818:9896   */\n      tag_131\n      jump\t// in\n    tag_231:\n        /* \"#utility.yul\":9810:9896   */\n      swap1\n      pop\n        /* \"#utility.yul\":9590:9903   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n\n    auxdata: 0xa2646970667358221220026139e24ddcdbeaab4e4888e2a2881aa716b2e33f8227fdbb61a9f60792253c64736f6c63430008090033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"@_22": {
									"entryPoint": null,
									"id": 22,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"abi_decode_t_address_fromMemory": {
									"entryPoint": 198,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address_fromMemory": {
									"entryPoint": 219,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"allocate_unbounded": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"cleanup_t_address": {
									"entryPoint": 157,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint160": {
									"entryPoint": 125,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
									"entryPoint": 120,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"validator_revert_t_address": {
									"entryPoint": 175,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:1199:7",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "47:35:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "57:19:7",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "73:2:7",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "67:5:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "67:9:7"
															},
															"variableNames": [
																{
																	"name": "memPtr",
																	"nodeType": "YulIdentifier",
																	"src": "57:6:7"
																}
															]
														}
													]
												},
												"name": "allocate_unbounded",
												"nodeType": "YulFunctionDefinition",
												"returnVariables": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "40:6:7",
														"type": ""
													}
												],
												"src": "7:75:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "177:28:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "194:1:7",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "197:1:7",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "187:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "187:12:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "187:12:7"
														}
													]
												},
												"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
												"nodeType": "YulFunctionDefinition",
												"src": "88:117:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "300:28:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "317:1:7",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "320:1:7",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "310:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "310:12:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "310:12:7"
														}
													]
												},
												"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
												"nodeType": "YulFunctionDefinition",
												"src": "211:117:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "379:81:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "389:65:7",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "404:5:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "411:42:7",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "400:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "400:54:7"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "389:7:7"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint160",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "361:5:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "371:7:7",
														"type": ""
													}
												],
												"src": "334:126:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "511:51:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "521:35:7",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "550:5:7"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint160",
																	"nodeType": "YulIdentifier",
																	"src": "532:17:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "532:24:7"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "521:7:7"
																}
															]
														}
													]
												},
												"name": "cleanup_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "493:5:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "503:7:7",
														"type": ""
													}
												],
												"src": "466:96:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "611:79:7",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "668:16:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "677:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "680:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "670:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "670:12:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "670:12:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "634:5:7"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "659:5:7"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_address",
																					"nodeType": "YulIdentifier",
																					"src": "641:17:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "641:24:7"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "631:2:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "631:35:7"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "624:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "624:43:7"
															},
															"nodeType": "YulIf",
															"src": "621:63:7"
														}
													]
												},
												"name": "validator_revert_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "604:5:7",
														"type": ""
													}
												],
												"src": "568:122:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "759:80:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "769:22:7",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "784:6:7"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "778:5:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "778:13:7"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "769:5:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "827:5:7"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "800:26:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "800:33:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "800:33:7"
														}
													]
												},
												"name": "abi_decode_t_address_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "737:6:7",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "745:3:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "753:5:7",
														"type": ""
													}
												],
												"src": "696:143:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "922:274:7",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "968:83:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "970:77:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "970:79:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "970:79:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "943:7:7"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "952:9:7"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "939:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "939:23:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "964:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "935:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "935:32:7"
															},
															"nodeType": "YulIf",
															"src": "932:119:7"
														},
														{
															"nodeType": "YulBlock",
															"src": "1061:128:7",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "1076:15:7",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1090:1:7",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "1080:6:7",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "1105:74:7",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "1151:9:7"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "1162:6:7"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1147:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1147:22:7"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1171:7:7"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address_fromMemory",
																			"nodeType": "YulIdentifier",
																			"src": "1115:31:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1115:64:7"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "1105:6:7"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "892:9:7",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "903:7:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "915:6:7",
														"type": ""
													}
												],
												"src": "845:351:7"
											}
										]
									},
									"contents": "{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n}\n",
									"id": 7,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50604051610e82380380610e82833981810160405281019061003291906100db565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610108565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100a88261007d565b9050919050565b6100b88161009d565b81146100c357600080fd5b50565b6000815190506100d5816100af565b92915050565b6000602082840312156100f1576100f0610078565b5b60006100ff848285016100c6565b91505092915050565b610d6b806101176000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806302550e4d14610051578063775a25e314610081578063af32b7a11461009f578063b86e321c146100cf575b600080fd5b61006b60048036038101906100669190610831565b6100eb565b6040516100789190610877565b60405180910390f35b610089610231565b6040516100969190610877565b60405180910390f35b6100b960048036038101906100b49190610831565b6102d7565b6040516100c69190610877565b60405180910390f35b6100e960048036038101906100e49190610831565b61038a565b005b6000808273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161012791906108a1565b60206040518083038186803b15801561013f57600080fd5b505afa158015610153573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061017791906108e8565b90506000610184336102d7565b9050600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161561020a576040517fa727014000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81610213610231565b8261021e9190610973565b61022891906109a4565b92505050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561029a57600080fd5b505afa1580156102ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d291906108e8565b905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231836040518263ffffffff1660e01b815260040161033391906108a1565b60206040518083038186803b15801561034b57600080fd5b505afa15801561035f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038391906108e8565b9050919050565b6000610395336102d7565b905060008111156103d2576040517f5695054900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006103dd836100eb565b905061042b60008360008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166104b29092919063ffffffff16565b61045633828573ffffffffffffffffffffffffffffffffffffffff166104b29092919063ffffffff16565b60018060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550505050565b6105338363a9059cbb60e01b84846040516024016104d19291906109fe565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610538565b505050565b600061059a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166106009092919063ffffffff16565b90506000815114806105bc5750808060200190518101906105bb9190610a5f565b5b6105fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105f290610b0f565b60405180910390fd5b505050565b606061060f8484600085610618565b90509392505050565b60608247101561065d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065490610ba1565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516106869190610c3b565b60006040518083038185875af1925050503d80600081146106c3576040519150601f19603f3d011682016040523d82523d6000602084013e6106c8565b606091505b50915091506106d9878383876106e5565b92505050949350505050565b6060831561074857600083511415610740576107008561075b565b61073f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073690610c9e565b60405180910390fd5b5b829050610753565b610752838361077e565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000825111156107915781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107c59190610d13565b60405180910390fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006107fe826107d3565b9050919050565b61080e816107f3565b811461081957600080fd5b50565b60008135905061082b81610805565b92915050565b600060208284031215610847576108466107ce565b5b60006108558482850161081c565b91505092915050565b6000819050919050565b6108718161085e565b82525050565b600060208201905061088c6000830184610868565b92915050565b61089b816107f3565b82525050565b60006020820190506108b66000830184610892565b92915050565b6108c58161085e565b81146108d057600080fd5b50565b6000815190506108e2816108bc565b92915050565b6000602082840312156108fe576108fd6107ce565b5b600061090c848285016108d3565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061097e8261085e565b91506109898361085e565b92508261099957610998610915565b5b828204905092915050565b60006109af8261085e565b91506109ba8361085e565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156109f3576109f2610944565b5b828202905092915050565b6000604082019050610a136000830185610892565b610a206020830184610868565b9392505050565b60008115159050919050565b610a3c81610a27565b8114610a4757600080fd5b50565b600081519050610a5981610a33565b92915050565b600060208284031215610a7557610a746107ce565b5b6000610a8384828501610a4a565b91505092915050565b600082825260208201905092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000610af9602a83610a8c565b9150610b0482610a9d565b604082019050919050565b60006020820190508181036000830152610b2881610aec565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000610b8b602683610a8c565b9150610b9682610b2f565b604082019050919050565b60006020820190508181036000830152610bba81610b7e565b9050919050565b600081519050919050565b600081905092915050565b60005b83811015610bf5578082015181840152602081019050610bda565b83811115610c04576000848401525b50505050565b6000610c1582610bc1565b610c1f8185610bcc565b9350610c2f818560208601610bd7565b80840191505092915050565b6000610c478284610c0a565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000610c88601d83610a8c565b9150610c9382610c52565b602082019050919050565b60006020820190508181036000830152610cb781610c7b565b9050919050565b600081519050919050565b6000601f19601f8301169050919050565b6000610ce582610cbe565b610cef8185610a8c565b9350610cff818560208601610bd7565b610d0881610cc9565b840191505092915050565b60006020820190508181036000830152610d2d8184610cda565b90509291505056fea2646970667358221220026139e24ddcdbeaab4e4888e2a2881aa716b2e33f8227fdbb61a9f60792253c64736f6c63430008090033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0xE82 CODESIZE SUB DUP1 PUSH2 0xE82 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH2 0x32 SWAP2 SWAP1 PUSH2 0xDB JUMP JUMPDEST DUP1 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP PUSH2 0x108 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA8 DUP3 PUSH2 0x7D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xB8 DUP2 PUSH2 0x9D JUMP JUMPDEST DUP2 EQ PUSH2 0xC3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0xD5 DUP2 PUSH2 0xAF JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xF1 JUMPI PUSH2 0xF0 PUSH2 0x78 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xFF DUP5 DUP3 DUP6 ADD PUSH2 0xC6 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xD6B DUP1 PUSH2 0x117 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x4C JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x2550E4D EQ PUSH2 0x51 JUMPI DUP1 PUSH4 0x775A25E3 EQ PUSH2 0x81 JUMPI DUP1 PUSH4 0xAF32B7A1 EQ PUSH2 0x9F JUMPI DUP1 PUSH4 0xB86E321C EQ PUSH2 0xCF JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x6B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x66 SWAP2 SWAP1 PUSH2 0x831 JUMP JUMPDEST PUSH2 0xEB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x78 SWAP2 SWAP1 PUSH2 0x877 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x89 PUSH2 0x231 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x96 SWAP2 SWAP1 PUSH2 0x877 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xB9 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xB4 SWAP2 SWAP1 PUSH2 0x831 JUMP JUMPDEST PUSH2 0x2D7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC6 SWAP2 SWAP1 PUSH2 0x877 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xE9 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xE4 SWAP2 SWAP1 PUSH2 0x831 JUMP JUMPDEST PUSH2 0x38A JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x70A08231 ADDRESS PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x127 SWAP2 SWAP1 PUSH2 0x8A1 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x13F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x153 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x177 SWAP2 SWAP1 PUSH2 0x8E8 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x184 CALLER PUSH2 0x2D7 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x20A JUMPI PUSH1 0x40 MLOAD PUSH32 0xA727014000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH2 0x213 PUSH2 0x231 JUMP JUMPDEST DUP3 PUSH2 0x21E SWAP2 SWAP1 PUSH2 0x973 JUMP JUMPDEST PUSH2 0x228 SWAP2 SWAP1 PUSH2 0x9A4 JUMP JUMPDEST SWAP3 POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x18160DDD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x29A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2AE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2D2 SWAP2 SWAP1 PUSH2 0x8E8 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x70A08231 DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x333 SWAP2 SWAP1 PUSH2 0x8A1 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x34B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x35F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x383 SWAP2 SWAP1 PUSH2 0x8E8 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x395 CALLER PUSH2 0x2D7 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 GT ISZERO PUSH2 0x3D2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x5695054900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x3DD DUP4 PUSH2 0xEB JUMP JUMPDEST SWAP1 POP PUSH2 0x42B PUSH1 0x0 DUP4 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x4B2 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x456 CALLER DUP3 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x4B2 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP POP POP POP JUMP JUMPDEST PUSH2 0x533 DUP4 PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x4D1 SWAP3 SWAP2 SWAP1 PUSH2 0x9FE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0x538 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x59A DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x600 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD EQ DUP1 PUSH2 0x5BC JUMPI POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x5BB SWAP2 SWAP1 PUSH2 0xA5F JUMP JUMPDEST JUMPDEST PUSH2 0x5FB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5F2 SWAP1 PUSH2 0xB0F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x60F DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x618 JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x65D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x654 SWAP1 PUSH2 0xBA1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x686 SWAP2 SWAP1 PUSH2 0xC3B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x6C3 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x6C8 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x6D9 DUP8 DUP4 DUP4 DUP8 PUSH2 0x6E5 JUMP JUMPDEST SWAP3 POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x748 JUMPI PUSH1 0x0 DUP4 MLOAD EQ ISZERO PUSH2 0x740 JUMPI PUSH2 0x700 DUP6 PUSH2 0x75B JUMP JUMPDEST PUSH2 0x73F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x736 SWAP1 PUSH2 0xC9E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST DUP3 SWAP1 POP PUSH2 0x753 JUMP JUMPDEST PUSH2 0x752 DUP4 DUP4 PUSH2 0x77E JUMP JUMPDEST JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD GT ISZERO PUSH2 0x791 JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7C5 SWAP2 SWAP1 PUSH2 0xD13 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7FE DUP3 PUSH2 0x7D3 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x80E DUP2 PUSH2 0x7F3 JUMP JUMPDEST DUP2 EQ PUSH2 0x819 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x82B DUP2 PUSH2 0x805 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x847 JUMPI PUSH2 0x846 PUSH2 0x7CE JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x855 DUP5 DUP3 DUP6 ADD PUSH2 0x81C JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x871 DUP2 PUSH2 0x85E JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x88C PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x868 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x89B DUP2 PUSH2 0x7F3 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x8B6 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x892 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x8C5 DUP2 PUSH2 0x85E JUMP JUMPDEST DUP2 EQ PUSH2 0x8D0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x8E2 DUP2 PUSH2 0x8BC JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8FE JUMPI PUSH2 0x8FD PUSH2 0x7CE JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x90C DUP5 DUP3 DUP6 ADD PUSH2 0x8D3 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x97E DUP3 PUSH2 0x85E JUMP JUMPDEST SWAP2 POP PUSH2 0x989 DUP4 PUSH2 0x85E JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x999 JUMPI PUSH2 0x998 PUSH2 0x915 JUMP JUMPDEST JUMPDEST DUP3 DUP3 DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x9AF DUP3 PUSH2 0x85E JUMP JUMPDEST SWAP2 POP PUSH2 0x9BA DUP4 PUSH2 0x85E JUMP JUMPDEST SWAP3 POP DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x9F3 JUMPI PUSH2 0x9F2 PUSH2 0x944 JUMP JUMPDEST JUMPDEST DUP3 DUP3 MUL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0xA13 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x892 JUMP JUMPDEST PUSH2 0xA20 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x868 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xA3C DUP2 PUSH2 0xA27 JUMP JUMPDEST DUP2 EQ PUSH2 0xA47 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0xA59 DUP2 PUSH2 0xA33 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xA75 JUMPI PUSH2 0xA74 PUSH2 0x7CE JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xA83 DUP5 DUP3 DUP6 ADD PUSH2 0xA4A JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F74207375636365656400000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xAF9 PUSH1 0x2A DUP4 PUSH2 0xA8C JUMP JUMPDEST SWAP2 POP PUSH2 0xB04 DUP3 PUSH2 0xA9D JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xB28 DUP2 PUSH2 0xAEC JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x722063616C6C0000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB8B PUSH1 0x26 DUP4 PUSH2 0xA8C JUMP JUMPDEST SWAP2 POP PUSH2 0xB96 DUP3 PUSH2 0xB2F JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xBBA DUP2 PUSH2 0xB7E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xBF5 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xBDA JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0xC04 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC15 DUP3 PUSH2 0xBC1 JUMP JUMPDEST PUSH2 0xC1F DUP2 DUP6 PUSH2 0xBCC JUMP JUMPDEST SWAP4 POP PUSH2 0xC2F DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0xBD7 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC47 DUP3 DUP5 PUSH2 0xC0A JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC88 PUSH1 0x1D DUP4 PUSH2 0xA8C JUMP JUMPDEST SWAP2 POP PUSH2 0xC93 DUP3 PUSH2 0xC52 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xCB7 DUP2 PUSH2 0xC7B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCE5 DUP3 PUSH2 0xCBE JUMP JUMPDEST PUSH2 0xCEF DUP2 DUP6 PUSH2 0xA8C JUMP JUMPDEST SWAP4 POP PUSH2 0xCFF DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0xBD7 JUMP JUMPDEST PUSH2 0xD08 DUP2 PUSH2 0xCC9 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xD2D DUP2 DUP5 PUSH2 0xCDA JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MUL PUSH2 0x39E2 0x4D 0xDC 0xDB 0xEA 0xAB 0x4E BASEFEE DUP9 0xE2 LOG2 DUP9 BYTE 0xA7 AND 0xB2 0xE3 EXTCODEHASH DUP3 0x27 REVERT 0xBB PUSH2 0xA9F6 SMOD SWAP3 0x25 EXTCODECOPY PUSH5 0x736F6C6343 STOP ADDMOD MULMOD STOP CALLER ",
							"sourceMap": "181:1573:0:-:0;;;308:70;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;360:10;350:9;;:20;;;;;;;;;;;;;;;;;;308:70;181:1573;;88:117:7;197:1;194;187:12;334:126;371:7;411:42;404:5;400:54;389:65;;334:126;;;:::o;466:96::-;503:7;532:24;550:5;532:24;:::i;:::-;521:35;;466:96;;;:::o;568:122::-;641:24;659:5;641:24;:::i;:::-;634:5;631:35;621:63;;680:1;677;670:12;621:63;568:122;:::o;696:143::-;753:5;784:6;778:13;769:22;;800:33;827:5;800:33;:::i;:::-;696:143;;;;:::o;845:351::-;915:6;964:2;952:9;943:7;939:23;935:32;932:119;;;970:79;;:::i;:::-;932:119;1090:1;1115:64;1171:7;1162:6;1151:9;1147:22;1115:64;:::i;:::-;1105:74;;1061:128;845:351;;;;:::o;181:1573:0:-;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@_callOptionalReturn_961": {
									"entryPoint": 1336,
									"id": 961,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_revert_630": {
									"entryPoint": 1918,
									"id": 630,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@functionCallWithValue_455": {
									"entryPoint": 1560,
									"id": 455,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"@functionCall_391": {
									"entryPoint": 1536,
									"id": 391,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@getTFERC20Amount_152": {
									"entryPoint": 727,
									"id": 152,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@getTotal_137": {
									"entryPoint": 561,
									"id": 137,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@isContract_319": {
									"entryPoint": 1883,
									"id": 319,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@profit_125": {
									"entryPoint": 235,
									"id": 125,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@safeTransfer_667": {
									"entryPoint": 1202,
									"id": 667,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@verifyCallResultFromTarget_586": {
									"entryPoint": 1765,
									"id": 586,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"@withdrawReward_80": {
									"entryPoint": 906,
									"id": 80,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"abi_decode_t_address": {
									"entryPoint": 2076,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_bool_fromMemory": {
									"entryPoint": 2634,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_uint256_fromMemory": {
									"entryPoint": 2259,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address": {
									"entryPoint": 2097,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_bool_fromMemory": {
									"entryPoint": 2655,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_uint256_fromMemory": {
									"entryPoint": 2280,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_t_address_to_t_address_fromStack": {
									"entryPoint": 2194,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack": {
									"entryPoint": 3082,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 3290,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 2942,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 3195,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 2796,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_uint256_to_t_uint256_fromStack": {
									"entryPoint": 2152,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed": {
									"entryPoint": 3131,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
									"entryPoint": 2209,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed": {
									"entryPoint": 2558,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 3347,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 2977,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 3230,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 2831,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": 2167,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"allocate_unbounded": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"array_length_t_bytes_memory_ptr": {
									"entryPoint": 3009,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_length_t_string_memory_ptr": {
									"entryPoint": 3262,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack": {
									"entryPoint": 3020,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"array_storeLengthForEncoding_t_string_memory_ptr_fromStack": {
									"entryPoint": 2700,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_div_t_uint256": {
									"entryPoint": 2419,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_mul_t_uint256": {
									"entryPoint": 2468,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"cleanup_t_address": {
									"entryPoint": 2035,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_bool": {
									"entryPoint": 2599,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint160": {
									"entryPoint": 2003,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint256": {
									"entryPoint": 2142,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"copy_memory_to_memory": {
									"entryPoint": 3031,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"panic_error_0x11": {
									"entryPoint": 2372,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x12": {
									"entryPoint": 2325,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
									"entryPoint": 1998,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"round_up_to_mul_of_32": {
									"entryPoint": 3273,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"store_literal_in_memory_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c": {
									"entryPoint": 2863,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad": {
									"entryPoint": 3154,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"store_literal_in_memory_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd": {
									"entryPoint": 2717,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_address": {
									"entryPoint": 2053,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_bool": {
									"entryPoint": 2611,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_uint256": {
									"entryPoint": 2236,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:9906:7",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "47:35:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "57:19:7",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "73:2:7",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "67:5:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "67:9:7"
															},
															"variableNames": [
																{
																	"name": "memPtr",
																	"nodeType": "YulIdentifier",
																	"src": "57:6:7"
																}
															]
														}
													]
												},
												"name": "allocate_unbounded",
												"nodeType": "YulFunctionDefinition",
												"returnVariables": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "40:6:7",
														"type": ""
													}
												],
												"src": "7:75:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "177:28:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "194:1:7",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "197:1:7",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "187:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "187:12:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "187:12:7"
														}
													]
												},
												"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
												"nodeType": "YulFunctionDefinition",
												"src": "88:117:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "300:28:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "317:1:7",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "320:1:7",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "310:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "310:12:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "310:12:7"
														}
													]
												},
												"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
												"nodeType": "YulFunctionDefinition",
												"src": "211:117:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "379:81:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "389:65:7",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "404:5:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "411:42:7",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "400:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "400:54:7"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "389:7:7"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint160",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "361:5:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "371:7:7",
														"type": ""
													}
												],
												"src": "334:126:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "511:51:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "521:35:7",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "550:5:7"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint160",
																	"nodeType": "YulIdentifier",
																	"src": "532:17:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "532:24:7"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "521:7:7"
																}
															]
														}
													]
												},
												"name": "cleanup_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "493:5:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "503:7:7",
														"type": ""
													}
												],
												"src": "466:96:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "611:79:7",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "668:16:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "677:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "680:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "670:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "670:12:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "670:12:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "634:5:7"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "659:5:7"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_address",
																					"nodeType": "YulIdentifier",
																					"src": "641:17:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "641:24:7"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "631:2:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "631:35:7"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "624:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "624:43:7"
															},
															"nodeType": "YulIf",
															"src": "621:63:7"
														}
													]
												},
												"name": "validator_revert_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "604:5:7",
														"type": ""
													}
												],
												"src": "568:122:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "748:87:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "758:29:7",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "780:6:7"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "767:12:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "767:20:7"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "758:5:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "823:5:7"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "796:26:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "796:33:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "796:33:7"
														}
													]
												},
												"name": "abi_decode_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "726:6:7",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "734:3:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "742:5:7",
														"type": ""
													}
												],
												"src": "696:139:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "907:263:7",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "953:83:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "955:77:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "955:79:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "955:79:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "928:7:7"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "937:9:7"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "924:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "924:23:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "949:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "920:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "920:32:7"
															},
															"nodeType": "YulIf",
															"src": "917:119:7"
														},
														{
															"nodeType": "YulBlock",
															"src": "1046:117:7",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "1061:15:7",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1075:1:7",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "1065:6:7",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "1090:63:7",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "1125:9:7"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "1136:6:7"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1121:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1121:22:7"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1145:7:7"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "1100:20:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1100:53:7"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "1090:6:7"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "877:9:7",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "888:7:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "900:6:7",
														"type": ""
													}
												],
												"src": "841:329:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1221:32:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1231:16:7",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "1242:5:7"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "1231:7:7"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1203:5:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "1213:7:7",
														"type": ""
													}
												],
												"src": "1176:77:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1324:53:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "1341:3:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "1364:5:7"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "1346:17:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1346:24:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1334:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "1334:37:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1334:37:7"
														}
													]
												},
												"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1312:5:7",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "1319:3:7",
														"type": ""
													}
												],
												"src": "1259:118:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1481:124:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1491:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1503:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1514:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1499:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "1499:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1491:4:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1571:6:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1584:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1595:1:7",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1580:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1580:17:7"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "1527:43:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "1527:71:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1527:71:7"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1453:9:7",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1465:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1476:4:7",
														"type": ""
													}
												],
												"src": "1383:222:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1676:53:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "1693:3:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "1716:5:7"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "1698:17:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1698:24:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1686:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "1686:37:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1686:37:7"
														}
													]
												},
												"name": "abi_encode_t_address_to_t_address_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1664:5:7",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "1671:3:7",
														"type": ""
													}
												],
												"src": "1611:118:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1833:124:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1843:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1855:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1866:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1851:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "1851:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1843:4:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1923:6:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1936:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1947:1:7",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1932:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1932:17:7"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "1879:43:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "1879:71:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1879:71:7"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1805:9:7",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1817:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1828:4:7",
														"type": ""
													}
												],
												"src": "1735:222:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2006:79:7",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2063:16:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2072:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2075:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2065:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2065:12:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2065:12:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "2029:5:7"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "2054:5:7"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_uint256",
																					"nodeType": "YulIdentifier",
																					"src": "2036:17:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2036:24:7"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "2026:2:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2026:35:7"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "2019:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "2019:43:7"
															},
															"nodeType": "YulIf",
															"src": "2016:63:7"
														}
													]
												},
												"name": "validator_revert_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1999:5:7",
														"type": ""
													}
												],
												"src": "1963:122:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2154:80:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2164:22:7",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "2179:6:7"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "2173:5:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "2173:13:7"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "2164:5:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "2222:5:7"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "2195:26:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "2195:33:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2195:33:7"
														}
													]
												},
												"name": "abi_decode_t_uint256_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "2132:6:7",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "2140:3:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2148:5:7",
														"type": ""
													}
												],
												"src": "2091:143:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2317:274:7",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2363:83:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "2365:77:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2365:79:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2365:79:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2338:7:7"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2347:9:7"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2334:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2334:23:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2359:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2330:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "2330:32:7"
															},
															"nodeType": "YulIf",
															"src": "2327:119:7"
														},
														{
															"nodeType": "YulBlock",
															"src": "2456:128:7",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "2471:15:7",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2485:1:7",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "2475:6:7",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "2500:74:7",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "2546:9:7"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "2557:6:7"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "2542:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2542:22:7"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2566:7:7"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256_fromMemory",
																			"nodeType": "YulIdentifier",
																			"src": "2510:31:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2510:64:7"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "2500:6:7"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2287:9:7",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2298:7:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2310:6:7",
														"type": ""
													}
												],
												"src": "2240:351:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2625:152:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2642:1:7",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2645:77:7",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2635:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "2635:88:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2635:88:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2739:1:7",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2742:4:7",
																		"type": "",
																		"value": "0x12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2732:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "2732:15:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2732:15:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2763:1:7",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2766:4:7",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "2756:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "2756:15:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2756:15:7"
														}
													]
												},
												"name": "panic_error_0x12",
												"nodeType": "YulFunctionDefinition",
												"src": "2597:180:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2811:152:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2828:1:7",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2831:77:7",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2821:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "2821:88:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2821:88:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2925:1:7",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2928:4:7",
																		"type": "",
																		"value": "0x11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2918:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "2918:15:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2918:15:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2949:1:7",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2952:4:7",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "2942:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "2942:15:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2942:15:7"
														}
													]
												},
												"name": "panic_error_0x11",
												"nodeType": "YulFunctionDefinition",
												"src": "2783:180:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3011:143:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3021:25:7",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "3044:1:7"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "3026:17:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3026:20:7"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nodeType": "YulIdentifier",
																	"src": "3021:1:7"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "3055:25:7",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "3078:1:7"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "3060:17:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3060:20:7"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nodeType": "YulIdentifier",
																	"src": "3055:1:7"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3102:22:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x12",
																				"nodeType": "YulIdentifier",
																				"src": "3104:16:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3104:18:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3104:18:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "3099:1:7"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "3092:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3092:9:7"
															},
															"nodeType": "YulIf",
															"src": "3089:35:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3134:14:7",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "3143:1:7"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "3146:1:7"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nodeType": "YulIdentifier",
																	"src": "3139:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3139:9:7"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "3134:1:7"
																}
															]
														}
													]
												},
												"name": "checked_div_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "3000:1:7",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "3003:1:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "r",
														"nodeType": "YulTypedName",
														"src": "3009:1:7",
														"type": ""
													}
												],
												"src": "2969:185:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3208:300:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3218:25:7",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "3241:1:7"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "3223:17:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3223:20:7"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nodeType": "YulIdentifier",
																	"src": "3218:1:7"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "3252:25:7",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "3275:1:7"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "3257:17:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3257:20:7"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nodeType": "YulIdentifier",
																	"src": "3252:1:7"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3450:22:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "3452:16:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3452:18:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3452:18:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "x",
																						"nodeType": "YulIdentifier",
																						"src": "3362:1:7"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "3355:6:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3355:9:7"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "3348:6:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3348:17:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "3370:1:7"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "3377:66:7",
																						"type": "",
																						"value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
																					},
																					{
																						"name": "x",
																						"nodeType": "YulIdentifier",
																						"src": "3445:1:7"
																					}
																				],
																				"functionName": {
																					"name": "div",
																					"nodeType": "YulIdentifier",
																					"src": "3373:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3373:74:7"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "3367:2:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3367:81:7"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "3344:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3344:105:7"
															},
															"nodeType": "YulIf",
															"src": "3341:131:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3482:20:7",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "3497:1:7"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "3500:1:7"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nodeType": "YulIdentifier",
																	"src": "3493:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3493:9:7"
															},
															"variableNames": [
																{
																	"name": "product",
																	"nodeType": "YulIdentifier",
																	"src": "3482:7:7"
																}
															]
														}
													]
												},
												"name": "checked_mul_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "3191:1:7",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "3194:1:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "product",
														"nodeType": "YulTypedName",
														"src": "3200:7:7",
														"type": ""
													}
												],
												"src": "3160:348:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3640:206:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3650:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3662:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3673:2:7",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3658:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3658:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3650:4:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "3730:6:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3743:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3754:1:7",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3739:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3739:17:7"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "3686:43:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3686:71:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3686:71:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "3811:6:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3824:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3835:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3820:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3820:18:7"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "3767:43:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3767:72:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3767:72:7"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3604:9:7",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "3616:6:7",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3624:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3635:4:7",
														"type": ""
													}
												],
												"src": "3514:332:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3894:48:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3904:32:7",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "3929:5:7"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "3922:6:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3922:13:7"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "3915:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3915:21:7"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "3904:7:7"
																}
															]
														}
													]
												},
												"name": "cleanup_t_bool",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3876:5:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "3886:7:7",
														"type": ""
													}
												],
												"src": "3852:90:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3988:76:7",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4042:16:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4051:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4054:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "4044:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4044:12:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4044:12:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "4011:5:7"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "4033:5:7"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_bool",
																					"nodeType": "YulIdentifier",
																					"src": "4018:14:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4018:21:7"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "4008:2:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4008:32:7"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "4001:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "4001:40:7"
															},
															"nodeType": "YulIf",
															"src": "3998:60:7"
														}
													]
												},
												"name": "validator_revert_t_bool",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3981:5:7",
														"type": ""
													}
												],
												"src": "3948:116:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4130:77:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4140:22:7",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "4155:6:7"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "4149:5:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "4149:13:7"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "4140:5:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "4195:5:7"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_bool",
																	"nodeType": "YulIdentifier",
																	"src": "4171:23:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "4171:30:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4171:30:7"
														}
													]
												},
												"name": "abi_decode_t_bool_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "4108:6:7",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "4116:3:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "4124:5:7",
														"type": ""
													}
												],
												"src": "4070:137:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4287:271:7",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4333:83:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "4335:77:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4335:79:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4335:79:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "4308:7:7"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4317:9:7"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "4304:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4304:23:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4329:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "4300:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "4300:32:7"
															},
															"nodeType": "YulIf",
															"src": "4297:119:7"
														},
														{
															"nodeType": "YulBlock",
															"src": "4426:125:7",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "4441:15:7",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4455:1:7",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "4445:6:7",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "4470:71:7",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "4513:9:7"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "4524:6:7"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "4509:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4509:22:7"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "4533:7:7"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_bool_fromMemory",
																			"nodeType": "YulIdentifier",
																			"src": "4480:28:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4480:61:7"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "4470:6:7"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bool_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4257:9:7",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "4268:7:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4280:6:7",
														"type": ""
													}
												],
												"src": "4213:345:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4660:73:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "4677:3:7"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "4682:6:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4670:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "4670:19:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4670:19:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4698:29:7",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "4717:3:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4722:4:7",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4713:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "4713:14:7"
															},
															"variableNames": [
																{
																	"name": "updated_pos",
																	"nodeType": "YulIdentifier",
																	"src": "4698:11:7"
																}
															]
														}
													]
												},
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "4632:3:7",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "4637:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "updated_pos",
														"nodeType": "YulTypedName",
														"src": "4648:11:7",
														"type": ""
													}
												],
												"src": "4564:169:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4845:123:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "4867:6:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4875:1:7",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4863:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4863:14:7"
																	},
																	{
																		"hexValue": "5361666545524332303a204552433230206f7065726174696f6e20646964206e",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4879:34:7",
																		"type": "",
																		"value": "SafeERC20: ERC20 operation did n"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4856:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "4856:58:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4856:58:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "4935:6:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4943:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4931:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4931:15:7"
																	},
																	{
																		"hexValue": "6f742073756363656564",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4948:12:7",
																		"type": "",
																		"value": "ot succeed"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4924:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "4924:37:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4924:37:7"
														}
													]
												},
												"name": "store_literal_in_memory_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "4837:6:7",
														"type": ""
													}
												],
												"src": "4739:229:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5120:220:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5130:74:7",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "5196:3:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5201:2:7",
																		"type": "",
																		"value": "42"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "5137:58:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "5137:67:7"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "5130:3:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "5302:3:7"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd",
																	"nodeType": "YulIdentifier",
																	"src": "5213:88:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "5213:93:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5213:93:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5315:19:7",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "5326:3:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5331:2:7",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5322:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "5322:12:7"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "5315:3:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "5108:3:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "5116:3:7",
														"type": ""
													}
												],
												"src": "4974:366:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5517:248:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5527:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5539:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5550:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5535:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "5535:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5527:4:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5574:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5585:1:7",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5570:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5570:17:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "5593:4:7"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5599:9:7"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "5589:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5589:20:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5563:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "5563:47:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5563:47:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5619:139:7",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "5753:4:7"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "5627:124:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "5627:131:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5619:4:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5497:9:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5512:4:7",
														"type": ""
													}
												],
												"src": "5346:419:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5877:119:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "5899:6:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5907:1:7",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5895:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5895:14:7"
																	},
																	{
																		"hexValue": "416464726573733a20696e73756666696369656e742062616c616e636520666f",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5911:34:7",
																		"type": "",
																		"value": "Address: insufficient balance fo"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5888:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "5888:58:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5888:58:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "5967:6:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5975:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5963:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5963:15:7"
																	},
																	{
																		"hexValue": "722063616c6c",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5980:8:7",
																		"type": "",
																		"value": "r call"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5956:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "5956:33:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5956:33:7"
														}
													]
												},
												"name": "store_literal_in_memory_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "5869:6:7",
														"type": ""
													}
												],
												"src": "5771:225:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6148:220:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6158:74:7",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "6224:3:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6229:2:7",
																		"type": "",
																		"value": "38"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "6165:58:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "6165:67:7"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "6158:3:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "6330:3:7"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																	"nodeType": "YulIdentifier",
																	"src": "6241:88:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "6241:93:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6241:93:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6343:19:7",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "6354:3:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6359:2:7",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6350:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "6350:12:7"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "6343:3:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "6136:3:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "6144:3:7",
														"type": ""
													}
												],
												"src": "6002:366:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6545:248:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6555:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6567:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6578:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6563:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "6563:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6555:4:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6602:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6613:1:7",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6598:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6598:17:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "6621:4:7"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6627:9:7"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "6617:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6617:20:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6591:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "6591:47:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6591:47:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6647:139:7",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "6781:4:7"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "6655:124:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "6655:131:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6647:4:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6525:9:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6540:4:7",
														"type": ""
													}
												],
												"src": "6374:419:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6857:40:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6868:22:7",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "6884:5:7"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "6878:5:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "6878:12:7"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "6868:6:7"
																}
															]
														}
													]
												},
												"name": "array_length_t_bytes_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "6840:5:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "6850:6:7",
														"type": ""
													}
												],
												"src": "6799:98:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7016:34:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7026:18:7",
															"value": {
																"name": "pos",
																"nodeType": "YulIdentifier",
																"src": "7041:3:7"
															},
															"variableNames": [
																{
																	"name": "updated_pos",
																	"nodeType": "YulIdentifier",
																	"src": "7026:11:7"
																}
															]
														}
													]
												},
												"name": "array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "6988:3:7",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "6993:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "updated_pos",
														"nodeType": "YulTypedName",
														"src": "7004:11:7",
														"type": ""
													}
												],
												"src": "6903:147:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7105:258:7",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7115:10:7",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "7124:1:7",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "7119:1:7",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "7184:63:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "7209:3:7"
																						},
																						{
																							"name": "i",
																							"nodeType": "YulIdentifier",
																							"src": "7214:1:7"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "7205:3:7"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "7205:11:7"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "src",
																									"nodeType": "YulIdentifier",
																									"src": "7228:3:7"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "7233:1:7"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "7224:3:7"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "7224:11:7"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "7218:5:7"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "7218:18:7"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "7198:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7198:39:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "7198:39:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "7145:1:7"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "7148:6:7"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "7142:2:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "7142:13:7"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "7156:19:7",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "7158:15:7",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "7167:1:7"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "7170:2:7",
																					"type": "",
																					"value": "32"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "7163:3:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7163:10:7"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "7158:1:7"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "7138:3:7",
																"statements": []
															},
															"src": "7134:113:7"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "7281:76:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "7331:3:7"
																						},
																						{
																							"name": "length",
																							"nodeType": "YulIdentifier",
																							"src": "7336:6:7"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "7327:3:7"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "7327:16:7"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "7345:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "7320:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7320:27:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "7320:27:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "7262:1:7"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "7265:6:7"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "7259:2:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "7259:13:7"
															},
															"nodeType": "YulIf",
															"src": "7256:101:7"
														}
													]
												},
												"name": "copy_memory_to_memory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "7087:3:7",
														"type": ""
													},
													{
														"name": "dst",
														"nodeType": "YulTypedName",
														"src": "7092:3:7",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "7097:6:7",
														"type": ""
													}
												],
												"src": "7056:307:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7477:265:7",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7487:52:7",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "7533:5:7"
																	}
																],
																"functionName": {
																	"name": "array_length_t_bytes_memory_ptr",
																	"nodeType": "YulIdentifier",
																	"src": "7501:31:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "7501:38:7"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "7491:6:7",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7548:95:7",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "7631:3:7"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "7636:6:7"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "7555:75:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "7555:88:7"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "7548:3:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "7678:5:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7685:4:7",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7674:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7674:16:7"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "7692:3:7"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "7697:6:7"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "7652:21:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "7652:52:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7652:52:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7713:23:7",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "7724:3:7"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "7729:6:7"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7720:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "7720:16:7"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "7713:3:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "7458:5:7",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "7465:3:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "7473:3:7",
														"type": ""
													}
												],
												"src": "7369:373:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7882:137:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7893:100:7",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "7980:6:7"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "7989:3:7"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "7900:79:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "7900:93:7"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "7893:3:7"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "8003:10:7",
															"value": {
																"name": "pos",
																"nodeType": "YulIdentifier",
																"src": "8010:3:7"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "8003:3:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "7861:3:7",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "7867:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "7878:3:7",
														"type": ""
													}
												],
												"src": "7748:271:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8131:73:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "8153:6:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8161:1:7",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8149:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8149:14:7"
																	},
																	{
																		"hexValue": "416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "8165:31:7",
																		"type": "",
																		"value": "Address: call to non-contract"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8142:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "8142:55:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8142:55:7"
														}
													]
												},
												"name": "store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "8123:6:7",
														"type": ""
													}
												],
												"src": "8025:179:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8356:220:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "8366:74:7",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "8432:3:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8437:2:7",
																		"type": "",
																		"value": "29"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "8373:58:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "8373:67:7"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "8366:3:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "8538:3:7"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																	"nodeType": "YulIdentifier",
																	"src": "8449:88:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "8449:93:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8449:93:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8551:19:7",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "8562:3:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8567:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8558:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "8558:12:7"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "8551:3:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "8344:3:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "8352:3:7",
														"type": ""
													}
												],
												"src": "8210:366:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8753:248:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "8763:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8775:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8786:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8771:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "8771:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8763:4:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8810:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8821:1:7",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8806:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8806:17:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "8829:4:7"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8835:9:7"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "8825:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8825:20:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8799:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "8799:47:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8799:47:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8855:139:7",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "8989:4:7"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "8863:124:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "8863:131:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8855:4:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "8733:9:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "8748:4:7",
														"type": ""
													}
												],
												"src": "8582:419:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9066:40:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "9077:22:7",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "9093:5:7"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "9087:5:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "9087:12:7"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "9077:6:7"
																}
															]
														}
													]
												},
												"name": "array_length_t_string_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "9049:5:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "9059:6:7",
														"type": ""
													}
												],
												"src": "9007:99:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9160:54:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "9170:38:7",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "9188:5:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9195:2:7",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9184:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9184:14:7"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9204:2:7",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "9200:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9200:7:7"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "9180:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "9180:28:7"
															},
															"variableNames": [
																{
																	"name": "result",
																	"nodeType": "YulIdentifier",
																	"src": "9170:6:7"
																}
															]
														}
													]
												},
												"name": "round_up_to_mul_of_32",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "9143:5:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "result",
														"nodeType": "YulTypedName",
														"src": "9153:6:7",
														"type": ""
													}
												],
												"src": "9112:102:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9312:272:7",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "9322:53:7",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "9369:5:7"
																	}
																],
																"functionName": {
																	"name": "array_length_t_string_memory_ptr",
																	"nodeType": "YulIdentifier",
																	"src": "9336:32:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "9336:39:7"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "9326:6:7",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "9384:78:7",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "9450:3:7"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "9455:6:7"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "9391:58:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "9391:71:7"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "9384:3:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "9497:5:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9504:4:7",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9493:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9493:16:7"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "9511:3:7"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "9516:6:7"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "9471:21:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "9471:52:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9471:52:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9532:46:7",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "9543:3:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "9570:6:7"
																			}
																		],
																		"functionName": {
																			"name": "round_up_to_mul_of_32",
																			"nodeType": "YulIdentifier",
																			"src": "9548:21:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9548:29:7"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9539:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "9539:39:7"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "9532:3:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "9293:5:7",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "9300:3:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "9308:3:7",
														"type": ""
													}
												],
												"src": "9220:364:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9708:195:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "9718:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9730:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9741:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9726:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "9726:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "9718:4:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9765:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9776:1:7",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9761:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9761:17:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "9784:4:7"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9790:9:7"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "9780:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9780:20:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9754:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "9754:47:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9754:47:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9810:86:7",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "9882:6:7"
																	},
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "9891:4:7"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "9818:63:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "9818:78:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "9810:4:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "9680:9:7",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "9692:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "9703:4:7",
														"type": ""
													}
												],
												"src": "9590:313:7"
											}
										]
									},
									"contents": "{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x12() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function checked_div_t_uint256(x, y) -> r {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        if iszero(y) { panic_error_0x12() }\n\n        r := div(x, y)\n    }\n\n    function checked_mul_t_uint256(x, y) -> product {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        // overflow, if x != 0 and y > (maxValue / x)\n        if and(iszero(iszero(x)), gt(y, div(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, x))) { panic_error_0x11() }\n\n        product := mul(x, y)\n    }\n\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function validator_revert_t_bool(value) {\n        if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bool_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bool_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function store_literal_in_memory_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd(memPtr) {\n\n        mstore(add(memPtr, 0), \"SafeERC20: ERC20 operation did n\")\n\n        mstore(add(memPtr, 32), \"ot succeed\")\n\n    }\n\n    function abi_encode_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 42)\n        store_literal_in_memory_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c(memPtr) {\n\n        mstore(add(memPtr, 0), \"Address: insufficient balance fo\")\n\n        mstore(add(memPtr, 32), \"r call\")\n\n    }\n\n    function abi_encode_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 38)\n        store_literal_in_memory_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function array_length_t_bytes_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function copy_memory_to_memory(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length)\n        {\n            // clear end\n            mstore(add(dst, length), 0)\n        }\n    }\n\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {\n        let length := array_length_t_bytes_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, length)\n    }\n\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value0) -> end {\n\n        pos := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        end := pos\n    }\n\n    function store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad(memPtr) {\n\n        mstore(add(memPtr, 0), \"Address: call to non-contract\")\n\n    }\n\n    function abi_encode_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 29)\n        store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n}\n",
									"id": 7,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b506004361061004c5760003560e01c806302550e4d14610051578063775a25e314610081578063af32b7a11461009f578063b86e321c146100cf575b600080fd5b61006b60048036038101906100669190610831565b6100eb565b6040516100789190610877565b60405180910390f35b610089610231565b6040516100969190610877565b60405180910390f35b6100b960048036038101906100b49190610831565b6102d7565b6040516100c69190610877565b60405180910390f35b6100e960048036038101906100e49190610831565b61038a565b005b6000808273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161012791906108a1565b60206040518083038186803b15801561013f57600080fd5b505afa158015610153573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061017791906108e8565b90506000610184336102d7565b9050600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161561020a576040517fa727014000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81610213610231565b8261021e9190610973565b61022891906109a4565b92505050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561029a57600080fd5b505afa1580156102ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d291906108e8565b905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231836040518263ffffffff1660e01b815260040161033391906108a1565b60206040518083038186803b15801561034b57600080fd5b505afa15801561035f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038391906108e8565b9050919050565b6000610395336102d7565b905060008111156103d2576040517f5695054900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006103dd836100eb565b905061042b60008360008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166104b29092919063ffffffff16565b61045633828573ffffffffffffffffffffffffffffffffffffffff166104b29092919063ffffffff16565b60018060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550505050565b6105338363a9059cbb60e01b84846040516024016104d19291906109fe565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610538565b505050565b600061059a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166106009092919063ffffffff16565b90506000815114806105bc5750808060200190518101906105bb9190610a5f565b5b6105fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105f290610b0f565b60405180910390fd5b505050565b606061060f8484600085610618565b90509392505050565b60608247101561065d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065490610ba1565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516106869190610c3b565b60006040518083038185875af1925050503d80600081146106c3576040519150601f19603f3d011682016040523d82523d6000602084013e6106c8565b606091505b50915091506106d9878383876106e5565b92505050949350505050565b6060831561074857600083511415610740576107008561075b565b61073f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073690610c9e565b60405180910390fd5b5b829050610753565b610752838361077e565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000825111156107915781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107c59190610d13565b60405180910390fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006107fe826107d3565b9050919050565b61080e816107f3565b811461081957600080fd5b50565b60008135905061082b81610805565b92915050565b600060208284031215610847576108466107ce565b5b60006108558482850161081c565b91505092915050565b6000819050919050565b6108718161085e565b82525050565b600060208201905061088c6000830184610868565b92915050565b61089b816107f3565b82525050565b60006020820190506108b66000830184610892565b92915050565b6108c58161085e565b81146108d057600080fd5b50565b6000815190506108e2816108bc565b92915050565b6000602082840312156108fe576108fd6107ce565b5b600061090c848285016108d3565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061097e8261085e565b91506109898361085e565b92508261099957610998610915565b5b828204905092915050565b60006109af8261085e565b91506109ba8361085e565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156109f3576109f2610944565b5b828202905092915050565b6000604082019050610a136000830185610892565b610a206020830184610868565b9392505050565b60008115159050919050565b610a3c81610a27565b8114610a4757600080fd5b50565b600081519050610a5981610a33565b92915050565b600060208284031215610a7557610a746107ce565b5b6000610a8384828501610a4a565b91505092915050565b600082825260208201905092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000610af9602a83610a8c565b9150610b0482610a9d565b604082019050919050565b60006020820190508181036000830152610b2881610aec565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000610b8b602683610a8c565b9150610b9682610b2f565b604082019050919050565b60006020820190508181036000830152610bba81610b7e565b9050919050565b600081519050919050565b600081905092915050565b60005b83811015610bf5578082015181840152602081019050610bda565b83811115610c04576000848401525b50505050565b6000610c1582610bc1565b610c1f8185610bcc565b9350610c2f818560208601610bd7565b80840191505092915050565b6000610c478284610c0a565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000610c88601d83610a8c565b9150610c9382610c52565b602082019050919050565b60006020820190508181036000830152610cb781610c7b565b9050919050565b600081519050919050565b6000601f19601f8301169050919050565b6000610ce582610cbe565b610cef8185610a8c565b9350610cff818560208601610bd7565b610d0881610cc9565b840191505092915050565b60006020820190508181036000830152610d2d8184610cda565b90509291505056fea2646970667358221220026139e24ddcdbeaab4e4888e2a2881aa716b2e33f8227fdbb61a9f60792253c64736f6c63430008090033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x4C JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x2550E4D EQ PUSH2 0x51 JUMPI DUP1 PUSH4 0x775A25E3 EQ PUSH2 0x81 JUMPI DUP1 PUSH4 0xAF32B7A1 EQ PUSH2 0x9F JUMPI DUP1 PUSH4 0xB86E321C EQ PUSH2 0xCF JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x6B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x66 SWAP2 SWAP1 PUSH2 0x831 JUMP JUMPDEST PUSH2 0xEB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x78 SWAP2 SWAP1 PUSH2 0x877 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x89 PUSH2 0x231 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x96 SWAP2 SWAP1 PUSH2 0x877 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xB9 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xB4 SWAP2 SWAP1 PUSH2 0x831 JUMP JUMPDEST PUSH2 0x2D7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC6 SWAP2 SWAP1 PUSH2 0x877 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xE9 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xE4 SWAP2 SWAP1 PUSH2 0x831 JUMP JUMPDEST PUSH2 0x38A JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x70A08231 ADDRESS PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x127 SWAP2 SWAP1 PUSH2 0x8A1 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x13F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x153 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x177 SWAP2 SWAP1 PUSH2 0x8E8 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x184 CALLER PUSH2 0x2D7 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x20A JUMPI PUSH1 0x40 MLOAD PUSH32 0xA727014000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH2 0x213 PUSH2 0x231 JUMP JUMPDEST DUP3 PUSH2 0x21E SWAP2 SWAP1 PUSH2 0x973 JUMP JUMPDEST PUSH2 0x228 SWAP2 SWAP1 PUSH2 0x9A4 JUMP JUMPDEST SWAP3 POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x18160DDD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x29A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2AE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2D2 SWAP2 SWAP1 PUSH2 0x8E8 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x70A08231 DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x333 SWAP2 SWAP1 PUSH2 0x8A1 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x34B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x35F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x383 SWAP2 SWAP1 PUSH2 0x8E8 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x395 CALLER PUSH2 0x2D7 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 GT ISZERO PUSH2 0x3D2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x5695054900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x3DD DUP4 PUSH2 0xEB JUMP JUMPDEST SWAP1 POP PUSH2 0x42B PUSH1 0x0 DUP4 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x4B2 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x456 CALLER DUP3 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x4B2 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP POP POP POP JUMP JUMPDEST PUSH2 0x533 DUP4 PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x4D1 SWAP3 SWAP2 SWAP1 PUSH2 0x9FE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0x538 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x59A DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x600 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD EQ DUP1 PUSH2 0x5BC JUMPI POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x5BB SWAP2 SWAP1 PUSH2 0xA5F JUMP JUMPDEST JUMPDEST PUSH2 0x5FB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5F2 SWAP1 PUSH2 0xB0F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x60F DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x618 JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x65D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x654 SWAP1 PUSH2 0xBA1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x686 SWAP2 SWAP1 PUSH2 0xC3B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x6C3 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x6C8 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x6D9 DUP8 DUP4 DUP4 DUP8 PUSH2 0x6E5 JUMP JUMPDEST SWAP3 POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x748 JUMPI PUSH1 0x0 DUP4 MLOAD EQ ISZERO PUSH2 0x740 JUMPI PUSH2 0x700 DUP6 PUSH2 0x75B JUMP JUMPDEST PUSH2 0x73F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x736 SWAP1 PUSH2 0xC9E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST DUP3 SWAP1 POP PUSH2 0x753 JUMP JUMPDEST PUSH2 0x752 DUP4 DUP4 PUSH2 0x77E JUMP JUMPDEST JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD GT ISZERO PUSH2 0x791 JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7C5 SWAP2 SWAP1 PUSH2 0xD13 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7FE DUP3 PUSH2 0x7D3 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x80E DUP2 PUSH2 0x7F3 JUMP JUMPDEST DUP2 EQ PUSH2 0x819 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x82B DUP2 PUSH2 0x805 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x847 JUMPI PUSH2 0x846 PUSH2 0x7CE JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x855 DUP5 DUP3 DUP6 ADD PUSH2 0x81C JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x871 DUP2 PUSH2 0x85E JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x88C PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x868 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x89B DUP2 PUSH2 0x7F3 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x8B6 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x892 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x8C5 DUP2 PUSH2 0x85E JUMP JUMPDEST DUP2 EQ PUSH2 0x8D0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x8E2 DUP2 PUSH2 0x8BC JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8FE JUMPI PUSH2 0x8FD PUSH2 0x7CE JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x90C DUP5 DUP3 DUP6 ADD PUSH2 0x8D3 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x97E DUP3 PUSH2 0x85E JUMP JUMPDEST SWAP2 POP PUSH2 0x989 DUP4 PUSH2 0x85E JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x999 JUMPI PUSH2 0x998 PUSH2 0x915 JUMP JUMPDEST JUMPDEST DUP3 DUP3 DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x9AF DUP3 PUSH2 0x85E JUMP JUMPDEST SWAP2 POP PUSH2 0x9BA DUP4 PUSH2 0x85E JUMP JUMPDEST SWAP3 POP DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x9F3 JUMPI PUSH2 0x9F2 PUSH2 0x944 JUMP JUMPDEST JUMPDEST DUP3 DUP3 MUL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0xA13 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x892 JUMP JUMPDEST PUSH2 0xA20 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x868 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xA3C DUP2 PUSH2 0xA27 JUMP JUMPDEST DUP2 EQ PUSH2 0xA47 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0xA59 DUP2 PUSH2 0xA33 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xA75 JUMPI PUSH2 0xA74 PUSH2 0x7CE JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xA83 DUP5 DUP3 DUP6 ADD PUSH2 0xA4A JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F74207375636365656400000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xAF9 PUSH1 0x2A DUP4 PUSH2 0xA8C JUMP JUMPDEST SWAP2 POP PUSH2 0xB04 DUP3 PUSH2 0xA9D JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xB28 DUP2 PUSH2 0xAEC JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x722063616C6C0000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB8B PUSH1 0x26 DUP4 PUSH2 0xA8C JUMP JUMPDEST SWAP2 POP PUSH2 0xB96 DUP3 PUSH2 0xB2F JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xBBA DUP2 PUSH2 0xB7E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xBF5 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xBDA JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0xC04 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC15 DUP3 PUSH2 0xBC1 JUMP JUMPDEST PUSH2 0xC1F DUP2 DUP6 PUSH2 0xBCC JUMP JUMPDEST SWAP4 POP PUSH2 0xC2F DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0xBD7 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC47 DUP3 DUP5 PUSH2 0xC0A JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC88 PUSH1 0x1D DUP4 PUSH2 0xA8C JUMP JUMPDEST SWAP2 POP PUSH2 0xC93 DUP3 PUSH2 0xC52 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xCB7 DUP2 PUSH2 0xC7B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCE5 DUP3 PUSH2 0xCBE JUMP JUMPDEST PUSH2 0xCEF DUP2 DUP6 PUSH2 0xA8C JUMP JUMPDEST SWAP4 POP PUSH2 0xCFF DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0xBD7 JUMP JUMPDEST PUSH2 0xD08 DUP2 PUSH2 0xCC9 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xD2D DUP2 DUP5 PUSH2 0xCDA JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MUL PUSH2 0x39E2 0x4D 0xDC 0xDB 0xEA 0xAB 0x4E BASEFEE DUP9 0xE2 LOG2 DUP9 BYTE 0xA7 AND 0xB2 0xE3 EXTCODEHASH DUP3 0x27 REVERT 0xBB PUSH2 0xA9F6 SMOD SWAP3 0x25 EXTCODECOPY PUSH5 0x736F6C6343 STOP ADDMOD MULMOD STOP CALLER ",
							"sourceMap": "181:1573:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;999:416;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1451:112;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1611:140;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;490:472;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;999:416;1057:16;1085:20;1113:13;1106:31;;;1146:4;1106:46;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1085:67;;1163:28;1192;1209:10;1192:16;:28::i;:::-;1163:57;;1234:14;:26;1249:10;1234:26;;;;;;;;;;;;;;;;;;;;;;;;;1231:57;;;1269:17;;;;;;;;;;;;;;1231:57;1395:12;1384:10;:8;:10::i;:::-;1363:20;:31;;;;:::i;:::-;:44;;;;:::i;:::-;1352:55;;1074:341;;999:416;;;:::o;1451:112::-;1490:7;1531:9;;;;;;;;;;;1516:37;;;:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1509:46;;1451:112;:::o;1611:140::-;1677:7;1710:9;;;;;;;;;;;1703:27;;;1731:11;1703:40;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1696:47;;1611:140;;;:::o;490:472::-;555:28;584;601:10;584:16;:28::i;:::-;555:57;;647:1;626:20;:22;623:47;;;657:11;;;;;;;;;;;;;;623:47;680:18;699:21;706:13;699:6;:21::i;:::-;680:40;;781:63;820:1;823:20;788:9;;;;;;;;;;781:30;;;;:63;;;;;:::i;:::-;855:57;890:10;901;862:13;855:34;;;;:57;;;;;:::i;:::-;950:4;923:14;:26;938:10;923:26;;;;;;;;;;;;;;;;:31;;;;;;;;;;;;;;;;;;544:418;;490:472;:::o;1025:177:6:-;1108:86;1128:5;1158:23;;;1183:2;1187:5;1135:58;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1108:19;:86::i;:::-;1025:177;;;:::o;5371:649::-;5795:23;5821:69;5849:4;5821:69;;;;;;;;;;;;;;;;;5829:5;5821:27;;;;:69;;;;;:::i;:::-;5795:95;;5930:1;5909:10;:17;:22;:56;;;;5946:10;5935:30;;;;;;;;;;;;:::i;:::-;5909:56;5901:111;;;;;;;;;;;;:::i;:::-;;;;;;;;;5441:579;5371:649;;:::o;4207:229:5:-;4344:12;4376:52;4398:6;4406:4;4412:1;4415:12;4376:21;:52::i;:::-;4369:59;;4207:229;;;;;:::o;5293:455::-;5463:12;5521:5;5496:21;:30;;5488:81;;;;;;;;;;;;:::i;:::-;;;;;;;;;5581:12;5595:23;5622:6;:11;;5641:5;5648:4;5622:31;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5580:73;;;;5671:69;5698:6;5706:7;5715:10;5727:12;5671:26;:69::i;:::-;5664:76;;;;5293:455;;;;;;:::o;7866:644::-;8051:12;8080:7;8076:427;;;8129:1;8108:10;:17;:22;8104:290;;;8326:18;8337:6;8326:10;:18::i;:::-;8318:60;;;;;;;;;;;;:::i;:::-;;;;;;;;;8104:290;8415:10;8408:17;;;;8076:427;8458:33;8466:10;8478:12;8458:7;:33::i;:::-;7866:644;;;;;;;:::o;1452:326::-;1512:4;1769:1;1747:7;:19;;;:23;1740:30;;1452:326;;;:::o;9052:552::-;9233:1;9213:10;:17;:21;9209:388;;;9445:10;9439:17;9502:15;9489:10;9485:2;9481:19;9474:44;9209:388;9572:12;9565:20;;;;;;;;;;;:::i;:::-;;;;;;;;88:117:7;197:1;194;187:12;334:126;371:7;411:42;404:5;400:54;389:65;;334:126;;;:::o;466:96::-;503:7;532:24;550:5;532:24;:::i;:::-;521:35;;466:96;;;:::o;568:122::-;641:24;659:5;641:24;:::i;:::-;634:5;631:35;621:63;;680:1;677;670:12;621:63;568:122;:::o;696:139::-;742:5;780:6;767:20;758:29;;796:33;823:5;796:33;:::i;:::-;696:139;;;;:::o;841:329::-;900:6;949:2;937:9;928:7;924:23;920:32;917:119;;;955:79;;:::i;:::-;917:119;1075:1;1100:53;1145:7;1136:6;1125:9;1121:22;1100:53;:::i;:::-;1090:63;;1046:117;841:329;;;;:::o;1176:77::-;1213:7;1242:5;1231:16;;1176:77;;;:::o;1259:118::-;1346:24;1364:5;1346:24;:::i;:::-;1341:3;1334:37;1259:118;;:::o;1383:222::-;1476:4;1514:2;1503:9;1499:18;1491:26;;1527:71;1595:1;1584:9;1580:17;1571:6;1527:71;:::i;:::-;1383:222;;;;:::o;1611:118::-;1698:24;1716:5;1698:24;:::i;:::-;1693:3;1686:37;1611:118;;:::o;1735:222::-;1828:4;1866:2;1855:9;1851:18;1843:26;;1879:71;1947:1;1936:9;1932:17;1923:6;1879:71;:::i;:::-;1735:222;;;;:::o;1963:122::-;2036:24;2054:5;2036:24;:::i;:::-;2029:5;2026:35;2016:63;;2075:1;2072;2065:12;2016:63;1963:122;:::o;2091:143::-;2148:5;2179:6;2173:13;2164:22;;2195:33;2222:5;2195:33;:::i;:::-;2091:143;;;;:::o;2240:351::-;2310:6;2359:2;2347:9;2338:7;2334:23;2330:32;2327:119;;;2365:79;;:::i;:::-;2327:119;2485:1;2510:64;2566:7;2557:6;2546:9;2542:22;2510:64;:::i;:::-;2500:74;;2456:128;2240:351;;;;:::o;2597:180::-;2645:77;2642:1;2635:88;2742:4;2739:1;2732:15;2766:4;2763:1;2756:15;2783:180;2831:77;2828:1;2821:88;2928:4;2925:1;2918:15;2952:4;2949:1;2942:15;2969:185;3009:1;3026:20;3044:1;3026:20;:::i;:::-;3021:25;;3060:20;3078:1;3060:20;:::i;:::-;3055:25;;3099:1;3089:35;;3104:18;;:::i;:::-;3089:35;3146:1;3143;3139:9;3134:14;;2969:185;;;;:::o;3160:348::-;3200:7;3223:20;3241:1;3223:20;:::i;:::-;3218:25;;3257:20;3275:1;3257:20;:::i;:::-;3252:25;;3445:1;3377:66;3373:74;3370:1;3367:81;3362:1;3355:9;3348:17;3344:105;3341:131;;;3452:18;;:::i;:::-;3341:131;3500:1;3497;3493:9;3482:20;;3160:348;;;;:::o;3514:332::-;3635:4;3673:2;3662:9;3658:18;3650:26;;3686:71;3754:1;3743:9;3739:17;3730:6;3686:71;:::i;:::-;3767:72;3835:2;3824:9;3820:18;3811:6;3767:72;:::i;:::-;3514:332;;;;;:::o;3852:90::-;3886:7;3929:5;3922:13;3915:21;3904:32;;3852:90;;;:::o;3948:116::-;4018:21;4033:5;4018:21;:::i;:::-;4011:5;4008:32;3998:60;;4054:1;4051;4044:12;3998:60;3948:116;:::o;4070:137::-;4124:5;4155:6;4149:13;4140:22;;4171:30;4195:5;4171:30;:::i;:::-;4070:137;;;;:::o;4213:345::-;4280:6;4329:2;4317:9;4308:7;4304:23;4300:32;4297:119;;;4335:79;;:::i;:::-;4297:119;4455:1;4480:61;4533:7;4524:6;4513:9;4509:22;4480:61;:::i;:::-;4470:71;;4426:125;4213:345;;;;:::o;4564:169::-;4648:11;4682:6;4677:3;4670:19;4722:4;4717:3;4713:14;4698:29;;4564:169;;;;:::o;4739:229::-;4879:34;4875:1;4867:6;4863:14;4856:58;4948:12;4943:2;4935:6;4931:15;4924:37;4739:229;:::o;4974:366::-;5116:3;5137:67;5201:2;5196:3;5137:67;:::i;:::-;5130:74;;5213:93;5302:3;5213:93;:::i;:::-;5331:2;5326:3;5322:12;5315:19;;4974:366;;;:::o;5346:419::-;5512:4;5550:2;5539:9;5535:18;5527:26;;5599:9;5593:4;5589:20;5585:1;5574:9;5570:17;5563:47;5627:131;5753:4;5627:131;:::i;:::-;5619:139;;5346:419;;;:::o;5771:225::-;5911:34;5907:1;5899:6;5895:14;5888:58;5980:8;5975:2;5967:6;5963:15;5956:33;5771:225;:::o;6002:366::-;6144:3;6165:67;6229:2;6224:3;6165:67;:::i;:::-;6158:74;;6241:93;6330:3;6241:93;:::i;:::-;6359:2;6354:3;6350:12;6343:19;;6002:366;;;:::o;6374:419::-;6540:4;6578:2;6567:9;6563:18;6555:26;;6627:9;6621:4;6617:20;6613:1;6602:9;6598:17;6591:47;6655:131;6781:4;6655:131;:::i;:::-;6647:139;;6374:419;;;:::o;6799:98::-;6850:6;6884:5;6878:12;6868:22;;6799:98;;;:::o;6903:147::-;7004:11;7041:3;7026:18;;6903:147;;;;:::o;7056:307::-;7124:1;7134:113;7148:6;7145:1;7142:13;7134:113;;;7233:1;7228:3;7224:11;7218:18;7214:1;7209:3;7205:11;7198:39;7170:2;7167:1;7163:10;7158:15;;7134:113;;;7265:6;7262:1;7259:13;7256:101;;;7345:1;7336:6;7331:3;7327:16;7320:27;7256:101;7105:258;7056:307;;;:::o;7369:373::-;7473:3;7501:38;7533:5;7501:38;:::i;:::-;7555:88;7636:6;7631:3;7555:88;:::i;:::-;7548:95;;7652:52;7697:6;7692:3;7685:4;7678:5;7674:16;7652:52;:::i;:::-;7729:6;7724:3;7720:16;7713:23;;7477:265;7369:373;;;;:::o;7748:271::-;7878:3;7900:93;7989:3;7980:6;7900:93;:::i;:::-;7893:100;;8010:3;8003:10;;7748:271;;;;:::o;8025:179::-;8165:31;8161:1;8153:6;8149:14;8142:55;8025:179;:::o;8210:366::-;8352:3;8373:67;8437:2;8432:3;8373:67;:::i;:::-;8366:74;;8449:93;8538:3;8449:93;:::i;:::-;8567:2;8562:3;8558:12;8551:19;;8210:366;;;:::o;8582:419::-;8748:4;8786:2;8775:9;8771:18;8763:26;;8835:9;8829:4;8825:20;8821:1;8810:9;8806:17;8799:47;8863:131;8989:4;8863:131;:::i;:::-;8855:139;;8582:419;;;:::o;9007:99::-;9059:6;9093:5;9087:12;9077:22;;9007:99;;;:::o;9112:102::-;9153:6;9204:2;9200:7;9195:2;9188:5;9184:14;9180:28;9170:38;;9112:102;;;:::o;9220:364::-;9308:3;9336:39;9369:5;9336:39;:::i;:::-;9391:71;9455:6;9450:3;9391:71;:::i;:::-;9384:78;;9471:52;9516:6;9511:3;9504:4;9497:5;9493:16;9471:52;:::i;:::-;9548:29;9570:6;9548:29;:::i;:::-;9543:3;9539:39;9532:46;;9312:272;9220:364;;;;:::o;9590:313::-;9703:4;9741:2;9730:9;9726:18;9718:26;;9790:9;9784:4;9780:20;9776:1;9765:9;9761:17;9754:47;9818:78;9891:4;9882:6;9818:78;:::i;:::-;9810:86;;9590:313;;;;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "687000",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"getTFERC20Amount(address)": "infinite",
								"getTotal()": "infinite",
								"profit(address)": "infinite",
								"withdrawReward(address)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 181,
									"end": 1754,
									"name": "PUSH",
									"source": 0,
									"value": "80"
								},
								{
									"begin": 181,
									"end": 1754,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 181,
									"end": 1754,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 308,
									"end": 378,
									"name": "CALLVALUE",
									"source": 0
								},
								{
									"begin": 308,
									"end": 378,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 308,
									"end": 378,
									"name": "ISZERO",
									"source": 0
								},
								{
									"begin": 308,
									"end": 378,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 308,
									"end": 378,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 308,
									"end": 378,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 308,
									"end": 378,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 308,
									"end": 378,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 308,
									"end": 378,
									"name": "tag",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 308,
									"end": 378,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 308,
									"end": 378,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 308,
									"end": 378,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 308,
									"end": 378,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 308,
									"end": 378,
									"name": "PUSHSIZE",
									"source": 0
								},
								{
									"begin": 308,
									"end": 378,
									"name": "CODESIZE",
									"source": 0
								},
								{
									"begin": 308,
									"end": 378,
									"name": "SUB",
									"source": 0
								},
								{
									"begin": 308,
									"end": 378,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 308,
									"end": 378,
									"name": "PUSHSIZE",
									"source": 0
								},
								{
									"begin": 308,
									"end": 378,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 308,
									"end": 378,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 308,
									"end": 378,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 308,
									"end": 378,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 308,
									"end": 378,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 308,
									"end": 378,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 308,
									"end": 378,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 308,
									"end": 378,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 308,
									"end": 378,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 308,
									"end": 378,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 308,
									"end": 378,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "2"
								},
								{
									"begin": 308,
									"end": 378,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 308,
									"end": 378,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 308,
									"end": 378,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "3"
								},
								{
									"begin": 308,
									"end": 378,
									"name": "JUMP",
									"source": 0,
									"value": "[in]"
								},
								{
									"begin": 308,
									"end": 378,
									"name": "tag",
									"source": 0,
									"value": "2"
								},
								{
									"begin": 308,
									"end": 378,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 360,
									"end": 370,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 350,
									"end": 359,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 350,
									"end": 359,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 350,
									"end": 370,
									"name": "PUSH",
									"source": 0,
									"value": "100"
								},
								{
									"begin": 350,
									"end": 370,
									"name": "EXP",
									"source": 0
								},
								{
									"begin": 350,
									"end": 370,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 350,
									"end": 370,
									"name": "SLOAD",
									"source": 0
								},
								{
									"begin": 350,
									"end": 370,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 350,
									"end": 370,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 350,
									"end": 370,
									"name": "MUL",
									"source": 0
								},
								{
									"begin": 350,
									"end": 370,
									"name": "NOT",
									"source": 0
								},
								{
									"begin": 350,
									"end": 370,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 350,
									"end": 370,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 350,
									"end": 370,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 350,
									"end": 370,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 350,
									"end": 370,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 350,
									"end": 370,
									"name": "MUL",
									"source": 0
								},
								{
									"begin": 350,
									"end": 370,
									"name": "OR",
									"source": 0
								},
								{
									"begin": 350,
									"end": 370,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 350,
									"end": 370,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 350,
									"end": 370,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 308,
									"end": 378,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 181,
									"end": 1754,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "6"
								},
								{
									"begin": 181,
									"end": 1754,
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 88,
									"end": 205,
									"name": "tag",
									"source": 7,
									"value": "8"
								},
								{
									"begin": 88,
									"end": 205,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 197,
									"end": 198,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 195,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 187,
									"end": 199,
									"name": "REVERT",
									"source": 7
								},
								{
									"begin": 334,
									"end": 460,
									"name": "tag",
									"source": 7,
									"value": "10"
								},
								{
									"begin": 334,
									"end": 460,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 371,
									"end": 378,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 411,
									"end": 453,
									"name": "PUSH",
									"source": 7,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 404,
									"end": 409,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 400,
									"end": 454,
									"name": "AND",
									"source": 7
								},
								{
									"begin": 389,
									"end": 454,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 389,
									"end": 454,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 334,
									"end": 460,
									"name": "SWAP2",
									"source": 7
								},
								{
									"begin": 334,
									"end": 460,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 334,
									"end": 460,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 334,
									"end": 460,
									"name": "JUMP",
									"source": 7,
									"value": "[out]"
								},
								{
									"begin": 466,
									"end": 562,
									"name": "tag",
									"source": 7,
									"value": "11"
								},
								{
									"begin": 466,
									"end": 562,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 503,
									"end": 510,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 532,
									"end": 556,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "20"
								},
								{
									"begin": 550,
									"end": 555,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 532,
									"end": 556,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "10"
								},
								{
									"begin": 532,
									"end": 556,
									"name": "JUMP",
									"source": 7,
									"value": "[in]"
								},
								{
									"begin": 532,
									"end": 556,
									"name": "tag",
									"source": 7,
									"value": "20"
								},
								{
									"begin": 532,
									"end": 556,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 521,
									"end": 556,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 521,
									"end": 556,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 466,
									"end": 562,
									"name": "SWAP2",
									"source": 7
								},
								{
									"begin": 466,
									"end": 562,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 466,
									"end": 562,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 466,
									"end": 562,
									"name": "JUMP",
									"source": 7,
									"value": "[out]"
								},
								{
									"begin": 568,
									"end": 690,
									"name": "tag",
									"source": 7,
									"value": "12"
								},
								{
									"begin": 568,
									"end": 690,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 641,
									"end": 665,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "22"
								},
								{
									"begin": 659,
									"end": 664,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 641,
									"end": 665,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "11"
								},
								{
									"begin": 641,
									"end": 665,
									"name": "JUMP",
									"source": 7,
									"value": "[in]"
								},
								{
									"begin": 641,
									"end": 665,
									"name": "tag",
									"source": 7,
									"value": "22"
								},
								{
									"begin": 641,
									"end": 665,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 634,
									"end": 639,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 631,
									"end": 666,
									"name": "EQ",
									"source": 7
								},
								{
									"begin": 621,
									"end": 684,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "23"
								},
								{
									"begin": 621,
									"end": 684,
									"name": "JUMPI",
									"source": 7
								},
								{
									"begin": 680,
									"end": 681,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 677,
									"end": 678,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 670,
									"end": 682,
									"name": "REVERT",
									"source": 7
								},
								{
									"begin": 621,
									"end": 684,
									"name": "tag",
									"source": 7,
									"value": "23"
								},
								{
									"begin": 621,
									"end": 684,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 568,
									"end": 690,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 568,
									"end": 690,
									"name": "JUMP",
									"source": 7,
									"value": "[out]"
								},
								{
									"begin": 696,
									"end": 839,
									"name": "tag",
									"source": 7,
									"value": "13"
								},
								{
									"begin": 696,
									"end": 839,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 753,
									"end": 758,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 784,
									"end": 790,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 778,
									"end": 791,
									"name": "MLOAD",
									"source": 7
								},
								{
									"begin": 769,
									"end": 791,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 769,
									"end": 791,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 800,
									"end": 833,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "25"
								},
								{
									"begin": 827,
									"end": 832,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 800,
									"end": 833,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "12"
								},
								{
									"begin": 800,
									"end": 833,
									"name": "JUMP",
									"source": 7,
									"value": "[in]"
								},
								{
									"begin": 800,
									"end": 833,
									"name": "tag",
									"source": 7,
									"value": "25"
								},
								{
									"begin": 800,
									"end": 833,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 696,
									"end": 839,
									"name": "SWAP3",
									"source": 7
								},
								{
									"begin": 696,
									"end": 839,
									"name": "SWAP2",
									"source": 7
								},
								{
									"begin": 696,
									"end": 839,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 696,
									"end": 839,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 696,
									"end": 839,
									"name": "JUMP",
									"source": 7,
									"value": "[out]"
								},
								{
									"begin": 845,
									"end": 1196,
									"name": "tag",
									"source": 7,
									"value": "3"
								},
								{
									"begin": 845,
									"end": 1196,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 915,
									"end": 921,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 964,
									"end": 966,
									"name": "PUSH",
									"source": 7,
									"value": "20"
								},
								{
									"begin": 952,
									"end": 961,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 943,
									"end": 950,
									"name": "DUP5",
									"source": 7
								},
								{
									"begin": 939,
									"end": 962,
									"name": "SUB",
									"source": 7
								},
								{
									"begin": 935,
									"end": 967,
									"name": "SLT",
									"source": 7
								},
								{
									"begin": 932,
									"end": 1051,
									"name": "ISZERO",
									"source": 7
								},
								{
									"begin": 932,
									"end": 1051,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "27"
								},
								{
									"begin": 932,
									"end": 1051,
									"name": "JUMPI",
									"source": 7
								},
								{
									"begin": 970,
									"end": 1049,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "28"
								},
								{
									"begin": 970,
									"end": 1049,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "8"
								},
								{
									"begin": 970,
									"end": 1049,
									"name": "JUMP",
									"source": 7,
									"value": "[in]"
								},
								{
									"begin": 970,
									"end": 1049,
									"name": "tag",
									"source": 7,
									"value": "28"
								},
								{
									"begin": 970,
									"end": 1049,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 932,
									"end": 1051,
									"name": "tag",
									"source": 7,
									"value": "27"
								},
								{
									"begin": 932,
									"end": 1051,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 1090,
									"end": 1091,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 1115,
									"end": 1179,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "29"
								},
								{
									"begin": 1171,
									"end": 1178,
									"name": "DUP5",
									"source": 7
								},
								{
									"begin": 1162,
									"end": 1168,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 1151,
									"end": 1160,
									"name": "DUP6",
									"source": 7
								},
								{
									"begin": 1147,
									"end": 1169,
									"name": "ADD",
									"source": 7
								},
								{
									"begin": 1115,
									"end": 1179,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "13"
								},
								{
									"begin": 1115,
									"end": 1179,
									"name": "JUMP",
									"source": 7,
									"value": "[in]"
								},
								{
									"begin": 1115,
									"end": 1179,
									"name": "tag",
									"source": 7,
									"value": "29"
								},
								{
									"begin": 1115,
									"end": 1179,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 1105,
									"end": 1179,
									"name": "SWAP2",
									"source": 7
								},
								{
									"begin": 1105,
									"end": 1179,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 1061,
									"end": 1189,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 845,
									"end": 1196,
									"name": "SWAP3",
									"source": 7
								},
								{
									"begin": 845,
									"end": 1196,
									"name": "SWAP2",
									"source": 7
								},
								{
									"begin": 845,
									"end": 1196,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 845,
									"end": 1196,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 845,
									"end": 1196,
									"name": "JUMP",
									"source": 7,
									"value": "[out]"
								},
								{
									"begin": 181,
									"end": 1754,
									"name": "tag",
									"source": 0,
									"value": "6"
								},
								{
									"begin": 181,
									"end": 1754,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 181,
									"end": 1754,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 181,
									"end": 1754,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 181,
									"end": 1754,
									"name": "PUSH [$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 181,
									"end": 1754,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 181,
									"end": 1754,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 181,
									"end": 1754,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 181,
									"end": 1754,
									"name": "RETURN",
									"source": 0
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220026139e24ddcdbeaab4e4888e2a2881aa716b2e33f8227fdbb61a9f60792253c64736f6c63430008090033",
									".code": [
										{
											"begin": 181,
											"end": 1754,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 181,
											"end": 1754,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 181,
											"end": 1754,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 181,
											"end": 1754,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 181,
											"end": 1754,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 181,
											"end": 1754,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 181,
											"end": 1754,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 181,
											"end": 1754,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 181,
											"end": 1754,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 181,
											"end": 1754,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 181,
											"end": 1754,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 181,
											"end": 1754,
											"name": "tag",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 181,
											"end": 1754,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 181,
											"end": 1754,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 181,
											"end": 1754,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 181,
											"end": 1754,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 181,
											"end": 1754,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 181,
											"end": 1754,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 181,
											"end": 1754,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 181,
											"end": 1754,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 181,
											"end": 1754,
											"name": "CALLDATALOAD",
											"source": 0
										},
										{
											"begin": 181,
											"end": 1754,
											"name": "PUSH",
											"source": 0,
											"value": "E0"
										},
										{
											"begin": 181,
											"end": 1754,
											"name": "SHR",
											"source": 0
										},
										{
											"begin": 181,
											"end": 1754,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 181,
											"end": 1754,
											"name": "PUSH",
											"source": 0,
											"value": "2550E4D"
										},
										{
											"begin": 181,
											"end": 1754,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 181,
											"end": 1754,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 181,
											"end": 1754,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 181,
											"end": 1754,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 181,
											"end": 1754,
											"name": "PUSH",
											"source": 0,
											"value": "775A25E3"
										},
										{
											"begin": 181,
											"end": 1754,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 181,
											"end": 1754,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 181,
											"end": 1754,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 181,
											"end": 1754,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 181,
											"end": 1754,
											"name": "PUSH",
											"source": 0,
											"value": "AF32B7A1"
										},
										{
											"begin": 181,
											"end": 1754,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 181,
											"end": 1754,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 181,
											"end": 1754,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 181,
											"end": 1754,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 181,
											"end": 1754,
											"name": "PUSH",
											"source": 0,
											"value": "B86E321C"
										},
										{
											"begin": 181,
											"end": 1754,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 181,
											"end": 1754,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "6"
										},
										{
											"begin": 181,
											"end": 1754,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 181,
											"end": 1754,
											"name": "tag",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 181,
											"end": 1754,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 181,
											"end": 1754,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 181,
											"end": 1754,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 181,
											"end": 1754,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 999,
											"end": 1415,
											"name": "tag",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 999,
											"end": 1415,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 999,
											"end": 1415,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "7"
										},
										{
											"begin": 999,
											"end": 1415,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 999,
											"end": 1415,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 999,
											"end": 1415,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 999,
											"end": 1415,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 999,
											"end": 1415,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 999,
											"end": 1415,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 999,
											"end": 1415,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 999,
											"end": 1415,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 999,
											"end": 1415,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 999,
											"end": 1415,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 999,
											"end": 1415,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "9"
										},
										{
											"begin": 999,
											"end": 1415,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 999,
											"end": 1415,
											"name": "tag",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 999,
											"end": 1415,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 999,
											"end": 1415,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "10"
										},
										{
											"begin": 999,
											"end": 1415,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 999,
											"end": 1415,
											"name": "tag",
											"source": 0,
											"value": "7"
										},
										{
											"begin": 999,
											"end": 1415,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 999,
											"end": 1415,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 999,
											"end": 1415,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 999,
											"end": 1415,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "11"
										},
										{
											"begin": 999,
											"end": 1415,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 999,
											"end": 1415,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 999,
											"end": 1415,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 999,
											"end": 1415,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 999,
											"end": 1415,
											"name": "tag",
											"source": 0,
											"value": "11"
										},
										{
											"begin": 999,
											"end": 1415,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 999,
											"end": 1415,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 999,
											"end": 1415,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 999,
											"end": 1415,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 999,
											"end": 1415,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 999,
											"end": 1415,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 999,
											"end": 1415,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 999,
											"end": 1415,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 1451,
											"end": 1563,
											"name": "tag",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1451,
											"end": 1563,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1451,
											"end": 1563,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "13"
										},
										{
											"begin": 1451,
											"end": 1563,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "14"
										},
										{
											"begin": 1451,
											"end": 1563,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1451,
											"end": 1563,
											"name": "tag",
											"source": 0,
											"value": "13"
										},
										{
											"begin": 1451,
											"end": 1563,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1451,
											"end": 1563,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1451,
											"end": 1563,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1451,
											"end": 1563,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "15"
										},
										{
											"begin": 1451,
											"end": 1563,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1451,
											"end": 1563,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1451,
											"end": 1563,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 1451,
											"end": 1563,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1451,
											"end": 1563,
											"name": "tag",
											"source": 0,
											"value": "15"
										},
										{
											"begin": 1451,
											"end": 1563,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1451,
											"end": 1563,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1451,
											"end": 1563,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1451,
											"end": 1563,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1451,
											"end": 1563,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1451,
											"end": 1563,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1451,
											"end": 1563,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1451,
											"end": 1563,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 1611,
											"end": 1751,
											"name": "tag",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 1611,
											"end": 1751,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1611,
											"end": 1751,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "16"
										},
										{
											"begin": 1611,
											"end": 1751,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1611,
											"end": 1751,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1611,
											"end": 1751,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 1611,
											"end": 1751,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1611,
											"end": 1751,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1611,
											"end": 1751,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1611,
											"end": 1751,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1611,
											"end": 1751,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "17"
										},
										{
											"begin": 1611,
											"end": 1751,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1611,
											"end": 1751,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1611,
											"end": 1751,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "9"
										},
										{
											"begin": 1611,
											"end": 1751,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1611,
											"end": 1751,
											"name": "tag",
											"source": 0,
											"value": "17"
										},
										{
											"begin": 1611,
											"end": 1751,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1611,
											"end": 1751,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "18"
										},
										{
											"begin": 1611,
											"end": 1751,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1611,
											"end": 1751,
											"name": "tag",
											"source": 0,
											"value": "16"
										},
										{
											"begin": 1611,
											"end": 1751,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1611,
											"end": 1751,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1611,
											"end": 1751,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1611,
											"end": 1751,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "19"
										},
										{
											"begin": 1611,
											"end": 1751,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1611,
											"end": 1751,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1611,
											"end": 1751,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 1611,
											"end": 1751,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1611,
											"end": 1751,
											"name": "tag",
											"source": 0,
											"value": "19"
										},
										{
											"begin": 1611,
											"end": 1751,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1611,
											"end": 1751,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1611,
											"end": 1751,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1611,
											"end": 1751,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1611,
											"end": 1751,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1611,
											"end": 1751,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1611,
											"end": 1751,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1611,
											"end": 1751,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 490,
											"end": 962,
											"name": "tag",
											"source": 0,
											"value": "6"
										},
										{
											"begin": 490,
											"end": 962,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 490,
											"end": 962,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 490,
											"end": 962,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 490,
											"end": 962,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 490,
											"end": 962,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 490,
											"end": 962,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 490,
											"end": 962,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 490,
											"end": 962,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 490,
											"end": 962,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 490,
											"end": 962,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "21"
										},
										{
											"begin": 490,
											"end": 962,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 490,
											"end": 962,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 490,
											"end": 962,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "9"
										},
										{
											"begin": 490,
											"end": 962,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 490,
											"end": 962,
											"name": "tag",
											"source": 0,
											"value": "21"
										},
										{
											"begin": 490,
											"end": 962,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 490,
											"end": 962,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "22"
										},
										{
											"begin": 490,
											"end": 962,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 490,
											"end": 962,
											"name": "tag",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 490,
											"end": 962,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 490,
											"end": 962,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 999,
											"end": 1415,
											"name": "tag",
											"source": 0,
											"value": "10"
										},
										{
											"begin": 999,
											"end": 1415,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1057,
											"end": 1073,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1085,
											"end": 1105,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1113,
											"end": 1126,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1106,
											"end": 1137,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1106,
											"end": 1137,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1106,
											"end": 1137,
											"name": "PUSH",
											"source": 0,
											"value": "70A08231"
										},
										{
											"begin": 1146,
											"end": 1150,
											"name": "ADDRESS",
											"source": 0
										},
										{
											"begin": 1106,
											"end": 1152,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1106,
											"end": 1152,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1106,
											"end": 1152,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1106,
											"end": 1152,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFF"
										},
										{
											"begin": 1106,
											"end": 1152,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1106,
											"end": 1152,
											"name": "PUSH",
											"source": 0,
											"value": "E0"
										},
										{
											"begin": 1106,
											"end": 1152,
											"name": "SHL",
											"source": 0
										},
										{
											"begin": 1106,
											"end": 1152,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1106,
											"end": 1152,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1106,
											"end": 1152,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1106,
											"end": 1152,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1106,
											"end": 1152,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 1106,
											"end": 1152,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1106,
											"end": 1152,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1106,
											"end": 1152,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "25"
										},
										{
											"begin": 1106,
											"end": 1152,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1106,
											"end": 1152,
											"name": "tag",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 1106,
											"end": 1152,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1106,
											"end": 1152,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1106,
											"end": 1152,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1106,
											"end": 1152,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1106,
											"end": 1152,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1106,
											"end": 1152,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 1106,
											"end": 1152,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1106,
											"end": 1152,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1106,
											"end": 1152,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 1106,
											"end": 1152,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1106,
											"end": 1152,
											"name": "EXTCODESIZE",
											"source": 0
										},
										{
											"begin": 1106,
											"end": 1152,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 1106,
											"end": 1152,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1106,
											"end": 1152,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 1106,
											"end": 1152,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "26"
										},
										{
											"begin": 1106,
											"end": 1152,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1106,
											"end": 1152,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1106,
											"end": 1152,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1106,
											"end": 1152,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1106,
											"end": 1152,
											"name": "tag",
											"source": 0,
											"value": "26"
										},
										{
											"begin": 1106,
											"end": 1152,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1106,
											"end": 1152,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1106,
											"end": 1152,
											"name": "GAS",
											"source": 0
										},
										{
											"begin": 1106,
											"end": 1152,
											"name": "STATICCALL",
											"source": 0
										},
										{
											"begin": 1106,
											"end": 1152,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 1106,
											"end": 1152,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1106,
											"end": 1152,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 1106,
											"end": 1152,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "28"
										},
										{
											"begin": 1106,
											"end": 1152,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1106,
											"end": 1152,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 1106,
											"end": 1152,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1106,
											"end": 1152,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1106,
											"end": 1152,
											"name": "RETURNDATACOPY",
											"source": 0
										},
										{
											"begin": 1106,
											"end": 1152,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 1106,
											"end": 1152,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1106,
											"end": 1152,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1106,
											"end": 1152,
											"name": "tag",
											"source": 0,
											"value": "28"
										},
										{
											"begin": 1106,
											"end": 1152,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1106,
											"end": 1152,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1106,
											"end": 1152,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1106,
											"end": 1152,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1106,
											"end": 1152,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1106,
											"end": 1152,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1106,
											"end": 1152,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1106,
											"end": 1152,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 1106,
											"end": 1152,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 1106,
											"end": 1152,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 1106,
											"end": 1152,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 1106,
											"end": 1152,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1106,
											"end": 1152,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1106,
											"end": 1152,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1106,
											"end": 1152,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1106,
											"end": 1152,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1106,
											"end": 1152,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1106,
											"end": 1152,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1106,
											"end": 1152,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1106,
											"end": 1152,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1106,
											"end": 1152,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1106,
											"end": 1152,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1106,
											"end": 1152,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1106,
											"end": 1152,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "29"
										},
										{
											"begin": 1106,
											"end": 1152,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1106,
											"end": 1152,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1106,
											"end": 1152,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "30"
										},
										{
											"begin": 1106,
											"end": 1152,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1106,
											"end": 1152,
											"name": "tag",
											"source": 0,
											"value": "29"
										},
										{
											"begin": 1106,
											"end": 1152,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1085,
											"end": 1152,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1085,
											"end": 1152,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1163,
											"end": 1191,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1192,
											"end": 1220,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "31"
										},
										{
											"begin": 1209,
											"end": 1219,
											"name": "CALLER",
											"source": 0
										},
										{
											"begin": 1192,
											"end": 1208,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "18"
										},
										{
											"begin": 1192,
											"end": 1220,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1192,
											"end": 1220,
											"name": "tag",
											"source": 0,
											"value": "31"
										},
										{
											"begin": 1192,
											"end": 1220,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1163,
											"end": 1220,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1163,
											"end": 1220,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1234,
											"end": 1248,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 1234,
											"end": 1260,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1249,
											"end": 1259,
											"name": "CALLER",
											"source": 0
										},
										{
											"begin": 1234,
											"end": 1260,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1234,
											"end": 1260,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1234,
											"end": 1260,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1234,
											"end": 1260,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1234,
											"end": 1260,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1234,
											"end": 1260,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1234,
											"end": 1260,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1234,
											"end": 1260,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1234,
											"end": 1260,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1234,
											"end": 1260,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1234,
											"end": 1260,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1234,
											"end": 1260,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1234,
											"end": 1260,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1234,
											"end": 1260,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1234,
											"end": 1260,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 1234,
											"end": 1260,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1234,
											"end": 1260,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1234,
											"end": 1260,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 1234,
											"end": 1260,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1234,
											"end": 1260,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 1234,
											"end": 1260,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 1234,
											"end": 1260,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1234,
											"end": 1260,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 1234,
											"end": 1260,
											"name": "PUSH",
											"source": 0,
											"value": "FF"
										},
										{
											"begin": 1234,
											"end": 1260,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1231,
											"end": 1288,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 1231,
											"end": 1288,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "32"
										},
										{
											"begin": 1231,
											"end": 1288,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1269,
											"end": 1286,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1269,
											"end": 1286,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1269,
											"end": 1286,
											"name": "PUSH",
											"source": 0,
											"value": "A727014000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1269,
											"end": 1286,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1269,
											"end": 1286,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1269,
											"end": 1286,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1269,
											"end": 1286,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1269,
											"end": 1286,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1269,
											"end": 1286,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1269,
											"end": 1286,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1269,
											"end": 1286,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1269,
											"end": 1286,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1269,
											"end": 1286,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1269,
											"end": 1286,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1231,
											"end": 1288,
											"name": "tag",
											"source": 0,
											"value": "32"
										},
										{
											"begin": 1231,
											"end": 1288,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1395,
											"end": 1407,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1384,
											"end": 1394,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "33"
										},
										{
											"begin": 1384,
											"end": 1392,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "14"
										},
										{
											"begin": 1384,
											"end": 1394,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1384,
											"end": 1394,
											"name": "tag",
											"source": 0,
											"value": "33"
										},
										{
											"begin": 1384,
											"end": 1394,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1363,
											"end": 1383,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1363,
											"end": 1394,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "34"
										},
										{
											"begin": 1363,
											"end": 1394,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1363,
											"end": 1394,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1363,
											"end": 1394,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "35"
										},
										{
											"begin": 1363,
											"end": 1394,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1363,
											"end": 1394,
											"name": "tag",
											"source": 0,
											"value": "34"
										},
										{
											"begin": 1363,
											"end": 1394,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1363,
											"end": 1407,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "36"
										},
										{
											"begin": 1363,
											"end": 1407,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1363,
											"end": 1407,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1363,
											"end": 1407,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "37"
										},
										{
											"begin": 1363,
											"end": 1407,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1363,
											"end": 1407,
											"name": "tag",
											"source": 0,
											"value": "36"
										},
										{
											"begin": 1363,
											"end": 1407,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1352,
											"end": 1407,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 1352,
											"end": 1407,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1074,
											"end": 1415,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1074,
											"end": 1415,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 999,
											"end": 1415,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 999,
											"end": 1415,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 999,
											"end": 1415,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 999,
											"end": 1415,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 1451,
											"end": 1563,
											"name": "tag",
											"source": 0,
											"value": "14"
										},
										{
											"begin": 1451,
											"end": 1563,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1490,
											"end": 1497,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1531,
											"end": 1540,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1531,
											"end": 1540,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1531,
											"end": 1540,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1531,
											"end": 1540,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 1531,
											"end": 1540,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1531,
											"end": 1540,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 1531,
											"end": 1540,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 1531,
											"end": 1540,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1531,
											"end": 1540,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 1531,
											"end": 1540,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1531,
											"end": 1540,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1516,
											"end": 1553,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1516,
											"end": 1553,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1516,
											"end": 1553,
											"name": "PUSH",
											"source": 0,
											"value": "18160DDD"
										},
										{
											"begin": 1516,
											"end": 1555,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1516,
											"end": 1555,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1516,
											"end": 1555,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1516,
											"end": 1555,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFF"
										},
										{
											"begin": 1516,
											"end": 1555,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1516,
											"end": 1555,
											"name": "PUSH",
											"source": 0,
											"value": "E0"
										},
										{
											"begin": 1516,
											"end": 1555,
											"name": "SHL",
											"source": 0
										},
										{
											"begin": 1516,
											"end": 1555,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1516,
											"end": 1555,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1516,
											"end": 1555,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1516,
											"end": 1555,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1516,
											"end": 1555,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1516,
											"end": 1555,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1516,
											"end": 1555,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1516,
											"end": 1555,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1516,
											"end": 1555,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 1516,
											"end": 1555,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1516,
											"end": 1555,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1516,
											"end": 1555,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 1516,
											"end": 1555,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1516,
											"end": 1555,
											"name": "EXTCODESIZE",
											"source": 0
										},
										{
											"begin": 1516,
											"end": 1555,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 1516,
											"end": 1555,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1516,
											"end": 1555,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 1516,
											"end": 1555,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "39"
										},
										{
											"begin": 1516,
											"end": 1555,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1516,
											"end": 1555,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1516,
											"end": 1555,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1516,
											"end": 1555,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1516,
											"end": 1555,
											"name": "tag",
											"source": 0,
											"value": "39"
										},
										{
											"begin": 1516,
											"end": 1555,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1516,
											"end": 1555,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1516,
											"end": 1555,
											"name": "GAS",
											"source": 0
										},
										{
											"begin": 1516,
											"end": 1555,
											"name": "STATICCALL",
											"source": 0
										},
										{
											"begin": 1516,
											"end": 1555,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 1516,
											"end": 1555,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1516,
											"end": 1555,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 1516,
											"end": 1555,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "41"
										},
										{
											"begin": 1516,
											"end": 1555,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1516,
											"end": 1555,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 1516,
											"end": 1555,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1516,
											"end": 1555,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1516,
											"end": 1555,
											"name": "RETURNDATACOPY",
											"source": 0
										},
										{
											"begin": 1516,
											"end": 1555,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 1516,
											"end": 1555,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1516,
											"end": 1555,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1516,
											"end": 1555,
											"name": "tag",
											"source": 0,
											"value": "41"
										},
										{
											"begin": 1516,
											"end": 1555,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1516,
											"end": 1555,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1516,
											"end": 1555,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1516,
											"end": 1555,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1516,
											"end": 1555,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1516,
											"end": 1555,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1516,
											"end": 1555,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1516,
											"end": 1555,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 1516,
											"end": 1555,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 1516,
											"end": 1555,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 1516,
											"end": 1555,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 1516,
											"end": 1555,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1516,
											"end": 1555,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1516,
											"end": 1555,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1516,
											"end": 1555,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1516,
											"end": 1555,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1516,
											"end": 1555,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1516,
											"end": 1555,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1516,
											"end": 1555,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1516,
											"end": 1555,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1516,
											"end": 1555,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1516,
											"end": 1555,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1516,
											"end": 1555,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1516,
											"end": 1555,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "42"
										},
										{
											"begin": 1516,
											"end": 1555,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1516,
											"end": 1555,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1516,
											"end": 1555,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "30"
										},
										{
											"begin": 1516,
											"end": 1555,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1516,
											"end": 1555,
											"name": "tag",
											"source": 0,
											"value": "42"
										},
										{
											"begin": 1516,
											"end": 1555,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1509,
											"end": 1555,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1509,
											"end": 1555,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1451,
											"end": 1563,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1451,
											"end": 1563,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 1611,
											"end": 1751,
											"name": "tag",
											"source": 0,
											"value": "18"
										},
										{
											"begin": 1611,
											"end": 1751,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1677,
											"end": 1684,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1710,
											"end": 1719,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1710,
											"end": 1719,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1710,
											"end": 1719,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1710,
											"end": 1719,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 1710,
											"end": 1719,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1710,
											"end": 1719,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 1710,
											"end": 1719,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 1710,
											"end": 1719,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1710,
											"end": 1719,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 1710,
											"end": 1719,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1710,
											"end": 1719,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1703,
											"end": 1730,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1703,
											"end": 1730,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1703,
											"end": 1730,
											"name": "PUSH",
											"source": 0,
											"value": "70A08231"
										},
										{
											"begin": 1731,
											"end": 1742,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 1703,
											"end": 1743,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1703,
											"end": 1743,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1703,
											"end": 1743,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1703,
											"end": 1743,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFF"
										},
										{
											"begin": 1703,
											"end": 1743,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1703,
											"end": 1743,
											"name": "PUSH",
											"source": 0,
											"value": "E0"
										},
										{
											"begin": 1703,
											"end": 1743,
											"name": "SHL",
											"source": 0
										},
										{
											"begin": 1703,
											"end": 1743,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1703,
											"end": 1743,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1703,
											"end": 1743,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1703,
											"end": 1743,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1703,
											"end": 1743,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "44"
										},
										{
											"begin": 1703,
											"end": 1743,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1703,
											"end": 1743,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1703,
											"end": 1743,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "25"
										},
										{
											"begin": 1703,
											"end": 1743,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1703,
											"end": 1743,
											"name": "tag",
											"source": 0,
											"value": "44"
										},
										{
											"begin": 1703,
											"end": 1743,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1703,
											"end": 1743,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1703,
											"end": 1743,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1703,
											"end": 1743,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1703,
											"end": 1743,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1703,
											"end": 1743,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 1703,
											"end": 1743,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1703,
											"end": 1743,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1703,
											"end": 1743,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 1703,
											"end": 1743,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1703,
											"end": 1743,
											"name": "EXTCODESIZE",
											"source": 0
										},
										{
											"begin": 1703,
											"end": 1743,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 1703,
											"end": 1743,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1703,
											"end": 1743,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 1703,
											"end": 1743,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "45"
										},
										{
											"begin": 1703,
											"end": 1743,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1703,
											"end": 1743,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1703,
											"end": 1743,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1703,
											"end": 1743,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1703,
											"end": 1743,
											"name": "tag",
											"source": 0,
											"value": "45"
										},
										{
											"begin": 1703,
											"end": 1743,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1703,
											"end": 1743,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1703,
											"end": 1743,
											"name": "GAS",
											"source": 0
										},
										{
											"begin": 1703,
											"end": 1743,
											"name": "STATICCALL",
											"source": 0
										},
										{
											"begin": 1703,
											"end": 1743,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 1703,
											"end": 1743,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1703,
											"end": 1743,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 1703,
											"end": 1743,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "47"
										},
										{
											"begin": 1703,
											"end": 1743,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1703,
											"end": 1743,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 1703,
											"end": 1743,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1703,
											"end": 1743,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1703,
											"end": 1743,
											"name": "RETURNDATACOPY",
											"source": 0
										},
										{
											"begin": 1703,
											"end": 1743,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 1703,
											"end": 1743,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1703,
											"end": 1743,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1703,
											"end": 1743,
											"name": "tag",
											"source": 0,
											"value": "47"
										},
										{
											"begin": 1703,
											"end": 1743,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1703,
											"end": 1743,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1703,
											"end": 1743,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1703,
											"end": 1743,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1703,
											"end": 1743,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1703,
											"end": 1743,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1703,
											"end": 1743,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1703,
											"end": 1743,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 1703,
											"end": 1743,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 1703,
											"end": 1743,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 1703,
											"end": 1743,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 1703,
											"end": 1743,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1703,
											"end": 1743,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1703,
											"end": 1743,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1703,
											"end": 1743,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1703,
											"end": 1743,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1703,
											"end": 1743,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1703,
											"end": 1743,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1703,
											"end": 1743,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1703,
											"end": 1743,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1703,
											"end": 1743,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1703,
											"end": 1743,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1703,
											"end": 1743,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1703,
											"end": 1743,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "48"
										},
										{
											"begin": 1703,
											"end": 1743,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1703,
											"end": 1743,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1703,
											"end": 1743,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "30"
										},
										{
											"begin": 1703,
											"end": 1743,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1703,
											"end": 1743,
											"name": "tag",
											"source": 0,
											"value": "48"
										},
										{
											"begin": 1703,
											"end": 1743,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1696,
											"end": 1743,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1696,
											"end": 1743,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1611,
											"end": 1751,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1611,
											"end": 1751,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1611,
											"end": 1751,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1611,
											"end": 1751,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 490,
											"end": 962,
											"name": "tag",
											"source": 0,
											"value": "22"
										},
										{
											"begin": 490,
											"end": 962,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 555,
											"end": 583,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 584,
											"end": 612,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "50"
										},
										{
											"begin": 601,
											"end": 611,
											"name": "CALLER",
											"source": 0
										},
										{
											"begin": 584,
											"end": 600,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "18"
										},
										{
											"begin": 584,
											"end": 612,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 584,
											"end": 612,
											"name": "tag",
											"source": 0,
											"value": "50"
										},
										{
											"begin": 584,
											"end": 612,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 555,
											"end": 612,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 555,
											"end": 612,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 647,
											"end": 648,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 626,
											"end": 646,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 626,
											"end": 648,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 623,
											"end": 670,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 623,
											"end": 670,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "51"
										},
										{
											"begin": 623,
											"end": 670,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 657,
											"end": 668,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 657,
											"end": 668,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 657,
											"end": 668,
											"name": "PUSH",
											"source": 0,
											"value": "5695054900000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 657,
											"end": 668,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 657,
											"end": 668,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 657,
											"end": 668,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 657,
											"end": 668,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 657,
											"end": 668,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 657,
											"end": 668,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 657,
											"end": 668,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 657,
											"end": 668,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 657,
											"end": 668,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 657,
											"end": 668,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 657,
											"end": 668,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 623,
											"end": 670,
											"name": "tag",
											"source": 0,
											"value": "51"
										},
										{
											"begin": 623,
											"end": 670,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 680,
											"end": 698,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 699,
											"end": 720,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "52"
										},
										{
											"begin": 706,
											"end": 719,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 699,
											"end": 705,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "10"
										},
										{
											"begin": 699,
											"end": 720,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 699,
											"end": 720,
											"name": "tag",
											"source": 0,
											"value": "52"
										},
										{
											"begin": 699,
											"end": 720,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 680,
											"end": 720,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 680,
											"end": 720,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 781,
											"end": 844,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "53"
										},
										{
											"begin": 820,
											"end": 821,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 823,
											"end": 843,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 788,
											"end": 797,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 788,
											"end": 797,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 788,
											"end": 797,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 788,
											"end": 797,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 788,
											"end": 797,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 788,
											"end": 797,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 788,
											"end": 797,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 788,
											"end": 797,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 788,
											"end": 797,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 788,
											"end": 797,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 781,
											"end": 811,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 781,
											"end": 811,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 781,
											"end": 811,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "54"
										},
										{
											"begin": 781,
											"end": 811,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 781,
											"end": 844,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 781,
											"end": 844,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 781,
											"end": 844,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 781,
											"end": 844,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFF"
										},
										{
											"begin": 781,
											"end": 844,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 781,
											"end": 844,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 781,
											"end": 844,
											"name": "tag",
											"source": 0,
											"value": "53"
										},
										{
											"begin": 781,
											"end": 844,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 855,
											"end": 912,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "55"
										},
										{
											"begin": 890,
											"end": 900,
											"name": "CALLER",
											"source": 0
										},
										{
											"begin": 901,
											"end": 911,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 862,
											"end": 875,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 855,
											"end": 889,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 855,
											"end": 889,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 855,
											"end": 889,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "54"
										},
										{
											"begin": 855,
											"end": 889,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 855,
											"end": 912,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 855,
											"end": 912,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 855,
											"end": 912,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 855,
											"end": 912,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFF"
										},
										{
											"begin": 855,
											"end": 912,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 855,
											"end": 912,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 855,
											"end": 912,
											"name": "tag",
											"source": 0,
											"value": "55"
										},
										{
											"begin": 855,
											"end": 912,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 950,
											"end": 954,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 923,
											"end": 937,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 923,
											"end": 949,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 938,
											"end": 948,
											"name": "CALLER",
											"source": 0
										},
										{
											"begin": 923,
											"end": 949,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 923,
											"end": 949,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 923,
											"end": 949,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 923,
											"end": 949,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 923,
											"end": 949,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 923,
											"end": 949,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 923,
											"end": 949,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 923,
											"end": 949,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 923,
											"end": 949,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 923,
											"end": 949,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 923,
											"end": 949,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 923,
											"end": 949,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 923,
											"end": 949,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 923,
											"end": 949,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 923,
											"end": 949,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 923,
											"end": 949,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 923,
											"end": 954,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 923,
											"end": 954,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 923,
											"end": 954,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 923,
											"end": 954,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 923,
											"end": 954,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 923,
											"end": 954,
											"name": "PUSH",
											"source": 0,
											"value": "FF"
										},
										{
											"begin": 923,
											"end": 954,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 923,
											"end": 954,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 923,
											"end": 954,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 923,
											"end": 954,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 923,
											"end": 954,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 923,
											"end": 954,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 923,
											"end": 954,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 923,
											"end": 954,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 923,
											"end": 954,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 923,
											"end": 954,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 923,
											"end": 954,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 923,
											"end": 954,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 544,
											"end": 962,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 544,
											"end": 962,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 490,
											"end": 962,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 490,
											"end": 962,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 1025,
											"end": 1202,
											"name": "tag",
											"source": 6,
											"value": "54"
										},
										{
											"begin": 1025,
											"end": 1202,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1108,
											"end": 1194,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "57"
										},
										{
											"begin": 1128,
											"end": 1133,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 1158,
											"end": 1181,
											"name": "PUSH",
											"source": 6,
											"value": "A9059CBB"
										},
										{
											"begin": 1158,
											"end": 1181,
											"name": "PUSH",
											"source": 6,
											"value": "E0"
										},
										{
											"begin": 1158,
											"end": 1181,
											"name": "SHL",
											"source": 6
										},
										{
											"begin": 1183,
											"end": 1185,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 1187,
											"end": 1192,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "PUSH",
											"source": 6,
											"value": "24"
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "58"
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "59"
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "tag",
											"source": 6,
											"value": "58"
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "PUSH",
											"source": 6,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "NOT",
											"source": 6
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "PUSH",
											"source": 6,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "OR",
											"source": 6
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1108,
											"end": 1127,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "60"
										},
										{
											"begin": 1108,
											"end": 1194,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 1108,
											"end": 1194,
											"name": "tag",
											"source": 6,
											"value": "57"
										},
										{
											"begin": 1108,
											"end": 1194,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1025,
											"end": 1202,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1025,
											"end": 1202,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1025,
											"end": 1202,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1025,
											"end": 1202,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 5371,
											"end": 6020,
											"name": "tag",
											"source": 6,
											"value": "60"
										},
										{
											"begin": 5371,
											"end": 6020,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5795,
											"end": 5818,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 5821,
											"end": 5890,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "62"
										},
										{
											"begin": 5849,
											"end": 5853,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 5821,
											"end": 5890,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 5821,
											"end": 5890,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 5821,
											"end": 5890,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 5821,
											"end": 5890,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 5821,
											"end": 5890,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5821,
											"end": 5890,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 5821,
											"end": 5890,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5821,
											"end": 5890,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 5821,
											"end": 5890,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 5821,
											"end": 5890,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5821,
											"end": 5890,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5821,
											"end": 5890,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 5821,
											"end": 5890,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5821,
											"end": 5890,
											"name": "PUSH",
											"source": 6,
											"value": "5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564"
										},
										{
											"begin": 5821,
											"end": 5890,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5821,
											"end": 5890,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5821,
											"end": 5890,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5829,
											"end": 5834,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 5821,
											"end": 5848,
											"name": "PUSH",
											"source": 6,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5821,
											"end": 5848,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 5821,
											"end": 5848,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "63"
										},
										{
											"begin": 5821,
											"end": 5848,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5821,
											"end": 5890,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 5821,
											"end": 5890,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5821,
											"end": 5890,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5821,
											"end": 5890,
											"name": "PUSH",
											"source": 6,
											"value": "FFFFFFFF"
										},
										{
											"begin": 5821,
											"end": 5890,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 5821,
											"end": 5890,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 5821,
											"end": 5890,
											"name": "tag",
											"source": 6,
											"value": "62"
										},
										{
											"begin": 5821,
											"end": 5890,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5795,
											"end": 5890,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5795,
											"end": 5890,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5930,
											"end": 5931,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 5909,
											"end": 5919,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5909,
											"end": 5926,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 5909,
											"end": 5931,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 5909,
											"end": 5965,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 5909,
											"end": 5965,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "64"
										},
										{
											"begin": 5909,
											"end": 5965,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 5909,
											"end": 5965,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5946,
											"end": 5956,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 5935,
											"end": 5965,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 5935,
											"end": 5965,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 5935,
											"end": 5965,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5935,
											"end": 5965,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5935,
											"end": 5965,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 5935,
											"end": 5965,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5935,
											"end": 5965,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5935,
											"end": 5965,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5935,
											"end": 5965,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "65"
										},
										{
											"begin": 5935,
											"end": 5965,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5935,
											"end": 5965,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5935,
											"end": 5965,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "66"
										},
										{
											"begin": 5935,
											"end": 5965,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 5935,
											"end": 5965,
											"name": "tag",
											"source": 6,
											"value": "65"
										},
										{
											"begin": 5935,
											"end": 5965,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5909,
											"end": 5965,
											"name": "tag",
											"source": 6,
											"value": "64"
										},
										{
											"begin": 5909,
											"end": 5965,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5901,
											"end": 6012,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "67"
										},
										{
											"begin": 5901,
											"end": 6012,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 5901,
											"end": 6012,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 5901,
											"end": 6012,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 5901,
											"end": 6012,
											"name": "PUSH",
											"source": 6,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 5901,
											"end": 6012,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5901,
											"end": 6012,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5901,
											"end": 6012,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 5901,
											"end": 6012,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5901,
											"end": 6012,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "68"
										},
										{
											"begin": 5901,
											"end": 6012,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5901,
											"end": 6012,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "69"
										},
										{
											"begin": 5901,
											"end": 6012,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 5901,
											"end": 6012,
											"name": "tag",
											"source": 6,
											"value": "68"
										},
										{
											"begin": 5901,
											"end": 6012,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5901,
											"end": 6012,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 5901,
											"end": 6012,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 5901,
											"end": 6012,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 5901,
											"end": 6012,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5901,
											"end": 6012,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 5901,
											"end": 6012,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5901,
											"end": 6012,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 5901,
											"end": 6012,
											"name": "tag",
											"source": 6,
											"value": "67"
										},
										{
											"begin": 5901,
											"end": 6012,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5441,
											"end": 6020,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5371,
											"end": 6020,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5371,
											"end": 6020,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5371,
											"end": 6020,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 4207,
											"end": 4436,
											"name": "tag",
											"source": 5,
											"value": "63"
										},
										{
											"begin": 4207,
											"end": 4436,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 4344,
											"end": 4356,
											"name": "PUSH",
											"source": 5,
											"value": "60"
										},
										{
											"begin": 4376,
											"end": 4428,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "71"
										},
										{
											"begin": 4398,
											"end": 4404,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 4406,
											"end": 4410,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 4412,
											"end": 4413,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 4415,
											"end": 4427,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 4376,
											"end": 4397,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "72"
										},
										{
											"begin": 4376,
											"end": 4428,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 4376,
											"end": 4428,
											"name": "tag",
											"source": 5,
											"value": "71"
										},
										{
											"begin": 4376,
											"end": 4428,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 4369,
											"end": 4428,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 4369,
											"end": 4428,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 4207,
											"end": 4436,
											"name": "SWAP4",
											"source": 5
										},
										{
											"begin": 4207,
											"end": 4436,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 4207,
											"end": 4436,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 4207,
											"end": 4436,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 4207,
											"end": 4436,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 4207,
											"end": 4436,
											"name": "JUMP",
											"source": 5,
											"value": "[out]"
										},
										{
											"begin": 5293,
											"end": 5748,
											"name": "tag",
											"source": 5,
											"value": "72"
										},
										{
											"begin": 5293,
											"end": 5748,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5463,
											"end": 5475,
											"name": "PUSH",
											"source": 5,
											"value": "60"
										},
										{
											"begin": 5521,
											"end": 5526,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 5496,
											"end": 5517,
											"name": "SELFBALANCE",
											"source": 5
										},
										{
											"begin": 5496,
											"end": 5526,
											"name": "LT",
											"source": 5
										},
										{
											"begin": 5496,
											"end": 5526,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 5488,
											"end": 5569,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "74"
										},
										{
											"begin": 5488,
											"end": 5569,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 5488,
											"end": 5569,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 5488,
											"end": 5569,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 5488,
											"end": 5569,
											"name": "PUSH",
											"source": 5,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 5488,
											"end": 5569,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 5488,
											"end": 5569,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 5488,
											"end": 5569,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 5488,
											"end": 5569,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 5488,
											"end": 5569,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "75"
										},
										{
											"begin": 5488,
											"end": 5569,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5488,
											"end": 5569,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "76"
										},
										{
											"begin": 5488,
											"end": 5569,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 5488,
											"end": 5569,
											"name": "tag",
											"source": 5,
											"value": "75"
										},
										{
											"begin": 5488,
											"end": 5569,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5488,
											"end": 5569,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 5488,
											"end": 5569,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 5488,
											"end": 5569,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 5488,
											"end": 5569,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 5488,
											"end": 5569,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 5488,
											"end": 5569,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5488,
											"end": 5569,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 5488,
											"end": 5569,
											"name": "tag",
											"source": 5,
											"value": "74"
										},
										{
											"begin": 5488,
											"end": 5569,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5581,
											"end": 5593,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 5595,
											"end": 5618,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 5622,
											"end": 5628,
											"name": "DUP7",
											"source": 5
										},
										{
											"begin": 5622,
											"end": 5633,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5622,
											"end": 5633,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 5641,
											"end": 5646,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 5648,
											"end": 5652,
											"name": "DUP8",
											"source": 5
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "77"
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "78"
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "tag",
											"source": 5,
											"value": "77"
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "DUP8",
											"source": 5
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "GAS",
											"source": 5
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "CALL",
											"source": 5
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "RETURNDATASIZE",
											"source": 5
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "81"
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "PUSH",
											"source": 5,
											"value": "1F"
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "NOT",
											"source": 5
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "PUSH",
											"source": 5,
											"value": "3F"
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "RETURNDATASIZE",
											"source": 5
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "RETURNDATASIZE",
											"source": 5
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "RETURNDATASIZE",
											"source": 5
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "RETURNDATACOPY",
											"source": 5
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "80"
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "tag",
											"source": 5,
											"value": "81"
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "PUSH",
											"source": 5,
											"value": "60"
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "tag",
											"source": 5,
											"value": "80"
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 5580,
											"end": 5653,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 5580,
											"end": 5653,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 5580,
											"end": 5653,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 5580,
											"end": 5653,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 5671,
											"end": 5740,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "82"
										},
										{
											"begin": 5698,
											"end": 5704,
											"name": "DUP8",
											"source": 5
										},
										{
											"begin": 5706,
											"end": 5713,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 5715,
											"end": 5725,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 5727,
											"end": 5739,
											"name": "DUP8",
											"source": 5
										},
										{
											"begin": 5671,
											"end": 5697,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "83"
										},
										{
											"begin": 5671,
											"end": 5740,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 5671,
											"end": 5740,
											"name": "tag",
											"source": 5,
											"value": "82"
										},
										{
											"begin": 5671,
											"end": 5740,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5664,
											"end": 5740,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 5664,
											"end": 5740,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 5664,
											"end": 5740,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 5664,
											"end": 5740,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 5293,
											"end": 5748,
											"name": "SWAP5",
											"source": 5
										},
										{
											"begin": 5293,
											"end": 5748,
											"name": "SWAP4",
											"source": 5
										},
										{
											"begin": 5293,
											"end": 5748,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 5293,
											"end": 5748,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 5293,
											"end": 5748,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 5293,
											"end": 5748,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 5293,
											"end": 5748,
											"name": "JUMP",
											"source": 5,
											"value": "[out]"
										},
										{
											"begin": 7866,
											"end": 8510,
											"name": "tag",
											"source": 5,
											"value": "83"
										},
										{
											"begin": 7866,
											"end": 8510,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 8051,
											"end": 8063,
											"name": "PUSH",
											"source": 5,
											"value": "60"
										},
										{
											"begin": 8080,
											"end": 8087,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 8076,
											"end": 8503,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 8076,
											"end": 8503,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "85"
										},
										{
											"begin": 8076,
											"end": 8503,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 8129,
											"end": 8130,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 8108,
											"end": 8118,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 8108,
											"end": 8125,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 8108,
											"end": 8130,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 8104,
											"end": 8394,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 8104,
											"end": 8394,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "86"
										},
										{
											"begin": 8104,
											"end": 8394,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 8326,
											"end": 8344,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "87"
										},
										{
											"begin": 8337,
											"end": 8343,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 8326,
											"end": 8336,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "88"
										},
										{
											"begin": 8326,
											"end": 8344,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 8326,
											"end": 8344,
											"name": "tag",
											"source": 5,
											"value": "87"
										},
										{
											"begin": 8326,
											"end": 8344,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 8318,
											"end": 8378,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "89"
										},
										{
											"begin": 8318,
											"end": 8378,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 8318,
											"end": 8378,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 8318,
											"end": 8378,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 8318,
											"end": 8378,
											"name": "PUSH",
											"source": 5,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 8318,
											"end": 8378,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 8318,
											"end": 8378,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 8318,
											"end": 8378,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 8318,
											"end": 8378,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 8318,
											"end": 8378,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "90"
										},
										{
											"begin": 8318,
											"end": 8378,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 8318,
											"end": 8378,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "91"
										},
										{
											"begin": 8318,
											"end": 8378,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 8318,
											"end": 8378,
											"name": "tag",
											"source": 5,
											"value": "90"
										},
										{
											"begin": 8318,
											"end": 8378,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 8318,
											"end": 8378,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 8318,
											"end": 8378,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 8318,
											"end": 8378,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 8318,
											"end": 8378,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 8318,
											"end": 8378,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 8318,
											"end": 8378,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 8318,
											"end": 8378,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 8318,
											"end": 8378,
											"name": "tag",
											"source": 5,
											"value": "89"
										},
										{
											"begin": 8318,
											"end": 8378,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 8104,
											"end": 8394,
											"name": "tag",
											"source": 5,
											"value": "86"
										},
										{
											"begin": 8104,
											"end": 8394,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 8415,
											"end": 8425,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 8408,
											"end": 8425,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 8408,
											"end": 8425,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 8408,
											"end": 8425,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "84"
										},
										{
											"begin": 8408,
											"end": 8425,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 8076,
											"end": 8503,
											"name": "tag",
											"source": 5,
											"value": "85"
										},
										{
											"begin": 8076,
											"end": 8503,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 8458,
											"end": 8491,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "93"
										},
										{
											"begin": 8466,
											"end": 8476,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 8478,
											"end": 8490,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 8458,
											"end": 8465,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "94"
										},
										{
											"begin": 8458,
											"end": 8491,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 8458,
											"end": 8491,
											"name": "tag",
											"source": 5,
											"value": "93"
										},
										{
											"begin": 8458,
											"end": 8491,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 7866,
											"end": 8510,
											"name": "tag",
											"source": 5,
											"value": "84"
										},
										{
											"begin": 7866,
											"end": 8510,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 7866,
											"end": 8510,
											"name": "SWAP5",
											"source": 5
										},
										{
											"begin": 7866,
											"end": 8510,
											"name": "SWAP4",
											"source": 5
										},
										{
											"begin": 7866,
											"end": 8510,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 7866,
											"end": 8510,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 7866,
											"end": 8510,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 7866,
											"end": 8510,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 7866,
											"end": 8510,
											"name": "JUMP",
											"source": 5,
											"value": "[out]"
										},
										{
											"begin": 1452,
											"end": 1778,
											"name": "tag",
											"source": 5,
											"value": "88"
										},
										{
											"begin": 1452,
											"end": 1778,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1512,
											"end": 1516,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1769,
											"end": 1770,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1747,
											"end": 1754,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 1747,
											"end": 1766,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1747,
											"end": 1766,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1747,
											"end": 1766,
											"name": "EXTCODESIZE",
											"source": 5
										},
										{
											"begin": 1747,
											"end": 1770,
											"name": "GT",
											"source": 5
										},
										{
											"begin": 1740,
											"end": 1770,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1740,
											"end": 1770,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1452,
											"end": 1778,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 1452,
											"end": 1778,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1452,
											"end": 1778,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1452,
											"end": 1778,
											"name": "JUMP",
											"source": 5,
											"value": "[out]"
										},
										{
											"begin": 9052,
											"end": 9604,
											"name": "tag",
											"source": 5,
											"value": "94"
										},
										{
											"begin": 9052,
											"end": 9604,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 9233,
											"end": 9234,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 9213,
											"end": 9223,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 9213,
											"end": 9230,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 9213,
											"end": 9234,
											"name": "GT",
											"source": 5
										},
										{
											"begin": 9209,
											"end": 9597,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 9209,
											"end": 9597,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "97"
										},
										{
											"begin": 9209,
											"end": 9597,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 9445,
											"end": 9455,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 9439,
											"end": 9456,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 9502,
											"end": 9517,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 9489,
											"end": 9499,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 9485,
											"end": 9487,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 9481,
											"end": 9500,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 9474,
											"end": 9518,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 9209,
											"end": 9597,
											"name": "tag",
											"source": 5,
											"value": "97"
										},
										{
											"begin": 9209,
											"end": 9597,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 9572,
											"end": 9584,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 9565,
											"end": 9585,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 9565,
											"end": 9585,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 9565,
											"end": 9585,
											"name": "PUSH",
											"source": 5,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 9565,
											"end": 9585,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 9565,
											"end": 9585,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 9565,
											"end": 9585,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 9565,
											"end": 9585,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 9565,
											"end": 9585,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "99"
										},
										{
											"begin": 9565,
											"end": 9585,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 9565,
											"end": 9585,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 9565,
											"end": 9585,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "100"
										},
										{
											"begin": 9565,
											"end": 9585,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 9565,
											"end": 9585,
											"name": "tag",
											"source": 5,
											"value": "99"
										},
										{
											"begin": 9565,
											"end": 9585,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 9565,
											"end": 9585,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 9565,
											"end": 9585,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 9565,
											"end": 9585,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 9565,
											"end": 9585,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 9565,
											"end": 9585,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 9565,
											"end": 9585,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 9565,
											"end": 9585,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 88,
											"end": 205,
											"name": "tag",
											"source": 7,
											"value": "102"
										},
										{
											"begin": 88,
											"end": 205,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 197,
											"end": 198,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 194,
											"end": 195,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 187,
											"end": 199,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 334,
											"end": 460,
											"name": "tag",
											"source": 7,
											"value": "104"
										},
										{
											"begin": 334,
											"end": 460,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 371,
											"end": 378,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 411,
											"end": 453,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 404,
											"end": 409,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 400,
											"end": 454,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 389,
											"end": 454,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 389,
											"end": 454,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 334,
											"end": 460,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 334,
											"end": 460,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 334,
											"end": 460,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 334,
											"end": 460,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 466,
											"end": 562,
											"name": "tag",
											"source": 7,
											"value": "105"
										},
										{
											"begin": 466,
											"end": 562,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 503,
											"end": 510,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 532,
											"end": 556,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "138"
										},
										{
											"begin": 550,
											"end": 555,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 532,
											"end": 556,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "104"
										},
										{
											"begin": 532,
											"end": 556,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 532,
											"end": 556,
											"name": "tag",
											"source": 7,
											"value": "138"
										},
										{
											"begin": 532,
											"end": 556,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 521,
											"end": 556,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 521,
											"end": 556,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 466,
											"end": 562,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 466,
											"end": 562,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 466,
											"end": 562,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 466,
											"end": 562,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 568,
											"end": 690,
											"name": "tag",
											"source": 7,
											"value": "106"
										},
										{
											"begin": 568,
											"end": 690,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 641,
											"end": 665,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "140"
										},
										{
											"begin": 659,
											"end": 664,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 641,
											"end": 665,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "105"
										},
										{
											"begin": 641,
											"end": 665,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 641,
											"end": 665,
											"name": "tag",
											"source": 7,
											"value": "140"
										},
										{
											"begin": 641,
											"end": 665,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 634,
											"end": 639,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 631,
											"end": 666,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 621,
											"end": 684,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "141"
										},
										{
											"begin": 621,
											"end": 684,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 680,
											"end": 681,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 677,
											"end": 678,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 670,
											"end": 682,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 621,
											"end": 684,
											"name": "tag",
											"source": 7,
											"value": "141"
										},
										{
											"begin": 621,
											"end": 684,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 568,
											"end": 690,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 568,
											"end": 690,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 696,
											"end": 835,
											"name": "tag",
											"source": 7,
											"value": "107"
										},
										{
											"begin": 696,
											"end": 835,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 742,
											"end": 747,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 780,
											"end": 786,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 767,
											"end": 787,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": 758,
											"end": 787,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 758,
											"end": 787,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 796,
											"end": 829,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "143"
										},
										{
											"begin": 823,
											"end": 828,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 796,
											"end": 829,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "106"
										},
										{
											"begin": 796,
											"end": 829,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 796,
											"end": 829,
											"name": "tag",
											"source": 7,
											"value": "143"
										},
										{
											"begin": 796,
											"end": 829,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 696,
											"end": 835,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 696,
											"end": 835,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 696,
											"end": 835,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 696,
											"end": 835,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 696,
											"end": 835,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 841,
											"end": 1170,
											"name": "tag",
											"source": 7,
											"value": "9"
										},
										{
											"begin": 841,
											"end": 1170,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 900,
											"end": 906,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 949,
											"end": 951,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 937,
											"end": 946,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 928,
											"end": 935,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 924,
											"end": 947,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 920,
											"end": 952,
											"name": "SLT",
											"source": 7
										},
										{
											"begin": 917,
											"end": 1036,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 917,
											"end": 1036,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "145"
										},
										{
											"begin": 917,
											"end": 1036,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 955,
											"end": 1034,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "146"
										},
										{
											"begin": 955,
											"end": 1034,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "102"
										},
										{
											"begin": 955,
											"end": 1034,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 955,
											"end": 1034,
											"name": "tag",
											"source": 7,
											"value": "146"
										},
										{
											"begin": 955,
											"end": 1034,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 917,
											"end": 1036,
											"name": "tag",
											"source": 7,
											"value": "145"
										},
										{
											"begin": 917,
											"end": 1036,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1075,
											"end": 1076,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1100,
											"end": 1153,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "147"
										},
										{
											"begin": 1145,
											"end": 1152,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 1136,
											"end": 1142,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1125,
											"end": 1134,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 1121,
											"end": 1143,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1100,
											"end": 1153,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "107"
										},
										{
											"begin": 1100,
											"end": 1153,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1100,
											"end": 1153,
											"name": "tag",
											"source": 7,
											"value": "147"
										},
										{
											"begin": 1100,
											"end": 1153,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1090,
											"end": 1153,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1090,
											"end": 1153,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1046,
											"end": 1163,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 841,
											"end": 1170,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 841,
											"end": 1170,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 841,
											"end": 1170,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 841,
											"end": 1170,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 841,
											"end": 1170,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 1176,
											"end": 1253,
											"name": "tag",
											"source": 7,
											"value": "108"
										},
										{
											"begin": 1176,
											"end": 1253,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1213,
											"end": 1220,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1242,
											"end": 1247,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1231,
											"end": 1247,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1231,
											"end": 1247,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1176,
											"end": 1253,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1176,
											"end": 1253,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1176,
											"end": 1253,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1176,
											"end": 1253,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 1259,
											"end": 1377,
											"name": "tag",
											"source": 7,
											"value": "109"
										},
										{
											"begin": 1259,
											"end": 1377,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1346,
											"end": 1370,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "150"
										},
										{
											"begin": 1364,
											"end": 1369,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1346,
											"end": 1370,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "108"
										},
										{
											"begin": 1346,
											"end": 1370,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1346,
											"end": 1370,
											"name": "tag",
											"source": 7,
											"value": "150"
										},
										{
											"begin": 1346,
											"end": 1370,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1341,
											"end": 1344,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1334,
											"end": 1371,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1259,
											"end": 1377,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1259,
											"end": 1377,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1259,
											"end": 1377,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 1383,
											"end": 1605,
											"name": "tag",
											"source": 7,
											"value": "12"
										},
										{
											"begin": 1383,
											"end": 1605,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1476,
											"end": 1480,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1514,
											"end": 1516,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1503,
											"end": 1512,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1499,
											"end": 1517,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1491,
											"end": 1517,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1491,
											"end": 1517,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1527,
											"end": 1598,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "152"
										},
										{
											"begin": 1595,
											"end": 1596,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1584,
											"end": 1593,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 1580,
											"end": 1597,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1571,
											"end": 1577,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 1527,
											"end": 1598,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "109"
										},
										{
											"begin": 1527,
											"end": 1598,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1527,
											"end": 1598,
											"name": "tag",
											"source": 7,
											"value": "152"
										},
										{
											"begin": 1527,
											"end": 1598,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1383,
											"end": 1605,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 1383,
											"end": 1605,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1383,
											"end": 1605,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1383,
											"end": 1605,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1383,
											"end": 1605,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 1611,
											"end": 1729,
											"name": "tag",
											"source": 7,
											"value": "110"
										},
										{
											"begin": 1611,
											"end": 1729,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1698,
											"end": 1722,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "154"
										},
										{
											"begin": 1716,
											"end": 1721,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1698,
											"end": 1722,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "105"
										},
										{
											"begin": 1698,
											"end": 1722,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1698,
											"end": 1722,
											"name": "tag",
											"source": 7,
											"value": "154"
										},
										{
											"begin": 1698,
											"end": 1722,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1693,
											"end": 1696,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1686,
											"end": 1723,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1611,
											"end": 1729,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1611,
											"end": 1729,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1611,
											"end": 1729,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 1735,
											"end": 1957,
											"name": "tag",
											"source": 7,
											"value": "25"
										},
										{
											"begin": 1735,
											"end": 1957,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1828,
											"end": 1832,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1866,
											"end": 1868,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1855,
											"end": 1864,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1851,
											"end": 1869,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1843,
											"end": 1869,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1843,
											"end": 1869,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1879,
											"end": 1950,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "156"
										},
										{
											"begin": 1947,
											"end": 1948,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1936,
											"end": 1945,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 1932,
											"end": 1949,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1923,
											"end": 1929,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 1879,
											"end": 1950,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "110"
										},
										{
											"begin": 1879,
											"end": 1950,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1879,
											"end": 1950,
											"name": "tag",
											"source": 7,
											"value": "156"
										},
										{
											"begin": 1879,
											"end": 1950,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1735,
											"end": 1957,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 1735,
											"end": 1957,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1735,
											"end": 1957,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1735,
											"end": 1957,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1735,
											"end": 1957,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 1963,
											"end": 2085,
											"name": "tag",
											"source": 7,
											"value": "111"
										},
										{
											"begin": 1963,
											"end": 2085,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2036,
											"end": 2060,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "158"
										},
										{
											"begin": 2054,
											"end": 2059,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2036,
											"end": 2060,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "108"
										},
										{
											"begin": 2036,
											"end": 2060,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 2036,
											"end": 2060,
											"name": "tag",
											"source": 7,
											"value": "158"
										},
										{
											"begin": 2036,
											"end": 2060,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2029,
											"end": 2034,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2026,
											"end": 2061,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 2016,
											"end": 2079,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "159"
										},
										{
											"begin": 2016,
											"end": 2079,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 2075,
											"end": 2076,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2072,
											"end": 2073,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2065,
											"end": 2077,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 2016,
											"end": 2079,
											"name": "tag",
											"source": 7,
											"value": "159"
										},
										{
											"begin": 2016,
											"end": 2079,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1963,
											"end": 2085,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1963,
											"end": 2085,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 2091,
											"end": 2234,
											"name": "tag",
											"source": 7,
											"value": "112"
										},
										{
											"begin": 2091,
											"end": 2234,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2148,
											"end": 2153,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2179,
											"end": 2185,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2173,
											"end": 2186,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 2164,
											"end": 2186,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2164,
											"end": 2186,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2195,
											"end": 2228,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "161"
										},
										{
											"begin": 2222,
											"end": 2227,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2195,
											"end": 2228,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "111"
										},
										{
											"begin": 2195,
											"end": 2228,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 2195,
											"end": 2228,
											"name": "tag",
											"source": 7,
											"value": "161"
										},
										{
											"begin": 2195,
											"end": 2228,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2091,
											"end": 2234,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 2091,
											"end": 2234,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2091,
											"end": 2234,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2091,
											"end": 2234,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2091,
											"end": 2234,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 2240,
											"end": 2591,
											"name": "tag",
											"source": 7,
											"value": "30"
										},
										{
											"begin": 2240,
											"end": 2591,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2310,
											"end": 2316,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2359,
											"end": 2361,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2347,
											"end": 2356,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2338,
											"end": 2345,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 2334,
											"end": 2357,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 2330,
											"end": 2362,
											"name": "SLT",
											"source": 7
										},
										{
											"begin": 2327,
											"end": 2446,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 2327,
											"end": 2446,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "163"
										},
										{
											"begin": 2327,
											"end": 2446,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 2365,
											"end": 2444,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "164"
										},
										{
											"begin": 2365,
											"end": 2444,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "102"
										},
										{
											"begin": 2365,
											"end": 2444,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 2365,
											"end": 2444,
											"name": "tag",
											"source": 7,
											"value": "164"
										},
										{
											"begin": 2365,
											"end": 2444,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2327,
											"end": 2446,
											"name": "tag",
											"source": 7,
											"value": "163"
										},
										{
											"begin": 2327,
											"end": 2446,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2485,
											"end": 2486,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2510,
											"end": 2574,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "165"
										},
										{
											"begin": 2566,
											"end": 2573,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 2557,
											"end": 2563,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2546,
											"end": 2555,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 2542,
											"end": 2564,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2510,
											"end": 2574,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "112"
										},
										{
											"begin": 2510,
											"end": 2574,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 2510,
											"end": 2574,
											"name": "tag",
											"source": 7,
											"value": "165"
										},
										{
											"begin": 2510,
											"end": 2574,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2500,
											"end": 2574,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2500,
											"end": 2574,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2456,
											"end": 2584,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2240,
											"end": 2591,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 2240,
											"end": 2591,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2240,
											"end": 2591,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2240,
											"end": 2591,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2240,
											"end": 2591,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 2597,
											"end": 2777,
											"name": "tag",
											"source": 7,
											"value": "113"
										},
										{
											"begin": 2597,
											"end": 2777,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2645,
											"end": 2722,
											"name": "PUSH",
											"source": 7,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2642,
											"end": 2643,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2635,
											"end": 2723,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2742,
											"end": 2746,
											"name": "PUSH",
											"source": 7,
											"value": "12"
										},
										{
											"begin": 2739,
											"end": 2740,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 2732,
											"end": 2747,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2766,
											"end": 2770,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 2763,
											"end": 2764,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2756,
											"end": 2771,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 2783,
											"end": 2963,
											"name": "tag",
											"source": 7,
											"value": "114"
										},
										{
											"begin": 2783,
											"end": 2963,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2831,
											"end": 2908,
											"name": "PUSH",
											"source": 7,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2828,
											"end": 2829,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2821,
											"end": 2909,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2928,
											"end": 2932,
											"name": "PUSH",
											"source": 7,
											"value": "11"
										},
										{
											"begin": 2925,
											"end": 2926,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 2918,
											"end": 2933,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2952,
											"end": 2956,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 2949,
											"end": 2950,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2942,
											"end": 2957,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 2969,
											"end": 3154,
											"name": "tag",
											"source": 7,
											"value": "35"
										},
										{
											"begin": 2969,
											"end": 3154,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3009,
											"end": 3010,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3026,
											"end": 3046,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "169"
										},
										{
											"begin": 3044,
											"end": 3045,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3026,
											"end": 3046,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "108"
										},
										{
											"begin": 3026,
											"end": 3046,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 3026,
											"end": 3046,
											"name": "tag",
											"source": 7,
											"value": "169"
										},
										{
											"begin": 3026,
											"end": 3046,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3021,
											"end": 3046,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 3021,
											"end": 3046,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 3060,
											"end": 3080,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "170"
										},
										{
											"begin": 3078,
											"end": 3079,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 3060,
											"end": 3080,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "108"
										},
										{
											"begin": 3060,
											"end": 3080,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 3060,
											"end": 3080,
											"name": "tag",
											"source": 7,
											"value": "170"
										},
										{
											"begin": 3060,
											"end": 3080,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3055,
											"end": 3080,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 3055,
											"end": 3080,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 3099,
											"end": 3100,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3089,
											"end": 3124,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "171"
										},
										{
											"begin": 3089,
											"end": 3124,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 3104,
											"end": 3122,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "172"
										},
										{
											"begin": 3104,
											"end": 3122,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "113"
										},
										{
											"begin": 3104,
											"end": 3122,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 3104,
											"end": 3122,
											"name": "tag",
											"source": 7,
											"value": "172"
										},
										{
											"begin": 3104,
											"end": 3122,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3089,
											"end": 3124,
											"name": "tag",
											"source": 7,
											"value": "171"
										},
										{
											"begin": 3089,
											"end": 3124,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3146,
											"end": 3147,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3143,
											"end": 3144,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3139,
											"end": 3148,
											"name": "DIV",
											"source": 7
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2969,
											"end": 3154,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 2969,
											"end": 3154,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2969,
											"end": 3154,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2969,
											"end": 3154,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2969,
											"end": 3154,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 3160,
											"end": 3508,
											"name": "tag",
											"source": 7,
											"value": "37"
										},
										{
											"begin": 3160,
											"end": 3508,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3200,
											"end": 3207,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3223,
											"end": 3243,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "174"
										},
										{
											"begin": 3241,
											"end": 3242,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3223,
											"end": 3243,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "108"
										},
										{
											"begin": 3223,
											"end": 3243,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 3223,
											"end": 3243,
											"name": "tag",
											"source": 7,
											"value": "174"
										},
										{
											"begin": 3223,
											"end": 3243,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3218,
											"end": 3243,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 3218,
											"end": 3243,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 3257,
											"end": 3277,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "175"
										},
										{
											"begin": 3275,
											"end": 3276,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 3257,
											"end": 3277,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "108"
										},
										{
											"begin": 3257,
											"end": 3277,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 3257,
											"end": 3277,
											"name": "tag",
											"source": 7,
											"value": "175"
										},
										{
											"begin": 3257,
											"end": 3277,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3252,
											"end": 3277,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 3252,
											"end": 3277,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 3445,
											"end": 3446,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3377,
											"end": 3443,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3373,
											"end": 3447,
											"name": "DIV",
											"source": 7
										},
										{
											"begin": 3370,
											"end": 3371,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 3367,
											"end": 3448,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 3362,
											"end": 3363,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3355,
											"end": 3364,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 3348,
											"end": 3365,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 3344,
											"end": 3449,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 3341,
											"end": 3472,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 3341,
											"end": 3472,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "176"
										},
										{
											"begin": 3341,
											"end": 3472,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 3452,
											"end": 3470,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "177"
										},
										{
											"begin": 3452,
											"end": 3470,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "114"
										},
										{
											"begin": 3452,
											"end": 3470,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 3452,
											"end": 3470,
											"name": "tag",
											"source": 7,
											"value": "177"
										},
										{
											"begin": 3452,
											"end": 3470,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3341,
											"end": 3472,
											"name": "tag",
											"source": 7,
											"value": "176"
										},
										{
											"begin": 3341,
											"end": 3472,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3500,
											"end": 3501,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3497,
											"end": 3498,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3493,
											"end": 3502,
											"name": "MUL",
											"source": 7
										},
										{
											"begin": 3482,
											"end": 3502,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3482,
											"end": 3502,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 3160,
											"end": 3508,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 3160,
											"end": 3508,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 3160,
											"end": 3508,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 3160,
											"end": 3508,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 3160,
											"end": 3508,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 3514,
											"end": 3846,
											"name": "tag",
											"source": 7,
											"value": "59"
										},
										{
											"begin": 3514,
											"end": 3846,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3635,
											"end": 3639,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3673,
											"end": 3675,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 3662,
											"end": 3671,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3658,
											"end": 3676,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3650,
											"end": 3676,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3650,
											"end": 3676,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 3686,
											"end": 3757,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "179"
										},
										{
											"begin": 3754,
											"end": 3755,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3743,
											"end": 3752,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 3739,
											"end": 3756,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3730,
											"end": 3736,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 3686,
											"end": 3757,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "110"
										},
										{
											"begin": 3686,
											"end": 3757,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 3686,
											"end": 3757,
											"name": "tag",
											"source": 7,
											"value": "179"
										},
										{
											"begin": 3686,
											"end": 3757,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3767,
											"end": 3839,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "180"
										},
										{
											"begin": 3835,
											"end": 3837,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 3824,
											"end": 3833,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 3820,
											"end": 3838,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3811,
											"end": 3817,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 3767,
											"end": 3839,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "109"
										},
										{
											"begin": 3767,
											"end": 3839,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 3767,
											"end": 3839,
											"name": "tag",
											"source": 7,
											"value": "180"
										},
										{
											"begin": 3767,
											"end": 3839,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3514,
											"end": 3846,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": 3514,
											"end": 3846,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 3514,
											"end": 3846,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 3514,
											"end": 3846,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 3514,
											"end": 3846,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 3514,
											"end": 3846,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 3852,
											"end": 3942,
											"name": "tag",
											"source": 7,
											"value": "115"
										},
										{
											"begin": 3852,
											"end": 3942,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3886,
											"end": 3893,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3929,
											"end": 3934,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3922,
											"end": 3935,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 3915,
											"end": 3936,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 3904,
											"end": 3936,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3904,
											"end": 3936,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 3852,
											"end": 3942,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 3852,
											"end": 3942,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3852,
											"end": 3942,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 3852,
											"end": 3942,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 3948,
											"end": 4064,
											"name": "tag",
											"source": 7,
											"value": "116"
										},
										{
											"begin": 3948,
											"end": 4064,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4018,
											"end": 4039,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "183"
										},
										{
											"begin": 4033,
											"end": 4038,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 4018,
											"end": 4039,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "115"
										},
										{
											"begin": 4018,
											"end": 4039,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 4018,
											"end": 4039,
											"name": "tag",
											"source": 7,
											"value": "183"
										},
										{
											"begin": 4018,
											"end": 4039,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4011,
											"end": 4016,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 4008,
											"end": 4040,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 3998,
											"end": 4058,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "184"
										},
										{
											"begin": 3998,
											"end": 4058,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 4054,
											"end": 4055,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 4051,
											"end": 4052,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 4044,
											"end": 4056,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 3998,
											"end": 4058,
											"name": "tag",
											"source": 7,
											"value": "184"
										},
										{
											"begin": 3998,
											"end": 4058,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3948,
											"end": 4064,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 3948,
											"end": 4064,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 4070,
											"end": 4207,
											"name": "tag",
											"source": 7,
											"value": "117"
										},
										{
											"begin": 4070,
											"end": 4207,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4124,
											"end": 4129,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 4155,
											"end": 4161,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 4149,
											"end": 4162,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 4140,
											"end": 4162,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4140,
											"end": 4162,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4171,
											"end": 4201,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "186"
										},
										{
											"begin": 4195,
											"end": 4200,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 4171,
											"end": 4201,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "116"
										},
										{
											"begin": 4171,
											"end": 4201,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 4171,
											"end": 4201,
											"name": "tag",
											"source": 7,
											"value": "186"
										},
										{
											"begin": 4171,
											"end": 4201,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4070,
											"end": 4207,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 4070,
											"end": 4207,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 4070,
											"end": 4207,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4070,
											"end": 4207,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4070,
											"end": 4207,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 4213,
											"end": 4558,
											"name": "tag",
											"source": 7,
											"value": "66"
										},
										{
											"begin": 4213,
											"end": 4558,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4280,
											"end": 4286,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 4329,
											"end": 4331,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 4317,
											"end": 4326,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 4308,
											"end": 4315,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 4304,
											"end": 4327,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 4300,
											"end": 4332,
											"name": "SLT",
											"source": 7
										},
										{
											"begin": 4297,
											"end": 4416,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 4297,
											"end": 4416,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "188"
										},
										{
											"begin": 4297,
											"end": 4416,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 4335,
											"end": 4414,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "189"
										},
										{
											"begin": 4335,
											"end": 4414,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "102"
										},
										{
											"begin": 4335,
											"end": 4414,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 4335,
											"end": 4414,
											"name": "tag",
											"source": 7,
											"value": "189"
										},
										{
											"begin": 4335,
											"end": 4414,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4297,
											"end": 4416,
											"name": "tag",
											"source": 7,
											"value": "188"
										},
										{
											"begin": 4297,
											"end": 4416,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4455,
											"end": 4456,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 4480,
											"end": 4541,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "190"
										},
										{
											"begin": 4533,
											"end": 4540,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 4524,
											"end": 4530,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 4513,
											"end": 4522,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 4509,
											"end": 4531,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 4480,
											"end": 4541,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "117"
										},
										{
											"begin": 4480,
											"end": 4541,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 4480,
											"end": 4541,
											"name": "tag",
											"source": 7,
											"value": "190"
										},
										{
											"begin": 4480,
											"end": 4541,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4470,
											"end": 4541,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 4470,
											"end": 4541,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4426,
											"end": 4551,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4213,
											"end": 4558,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 4213,
											"end": 4558,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 4213,
											"end": 4558,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4213,
											"end": 4558,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4213,
											"end": 4558,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 4564,
											"end": 4733,
											"name": "tag",
											"source": 7,
											"value": "118"
										},
										{
											"begin": 4564,
											"end": 4733,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4648,
											"end": 4659,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 4682,
											"end": 4688,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 4677,
											"end": 4680,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 4670,
											"end": 4689,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4722,
											"end": 4726,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 4717,
											"end": 4720,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 4713,
											"end": 4727,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 4698,
											"end": 4727,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4698,
											"end": 4727,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4564,
											"end": 4733,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 4564,
											"end": 4733,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 4564,
											"end": 4733,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4564,
											"end": 4733,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4564,
											"end": 4733,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 4739,
											"end": 4968,
											"name": "tag",
											"source": 7,
											"value": "119"
										},
										{
											"begin": 4739,
											"end": 4968,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4879,
											"end": 4913,
											"name": "PUSH",
											"source": 7,
											"value": "5361666545524332303A204552433230206F7065726174696F6E20646964206E"
										},
										{
											"begin": 4875,
											"end": 4876,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 4867,
											"end": 4873,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 4863,
											"end": 4877,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 4856,
											"end": 4914,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4948,
											"end": 4960,
											"name": "PUSH",
											"source": 7,
											"value": "6F74207375636365656400000000000000000000000000000000000000000000"
										},
										{
											"begin": 4943,
											"end": 4945,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 4935,
											"end": 4941,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 4931,
											"end": 4946,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 4924,
											"end": 4961,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4739,
											"end": 4968,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4739,
											"end": 4968,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 4974,
											"end": 5340,
											"name": "tag",
											"source": 7,
											"value": "120"
										},
										{
											"begin": 4974,
											"end": 5340,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5116,
											"end": 5119,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 5137,
											"end": 5204,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "194"
										},
										{
											"begin": 5201,
											"end": 5203,
											"name": "PUSH",
											"source": 7,
											"value": "2A"
										},
										{
											"begin": 5196,
											"end": 5199,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 5137,
											"end": 5204,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "118"
										},
										{
											"begin": 5137,
											"end": 5204,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 5137,
											"end": 5204,
											"name": "tag",
											"source": 7,
											"value": "194"
										},
										{
											"begin": 5137,
											"end": 5204,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5130,
											"end": 5204,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 5130,
											"end": 5204,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5213,
											"end": 5306,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "195"
										},
										{
											"begin": 5302,
											"end": 5305,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 5213,
											"end": 5306,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "119"
										},
										{
											"begin": 5213,
											"end": 5306,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 5213,
											"end": 5306,
											"name": "tag",
											"source": 7,
											"value": "195"
										},
										{
											"begin": 5213,
											"end": 5306,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5331,
											"end": 5333,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 5326,
											"end": 5329,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 5322,
											"end": 5334,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5315,
											"end": 5334,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5315,
											"end": 5334,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4974,
											"end": 5340,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 4974,
											"end": 5340,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4974,
											"end": 5340,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4974,
											"end": 5340,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 5346,
											"end": 5765,
											"name": "tag",
											"source": 7,
											"value": "69"
										},
										{
											"begin": 5346,
											"end": 5765,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5512,
											"end": 5516,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 5550,
											"end": 5552,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 5539,
											"end": 5548,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 5535,
											"end": 5553,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5527,
											"end": 5553,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5527,
											"end": 5553,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5599,
											"end": 5608,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5593,
											"end": 5597,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5589,
											"end": 5609,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 5585,
											"end": 5586,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 5574,
											"end": 5583,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 5570,
											"end": 5587,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5563,
											"end": 5610,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 5627,
											"end": 5758,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "197"
										},
										{
											"begin": 5753,
											"end": 5757,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5627,
											"end": 5758,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "120"
										},
										{
											"begin": 5627,
											"end": 5758,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 5627,
											"end": 5758,
											"name": "tag",
											"source": 7,
											"value": "197"
										},
										{
											"begin": 5627,
											"end": 5758,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5619,
											"end": 5758,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5619,
											"end": 5758,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5346,
											"end": 5765,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 5346,
											"end": 5765,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5346,
											"end": 5765,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5346,
											"end": 5765,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 5771,
											"end": 5996,
											"name": "tag",
											"source": 7,
											"value": "121"
										},
										{
											"begin": 5771,
											"end": 5996,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5911,
											"end": 5945,
											"name": "PUSH",
											"source": 7,
											"value": "416464726573733A20696E73756666696369656E742062616C616E636520666F"
										},
										{
											"begin": 5907,
											"end": 5908,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 5899,
											"end": 5905,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 5895,
											"end": 5909,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5888,
											"end": 5946,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 5980,
											"end": 5988,
											"name": "PUSH",
											"source": 7,
											"value": "722063616C6C0000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 5975,
											"end": 5977,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 5967,
											"end": 5973,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 5963,
											"end": 5978,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5956,
											"end": 5989,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 5771,
											"end": 5996,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5771,
											"end": 5996,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 6002,
											"end": 6368,
											"name": "tag",
											"source": 7,
											"value": "122"
										},
										{
											"begin": 6002,
											"end": 6368,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 6144,
											"end": 6147,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 6165,
											"end": 6232,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "200"
										},
										{
											"begin": 6229,
											"end": 6231,
											"name": "PUSH",
											"source": 7,
											"value": "26"
										},
										{
											"begin": 6224,
											"end": 6227,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 6165,
											"end": 6232,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "118"
										},
										{
											"begin": 6165,
											"end": 6232,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 6165,
											"end": 6232,
											"name": "tag",
											"source": 7,
											"value": "200"
										},
										{
											"begin": 6165,
											"end": 6232,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 6158,
											"end": 6232,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 6158,
											"end": 6232,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 6241,
											"end": 6334,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "201"
										},
										{
											"begin": 6330,
											"end": 6333,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 6241,
											"end": 6334,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "121"
										},
										{
											"begin": 6241,
											"end": 6334,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 6241,
											"end": 6334,
											"name": "tag",
											"source": 7,
											"value": "201"
										},
										{
											"begin": 6241,
											"end": 6334,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 6359,
											"end": 6361,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 6354,
											"end": 6357,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 6350,
											"end": 6362,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6343,
											"end": 6362,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 6343,
											"end": 6362,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 6002,
											"end": 6368,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 6002,
											"end": 6368,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 6002,
											"end": 6368,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 6002,
											"end": 6368,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 6374,
											"end": 6793,
											"name": "tag",
											"source": 7,
											"value": "76"
										},
										{
											"begin": 6374,
											"end": 6793,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 6540,
											"end": 6544,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 6578,
											"end": 6580,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 6567,
											"end": 6576,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 6563,
											"end": 6581,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6555,
											"end": 6581,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 6555,
											"end": 6581,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 6627,
											"end": 6636,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 6621,
											"end": 6625,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 6617,
											"end": 6637,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 6613,
											"end": 6614,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 6602,
											"end": 6611,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 6598,
											"end": 6615,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6591,
											"end": 6638,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6655,
											"end": 6786,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "203"
										},
										{
											"begin": 6781,
											"end": 6785,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 6655,
											"end": 6786,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "122"
										},
										{
											"begin": 6655,
											"end": 6786,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 6655,
											"end": 6786,
											"name": "tag",
											"source": 7,
											"value": "203"
										},
										{
											"begin": 6655,
											"end": 6786,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 6647,
											"end": 6786,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 6647,
											"end": 6786,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 6374,
											"end": 6793,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 6374,
											"end": 6793,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 6374,
											"end": 6793,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 6374,
											"end": 6793,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 6799,
											"end": 6897,
											"name": "tag",
											"source": 7,
											"value": "123"
										},
										{
											"begin": 6799,
											"end": 6897,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 6850,
											"end": 6856,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 6884,
											"end": 6889,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 6878,
											"end": 6890,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 6868,
											"end": 6890,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 6868,
											"end": 6890,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 6799,
											"end": 6897,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 6799,
											"end": 6897,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 6799,
											"end": 6897,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 6799,
											"end": 6897,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 6903,
											"end": 7050,
											"name": "tag",
											"source": 7,
											"value": "124"
										},
										{
											"begin": 6903,
											"end": 7050,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7004,
											"end": 7015,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 7041,
											"end": 7044,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 7026,
											"end": 7044,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 7026,
											"end": 7044,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 6903,
											"end": 7050,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 6903,
											"end": 7050,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 6903,
											"end": 7050,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 6903,
											"end": 7050,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 6903,
											"end": 7050,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 7056,
											"end": 7363,
											"name": "tag",
											"source": 7,
											"value": "125"
										},
										{
											"begin": 7056,
											"end": 7363,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7124,
											"end": 7125,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 7134,
											"end": 7247,
											"name": "tag",
											"source": 7,
											"value": "207"
										},
										{
											"begin": 7134,
											"end": 7247,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7148,
											"end": 7154,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 7145,
											"end": 7146,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 7142,
											"end": 7155,
											"name": "LT",
											"source": 7
										},
										{
											"begin": 7134,
											"end": 7247,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 7134,
											"end": 7247,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "209"
										},
										{
											"begin": 7134,
											"end": 7247,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 7233,
											"end": 7234,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 7228,
											"end": 7231,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 7224,
											"end": 7235,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 7218,
											"end": 7236,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 7214,
											"end": 7215,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 7209,
											"end": 7212,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 7205,
											"end": 7216,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 7198,
											"end": 7237,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 7170,
											"end": 7172,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 7167,
											"end": 7168,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 7163,
											"end": 7173,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 7158,
											"end": 7173,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 7158,
											"end": 7173,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 7134,
											"end": 7247,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "207"
										},
										{
											"begin": 7134,
											"end": 7247,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 7134,
											"end": 7247,
											"name": "tag",
											"source": 7,
											"value": "209"
										},
										{
											"begin": 7134,
											"end": 7247,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7265,
											"end": 7271,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 7262,
											"end": 7263,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 7259,
											"end": 7272,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 7256,
											"end": 7357,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 7256,
											"end": 7357,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "210"
										},
										{
											"begin": 7256,
											"end": 7357,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 7345,
											"end": 7346,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 7336,
											"end": 7342,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 7331,
											"end": 7334,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 7327,
											"end": 7343,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 7320,
											"end": 7347,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 7256,
											"end": 7357,
											"name": "tag",
											"source": 7,
											"value": "210"
										},
										{
											"begin": 7256,
											"end": 7357,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7105,
											"end": 7363,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 7056,
											"end": 7363,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 7056,
											"end": 7363,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 7056,
											"end": 7363,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 7056,
											"end": 7363,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 7369,
											"end": 7742,
											"name": "tag",
											"source": 7,
											"value": "126"
										},
										{
											"begin": 7369,
											"end": 7742,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7473,
											"end": 7476,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 7501,
											"end": 7539,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "212"
										},
										{
											"begin": 7533,
											"end": 7538,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 7501,
											"end": 7539,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "123"
										},
										{
											"begin": 7501,
											"end": 7539,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 7501,
											"end": 7539,
											"name": "tag",
											"source": 7,
											"value": "212"
										},
										{
											"begin": 7501,
											"end": 7539,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7555,
											"end": 7643,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "213"
										},
										{
											"begin": 7636,
											"end": 7642,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 7631,
											"end": 7634,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 7555,
											"end": 7643,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "124"
										},
										{
											"begin": 7555,
											"end": 7643,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 7555,
											"end": 7643,
											"name": "tag",
											"source": 7,
											"value": "213"
										},
										{
											"begin": 7555,
											"end": 7643,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7548,
											"end": 7643,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": 7548,
											"end": 7643,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 7652,
											"end": 7704,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "214"
										},
										{
											"begin": 7697,
											"end": 7703,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 7692,
											"end": 7695,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 7685,
											"end": 7689,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 7678,
											"end": 7683,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 7674,
											"end": 7690,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 7652,
											"end": 7704,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "125"
										},
										{
											"begin": 7652,
											"end": 7704,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 7652,
											"end": 7704,
											"name": "tag",
											"source": 7,
											"value": "214"
										},
										{
											"begin": 7652,
											"end": 7704,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7729,
											"end": 7735,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 7724,
											"end": 7727,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 7720,
											"end": 7736,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 7713,
											"end": 7736,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 7713,
											"end": 7736,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 7477,
											"end": 7742,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 7369,
											"end": 7742,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 7369,
											"end": 7742,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 7369,
											"end": 7742,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 7369,
											"end": 7742,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 7369,
											"end": 7742,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 7748,
											"end": 8019,
											"name": "tag",
											"source": 7,
											"value": "78"
										},
										{
											"begin": 7748,
											"end": 8019,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7878,
											"end": 7881,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 7900,
											"end": 7993,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "216"
										},
										{
											"begin": 7989,
											"end": 7992,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 7980,
											"end": 7986,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 7900,
											"end": 7993,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "126"
										},
										{
											"begin": 7900,
											"end": 7993,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 7900,
											"end": 7993,
											"name": "tag",
											"source": 7,
											"value": "216"
										},
										{
											"begin": 7900,
											"end": 7993,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7893,
											"end": 7993,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 7893,
											"end": 7993,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 8010,
											"end": 8013,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 8003,
											"end": 8013,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 8003,
											"end": 8013,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 7748,
											"end": 8019,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 7748,
											"end": 8019,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 7748,
											"end": 8019,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 7748,
											"end": 8019,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 7748,
											"end": 8019,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 8025,
											"end": 8204,
											"name": "tag",
											"source": 7,
											"value": "127"
										},
										{
											"begin": 8025,
											"end": 8204,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 8165,
											"end": 8196,
											"name": "PUSH",
											"source": 7,
											"value": "416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000"
										},
										{
											"begin": 8161,
											"end": 8162,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 8153,
											"end": 8159,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 8149,
											"end": 8163,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 8142,
											"end": 8197,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 8025,
											"end": 8204,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 8025,
											"end": 8204,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 8210,
											"end": 8576,
											"name": "tag",
											"source": 7,
											"value": "128"
										},
										{
											"begin": 8210,
											"end": 8576,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 8352,
											"end": 8355,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 8373,
											"end": 8440,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "219"
										},
										{
											"begin": 8437,
											"end": 8439,
											"name": "PUSH",
											"source": 7,
											"value": "1D"
										},
										{
											"begin": 8432,
											"end": 8435,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 8373,
											"end": 8440,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "118"
										},
										{
											"begin": 8373,
											"end": 8440,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 8373,
											"end": 8440,
											"name": "tag",
											"source": 7,
											"value": "219"
										},
										{
											"begin": 8373,
											"end": 8440,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 8366,
											"end": 8440,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 8366,
											"end": 8440,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 8449,
											"end": 8542,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "220"
										},
										{
											"begin": 8538,
											"end": 8541,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 8449,
											"end": 8542,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "127"
										},
										{
											"begin": 8449,
											"end": 8542,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 8449,
											"end": 8542,
											"name": "tag",
											"source": 7,
											"value": "220"
										},
										{
											"begin": 8449,
											"end": 8542,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 8567,
											"end": 8569,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 8562,
											"end": 8565,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 8558,
											"end": 8570,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 8551,
											"end": 8570,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 8551,
											"end": 8570,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 8210,
											"end": 8576,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 8210,
											"end": 8576,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 8210,
											"end": 8576,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 8210,
											"end": 8576,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 8582,
											"end": 9001,
											"name": "tag",
											"source": 7,
											"value": "91"
										},
										{
											"begin": 8582,
											"end": 9001,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 8748,
											"end": 8752,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 8786,
											"end": 8788,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 8775,
											"end": 8784,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 8771,
											"end": 8789,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 8763,
											"end": 8789,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 8763,
											"end": 8789,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 8835,
											"end": 8844,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 8829,
											"end": 8833,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 8825,
											"end": 8845,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 8821,
											"end": 8822,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 8810,
											"end": 8819,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 8806,
											"end": 8823,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 8799,
											"end": 8846,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 8863,
											"end": 8994,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "222"
										},
										{
											"begin": 8989,
											"end": 8993,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 8863,
											"end": 8994,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "128"
										},
										{
											"begin": 8863,
											"end": 8994,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 8863,
											"end": 8994,
											"name": "tag",
											"source": 7,
											"value": "222"
										},
										{
											"begin": 8863,
											"end": 8994,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 8855,
											"end": 8994,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 8855,
											"end": 8994,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 8582,
											"end": 9001,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 8582,
											"end": 9001,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 8582,
											"end": 9001,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 8582,
											"end": 9001,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 9007,
											"end": 9106,
											"name": "tag",
											"source": 7,
											"value": "129"
										},
										{
											"begin": 9007,
											"end": 9106,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 9059,
											"end": 9065,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 9093,
											"end": 9098,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 9087,
											"end": 9099,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 9077,
											"end": 9099,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 9077,
											"end": 9099,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 9007,
											"end": 9106,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 9007,
											"end": 9106,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 9007,
											"end": 9106,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 9007,
											"end": 9106,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 9112,
											"end": 9214,
											"name": "tag",
											"source": 7,
											"value": "130"
										},
										{
											"begin": 9112,
											"end": 9214,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 9153,
											"end": 9159,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 9204,
											"end": 9206,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 9200,
											"end": 9207,
											"name": "NOT",
											"source": 7
										},
										{
											"begin": 9195,
											"end": 9197,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 9188,
											"end": 9193,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 9184,
											"end": 9198,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 9180,
											"end": 9208,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 9170,
											"end": 9208,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 9170,
											"end": 9208,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 9112,
											"end": 9214,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 9112,
											"end": 9214,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 9112,
											"end": 9214,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 9112,
											"end": 9214,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 9220,
											"end": 9584,
											"name": "tag",
											"source": 7,
											"value": "131"
										},
										{
											"begin": 9220,
											"end": 9584,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 9308,
											"end": 9311,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 9336,
											"end": 9375,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "226"
										},
										{
											"begin": 9369,
											"end": 9374,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 9336,
											"end": 9375,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "129"
										},
										{
											"begin": 9336,
											"end": 9375,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 9336,
											"end": 9375,
											"name": "tag",
											"source": 7,
											"value": "226"
										},
										{
											"begin": 9336,
											"end": 9375,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 9391,
											"end": 9462,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "227"
										},
										{
											"begin": 9455,
											"end": 9461,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 9450,
											"end": 9453,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 9391,
											"end": 9462,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "118"
										},
										{
											"begin": 9391,
											"end": 9462,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 9391,
											"end": 9462,
											"name": "tag",
											"source": 7,
											"value": "227"
										},
										{
											"begin": 9391,
											"end": 9462,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 9384,
											"end": 9462,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": 9384,
											"end": 9462,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 9471,
											"end": 9523,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "228"
										},
										{
											"begin": 9516,
											"end": 9522,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 9511,
											"end": 9514,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 9504,
											"end": 9508,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 9497,
											"end": 9502,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 9493,
											"end": 9509,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 9471,
											"end": 9523,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "125"
										},
										{
											"begin": 9471,
											"end": 9523,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 9471,
											"end": 9523,
											"name": "tag",
											"source": 7,
											"value": "228"
										},
										{
											"begin": 9471,
											"end": 9523,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 9548,
											"end": 9577,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "229"
										},
										{
											"begin": 9570,
											"end": 9576,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 9548,
											"end": 9577,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "130"
										},
										{
											"begin": 9548,
											"end": 9577,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 9548,
											"end": 9577,
											"name": "tag",
											"source": 7,
											"value": "229"
										},
										{
											"begin": 9548,
											"end": 9577,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 9543,
											"end": 9546,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 9539,
											"end": 9578,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 9532,
											"end": 9578,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 9532,
											"end": 9578,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 9312,
											"end": 9584,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 9220,
											"end": 9584,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 9220,
											"end": 9584,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 9220,
											"end": 9584,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 9220,
											"end": 9584,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 9220,
											"end": 9584,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 9590,
											"end": 9903,
											"name": "tag",
											"source": 7,
											"value": "100"
										},
										{
											"begin": 9590,
											"end": 9903,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 9703,
											"end": 9707,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 9741,
											"end": 9743,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 9730,
											"end": 9739,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 9726,
											"end": 9744,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 9718,
											"end": 9744,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 9718,
											"end": 9744,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 9790,
											"end": 9799,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 9784,
											"end": 9788,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 9780,
											"end": 9800,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 9776,
											"end": 9777,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 9765,
											"end": 9774,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 9761,
											"end": 9778,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 9754,
											"end": 9801,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 9818,
											"end": 9896,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "231"
										},
										{
											"begin": 9891,
											"end": 9895,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 9882,
											"end": 9888,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 9818,
											"end": 9896,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "131"
										},
										{
											"begin": 9818,
											"end": 9896,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 9818,
											"end": 9896,
											"name": "tag",
											"source": 7,
											"value": "231"
										},
										{
											"begin": 9818,
											"end": 9896,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 9810,
											"end": 9896,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 9810,
											"end": 9896,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 9590,
											"end": 9903,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 9590,
											"end": 9903,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 9590,
											"end": 9903,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 9590,
											"end": 9903,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 9590,
											"end": 9903,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"getTFERC20Amount(address)": "af32b7a1",
							"getTotal()": "775a25e3",
							"profit(address)": "02550e4d",
							"withdrawReward(address)": "b86e321c"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_TFAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyWithdraw\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailTransfer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoTFERC20\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getTFERC20Amount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stableAddress\",\"type\":\"address\"}],\"name\":\"profit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"userEarn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stableAddress\",\"type\":\"address\"}],\"name\":\"withdrawReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RewradPool.sol\":\"RewardPool\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/RewradPool.sol\":{\"keccak256\":\"0xc978e605c1018b6ee29701cb8dab7b625620da11d772330c196e48d15a6375f5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://76c2462a1de7c91a96c5c412d86d3cd9f626faae508fc681b065418f1873fc80\",\"dweb:/ipfs/QmTnrZe2VrPyoLMwwVR9TM72D5nNvzNxZPCQFfGCFtfvPx\"]},\"interfaces/IERC20.sol\":{\"keccak256\":\"0xa426add89e9b4785ddeeb07b4d9352b57de8b4cb314c8cb8f0d5898938bd8de9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://09852a830ad29d33cfdf74e7035853c68e43e1a8c242b25db9d656a074a54e6d\",\"dweb:/ipfs/QmeRSfQwWr3vyP2uJxnjybtPYLMiD17E51d4eMhXQh93R1\"]},\"interfaces/IERC20Metadata.sol\":{\"keccak256\":\"0x5b654d5a45e51c586ac1f613ecb3ec967682286b61856b5d2d93fe08b68518da\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://95ef7f3c1eb8bae84eb34bcfe885533457236ed182ff80fbfad77ba84c8e21a1\",\"dweb:/ipfs/QmWFdeBBHQxeHLE6SHDgZBtUqvTTgeZ19sB9yKzpm4o3o8\"]},\"interfaces/IERC20Permit.sol\":{\"keccak256\":\"0xc51a927b9d9ff62cf4c237f7f197827b90c460786c855c527007c02a94f23154\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d1107bf21355e8518d9fdcf1aa7052de7e5fc6d867d86d87b61b43667813cc1d\",\"dweb:/ipfs/QmZG3AQa61MLFWmovNyuzv3iCBPnFHGV7E7CimxLwpAwKt\"]},\"interfaces/IRewardPool.sol\":{\"keccak256\":\"0x2b90fe4cc09397d6e31f5cfd6d30619705ada81303c5c27e5752bb9013b75da8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7e65c43b9d8a689ae5b063d4377710d4319e969e08a945e5e0b693d1d3c69b1e\",\"dweb:/ipfs/QmUjdHeinaYRX3twjeLMve2FmVaxzAj7fMH12t6L8QWJmj\"]},\"libraries/Address.sol\":{\"keccak256\":\"0x0f4169fea1817f1228f6a2db5e764e2a86f357a9f42f83de1f157449bca0f1ad\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://244a3f17ec48680bfaadacf724e5b12030636dc8b3e59f01de1cf206f0802ad7\",\"dweb:/ipfs/QmZXNxyUx2vm7LjcwtNhwYyKgqVxmbMAM3cG5bricBmL1K\"]},\"libraries/SafeERC20.sol\":{\"keccak256\":\"0xe74183ce288c892718941897cf193167013ef062470ea7fc7f0e74c23521cdd1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://75be313f96388535ff46fc29a55ed358e24e887c5706ea595ef2ed95c1d58e03\",\"dweb:/ipfs/QmReMXbvdgk5wZtn3mrjsDGLKFzfbBxG6HJBELLsaAKXkS\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 12,
								"contract": "contracts/RewradPool.sol:RewardPool",
								"label": "TFAddress",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							},
							{
								"astId": 26,
								"contract": "contracts/RewradPool.sol:RewardPool",
								"label": "userIfWithdraw",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_address,t_bool)"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_mapping(t_address,t_bool)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => bool)",
								"numberOfBytes": "32",
								"value": "t_bool"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"interfaces/IERC20.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 standard as defined in the EIP.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"interfaces/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"interfaces/IERC20.sol\":{\"keccak256\":\"0xa426add89e9b4785ddeeb07b4d9352b57de8b4cb314c8cb8f0d5898938bd8de9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://09852a830ad29d33cfdf74e7035853c68e43e1a8c242b25db9d656a074a54e6d\",\"dweb:/ipfs/QmeRSfQwWr3vyP2uJxnjybtPYLMiD17E51d4eMhXQh93R1\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"interfaces/IERC20Metadata.sol": {
				"IERC20Metadata": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface for the optional metadata functions from the ERC20 standard. _Available since v4.1._",
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"decimals()": {
								"details": "Returns the decimals places of the token."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the optional metadata functions from the ERC20 standard. _Available since v4.1._\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"decimals()\":{\"details\":\"Returns the decimals places of the token.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"interfaces/IERC20Metadata.sol\":\"IERC20Metadata\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"interfaces/IERC20.sol\":{\"keccak256\":\"0xa426add89e9b4785ddeeb07b4d9352b57de8b4cb314c8cb8f0d5898938bd8de9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://09852a830ad29d33cfdf74e7035853c68e43e1a8c242b25db9d656a074a54e6d\",\"dweb:/ipfs/QmeRSfQwWr3vyP2uJxnjybtPYLMiD17E51d4eMhXQh93R1\"]},\"interfaces/IERC20Metadata.sol\":{\"keccak256\":\"0x5b654d5a45e51c586ac1f613ecb3ec967682286b61856b5d2d93fe08b68518da\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://95ef7f3c1eb8bae84eb34bcfe885533457236ed182ff80fbfad77ba84c8e21a1\",\"dweb:/ipfs/QmWFdeBBHQxeHLE6SHDgZBtUqvTTgeZ19sB9yKzpm4o3o8\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"interfaces/IERC20Permit.sol": {
				"IERC20Permit": {
					"abi": [
						{
							"inputs": [],
							"name": "DOMAIN_SEPARATOR",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "nonces",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "permit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all. ==== Security Considerations There are two important considerations concerning the use of `permit`. The first is that a valid permit signature expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be considered as an intention to spend the allowance in any specific way. The second is that because permits have built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be generally recommended is: ```solidity function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}     doThing(..., value); } function doThing(..., uint256 value) public {     token.safeTransferFrom(msg.sender, address(this), value);     ... } ``` Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also {SafeERC20-safeTransferFrom}). Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so contracts should have entry points that don't rely on permit.",
						"kind": "dev",
						"methods": {
							"DOMAIN_SEPARATOR()": {
								"details": "Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
							},
							"nonces(address)": {
								"details": "Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."
							},
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"DOMAIN_SEPARATOR()": "3644e515",
							"nonces(address)": "7ecebe00",
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "d505accf"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all. ==== Security Considerations There are two important considerations concerning the use of `permit`. The first is that a valid permit signature expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be considered as an intention to spend the allowance in any specific way. The second is that because permits have built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be generally recommended is: ```solidity function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}     doThing(..., value); } function doThing(..., uint256 value) public {     token.safeTransferFrom(msg.sender, address(this), value);     ... } ``` Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also {SafeERC20-safeTransferFrom}). Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so contracts should have entry points that don't rely on permit.\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"interfaces/IERC20Permit.sol\":\"IERC20Permit\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"interfaces/IERC20Permit.sol\":{\"keccak256\":\"0xc51a927b9d9ff62cf4c237f7f197827b90c460786c855c527007c02a94f23154\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d1107bf21355e8518d9fdcf1aa7052de7e5fc6d867d86d87b61b43667813cc1d\",\"dweb:/ipfs/QmZG3AQa61MLFWmovNyuzv3iCBPnFHGV7E7CimxLwpAwKt\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"interfaces/IRewardPool.sol": {
				"IRewardPool": {
					"abi": [
						{
							"inputs": [],
							"name": "AlreadyWithdraw",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "FailTransfer",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "NoTFERC20",
							"type": "error"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AlreadyWithdraw\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailTransfer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoTFERC20\",\"type\":\"error\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"interfaces/IRewardPool.sol\":\"IRewardPool\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"interfaces/IRewardPool.sol\":{\"keccak256\":\"0x2b90fe4cc09397d6e31f5cfd6d30619705ada81303c5c27e5752bb9013b75da8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7e65c43b9d8a689ae5b063d4377710d4319e969e08a945e5e0b693d1d3c69b1e\",\"dweb:/ipfs/QmUjdHeinaYRX3twjeLMve2FmVaxzAj7fMH12t6L8QWJmj\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"libraries/Address.sol": {
				"Address": {
					"abi": [],
					"devdoc": {
						"details": "Collection of functions related to the address type",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"libraries/Address.sol\":203:9607  library Address {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"libraries/Address.sol\":203:9607  library Address {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa264697066735822122062904bdf8e832dde7d8c0407890cb164073063eaf4608ae345276dba0354bc8464736f6c63430008090033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122062904bdf8e832dde7d8c0407890cb164073063eaf4608ae345276dba0354bc8464736f6c63430008090033",
							"opcodes": "PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH3 0x904BDF DUP15 DUP4 0x2D 0xDE PUSH30 0x8C0407890CB164073063EAF4608AE345276DBA0354BC8464736F6C634300 ADDMOD MULMOD STOP CALLER ",
							"sourceMap": "203:9404:5:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122062904bdf8e832dde7d8c0407890cb164073063eaf4608ae345276dba0354bc8464736f6c63430008090033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH3 0x904BDF DUP15 DUP4 0x2D 0xDE PUSH30 0x8C0407890CB164073063EAF4608AE345276DBA0354BC8464736F6C634300 ADDMOD MULMOD STOP CALLER ",
							"sourceMap": "203:9404:5:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"_revert(bytes memory,string memory)": "infinite",
								"functionCall(address,bytes memory)": "infinite",
								"functionCall(address,bytes memory,string memory)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256,string memory)": "infinite",
								"functionDelegateCall(address,bytes memory)": "infinite",
								"functionDelegateCall(address,bytes memory,string memory)": "infinite",
								"functionStaticCall(address,bytes memory)": "infinite",
								"functionStaticCall(address,bytes memory,string memory)": "infinite",
								"isContract(address)": "infinite",
								"sendValue(address payable,uint256)": "infinite",
								"verifyCallResult(bool,bytes memory,string memory)": "infinite",
								"verifyCallResultFromTarget(address,bool,bytes memory,string memory)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 203,
									"end": 9607,
									"name": "PUSH #[$]",
									"source": 5,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 203,
									"end": 9607,
									"name": "PUSH [$]",
									"source": 5,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 203,
									"end": 9607,
									"name": "PUSH",
									"source": 5,
									"value": "B"
								},
								{
									"begin": 203,
									"end": 9607,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 203,
									"end": 9607,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 203,
									"end": 9607,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 203,
									"end": 9607,
									"name": "CODECOPY",
									"source": 5
								},
								{
									"begin": 203,
									"end": 9607,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 203,
									"end": 9607,
									"name": "MLOAD",
									"source": 5
								},
								{
									"begin": 203,
									"end": 9607,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 203,
									"end": 9607,
									"name": "BYTE",
									"source": 5
								},
								{
									"begin": 203,
									"end": 9607,
									"name": "PUSH",
									"source": 5,
									"value": "73"
								},
								{
									"begin": 203,
									"end": 9607,
									"name": "EQ",
									"source": 5
								},
								{
									"begin": 203,
									"end": 9607,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "1"
								},
								{
									"begin": 203,
									"end": 9607,
									"name": "JUMPI",
									"source": 5
								},
								{
									"begin": 203,
									"end": 9607,
									"name": "PUSH",
									"source": 5,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 203,
									"end": 9607,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 203,
									"end": 9607,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 203,
									"end": 9607,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 203,
									"end": 9607,
									"name": "PUSH",
									"source": 5,
									"value": "4"
								},
								{
									"begin": 203,
									"end": 9607,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 203,
									"end": 9607,
									"name": "PUSH",
									"source": 5,
									"value": "24"
								},
								{
									"begin": 203,
									"end": 9607,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 203,
									"end": 9607,
									"name": "REVERT",
									"source": 5
								},
								{
									"begin": 203,
									"end": 9607,
									"name": "tag",
									"source": 5,
									"value": "1"
								},
								{
									"begin": 203,
									"end": 9607,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 203,
									"end": 9607,
									"name": "ADDRESS",
									"source": 5
								},
								{
									"begin": 203,
									"end": 9607,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 203,
									"end": 9607,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 203,
									"end": 9607,
									"name": "PUSH",
									"source": 5,
									"value": "73"
								},
								{
									"begin": 203,
									"end": 9607,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 203,
									"end": 9607,
									"name": "MSTORE8",
									"source": 5
								},
								{
									"begin": 203,
									"end": 9607,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 203,
									"end": 9607,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 203,
									"end": 9607,
									"name": "RETURN",
									"source": 5
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122062904bdf8e832dde7d8c0407890cb164073063eaf4608ae345276dba0354bc8464736f6c63430008090033",
									".code": [
										{
											"begin": 203,
											"end": 9607,
											"name": "PUSHDEPLOYADDRESS",
											"source": 5
										},
										{
											"begin": 203,
											"end": 9607,
											"name": "ADDRESS",
											"source": 5
										},
										{
											"begin": 203,
											"end": 9607,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 203,
											"end": 9607,
											"name": "PUSH",
											"source": 5,
											"value": "80"
										},
										{
											"begin": 203,
											"end": 9607,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 203,
											"end": 9607,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 203,
											"end": 9607,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 203,
											"end": 9607,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 203,
											"end": 9607,
											"name": "REVERT",
											"source": 5
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"libraries/Address.sol\":\"Address\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"libraries/Address.sol\":{\"keccak256\":\"0x0f4169fea1817f1228f6a2db5e764e2a86f357a9f42f83de1f157449bca0f1ad\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://244a3f17ec48680bfaadacf724e5b12030636dc8b3e59f01de1cf206f0802ad7\",\"dweb:/ipfs/QmZXNxyUx2vm7LjcwtNhwYyKgqVxmbMAM3cG5bricBmL1K\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"libraries/SafeERC20.sol": {
				"SafeERC20": {
					"abi": [],
					"devdoc": {
						"details": "Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.",
						"kind": "dev",
						"methods": {},
						"title": "SafeERC20",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"libraries/SafeERC20.sol\":778:7136  library SafeERC20 {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"libraries/SafeERC20.sol\":778:7136  library SafeERC20 {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa264697066735822122049299144de7617b3c95dc5b6c5b6ea7cc5e7c3a1d3349e2d04bb7f6e8415575064736f6c63430008090033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122049299144de7617b3c95dc5b6c5b6ea7cc5e7c3a1d3349e2d04bb7f6e8415575064736f6c63430008090033",
							"opcodes": "PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x49 0x29 SWAP2 DIFFICULTY 0xDE PUSH23 0x17B3C95DC5B6C5B6EA7CC5E7C3A1D3349E2D04BB7F6E84 ISZERO JUMPI POP PUSH5 0x736F6C6343 STOP ADDMOD MULMOD STOP CALLER ",
							"sourceMap": "778:6358:6:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122049299144de7617b3c95dc5b6c5b6ea7cc5e7c3a1d3349e2d04bb7f6e8415575064736f6c63430008090033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x49 0x29 SWAP2 DIFFICULTY 0xDE PUSH23 0x17B3C95DC5B6C5B6EA7CC5E7C3A1D3349E2D04BB7F6E84 ISZERO JUMPI POP PUSH5 0x736F6C6343 STOP ADDMOD MULMOD STOP CALLER ",
							"sourceMap": "778:6358:6:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"_callOptionalReturn(contract IERC20,bytes memory)": "infinite",
								"_callOptionalReturnBool(contract IERC20,bytes memory)": "infinite",
								"forceApprove(contract IERC20,address,uint256)": "infinite",
								"safeApprove(contract IERC20,address,uint256)": "infinite",
								"safeDecreaseAllowance(contract IERC20,address,uint256)": "infinite",
								"safeIncreaseAllowance(contract IERC20,address,uint256)": "infinite",
								"safePermit(contract IERC20Permit,address,address,uint256,uint256,uint8,bytes32,bytes32)": "infinite",
								"safeTransfer(contract IERC20,address,uint256)": "infinite",
								"safeTransferFrom(contract IERC20,address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 778,
									"end": 7136,
									"name": "PUSH #[$]",
									"source": 6,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 778,
									"end": 7136,
									"name": "PUSH [$]",
									"source": 6,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 778,
									"end": 7136,
									"name": "PUSH",
									"source": 6,
									"value": "B"
								},
								{
									"begin": 778,
									"end": 7136,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 778,
									"end": 7136,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 778,
									"end": 7136,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 778,
									"end": 7136,
									"name": "CODECOPY",
									"source": 6
								},
								{
									"begin": 778,
									"end": 7136,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 778,
									"end": 7136,
									"name": "MLOAD",
									"source": 6
								},
								{
									"begin": 778,
									"end": 7136,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 778,
									"end": 7136,
									"name": "BYTE",
									"source": 6
								},
								{
									"begin": 778,
									"end": 7136,
									"name": "PUSH",
									"source": 6,
									"value": "73"
								},
								{
									"begin": 778,
									"end": 7136,
									"name": "EQ",
									"source": 6
								},
								{
									"begin": 778,
									"end": 7136,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 778,
									"end": 7136,
									"name": "JUMPI",
									"source": 6
								},
								{
									"begin": 778,
									"end": 7136,
									"name": "PUSH",
									"source": 6,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 778,
									"end": 7136,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 778,
									"end": 7136,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 778,
									"end": 7136,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 778,
									"end": 7136,
									"name": "PUSH",
									"source": 6,
									"value": "4"
								},
								{
									"begin": 778,
									"end": 7136,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 778,
									"end": 7136,
									"name": "PUSH",
									"source": 6,
									"value": "24"
								},
								{
									"begin": 778,
									"end": 7136,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 778,
									"end": 7136,
									"name": "REVERT",
									"source": 6
								},
								{
									"begin": 778,
									"end": 7136,
									"name": "tag",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 778,
									"end": 7136,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 778,
									"end": 7136,
									"name": "ADDRESS",
									"source": 6
								},
								{
									"begin": 778,
									"end": 7136,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 778,
									"end": 7136,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 778,
									"end": 7136,
									"name": "PUSH",
									"source": 6,
									"value": "73"
								},
								{
									"begin": 778,
									"end": 7136,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 778,
									"end": 7136,
									"name": "MSTORE8",
									"source": 6
								},
								{
									"begin": 778,
									"end": 7136,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 778,
									"end": 7136,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 778,
									"end": 7136,
									"name": "RETURN",
									"source": 6
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122049299144de7617b3c95dc5b6c5b6ea7cc5e7c3a1d3349e2d04bb7f6e8415575064736f6c63430008090033",
									".code": [
										{
											"begin": 778,
											"end": 7136,
											"name": "PUSHDEPLOYADDRESS",
											"source": 6
										},
										{
											"begin": 778,
											"end": 7136,
											"name": "ADDRESS",
											"source": 6
										},
										{
											"begin": 778,
											"end": 7136,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 778,
											"end": 7136,
											"name": "PUSH",
											"source": 6,
											"value": "80"
										},
										{
											"begin": 778,
											"end": 7136,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 778,
											"end": 7136,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 778,
											"end": 7136,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 778,
											"end": 7136,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 778,
											"end": 7136,
											"name": "REVERT",
											"source": 6
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"libraries/SafeERC20.sol\":\"SafeERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"interfaces/IERC20.sol\":{\"keccak256\":\"0xa426add89e9b4785ddeeb07b4d9352b57de8b4cb314c8cb8f0d5898938bd8de9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://09852a830ad29d33cfdf74e7035853c68e43e1a8c242b25db9d656a074a54e6d\",\"dweb:/ipfs/QmeRSfQwWr3vyP2uJxnjybtPYLMiD17E51d4eMhXQh93R1\"]},\"interfaces/IERC20Permit.sol\":{\"keccak256\":\"0xc51a927b9d9ff62cf4c237f7f197827b90c460786c855c527007c02a94f23154\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d1107bf21355e8518d9fdcf1aa7052de7e5fc6d867d86d87b61b43667813cc1d\",\"dweb:/ipfs/QmZG3AQa61MLFWmovNyuzv3iCBPnFHGV7E7CimxLwpAwKt\"]},\"libraries/Address.sol\":{\"keccak256\":\"0x0f4169fea1817f1228f6a2db5e764e2a86f357a9f42f83de1f157449bca0f1ad\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://244a3f17ec48680bfaadacf724e5b12030636dc8b3e59f01de1cf206f0802ad7\",\"dweb:/ipfs/QmZXNxyUx2vm7LjcwtNhwYyKgqVxmbMAM3cG5bricBmL1K\"]},\"libraries/SafeERC20.sol\":{\"keccak256\":\"0xe74183ce288c892718941897cf193167013ef062470ea7fc7f0e74c23521cdd1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://75be313f96388535ff46fc29a55ed358e24e887c5706ea595ef2ed95c1d58e03\",\"dweb:/ipfs/QmReMXbvdgk5wZtn3mrjsDGLKFzfbBxG6HJBELLsaAKXkS\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"contracts/RewradPool.sol": {
				"ast": {
					"absolutePath": "contracts/RewradPool.sol",
					"exportedSymbols": {
						"Address": [
							631
						],
						"IERC20": [
							231
						],
						"IERC20Metadata": [
							256
						],
						"IERC20Permit": [
							292
						],
						"IRewardPool": [
							301
						],
						"RewardPool": [
							153
						],
						"SafeERC20": [
							1010
						]
					},
					"id": 154,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".9"
							],
							"nodeType": "PragmaDirective",
							"src": "32:24:0"
						},
						{
							"absolutePath": "libraries/SafeERC20.sol",
							"file": "../libraries/SafeERC20.sol",
							"id": 2,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 154,
							"sourceUnit": 1011,
							"src": "58:36:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "interfaces/IERC20Metadata.sol",
							"file": "../interfaces/IERC20Metadata.sol",
							"id": 3,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 154,
							"sourceUnit": 257,
							"src": "96:42:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "interfaces/IRewardPool.sol",
							"file": "../interfaces/IRewardPool.sol",
							"id": 4,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 154,
							"sourceUnit": 302,
							"src": "140:39:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 5,
										"name": "IRewardPool",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 301,
										"src": "204:11:0"
									},
									"id": 6,
									"nodeType": "InheritanceSpecifier",
									"src": "204:11:0"
								}
							],
							"canonicalName": "RewardPool",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 153,
							"linearizedBaseContracts": [
								153,
								301
							],
							"name": "RewardPool",
							"nameLocation": "190:10:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"id": 10,
									"libraryName": {
										"id": 7,
										"name": "SafeERC20",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1010,
										"src": "228:9:0"
									},
									"nodeType": "UsingForDirective",
									"src": "222:27:0",
									"typeName": {
										"id": 9,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 8,
											"name": "IERC20",
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 231,
											"src": "242:6:0"
										},
										"referencedDeclaration": 231,
										"src": "242:6:0",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC20_$231",
											"typeString": "contract IERC20"
										}
									}
								},
								{
									"constant": false,
									"id": 12,
									"mutability": "mutable",
									"name": "TFAddress",
									"nameLocation": "271:9:0",
									"nodeType": "VariableDeclaration",
									"scope": 153,
									"src": "255:25:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 11,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "255:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 21,
										"nodeType": "Block",
										"src": "339:39:0",
										"statements": [
											{
												"expression": {
													"id": 19,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 17,
														"name": "TFAddress",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 12,
														"src": "350:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 18,
														"name": "_TFAddress",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 14,
														"src": "360:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "350:20:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 20,
												"nodeType": "ExpressionStatement",
												"src": "350:20:0"
											}
										]
									},
									"id": 22,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 15,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 14,
												"mutability": "mutable",
												"name": "_TFAddress",
												"nameLocation": "328:10:0",
												"nodeType": "VariableDeclaration",
												"scope": 22,
												"src": "320:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 13,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "320:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "319:20:0"
									},
									"returnParameters": {
										"id": 16,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "339:0:0"
									},
									"scope": 153,
									"src": "308:70:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"constant": false,
									"id": 26,
									"mutability": "mutable",
									"name": "userIfWithdraw",
									"nameLocation": "442:14:0",
									"nodeType": "VariableDeclaration",
									"scope": 153,
									"src": "412:44:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
										"typeString": "mapping(address => bool)"
									},
									"typeName": {
										"id": 25,
										"keyType": {
											"id": 23,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "420:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "412:22:0",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
											"typeString": "mapping(address => bool)"
										},
										"valueType": {
											"id": 24,
											"name": "bool",
											"nodeType": "ElementaryTypeName",
											"src": "429:4:0",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											}
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 79,
										"nodeType": "Block",
										"src": "544:418:0",
										"statements": [
											{
												"assignments": [
													32
												],
												"declarations": [
													{
														"constant": false,
														"id": 32,
														"mutability": "mutable",
														"name": "personlTFERC20Amount",
														"nameLocation": "563:20:0",
														"nodeType": "VariableDeclaration",
														"scope": 79,
														"src": "555:28:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 31,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "555:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 37,
												"initialValue": {
													"arguments": [
														{
															"expression": {
																"id": 34,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "601:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 35,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "601:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 33,
														"name": "getTFERC20Amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 152,
														"src": "584:16:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view returns (uint256)"
														}
													},
													"id": 36,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "584:28:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "555:57:0"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 40,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 38,
														"name": "personlTFERC20Amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 32,
														"src": "626:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 39,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "647:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "626:22:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 45,
												"nodeType": "IfStatement",
												"src": "623:47:0",
												"trueBody": {
													"id": 44,
													"nodeType": "Block",
													"src": "649:21:0",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 41,
																	"name": "NoTFERC20",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 300,
																	"src": "657:9:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 42,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "657:11:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 43,
															"nodeType": "RevertStatement",
															"src": "650:18:0"
														}
													]
												}
											},
											{
												"assignments": [
													47
												],
												"declarations": [
													{
														"constant": false,
														"id": 47,
														"mutability": "mutable",
														"name": "userProfit",
														"nameLocation": "688:10:0",
														"nodeType": "VariableDeclaration",
														"scope": 79,
														"src": "680:18:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 46,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "680:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 51,
												"initialValue": {
													"arguments": [
														{
															"id": 49,
															"name": "stableAddress",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 28,
															"src": "706:13:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 48,
														"name": "profit",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 125,
														"src": "699:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view returns (uint256)"
														}
													},
													"id": 50,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "699:21:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "680:40:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 58,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "820:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 57,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "812:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 56,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "812:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 59,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "812:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 60,
															"name": "personlTFERC20Amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 32,
															"src": "823:20:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 53,
																	"name": "TFAddress",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 12,
																	"src": "788:9:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 52,
																"name": "IERC20",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 231,
																"src": "781:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20_$231_$",
																	"typeString": "type(contract IERC20)"
																}
															},
															"id": 54,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "781:17:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$231",
																"typeString": "contract IERC20"
															}
														},
														"id": 55,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "safeTransfer",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 667,
														"src": "781:30:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$231_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$231_$",
															"typeString": "function (contract IERC20,address,uint256)"
														}
													},
													"id": 61,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "781:63:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 62,
												"nodeType": "ExpressionStatement",
												"src": "781:63:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 67,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "890:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 68,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "890:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 69,
															"name": "userProfit",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 47,
															"src": "901:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 64,
																	"name": "stableAddress",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 28,
																	"src": "862:13:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 63,
																"name": "IERC20",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 231,
																"src": "855:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20_$231_$",
																	"typeString": "type(contract IERC20)"
																}
															},
															"id": 65,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "855:21:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$231",
																"typeString": "contract IERC20"
															}
														},
														"id": 66,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "safeTransfer",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 667,
														"src": "855:34:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$231_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$231_$",
															"typeString": "function (contract IERC20,address,uint256)"
														}
													},
													"id": 70,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "855:57:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 71,
												"nodeType": "ExpressionStatement",
												"src": "855:57:0"
											},
											{
												"expression": {
													"id": 77,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 72,
															"name": "userIfWithdraw",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 26,
															"src": "923:14:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																"typeString": "mapping(address => bool)"
															}
														},
														"id": 75,
														"indexExpression": {
															"expression": {
																"id": 73,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "938:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 74,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "938:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "923:26:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "74727565",
														"id": 76,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "950:4:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "923:31:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 78,
												"nodeType": "ExpressionStatement",
												"src": "923:31:0"
											}
										]
									},
									"functionSelector": "b86e321c",
									"id": 80,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "withdrawReward",
									"nameLocation": "499:14:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 29,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 28,
												"mutability": "mutable",
												"name": "stableAddress",
												"nameLocation": "522:13:0",
												"nodeType": "VariableDeclaration",
												"scope": 80,
												"src": "514:21:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 27,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "514:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "513:23:0"
									},
									"returnParameters": {
										"id": 30,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "544:0:0"
									},
									"scope": 153,
									"src": "490:472:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 124,
										"nodeType": "Block",
										"src": "1074:341:0",
										"statements": [
											{
												"assignments": [
													88
												],
												"declarations": [
													{
														"constant": false,
														"id": 88,
														"mutability": "mutable",
														"name": "stableAmount",
														"nameLocation": "1093:12:0",
														"nodeType": "VariableDeclaration",
														"scope": 124,
														"src": "1085:20:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 87,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1085:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 98,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 95,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "1146:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_RewardPool_$153",
																		"typeString": "contract RewardPool"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_RewardPool_$153",
																		"typeString": "contract RewardPool"
																	}
																],
																"id": 94,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1138:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 93,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1138:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 96,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1138:13:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 90,
																	"name": "stableAddress",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 82,
																	"src": "1113:13:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 89,
																"name": "IERC20",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 231,
																"src": "1106:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20_$231_$",
																	"typeString": "type(contract IERC20)"
																}
															},
															"id": 91,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1106:21:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$231",
																"typeString": "contract IERC20"
															}
														},
														"id": 92,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "balanceOf",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 188,
														"src": "1106:31:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view external returns (uint256)"
														}
													},
													"id": 97,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1106:46:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1085:67:0"
											},
											{
												"assignments": [
													100
												],
												"declarations": [
													{
														"constant": false,
														"id": 100,
														"mutability": "mutable",
														"name": "personlTFERC20Amount",
														"nameLocation": "1171:20:0",
														"nodeType": "VariableDeclaration",
														"scope": 124,
														"src": "1163:28:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 99,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1163:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 105,
												"initialValue": {
													"arguments": [
														{
															"expression": {
																"id": 102,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "1209:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 103,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "1209:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 101,
														"name": "getTFERC20Amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 152,
														"src": "1192:16:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view returns (uint256)"
														}
													},
													"id": 104,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1192:28:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1163:57:0"
											},
											{
												"condition": {
													"baseExpression": {
														"id": 106,
														"name": "userIfWithdraw",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 26,
														"src": "1234:14:0",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
															"typeString": "mapping(address => bool)"
														}
													},
													"id": 109,
													"indexExpression": {
														"expression": {
															"id": 107,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "1249:3:0",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 108,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "1249:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "1234:26:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 114,
												"nodeType": "IfStatement",
												"src": "1231:57:0",
												"trueBody": {
													"id": 113,
													"nodeType": "Block",
													"src": "1261:27:0",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 110,
																	"name": "AlreadyWithdraw",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 298,
																	"src": "1269:15:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 111,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1269:17:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 112,
															"nodeType": "RevertStatement",
															"src": "1262:24:0"
														}
													]
												}
											},
											{
												"expression": {
													"id": 122,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 115,
														"name": "userEarn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 85,
														"src": "1352:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 121,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 119,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 116,
																"name": "personlTFERC20Amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 100,
																"src": "1363:20:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "/",
															"rightExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 117,
																	"name": "getTotal",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 137,
																	"src": "1384:8:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																		"typeString": "function () view returns (uint256)"
																	}
																},
																"id": 118,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1384:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1363:31:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "*",
														"rightExpression": {
															"id": 120,
															"name": "stableAmount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 88,
															"src": "1395:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "1363:44:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1352:55:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 123,
												"nodeType": "ExpressionStatement",
												"src": "1352:55:0"
											}
										]
									},
									"functionSelector": "02550e4d",
									"id": 125,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "profit",
									"nameLocation": "1008:6:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 83,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 82,
												"mutability": "mutable",
												"name": "stableAddress",
												"nameLocation": "1023:13:0",
												"nodeType": "VariableDeclaration",
												"scope": 125,
												"src": "1015:21:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 81,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1015:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1014:23:0"
									},
									"returnParameters": {
										"id": 86,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 85,
												"mutability": "mutable",
												"name": "userEarn",
												"nameLocation": "1065:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 125,
												"src": "1057:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 84,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1057:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1056:18:0"
									},
									"scope": 153,
									"src": "999:416:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 136,
										"nodeType": "Block",
										"src": "1498:65:0",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"expression": {
															"arguments": [
																{
																	"id": 131,
																	"name": "TFAddress",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 12,
																	"src": "1531:9:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 130,
																"name": "IERC20Metadata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 256,
																"src": "1516:14:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20Metadata_$256_$",
																	"typeString": "type(contract IERC20Metadata)"
																}
															},
															"id": 132,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1516:25:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20Metadata_$256",
																"typeString": "contract IERC20Metadata"
															}
														},
														"id": 133,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "totalSupply",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 180,
														"src": "1516:37:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$__$returns$_t_uint256_$",
															"typeString": "function () view external returns (uint256)"
														}
													},
													"id": 134,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1516:39:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 129,
												"id": 135,
												"nodeType": "Return",
												"src": "1509:46:0"
											}
										]
									},
									"functionSelector": "775a25e3",
									"id": 137,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getTotal",
									"nameLocation": "1460:8:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 126,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1468:2:0"
									},
									"returnParameters": {
										"id": 129,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 128,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 137,
												"src": "1490:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 127,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1490:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1489:9:0"
									},
									"scope": 153,
									"src": "1451:112:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 151,
										"nodeType": "Block",
										"src": "1685:66:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 148,
															"name": "userAddress",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 139,
															"src": "1731:11:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 145,
																	"name": "TFAddress",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 12,
																	"src": "1710:9:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 144,
																"name": "IERC20",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 231,
																"src": "1703:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20_$231_$",
																	"typeString": "type(contract IERC20)"
																}
															},
															"id": 146,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1703:17:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$231",
																"typeString": "contract IERC20"
															}
														},
														"id": 147,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "balanceOf",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 188,
														"src": "1703:27:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view external returns (uint256)"
														}
													},
													"id": 149,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1703:40:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 143,
												"id": 150,
												"nodeType": "Return",
												"src": "1696:47:0"
											}
										]
									},
									"functionSelector": "af32b7a1",
									"id": 152,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getTFERC20Amount",
									"nameLocation": "1620:16:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 140,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 139,
												"mutability": "mutable",
												"name": "userAddress",
												"nameLocation": "1645:11:0",
												"nodeType": "VariableDeclaration",
												"scope": 152,
												"src": "1637:19:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 138,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1637:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1636:21:0"
									},
									"returnParameters": {
										"id": 143,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 142,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 152,
												"src": "1677:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 141,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1677:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1676:9:0"
									},
									"scope": 153,
									"src": "1611:140:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								}
							],
							"scope": 154,
							"src": "181:1573:0",
							"usedErrors": [
								296,
								298,
								300
							]
						}
					],
					"src": "32:1722:0"
				},
				"id": 0
			},
			"interfaces/IERC20.sol": {
				"ast": {
					"absolutePath": "interfaces/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							231
						]
					},
					"id": 232,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 155,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "109:23:1"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 156,
								"nodeType": "StructuredDocumentation",
								"src": "136:72:1",
								"text": " @dev Interface of the ERC20 standard as defined in the EIP."
							},
							"fullyImplemented": false,
							"id": 231,
							"linearizedBaseContracts": [
								231
							],
							"name": "IERC20",
							"nameLocation": "220:6:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 157,
										"nodeType": "StructuredDocumentation",
										"src": "234:163:1",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"id": 165,
									"name": "Transfer",
									"nameLocation": "409:8:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 164,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 159,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "434:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 165,
												"src": "418:20:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 158,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "418:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 161,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "456:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 165,
												"src": "440:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 160,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "440:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 163,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "468:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 165,
												"src": "460:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 162,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "460:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "417:57:1"
									},
									"src": "403:72:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 166,
										"nodeType": "StructuredDocumentation",
										"src": "483:151:1",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"id": 174,
									"name": "Approval",
									"nameLocation": "646:8:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 173,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 168,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "671:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 174,
												"src": "655:21:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 167,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "655:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 170,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "694:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 174,
												"src": "678:23:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 169,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "678:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 172,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "711:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 174,
												"src": "703:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 171,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "703:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "654:63:1"
									},
									"src": "640:78:1"
								},
								{
									"documentation": {
										"id": 175,
										"nodeType": "StructuredDocumentation",
										"src": "726:68:1",
										"text": " @dev Returns the amount of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 180,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "809:11:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 176,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "820:2:1"
									},
									"returnParameters": {
										"id": 179,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 178,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 180,
												"src": "846:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 177,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "846:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "845:9:1"
									},
									"scope": 231,
									"src": "800:55:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 181,
										"nodeType": "StructuredDocumentation",
										"src": "863:74:1",
										"text": " @dev Returns the amount of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 188,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "952:9:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 184,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 183,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "970:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 188,
												"src": "962:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 182,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "962:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "961:17:1"
									},
									"returnParameters": {
										"id": 187,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 186,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 188,
												"src": "1002:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 185,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1002:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1001:9:1"
									},
									"scope": 231,
									"src": "943:68:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 189,
										"nodeType": "StructuredDocumentation",
										"src": "1019:208:1",
										"text": " @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 198,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "1242:8:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 194,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 191,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1259:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 198,
												"src": "1251:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 190,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1251:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 193,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1271:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 198,
												"src": "1263:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 192,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1263:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1250:28:1"
									},
									"returnParameters": {
										"id": 197,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 196,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 198,
												"src": "1297:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 195,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1297:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1296:6:1"
									},
									"scope": 231,
									"src": "1233:70:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 199,
										"nodeType": "StructuredDocumentation",
										"src": "1311:270:1",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 208,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "1596:9:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 204,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 201,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1614:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 208,
												"src": "1606:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 200,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1606:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 203,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1629:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 208,
												"src": "1621:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 202,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1621:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1605:32:1"
									},
									"returnParameters": {
										"id": 207,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 206,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 208,
												"src": "1661:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 205,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1661:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1660:9:1"
									},
									"scope": 231,
									"src": "1587:83:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 209,
										"nodeType": "StructuredDocumentation",
										"src": "1678:655:1",
										"text": " @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 218,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "2348:7:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 214,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 211,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2364:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 218,
												"src": "2356:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 210,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2356:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 213,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2381:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 218,
												"src": "2373:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 212,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2373:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2355:33:1"
									},
									"returnParameters": {
										"id": 217,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 216,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 218,
												"src": "2407:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 215,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2407:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2406:6:1"
									},
									"scope": 231,
									"src": "2339:74:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 219,
										"nodeType": "StructuredDocumentation",
										"src": "2421:295:1",
										"text": " @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 230,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "2731:12:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 226,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 221,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2752:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 230,
												"src": "2744:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 220,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2744:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 223,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2766:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 230,
												"src": "2758:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 222,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2758:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 225,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2778:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 230,
												"src": "2770:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 224,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2770:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2743:42:1"
									},
									"returnParameters": {
										"id": 229,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 228,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 230,
												"src": "2804:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 227,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2804:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2803:6:1"
									},
									"scope": 231,
									"src": "2722:88:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 232,
							"src": "210:2603:1",
							"usedErrors": []
						}
					],
					"src": "109:2706:1"
				},
				"id": 1
			},
			"interfaces/IERC20Metadata.sol": {
				"ast": {
					"absolutePath": "interfaces/IERC20Metadata.sol",
					"exportedSymbols": {
						"IERC20": [
							231
						],
						"IERC20Metadata": [
							256
						]
					},
					"id": 257,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 233,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "113:23:2"
						},
						{
							"absolutePath": "interfaces/IERC20.sol",
							"file": "../interfaces/IERC20.sol",
							"id": 234,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 257,
							"sourceUnit": 232,
							"src": "140:34:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 236,
										"name": "IERC20",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 231,
										"src": "328:6:2"
									},
									"id": 237,
									"nodeType": "InheritanceSpecifier",
									"src": "328:6:2"
								}
							],
							"canonicalName": "IERC20Metadata",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 235,
								"nodeType": "StructuredDocumentation",
								"src": "178:120:2",
								"text": " @dev Interface for the optional metadata functions from the ERC20 standard.\n _Available since v4.1._"
							},
							"fullyImplemented": false,
							"id": 256,
							"linearizedBaseContracts": [
								256,
								231
							],
							"name": "IERC20Metadata",
							"nameLocation": "310:14:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 238,
										"nodeType": "StructuredDocumentation",
										"src": "342:56:2",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 243,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "413:4:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 239,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "417:2:2"
									},
									"returnParameters": {
										"id": 242,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 241,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 243,
												"src": "443:13:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 240,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "443:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "442:15:2"
									},
									"scope": 256,
									"src": "404:54:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 244,
										"nodeType": "StructuredDocumentation",
										"src": "466:58:2",
										"text": " @dev Returns the symbol of the token."
									},
									"functionSelector": "95d89b41",
									"id": 249,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "539:6:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 245,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "545:2:2"
									},
									"returnParameters": {
										"id": 248,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 247,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 249,
												"src": "571:13:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 246,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "571:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "570:15:2"
									},
									"scope": 256,
									"src": "530:56:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 250,
										"nodeType": "StructuredDocumentation",
										"src": "594:67:2",
										"text": " @dev Returns the decimals places of the token."
									},
									"functionSelector": "313ce567",
									"id": 255,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "676:8:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 251,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "684:2:2"
									},
									"returnParameters": {
										"id": 254,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 253,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 255,
												"src": "710:5:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 252,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "710:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "709:7:2"
									},
									"scope": 256,
									"src": "667:50:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 257,
							"src": "300:420:2",
							"usedErrors": []
						}
					],
					"src": "113:607:2"
				},
				"id": 2
			},
			"interfaces/IERC20Permit.sol": {
				"ast": {
					"absolutePath": "interfaces/IERC20Permit.sol",
					"exportedSymbols": {
						"IERC20Permit": [
							292
						]
					},
					"id": 293,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 258,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "126:24:3"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20Permit",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 259,
								"nodeType": "StructuredDocumentation",
								"src": "154:1998:3",
								"text": " @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n need to send a transaction, and thus is not required to hold Ether at all.\n ==== Security Considerations\n There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n considered as an intention to spend the allowance in any specific way. The second is that because permits have\n built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n generally recommended is:\n ```solidity\n function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n     doThing(..., value);\n }\n function doThing(..., uint256 value) public {\n     token.safeTransferFrom(msg.sender, address(this), value);\n     ...\n }\n ```\n Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n {SafeERC20-safeTransferFrom}).\n Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n contracts should have entry points that don't rely on permit."
							},
							"fullyImplemented": false,
							"id": 292,
							"linearizedBaseContracts": [
								292
							],
							"name": "IERC20Permit",
							"nameLocation": "2164:12:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 260,
										"nodeType": "StructuredDocumentation",
										"src": "2184:872:3",
										"text": " @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n given ``owner``'s signed approval.\n IMPORTANT: The same issues {IERC20-approve} has related to transaction\n ordering also apply here.\n Emits an {Approval} event.\n Requirements:\n - `spender` cannot be the zero address.\n - `deadline` must be a timestamp in the future.\n - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n over the EIP712-formatted function arguments.\n - the signature must use ``owner``'s current nonce (see {nonces}).\n For more information on the signature format, see the\n https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n section].\n CAUTION: See Security Considerations above."
									},
									"functionSelector": "d505accf",
									"id": 277,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "permit",
									"nameLocation": "3071:6:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 275,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 262,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3096:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 277,
												"src": "3088:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 261,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3088:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 264,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "3120:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 277,
												"src": "3112:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 263,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3112:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 266,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3146:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 277,
												"src": "3138:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 265,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3138:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 268,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "3170:8:3",
												"nodeType": "VariableDeclaration",
												"scope": 277,
												"src": "3162:16:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 267,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3162:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 270,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "3195:1:3",
												"nodeType": "VariableDeclaration",
												"scope": 277,
												"src": "3189:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 269,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "3189:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 272,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "3215:1:3",
												"nodeType": "VariableDeclaration",
												"scope": 277,
												"src": "3207:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 271,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3207:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 274,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "3235:1:3",
												"nodeType": "VariableDeclaration",
												"scope": 277,
												"src": "3227:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 273,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3227:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3077:166:3"
									},
									"returnParameters": {
										"id": 276,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3252:0:3"
									},
									"scope": 292,
									"src": "3062:191:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 278,
										"nodeType": "StructuredDocumentation",
										"src": "3261:300:3",
										"text": " @dev Returns the current nonce for `owner`. This value must be\n included whenever a signature is generated for {permit}.\n Every successful call to {permit} increases ``owner``'s nonce by one. This\n prevents a signature from being used multiple times."
									},
									"functionSelector": "7ecebe00",
									"id": 285,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "nonces",
									"nameLocation": "3576:6:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 281,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 280,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3591:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 285,
												"src": "3583:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 279,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3583:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3582:15:3"
									},
									"returnParameters": {
										"id": 284,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 283,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 285,
												"src": "3621:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 282,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3621:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3620:9:3"
									},
									"scope": 292,
									"src": "3567:63:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 286,
										"nodeType": "StructuredDocumentation",
										"src": "3638:130:3",
										"text": " @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
									},
									"functionSelector": "3644e515",
									"id": 291,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "DOMAIN_SEPARATOR",
									"nameLocation": "3837:16:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 287,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3853:2:3"
									},
									"returnParameters": {
										"id": 290,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 289,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 291,
												"src": "3879:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 288,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3879:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3878:9:3"
									},
									"scope": 292,
									"src": "3828:60:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 293,
							"src": "2154:1737:3",
							"usedErrors": []
						}
					],
					"src": "126:3767:3"
				},
				"id": 3
			},
			"interfaces/IRewardPool.sol": {
				"ast": {
					"absolutePath": "interfaces/IRewardPool.sol",
					"exportedSymbols": {
						"IRewardPool": [
							301
						]
					},
					"id": 302,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 294,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".9"
							],
							"nodeType": "PragmaDirective",
							"src": "32:23:4"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IRewardPool",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": true,
							"id": 301,
							"linearizedBaseContracts": [
								301
							],
							"name": "IRewardPool",
							"nameLocation": "69:11:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"id": 296,
									"name": "FailTransfer",
									"nameLocation": "113:12:4",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 295,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "125:2:4"
									},
									"src": "107:21:4"
								},
								{
									"id": 298,
									"name": "AlreadyWithdraw",
									"nameLocation": "160:15:4",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 297,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "175:2:4"
									},
									"src": "154:24:4"
								},
								{
									"id": 300,
									"name": "NoTFERC20",
									"nameLocation": "217:9:4",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 299,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "226:2:4"
									},
									"src": "211:18:4"
								}
							],
							"scope": 302,
							"src": "59:173:4",
							"usedErrors": [
								296,
								298,
								300
							]
						}
					],
					"src": "32:200:4"
				},
				"id": 4
			},
			"libraries/Address.sol": {
				"ast": {
					"absolutePath": "libraries/Address.sol",
					"exportedSymbols": {
						"Address": [
							631
						]
					},
					"id": 632,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 303,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "104:24:5"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Address",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 304,
								"nodeType": "StructuredDocumentation",
								"src": "132:69:5",
								"text": " @dev Collection of functions related to the address type"
							},
							"fullyImplemented": true,
							"id": 631,
							"linearizedBaseContracts": [
								631
							],
							"name": "Address",
							"nameLocation": "211:7:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 318,
										"nodeType": "Block",
										"src": "1518:260:5",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 316,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"expression": {
																"id": 312,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 307,
																"src": "1747:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 313,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "code",
															"nodeType": "MemberAccess",
															"src": "1747:12:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 314,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "1747:19:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 315,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1769:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1747:23:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 311,
												"id": 317,
												"nodeType": "Return",
												"src": "1740:30:5"
											}
										]
									},
									"documentation": {
										"id": 305,
										"nodeType": "StructuredDocumentation",
										"src": "226:1220:5",
										"text": " @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n Furthermore, `isContract` will also return true if the target contract within\n the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n which only has an effect at the end of a transaction.\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="
									},
									"id": 319,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isContract",
									"nameLocation": "1461:10:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 308,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 307,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "1480:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 319,
												"src": "1472:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 306,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1472:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1471:17:5"
									},
									"returnParameters": {
										"id": 311,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 310,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 319,
												"src": "1512:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 309,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1512:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1511:6:5"
									},
									"scope": 631,
									"src": "1452:326:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 352,
										"nodeType": "Block",
										"src": "2782:246:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 334,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 330,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "2809:4:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_Address_$631",
																				"typeString": "library Address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_Address_$631",
																				"typeString": "library Address"
																			}
																		],
																		"id": 329,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2801:7:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 328,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2801:7:5",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 331,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2801:13:5",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 332,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "2801:21:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 333,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 324,
																"src": "2826:6:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2801:31:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e6365",
															"id": 335,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2834:31:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															},
															"value": "Address: insufficient balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															}
														],
														"id": 327,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2793:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 336,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2793:73:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 337,
												"nodeType": "ExpressionStatement",
												"src": "2793:73:5"
											},
											{
												"assignments": [
													339,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 339,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "2885:7:5",
														"nodeType": "VariableDeclaration",
														"scope": 352,
														"src": "2880:12:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 338,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "2880:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													null
												],
												"id": 346,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "",
															"id": 344,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2928:2:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																	"typeString": "literal_string \"\""
																}
															],
															"expression": {
																"id": 340,
																"name": "recipient",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 322,
																"src": "2898:9:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"id": 341,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "2898:14:5",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 343,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 342,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 324,
																"src": "2920:6:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "2898:29:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 345,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2898:33:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2879:52:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 348,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 339,
															"src": "2950:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564",
															"id": 349,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2959:60:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															},
															"value": "Address: unable to send value, recipient may have reverted"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															}
														],
														"id": 347,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2942:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 350,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2942:78:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 351,
												"nodeType": "ExpressionStatement",
												"src": "2942:78:5"
											}
										]
									},
									"documentation": {
										"id": 320,
										"nodeType": "StructuredDocumentation",
										"src": "1786:919:5",
										"text": " @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."
									},
									"id": 353,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sendValue",
									"nameLocation": "2720:9:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 325,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 322,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "2746:9:5",
												"nodeType": "VariableDeclaration",
												"scope": 353,
												"src": "2730:25:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 321,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2730:15:5",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 324,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2765:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 353,
												"src": "2757:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 323,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2757:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2729:43:5"
									},
									"returnParameters": {
										"id": 326,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2782:0:5"
									},
									"scope": 631,
									"src": "2711:317:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 370,
										"nodeType": "Block",
										"src": "3879:98:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 364,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 356,
															"src": "3919:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 365,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 358,
															"src": "3927:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "30",
															"id": 366,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3933:1:5",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564",
															"id": 367,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3936:32:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															},
															"value": "Address: low-level call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															}
														],
														"id": 363,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															411,
															455
														],
														"referencedDeclaration": 455,
														"src": "3897:21:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 368,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3897:72:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 362,
												"id": 369,
												"nodeType": "Return",
												"src": "3890:79:5"
											}
										]
									},
									"documentation": {
										"id": 354,
										"nodeType": "StructuredDocumentation",
										"src": "3036:748:5",
										"text": " @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"
									},
									"id": 371,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nameLocation": "3799:12:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 359,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 356,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "3820:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 371,
												"src": "3812:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 355,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3812:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 358,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3841:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 371,
												"src": "3828:17:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 357,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3828:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3811:35:5"
									},
									"returnParameters": {
										"id": 362,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 361,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 371,
												"src": "3865:12:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 360,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3865:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3864:14:5"
									},
									"scope": 631,
									"src": "3790:187:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 390,
										"nodeType": "Block",
										"src": "4358:78:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 384,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 374,
															"src": "4398:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 385,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 376,
															"src": "4406:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "30",
															"id": 386,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4412:1:5",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"id": 387,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 378,
															"src": "4415:12:5",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 383,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															411,
															455
														],
														"referencedDeclaration": 455,
														"src": "4376:21:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 388,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4376:52:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 382,
												"id": 389,
												"nodeType": "Return",
												"src": "4369:59:5"
											}
										]
									},
									"documentation": {
										"id": 372,
										"nodeType": "StructuredDocumentation",
										"src": "3985:216:5",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 391,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nameLocation": "4216:12:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 379,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 374,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "4247:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 391,
												"src": "4239:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 373,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4239:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 376,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "4277:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 391,
												"src": "4264:17:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 375,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4264:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 378,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "4306:12:5",
												"nodeType": "VariableDeclaration",
												"scope": 391,
												"src": "4292:26:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 377,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "4292:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4228:97:5"
									},
									"returnParameters": {
										"id": 382,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 381,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 391,
												"src": "4344:12:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 380,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4344:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4343:14:5"
									},
									"scope": 631,
									"src": "4207:229:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 410,
										"nodeType": "Block",
										"src": "4924:113:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 404,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 394,
															"src": "4964:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 405,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 396,
															"src": "4972:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 406,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 398,
															"src": "4978:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564",
															"id": 407,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4985:43:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															},
															"value": "Address: low-level call with value failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															}
														],
														"id": 403,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															411,
															455
														],
														"referencedDeclaration": 455,
														"src": "4942:21:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 408,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4942:87:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 402,
												"id": 409,
												"nodeType": "Return",
												"src": "4935:94:5"
											}
										]
									},
									"documentation": {
										"id": 392,
										"nodeType": "StructuredDocumentation",
										"src": "4444:361:5",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"
									},
									"id": 411,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nameLocation": "4820:21:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 399,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 394,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "4850:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 411,
												"src": "4842:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 393,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4842:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 396,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "4871:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 411,
												"src": "4858:17:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 395,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4858:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 398,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4885:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 411,
												"src": "4877:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 397,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4877:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4841:50:5"
									},
									"returnParameters": {
										"id": 402,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 401,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 411,
												"src": "4910:12:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 400,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4910:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4909:14:5"
									},
									"scope": 631,
									"src": "4811:226:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 454,
										"nodeType": "Block",
										"src": "5477:271:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 432,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 428,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "5504:4:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_Address_$631",
																				"typeString": "library Address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_Address_$631",
																				"typeString": "library Address"
																			}
																		],
																		"id": 427,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "5496:7:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 426,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "5496:7:5",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 429,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "5496:13:5",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 430,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "5496:21:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 431,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 418,
																"src": "5521:5:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5496:30:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c",
															"id": 433,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5528:40:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															},
															"value": "Address: insufficient balance for call"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															}
														],
														"id": 425,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5488:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 434,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5488:81:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 435,
												"nodeType": "ExpressionStatement",
												"src": "5488:81:5"
											},
											{
												"assignments": [
													437,
													439
												],
												"declarations": [
													{
														"constant": false,
														"id": 437,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "5586:7:5",
														"nodeType": "VariableDeclaration",
														"scope": 454,
														"src": "5581:12:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 436,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "5581:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 439,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "5608:10:5",
														"nodeType": "VariableDeclaration",
														"scope": 454,
														"src": "5595:23:5",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 438,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "5595:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 446,
												"initialValue": {
													"arguments": [
														{
															"id": 444,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 416,
															"src": "5648:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"expression": {
																"id": 440,
																"name": "target",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 414,
																"src": "5622:6:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 441,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "5622:11:5",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 443,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 442,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 418,
																"src": "5641:5:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "5622:25:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 445,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5622:31:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5580:73:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 448,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 414,
															"src": "5698:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 449,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 437,
															"src": "5706:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 450,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 439,
															"src": "5715:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 451,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 420,
															"src": "5727:12:5",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 447,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 586,
														"src": "5671:26:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 452,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5671:69:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 424,
												"id": 453,
												"nodeType": "Return",
												"src": "5664:76:5"
											}
										]
									},
									"documentation": {
										"id": 412,
										"nodeType": "StructuredDocumentation",
										"src": "5045:242:5",
										"text": " @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 455,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nameLocation": "5302:21:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 421,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 414,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "5342:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 455,
												"src": "5334:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 413,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5334:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 416,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5372:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 455,
												"src": "5359:17:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 415,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5359:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 418,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5395:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 455,
												"src": "5387:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 417,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5387:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 420,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "5425:12:5",
												"nodeType": "VariableDeclaration",
												"scope": 455,
												"src": "5411:26:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 419,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5411:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5323:121:5"
									},
									"returnParameters": {
										"id": 424,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 423,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 455,
												"src": "5463:12:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 422,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5463:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5462:14:5"
									},
									"scope": 631,
									"src": "5293:455:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 471,
										"nodeType": "Block",
										"src": "6033:99:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 466,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 458,
															"src": "6070:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 467,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 460,
															"src": "6078:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564",
															"id": 468,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6084:39:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															},
															"value": "Address: low-level static call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															}
														],
														"id": 465,
														"name": "functionStaticCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															472,
															501
														],
														"referencedDeclaration": 501,
														"src": "6051:18:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 469,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6051:73:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 464,
												"id": 470,
												"nodeType": "Return",
												"src": "6044:80:5"
											}
										]
									},
									"documentation": {
										"id": 456,
										"nodeType": "StructuredDocumentation",
										"src": "5756:171:5",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 472,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nameLocation": "5942:18:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 461,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 458,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "5969:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 472,
												"src": "5961:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 457,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5961:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 460,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5990:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 472,
												"src": "5977:17:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 459,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5977:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5960:35:5"
									},
									"returnParameters": {
										"id": 464,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 463,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 472,
												"src": "6019:12:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 462,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6019:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6018:14:5"
									},
									"scope": 631,
									"src": "5933:199:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 500,
										"nodeType": "Block",
										"src": "6486:171:5",
										"statements": [
											{
												"assignments": [
													485,
													487
												],
												"declarations": [
													{
														"constant": false,
														"id": 485,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "6503:7:5",
														"nodeType": "VariableDeclaration",
														"scope": 500,
														"src": "6498:12:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 484,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "6498:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 487,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "6525:10:5",
														"nodeType": "VariableDeclaration",
														"scope": 500,
														"src": "6512:23:5",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 486,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "6512:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 492,
												"initialValue": {
													"arguments": [
														{
															"id": 490,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 477,
															"src": "6557:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 488,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 475,
															"src": "6539:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 489,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "staticcall",
														"nodeType": "MemberAccess",
														"src": "6539:17:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) view returns (bool,bytes memory)"
														}
													},
													"id": 491,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6539:23:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6497:65:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 494,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 475,
															"src": "6607:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 495,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 485,
															"src": "6615:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 496,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 487,
															"src": "6624:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 497,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 479,
															"src": "6636:12:5",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 493,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 586,
														"src": "6580:26:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 498,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6580:69:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 483,
												"id": 499,
												"nodeType": "Return",
												"src": "6573:76:5"
											}
										]
									},
									"documentation": {
										"id": 473,
										"nodeType": "StructuredDocumentation",
										"src": "6140:178:5",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 501,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nameLocation": "6333:18:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 480,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 475,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "6370:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 501,
												"src": "6362:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 474,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6362:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 477,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6400:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 501,
												"src": "6387:17:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 476,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6387:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 479,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "6429:12:5",
												"nodeType": "VariableDeclaration",
												"scope": 501,
												"src": "6415:26:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 478,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6415:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6351:97:5"
									},
									"returnParameters": {
										"id": 483,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 482,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 501,
												"src": "6472:12:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 481,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6472:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6471:14:5"
									},
									"scope": 631,
									"src": "6324:333:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 517,
										"nodeType": "Block",
										"src": "6941:103:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 512,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 504,
															"src": "6980:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 513,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 506,
															"src": "6988:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564",
															"id": 514,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6994:41:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398",
																"typeString": "literal_string \"Address: low-level delegate call failed\""
															},
															"value": "Address: low-level delegate call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398",
																"typeString": "literal_string \"Address: low-level delegate call failed\""
															}
														],
														"id": 511,
														"name": "functionDelegateCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															518,
															547
														],
														"referencedDeclaration": 547,
														"src": "6959:20:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
														}
													},
													"id": 515,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6959:77:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 510,
												"id": 516,
												"nodeType": "Return",
												"src": "6952:84:5"
											}
										]
									},
									"documentation": {
										"id": 502,
										"nodeType": "StructuredDocumentation",
										"src": "6665:173:5",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"
									},
									"id": 518,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionDelegateCall",
									"nameLocation": "6853:20:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 507,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 504,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "6882:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 518,
												"src": "6874:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 503,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6874:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 506,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6903:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 518,
												"src": "6890:17:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 505,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6890:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6873:35:5"
									},
									"returnParameters": {
										"id": 510,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 509,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 518,
												"src": "6927:12:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 508,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6927:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6926:14:5"
									},
									"scope": 631,
									"src": "6844:200:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 546,
										"nodeType": "Block",
										"src": "7397:173:5",
										"statements": [
											{
												"assignments": [
													531,
													533
												],
												"declarations": [
													{
														"constant": false,
														"id": 531,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "7414:7:5",
														"nodeType": "VariableDeclaration",
														"scope": 546,
														"src": "7409:12:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 530,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "7409:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 533,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "7436:10:5",
														"nodeType": "VariableDeclaration",
														"scope": 546,
														"src": "7423:23:5",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 532,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "7423:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 538,
												"initialValue": {
													"arguments": [
														{
															"id": 536,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 523,
															"src": "7470:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 534,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 521,
															"src": "7450:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 535,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "delegatecall",
														"nodeType": "MemberAccess",
														"src": "7450:19:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) returns (bool,bytes memory)"
														}
													},
													"id": 537,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7450:25:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7408:67:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 540,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 521,
															"src": "7520:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 541,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 531,
															"src": "7528:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 542,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 533,
															"src": "7537:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 543,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 525,
															"src": "7549:12:5",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 539,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 586,
														"src": "7493:26:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 544,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7493:69:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 529,
												"id": 545,
												"nodeType": "Return",
												"src": "7486:76:5"
											}
										]
									},
									"documentation": {
										"id": 519,
										"nodeType": "StructuredDocumentation",
										"src": "7052:180:5",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"
									},
									"id": 547,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionDelegateCall",
									"nameLocation": "7247:20:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 526,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 521,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "7286:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 547,
												"src": "7278:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 520,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7278:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 523,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "7316:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 547,
												"src": "7303:17:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 522,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7303:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 525,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "7345:12:5",
												"nodeType": "VariableDeclaration",
												"scope": 547,
												"src": "7331:26:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 524,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "7331:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7267:97:5"
									},
									"returnParameters": {
										"id": 529,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 528,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 547,
												"src": "7383:12:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 527,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7383:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7382:14:5"
									},
									"scope": 631,
									"src": "7238:332:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 585,
										"nodeType": "Block",
										"src": "8065:445:5",
										"statements": [
											{
												"condition": {
													"id": 561,
													"name": "success",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 552,
													"src": "8080:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 583,
													"nodeType": "Block",
													"src": "8443:60:5",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 579,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 554,
																		"src": "8466:10:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	{
																		"id": 580,
																		"name": "errorMessage",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 556,
																		"src": "8478:12:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		},
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 578,
																	"name": "_revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 630,
																	"src": "8458:7:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bytes memory,string memory) pure"
																	}
																},
																"id": 581,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8458:33:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 582,
															"nodeType": "ExpressionStatement",
															"src": "8458:33:5"
														}
													]
												},
												"id": 584,
												"nodeType": "IfStatement",
												"src": "8076:427:5",
												"trueBody": {
													"id": 577,
													"nodeType": "Block",
													"src": "8089:348:5",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 565,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 562,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 554,
																		"src": "8108:10:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 563,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"src": "8108:17:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 564,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8129:1:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "8108:22:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 574,
															"nodeType": "IfStatement",
															"src": "8104:290:5",
															"trueBody": {
																"id": 573,
																"nodeType": "Block",
																"src": "8132:262:5",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"id": 568,
																							"name": "target",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 550,
																							"src": "8337:6:5",
																							"typeDescriptions": {
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						],
																						"id": 567,
																						"name": "isContract",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 319,
																						"src": "8326:10:5",
																						"typeDescriptions": {
																							"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																							"typeString": "function (address) view returns (bool)"
																						}
																					},
																					"id": 569,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "functionCall",
																					"lValueRequested": false,
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "8326:18:5",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					}
																				},
																				{
																					"hexValue": "416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374",
																					"id": 570,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "string",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "8346:31:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																						"typeString": "literal_string \"Address: call to non-contract\""
																					},
																					"value": "Address: call to non-contract"
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					},
																					{
																						"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																						"typeString": "literal_string \"Address: call to non-contract\""
																					}
																				],
																				"id": 566,
																				"name": "require",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [
																					4294967278,
																					4294967278
																				],
																				"referencedDeclaration": 4294967278,
																				"src": "8318:7:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																					"typeString": "function (bool,string memory) pure"
																				}
																			},
																			"id": 571,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "8318:60:5",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 572,
																		"nodeType": "ExpressionStatement",
																		"src": "8318:60:5"
																	}
																]
															}
														},
														{
															"expression": {
																"id": 575,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 554,
																"src": "8415:10:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 560,
															"id": 576,
															"nodeType": "Return",
															"src": "8408:17:5"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 548,
										"nodeType": "StructuredDocumentation",
										"src": "7578:282:5",
										"text": " @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"
									},
									"id": 586,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCallResultFromTarget",
									"nameLocation": "7875:26:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 557,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 550,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "7920:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 586,
												"src": "7912:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 549,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7912:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 552,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "7942:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 586,
												"src": "7937:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 551,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7937:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 554,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "7973:10:5",
												"nodeType": "VariableDeclaration",
												"scope": 586,
												"src": "7960:23:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 553,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7960:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 556,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "8008:12:5",
												"nodeType": "VariableDeclaration",
												"scope": 586,
												"src": "7994:26:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 555,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "7994:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7901:126:5"
									},
									"returnParameters": {
										"id": 560,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 559,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 586,
												"src": "8051:12:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 558,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8051:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8050:14:5"
									},
									"scope": 631,
									"src": "7866:644:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 609,
										"nodeType": "Block",
										"src": "8903:141:5",
										"statements": [
											{
												"condition": {
													"id": 598,
													"name": "success",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 589,
													"src": "8918:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 607,
													"nodeType": "Block",
													"src": "8977:60:5",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 603,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 591,
																		"src": "9000:10:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	{
																		"id": 604,
																		"name": "errorMessage",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 593,
																		"src": "9012:12:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		},
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 602,
																	"name": "_revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 630,
																	"src": "8992:7:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bytes memory,string memory) pure"
																	}
																},
																"id": 605,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8992:33:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 606,
															"nodeType": "ExpressionStatement",
															"src": "8992:33:5"
														}
													]
												},
												"id": 608,
												"nodeType": "IfStatement",
												"src": "8914:123:5",
												"trueBody": {
													"id": 601,
													"nodeType": "Block",
													"src": "8927:44:5",
													"statements": [
														{
															"expression": {
																"id": 599,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 591,
																"src": "8949:10:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 597,
															"id": 600,
															"nodeType": "Return",
															"src": "8942:17:5"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 587,
										"nodeType": "StructuredDocumentation",
										"src": "8518:215:5",
										"text": " @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"
									},
									"id": 610,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCallResult",
									"nameLocation": "8748:16:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 594,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 589,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "8780:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 610,
												"src": "8775:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 588,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "8775:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 591,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "8811:10:5",
												"nodeType": "VariableDeclaration",
												"scope": 610,
												"src": "8798:23:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 590,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8798:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 593,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "8846:12:5",
												"nodeType": "VariableDeclaration",
												"scope": 610,
												"src": "8832:26:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 592,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "8832:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8764:101:5"
									},
									"returnParameters": {
										"id": 597,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 596,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 610,
												"src": "8889:12:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 595,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8889:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8888:14:5"
									},
									"scope": 631,
									"src": "8739:305:5",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 629,
										"nodeType": "Block",
										"src": "9135:469:5",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 620,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 617,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 612,
															"src": "9213:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 618,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "9213:17:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 619,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "9233:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "9213:21:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 627,
													"nodeType": "Block",
													"src": "9550:47:5",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 624,
																		"name": "errorMessage",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 614,
																		"src": "9572:12:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 623,
																	"name": "revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967277,
																		4294967277
																	],
																	"referencedDeclaration": 4294967277,
																	"src": "9565:6:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (string memory) pure"
																	}
																},
																"id": 625,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9565:20:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 626,
															"nodeType": "ExpressionStatement",
															"src": "9565:20:5"
														}
													]
												},
												"id": 628,
												"nodeType": "IfStatement",
												"src": "9209:388:5",
												"trueBody": {
													"id": 622,
													"nodeType": "Block",
													"src": "9236:308:5",
													"statements": [
														{
															"AST": {
																"nodeType": "YulBlock",
																"src": "9397:136:5",
																"statements": [
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "9416:40:5",
																		"value": {
																			"arguments": [
																				{
																					"name": "returndata",
																					"nodeType": "YulIdentifier",
																					"src": "9445:10:5"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nodeType": "YulIdentifier",
																				"src": "9439:5:5"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9439:17:5"
																		},
																		"variables": [
																			{
																				"name": "returndata_size",
																				"nodeType": "YulTypedName",
																				"src": "9420:15:5",
																				"type": ""
																			}
																		]
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "9485:2:5",
																							"type": "",
																							"value": "32"
																						},
																						{
																							"name": "returndata",
																							"nodeType": "YulIdentifier",
																							"src": "9489:10:5"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "9481:3:5"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "9481:19:5"
																				},
																				{
																					"name": "returndata_size",
																					"nodeType": "YulIdentifier",
																					"src": "9502:15:5"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "9474:6:5"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9474:44:5"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "9474:44:5"
																	}
																]
															},
															"documentation": "@solidity memory-safe-assembly",
															"evmVersion": "london",
															"externalReferences": [
																{
																	"declaration": 612,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "9445:10:5",
																	"valueSize": 1
																},
																{
																	"declaration": 612,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "9489:10:5",
																	"valueSize": 1
																}
															],
															"id": 621,
															"nodeType": "InlineAssembly",
															"src": "9388:145:5"
														}
													]
												}
											}
										]
									},
									"id": 630,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_revert",
									"nameLocation": "9061:7:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 615,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 612,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "9082:10:5",
												"nodeType": "VariableDeclaration",
												"scope": 630,
												"src": "9069:23:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 611,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "9069:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 614,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "9108:12:5",
												"nodeType": "VariableDeclaration",
												"scope": 630,
												"src": "9094:26:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 613,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "9094:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9068:53:5"
									},
									"returnParameters": {
										"id": 616,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9135:0:5"
									},
									"scope": 631,
									"src": "9052:552:5",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 632,
							"src": "203:9404:5",
							"usedErrors": []
						}
					],
					"src": "104:9505:5"
				},
				"id": 5
			},
			"libraries/SafeERC20.sol": {
				"ast": {
					"absolutePath": "libraries/SafeERC20.sol",
					"exportedSymbols": {
						"Address": [
							631
						],
						"IERC20": [
							231
						],
						"IERC20Permit": [
							292
						],
						"SafeERC20": [
							1010
						]
					},
					"id": 1011,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 633,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "118:24:6"
						},
						{
							"absolutePath": "interfaces/IERC20.sol",
							"file": "../interfaces/IERC20.sol",
							"id": 635,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1011,
							"sourceUnit": 232,
							"src": "146:48:6",
							"symbolAliases": [
								{
									"foreign": {
										"id": 634,
										"name": "IERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"src": "154:6:6",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "interfaces/IERC20Permit.sol",
							"file": "../interfaces/IERC20Permit.sol",
							"id": 637,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1011,
							"sourceUnit": 293,
							"src": "196:60:6",
							"symbolAliases": [
								{
									"foreign": {
										"id": 636,
										"name": "IERC20Permit",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"src": "204:12:6",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "libraries/Address.sol",
							"file": "../libraries/Address.sol",
							"id": 639,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1011,
							"sourceUnit": 632,
							"src": "258:49:6",
							"symbolAliases": [
								{
									"foreign": {
										"id": 638,
										"name": "Address",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"src": "266:7:6",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "SafeERC20",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 640,
								"nodeType": "StructuredDocumentation",
								"src": "311:465:6",
								"text": " @title SafeERC20\n @dev Wrappers around ERC20 operations that throw on failure (when the token\n contract returns false). Tokens that return no value (and instead revert or\n throw on failure) are also supported, non-reverting calls are assumed to be\n successful.\n To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n which allows you to call the safe operations as `token.safeTransfer(...)`, etc."
							},
							"fullyImplemented": true,
							"id": 1010,
							"linearizedBaseContracts": [
								1010
							],
							"name": "SafeERC20",
							"nameLocation": "786:9:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"id": 643,
									"libraryName": {
										"id": 641,
										"name": "Address",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 631,
										"src": "809:7:6"
									},
									"nodeType": "UsingForDirective",
									"src": "803:26:6",
									"typeName": {
										"id": 642,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "821:7:6",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									}
								},
								{
									"body": {
										"id": 666,
										"nodeType": "Block",
										"src": "1097:105:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 655,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 647,
															"src": "1128:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$231",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 658,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 647,
																			"src": "1158:5:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$231",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 659,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "transfer",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 198,
																		"src": "1158:14:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 660,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "1158:23:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 661,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 649,
																	"src": "1183:2:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 662,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 651,
																	"src": "1187:5:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 656,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "1135:3:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 657,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "1135:22:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 663,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1135:58:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$231",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 654,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 961,
														"src": "1108:19:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$231_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 664,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1108:86:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 665,
												"nodeType": "ExpressionStatement",
												"src": "1108:86:6"
											}
										]
									},
									"documentation": {
										"id": 644,
										"nodeType": "StructuredDocumentation",
										"src": "837:182:6",
										"text": " @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n non-reverting calls are assumed to be successful."
									},
									"id": 667,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransfer",
									"nameLocation": "1034:12:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 652,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 647,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1054:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 667,
												"src": "1047:12:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$231",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 646,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 645,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 231,
														"src": "1047:6:6"
													},
													"referencedDeclaration": 231,
													"src": "1047:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$231",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 649,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1069:2:6",
												"nodeType": "VariableDeclaration",
												"scope": 667,
												"src": "1061:10:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 648,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1061:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 651,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1081:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 667,
												"src": "1073:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 650,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1073:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1046:41:6"
									},
									"returnParameters": {
										"id": 653,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1097:0:6"
									},
									"scope": 1010,
									"src": "1025:177:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 693,
										"nodeType": "Block",
										"src": "1537:115:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 681,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 671,
															"src": "1568:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$231",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 684,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 671,
																			"src": "1598:5:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$231",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 685,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "transferFrom",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 230,
																		"src": "1598:18:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,address,uint256) external returns (bool)"
																		}
																	},
																	"id": 686,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "1598:27:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 687,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 673,
																	"src": "1627:4:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 688,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 675,
																	"src": "1633:2:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 689,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 677,
																	"src": "1637:5:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 682,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "1575:3:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 683,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "1575:22:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 690,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1575:68:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$231",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 680,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 961,
														"src": "1548:19:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$231_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 691,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1548:96:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 692,
												"nodeType": "ExpressionStatement",
												"src": "1548:96:6"
											}
										]
									},
									"documentation": {
										"id": 668,
										"nodeType": "StructuredDocumentation",
										"src": "1210:231:6",
										"text": " @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n calling contract. If `token` returns no value, non-reverting calls are assumed to be successful."
									},
									"id": 694,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "1456:16:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 678,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 671,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1480:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 694,
												"src": "1473:12:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$231",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 670,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 669,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 231,
														"src": "1473:6:6"
													},
													"referencedDeclaration": 231,
													"src": "1473:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$231",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 673,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "1495:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 694,
												"src": "1487:12:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 672,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1487:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 675,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1509:2:6",
												"nodeType": "VariableDeclaration",
												"scope": 694,
												"src": "1501:10:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 674,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1501:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 677,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1521:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 694,
												"src": "1513:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 676,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1513:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1472:55:6"
									},
									"returnParameters": {
										"id": 679,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1537:0:6"
									},
									"scope": 1010,
									"src": "1447:205:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 737,
										"nodeType": "Block",
										"src": "1997:506:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 721,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 708,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 706,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 702,
																			"src": "2251:5:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 707,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2260:1:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "2251:10:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 709,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2250:12:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 719,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"id": 714,
																							"name": "this",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 4294967268,
																							"src": "2291:4:6",
																							"typeDescriptions": {
																								"typeIdentifier": "t_contract$_SafeERC20_$1010",
																								"typeString": "library SafeERC20"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_contract$_SafeERC20_$1010",
																								"typeString": "library SafeERC20"
																							}
																						],
																						"id": 713,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "2283:7:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_address_$",
																							"typeString": "type(address)"
																						},
																						"typeName": {
																							"id": 712,
																							"name": "address",
																							"nodeType": "ElementaryTypeName",
																							"src": "2283:7:6",
																							"typeDescriptions": {}
																						}
																					},
																					"id": 715,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "typeConversion",
																					"lValueRequested": false,
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "2283:13:6",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"id": 716,
																					"name": "spender",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 700,
																					"src": "2298:7:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				],
																				"expression": {
																					"id": 710,
																					"name": "token",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 698,
																					"src": "2267:5:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IERC20_$231",
																						"typeString": "contract IERC20"
																					}
																				},
																				"id": 711,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "allowance",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 208,
																				"src": "2267:15:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																					"typeString": "function (address,address) view external returns (uint256)"
																				}
																			},
																			"id": 717,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "2267:39:6",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 718,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2310:1:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "2267:44:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 720,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2266:46:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "2250:62:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365",
															"id": 722,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2327:56:6",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25",
																"typeString": "literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""
															},
															"value": "SafeERC20: approve from non-zero to non-zero allowance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25",
																"typeString": "literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""
															}
														],
														"id": 705,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2228:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 723,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2228:166:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 724,
												"nodeType": "ExpressionStatement",
												"src": "2228:166:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 726,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 698,
															"src": "2425:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$231",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 729,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 698,
																			"src": "2455:5:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$231",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 730,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "approve",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 218,
																		"src": "2455:13:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 731,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "2455:22:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 732,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 700,
																	"src": "2479:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 733,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 702,
																	"src": "2488:5:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 727,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "2432:3:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 728,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "2432:22:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 734,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2432:62:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$231",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 725,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 961,
														"src": "2405:19:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$231_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 735,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2405:90:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 736,
												"nodeType": "ExpressionStatement",
												"src": "2405:90:6"
											}
										]
									},
									"documentation": {
										"id": 695,
										"nodeType": "StructuredDocumentation",
										"src": "1660:255:6",
										"text": " @dev Deprecated. This function has issues similar to the ones found in\n {IERC20-approve}, and its usage is discouraged.\n Whenever possible, use {safeIncreaseAllowance} and\n {safeDecreaseAllowance} instead."
									},
									"id": 738,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeApprove",
									"nameLocation": "1930:11:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 703,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 698,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1949:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 738,
												"src": "1942:12:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$231",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 697,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 696,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 231,
														"src": "1942:6:6"
													},
													"referencedDeclaration": 231,
													"src": "1942:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$231",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 700,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1964:7:6",
												"nodeType": "VariableDeclaration",
												"scope": 738,
												"src": "1956:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 699,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1956:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 702,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1981:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 738,
												"src": "1973:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 701,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1973:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1941:46:6"
									},
									"returnParameters": {
										"id": 704,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1997:0:6"
									},
									"scope": 1010,
									"src": "1921:582:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 774,
										"nodeType": "Block",
										"src": "2786:197:6",
										"statements": [
											{
												"assignments": [
													750
												],
												"declarations": [
													{
														"constant": false,
														"id": 750,
														"mutability": "mutable",
														"name": "oldAllowance",
														"nameLocation": "2805:12:6",
														"nodeType": "VariableDeclaration",
														"scope": 774,
														"src": "2797:20:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 749,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2797:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 759,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 755,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "2844:4:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_SafeERC20_$1010",
																		"typeString": "library SafeERC20"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_SafeERC20_$1010",
																		"typeString": "library SafeERC20"
																	}
																],
																"id": 754,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2836:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 753,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "2836:7:6",
																	"typeDescriptions": {}
																}
															},
															"id": 756,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2836:13:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 757,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 744,
															"src": "2851:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 751,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 742,
															"src": "2820:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$231",
																"typeString": "contract IERC20"
															}
														},
														"id": 752,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "allowance",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 208,
														"src": "2820:15:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address,address) view external returns (uint256)"
														}
													},
													"id": 758,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2820:39:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2797:62:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 761,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 742,
															"src": "2890:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$231",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 764,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 742,
																			"src": "2920:5:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$231",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 765,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "approve",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 218,
																		"src": "2920:13:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 766,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "2920:22:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 767,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 744,
																	"src": "2944:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 770,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 768,
																		"name": "oldAllowance",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 750,
																		"src": "2953:12:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "+",
																	"rightExpression": {
																		"id": 769,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 746,
																		"src": "2968:5:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2953:20:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 762,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "2897:3:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 763,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "2897:22:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 771,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2897:77:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$231",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 760,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 961,
														"src": "2870:19:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$231_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 772,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2870:105:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 773,
												"nodeType": "ExpressionStatement",
												"src": "2870:105:6"
											}
										]
									},
									"documentation": {
										"id": 739,
										"nodeType": "StructuredDocumentation",
										"src": "2511:183:6",
										"text": " @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful."
									},
									"id": 775,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeIncreaseAllowance",
									"nameLocation": "2709:21:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 747,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 742,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "2738:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 775,
												"src": "2731:12:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$231",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 741,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 740,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 231,
														"src": "2731:6:6"
													},
													"referencedDeclaration": 231,
													"src": "2731:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$231",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 744,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2753:7:6",
												"nodeType": "VariableDeclaration",
												"scope": 775,
												"src": "2745:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 743,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2745:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 746,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2770:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 775,
												"src": "2762:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 745,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2762:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2730:46:6"
									},
									"returnParameters": {
										"id": 748,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2786:0:6"
									},
									"scope": 1010,
									"src": "2700:283:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 819,
										"nodeType": "Block",
										"src": "3266:327:6",
										"statements": [
											{
												"id": 818,
												"nodeType": "UncheckedBlock",
												"src": "3277:309:6",
												"statements": [
													{
														"assignments": [
															787
														],
														"declarations": [
															{
																"constant": false,
																"id": 787,
																"mutability": "mutable",
																"name": "oldAllowance",
																"nameLocation": "3310:12:6",
																"nodeType": "VariableDeclaration",
																"scope": 818,
																"src": "3302:20:6",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 786,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "3302:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 796,
														"initialValue": {
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 792,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "3349:4:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_SafeERC20_$1010",
																				"typeString": "library SafeERC20"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_SafeERC20_$1010",
																				"typeString": "library SafeERC20"
																			}
																		],
																		"id": 791,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "3341:7:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 790,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "3341:7:6",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 793,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "3341:13:6",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 794,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 781,
																	"src": "3356:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"expression": {
																	"id": 788,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 779,
																	"src": "3325:5:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$231",
																		"typeString": "contract IERC20"
																	}
																},
																"id": 789,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "allowance",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 208,
																"src": "3325:15:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																	"typeString": "function (address,address) view external returns (uint256)"
																}
															},
															"id": 795,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3325:39:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "3302:62:6"
													},
													{
														"expression": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 800,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 798,
																		"name": "oldAllowance",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 787,
																		"src": "3387:12:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": ">=",
																	"rightExpression": {
																		"id": 799,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 783,
																		"src": "3403:5:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "3387:21:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																{
																	"hexValue": "5361666545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f",
																	"id": 801,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "string",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3410:43:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a",
																		"typeString": "literal_string \"SafeERC20: decreased allowance below zero\""
																	},
																	"value": "SafeERC20: decreased allowance below zero"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	{
																		"typeIdentifier": "t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a",
																		"typeString": "literal_string \"SafeERC20: decreased allowance below zero\""
																	}
																],
																"id": 797,
																"name": "require",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	4294967278,
																	4294967278
																],
																"referencedDeclaration": 4294967278,
																"src": "3379:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																	"typeString": "function (bool,string memory) pure"
																}
															},
															"id": 802,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3379:75:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 803,
														"nodeType": "ExpressionStatement",
														"src": "3379:75:6"
													},
													{
														"expression": {
															"arguments": [
																{
																	"id": 805,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 779,
																	"src": "3489:5:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$231",
																		"typeString": "contract IERC20"
																	}
																},
																{
																	"arguments": [
																		{
																			"expression": {
																				"expression": {
																					"id": 808,
																					"name": "token",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 779,
																					"src": "3519:5:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IERC20_$231",
																						"typeString": "contract IERC20"
																					}
																				},
																				"id": 809,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "approve",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 218,
																				"src": "3519:13:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																					"typeString": "function (address,uint256) external returns (bool)"
																				}
																			},
																			"id": 810,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "selector",
																			"nodeType": "MemberAccess",
																			"src": "3519:22:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes4",
																				"typeString": "bytes4"
																			}
																		},
																		{
																			"id": 811,
																			"name": "spender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 781,
																			"src": "3543:7:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 814,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 812,
																				"name": "oldAllowance",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 787,
																				"src": "3552:12:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "-",
																			"rightExpression": {
																				"id": 813,
																				"name": "value",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 783,
																				"src": "3567:5:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "3552:20:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_bytes4",
																				"typeString": "bytes4"
																			},
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			},
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"expression": {
																			"id": 806,
																			"name": "abi",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967295,
																			"src": "3496:3:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_abi",
																				"typeString": "abi"
																			}
																		},
																		"id": 807,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberName": "encodeWithSelector",
																		"nodeType": "MemberAccess",
																		"src": "3496:22:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																			"typeString": "function (bytes4) pure returns (bytes memory)"
																		}
																	},
																	"id": 815,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "3496:77:6",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20_$231",
																		"typeString": "contract IERC20"
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"id": 804,
																"name": "_callOptionalReturn",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 961,
																"src": "3469:19:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$231_$_t_bytes_memory_ptr_$returns$__$",
																	"typeString": "function (contract IERC20,bytes memory)"
																}
															},
															"id": 816,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3469:105:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 817,
														"nodeType": "ExpressionStatement",
														"src": "3469:105:6"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 776,
										"nodeType": "StructuredDocumentation",
										"src": "2991:183:6",
										"text": " @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful."
									},
									"id": 820,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeDecreaseAllowance",
									"nameLocation": "3189:21:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 784,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 779,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "3218:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 820,
												"src": "3211:12:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$231",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 778,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 777,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 231,
														"src": "3211:6:6"
													},
													"referencedDeclaration": 231,
													"src": "3211:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$231",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 781,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "3233:7:6",
												"nodeType": "VariableDeclaration",
												"scope": 820,
												"src": "3225:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 780,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3225:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 783,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3250:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 820,
												"src": "3242:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 782,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3242:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3210:46:6"
									},
									"returnParameters": {
										"id": 785,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3266:0:6"
									},
									"scope": 1010,
									"src": "3180:413:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 866,
										"nodeType": "Block",
										"src": "3996:340:6",
										"statements": [
											{
												"assignments": [
													832
												],
												"declarations": [
													{
														"constant": false,
														"id": 832,
														"mutability": "mutable",
														"name": "approvalCall",
														"nameLocation": "4020:12:6",
														"nodeType": "VariableDeclaration",
														"scope": 866,
														"src": "4007:25:6",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 831,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "4007:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 841,
												"initialValue": {
													"arguments": [
														{
															"expression": {
																"expression": {
																	"id": 835,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 824,
																	"src": "4058:5:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$231",
																		"typeString": "contract IERC20"
																	}
																},
																"id": 836,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "approve",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 218,
																"src": "4058:13:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																	"typeString": "function (address,uint256) external returns (bool)"
																}
															},
															"id": 837,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "selector",
															"nodeType": "MemberAccess",
															"src": "4058:22:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes4",
																"typeString": "bytes4"
															}
														},
														{
															"id": 838,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 826,
															"src": "4082:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 839,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 828,
															"src": "4091:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes4",
																"typeString": "bytes4"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 833,
															"name": "abi",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967295,
															"src": "4035:3:6",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_abi",
																"typeString": "abi"
															}
														},
														"id": 834,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberName": "encodeWithSelector",
														"nodeType": "MemberAccess",
														"src": "4035:22:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes4) pure returns (bytes memory)"
														}
													},
													"id": 840,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4035:62:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4007:90:6"
											},
											{
												"condition": {
													"id": 846,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "4114:45:6",
													"subExpression": {
														"arguments": [
															{
																"id": 843,
																"name": "token",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 824,
																"src": "4139:5:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_IERC20_$231",
																	"typeString": "contract IERC20"
																}
															},
															{
																"id": 844,
																"name": "approvalCall",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 832,
																"src": "4146:12:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_contract$_IERC20_$231",
																	"typeString": "contract IERC20"
																},
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"id": 842,
															"name": "_callOptionalReturnBool",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1009,
															"src": "4115:23:6",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$231_$_t_bytes_memory_ptr_$returns$_t_bool_$",
																"typeString": "function (contract IERC20,bytes memory) returns (bool)"
															}
														},
														"id": 845,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "4115:44:6",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 865,
												"nodeType": "IfStatement",
												"src": "4110:219:6",
												"trueBody": {
													"id": 864,
													"nodeType": "Block",
													"src": "4161:168:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 848,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 824,
																		"src": "4196:5:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$231",
																			"typeString": "contract IERC20"
																		}
																	},
																	{
																		"arguments": [
																			{
																				"expression": {
																					"expression": {
																						"id": 851,
																						"name": "token",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 824,
																						"src": "4226:5:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_contract$_IERC20_$231",
																							"typeString": "contract IERC20"
																						}
																					},
																					"id": 852,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "approve",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 218,
																					"src": "4226:13:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																						"typeString": "function (address,uint256) external returns (bool)"
																					}
																				},
																				"id": 853,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "selector",
																				"nodeType": "MemberAccess",
																				"src": "4226:22:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes4",
																					"typeString": "bytes4"
																				}
																			},
																			{
																				"id": 854,
																				"name": "spender",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 826,
																				"src": "4250:7:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"hexValue": "30",
																				"id": 855,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "4259:1:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_bytes4",
																					"typeString": "bytes4"
																				},
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"expression": {
																				"id": 849,
																				"name": "abi",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967295,
																				"src": "4203:3:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_abi",
																					"typeString": "abi"
																				}
																			},
																			"id": 850,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"memberName": "encodeWithSelector",
																			"nodeType": "MemberAccess",
																			"src": "4203:22:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																				"typeString": "function (bytes4) pure returns (bytes memory)"
																			}
																		},
																		"id": 856,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "4203:58:6",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_IERC20_$231",
																			"typeString": "contract IERC20"
																		},
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	],
																	"id": 847,
																	"name": "_callOptionalReturn",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 961,
																	"src": "4176:19:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$231_$_t_bytes_memory_ptr_$returns$__$",
																		"typeString": "function (contract IERC20,bytes memory)"
																	}
																},
																"id": 857,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4176:86:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 858,
															"nodeType": "ExpressionStatement",
															"src": "4176:86:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"id": 860,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 824,
																		"src": "4297:5:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$231",
																			"typeString": "contract IERC20"
																		}
																	},
																	{
																		"id": 861,
																		"name": "approvalCall",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 832,
																		"src": "4304:12:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_IERC20_$231",
																			"typeString": "contract IERC20"
																		},
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	],
																	"id": 859,
																	"name": "_callOptionalReturn",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 961,
																	"src": "4277:19:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$231_$_t_bytes_memory_ptr_$returns$__$",
																		"typeString": "function (contract IERC20,bytes memory)"
																	}
																},
																"id": 862,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4277:40:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 863,
															"nodeType": "ExpressionStatement",
															"src": "4277:40:6"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 821,
										"nodeType": "StructuredDocumentation",
										"src": "3601:312:6",
										"text": " @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n to be set to zero before setting it to a non-zero value, such as USDT."
									},
									"id": 867,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "forceApprove",
									"nameLocation": "3928:12:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 829,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 824,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "3948:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 867,
												"src": "3941:12:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$231",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 823,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 822,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 231,
														"src": "3941:6:6"
													},
													"referencedDeclaration": 231,
													"src": "3941:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$231",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 826,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "3963:7:6",
												"nodeType": "VariableDeclaration",
												"scope": 867,
												"src": "3955:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 825,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3955:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 828,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3980:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 867,
												"src": "3972:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 827,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3972:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3940:46:6"
									},
									"returnParameters": {
										"id": 830,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3996:0:6"
									},
									"scope": 1010,
									"src": "3919:417:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 923,
										"nodeType": "Block",
										"src": "4718:262:6",
										"statements": [
											{
												"assignments": [
													889
												],
												"declarations": [
													{
														"constant": false,
														"id": 889,
														"mutability": "mutable",
														"name": "nonceBefore",
														"nameLocation": "4737:11:6",
														"nodeType": "VariableDeclaration",
														"scope": 923,
														"src": "4729:19:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 888,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4729:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 894,
												"initialValue": {
													"arguments": [
														{
															"id": 892,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 873,
															"src": "4764:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 890,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 871,
															"src": "4751:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20Permit_$292",
																"typeString": "contract IERC20Permit"
															}
														},
														"id": 891,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "nonces",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 285,
														"src": "4751:12:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view external returns (uint256)"
														}
													},
													"id": 893,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4751:19:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4729:41:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 898,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 873,
															"src": "4794:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 899,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 875,
															"src": "4801:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 900,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 877,
															"src": "4810:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 901,
															"name": "deadline",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 879,
															"src": "4817:8:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 902,
															"name": "v",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 881,
															"src": "4827:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														{
															"id": 903,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 883,
															"src": "4830:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 904,
															"name": "s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 885,
															"src": "4833:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"expression": {
															"id": 895,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 871,
															"src": "4781:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20Permit_$292",
																"typeString": "contract IERC20Permit"
															}
														},
														"id": 897,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "permit",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 277,
														"src": "4781:12:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$__$",
															"typeString": "function (address,address,uint256,uint256,uint8,bytes32,bytes32) external"
														}
													},
													"id": 905,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4781:54:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 906,
												"nodeType": "ExpressionStatement",
												"src": "4781:54:6"
											},
											{
												"assignments": [
													908
												],
												"declarations": [
													{
														"constant": false,
														"id": 908,
														"mutability": "mutable",
														"name": "nonceAfter",
														"nameLocation": "4854:10:6",
														"nodeType": "VariableDeclaration",
														"scope": 923,
														"src": "4846:18:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 907,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4846:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 913,
												"initialValue": {
													"arguments": [
														{
															"id": 911,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 873,
															"src": "4880:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 909,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 871,
															"src": "4867:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20Permit_$292",
																"typeString": "contract IERC20Permit"
															}
														},
														"id": 910,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "nonces",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 285,
														"src": "4867:12:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view external returns (uint256)"
														}
													},
													"id": 912,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4867:19:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4846:40:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 919,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 915,
																"name": "nonceAfter",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 908,
																"src": "4905:10:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 918,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 916,
																	"name": "nonceBefore",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 889,
																	"src": "4919:11:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "+",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 917,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "4933:1:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "4919:15:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4905:29:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5361666545524332303a207065726d697420646964206e6f742073756363656564",
															"id": 920,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4936:35:6",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d",
																"typeString": "literal_string \"SafeERC20: permit did not succeed\""
															},
															"value": "SafeERC20: permit did not succeed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d",
																"typeString": "literal_string \"SafeERC20: permit did not succeed\""
															}
														],
														"id": 914,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4897:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 921,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4897:75:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 922,
												"nodeType": "ExpressionStatement",
												"src": "4897:75:6"
											}
										]
									},
									"documentation": {
										"id": 868,
										"nodeType": "StructuredDocumentation",
										"src": "4344:144:6",
										"text": " @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n Revert on invalid signature."
									},
									"id": 924,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safePermit",
									"nameLocation": "4503:10:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 886,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 871,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "4537:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 924,
												"src": "4524:18:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20Permit_$292",
													"typeString": "contract IERC20Permit"
												},
												"typeName": {
													"id": 870,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 869,
														"name": "IERC20Permit",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 292,
														"src": "4524:12:6"
													},
													"referencedDeclaration": 292,
													"src": "4524:12:6",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20Permit_$292",
														"typeString": "contract IERC20Permit"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 873,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "4561:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 924,
												"src": "4553:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 872,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4553:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 875,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "4585:7:6",
												"nodeType": "VariableDeclaration",
												"scope": 924,
												"src": "4577:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 874,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4577:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 877,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4611:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 924,
												"src": "4603:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 876,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4603:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 879,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "4635:8:6",
												"nodeType": "VariableDeclaration",
												"scope": 924,
												"src": "4627:16:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 878,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4627:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 881,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "4660:1:6",
												"nodeType": "VariableDeclaration",
												"scope": 924,
												"src": "4654:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 880,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "4654:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 883,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "4680:1:6",
												"nodeType": "VariableDeclaration",
												"scope": 924,
												"src": "4672:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 882,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4672:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 885,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "4700:1:6",
												"nodeType": "VariableDeclaration",
												"scope": 924,
												"src": "4692:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 884,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4692:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4513:195:6"
									},
									"returnParameters": {
										"id": 887,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4718:0:6"
									},
									"scope": 1010,
									"src": "4494:486:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 960,
										"nodeType": "Block",
										"src": "5441:579:6",
										"statements": [
											{
												"assignments": [
													934
												],
												"declarations": [
													{
														"constant": false,
														"id": 934,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "5808:10:6",
														"nodeType": "VariableDeclaration",
														"scope": 960,
														"src": "5795:23:6",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 933,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "5795:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 943,
												"initialValue": {
													"arguments": [
														{
															"id": 940,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 930,
															"src": "5849:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564",
															"id": 941,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5855:34:6",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b",
																"typeString": "literal_string \"SafeERC20: low-level call failed\""
															},
															"value": "SafeERC20: low-level call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b",
																"typeString": "literal_string \"SafeERC20: low-level call failed\""
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 937,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 928,
																	"src": "5829:5:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$231",
																		"typeString": "contract IERC20"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20_$231",
																		"typeString": "contract IERC20"
																	}
																],
																"id": 936,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "5821:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 935,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "5821:7:6",
																	"typeDescriptions": {}
																}
															},
															"id": 938,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5821:14:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 939,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "functionCall",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 391,
														"src": "5821:27:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$bound_to$_t_address_$",
															"typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
														}
													},
													"id": 942,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5821:69:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5795:95:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 956,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 948,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 945,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 934,
																		"src": "5909:10:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 946,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"src": "5909:17:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 947,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5930:1:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "5909:22:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"arguments": [
																	{
																		"id": 951,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 934,
																		"src": "5946:10:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	{
																		"components": [
																			{
																				"id": 953,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "5959:4:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_bool_$",
																					"typeString": "type(bool)"
																				},
																				"typeName": {
																					"id": 952,
																					"name": "bool",
																					"nodeType": "ElementaryTypeName",
																					"src": "5959:4:6",
																					"typeDescriptions": {}
																				}
																			}
																		],
																		"id": 954,
																		"isConstant": false,
																		"isInlineArray": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "TupleExpression",
																		"src": "5958:6:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_bool_$",
																			"typeString": "type(bool)"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		},
																		{
																			"typeIdentifier": "t_type$_t_bool_$",
																			"typeString": "type(bool)"
																		}
																	],
																	"expression": {
																		"id": 949,
																		"name": "abi",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967295,
																		"src": "5935:3:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_abi",
																			"typeString": "abi"
																		}
																	},
																	"id": 950,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberName": "decode",
																	"nodeType": "MemberAccess",
																	"src": "5935:10:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 955,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5935:30:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "5909:56:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564",
															"id": 957,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5967:44:6",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd",
																"typeString": "literal_string \"SafeERC20: ERC20 operation did not succeed\""
															},
															"value": "SafeERC20: ERC20 operation did not succeed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd",
																"typeString": "literal_string \"SafeERC20: ERC20 operation did not succeed\""
															}
														],
														"id": 944,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5901:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 958,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5901:111:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 959,
												"nodeType": "ExpressionStatement",
												"src": "5901:111:6"
											}
										]
									},
									"documentation": {
										"id": 925,
										"nodeType": "StructuredDocumentation",
										"src": "4988:377:6",
										"text": " @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants)."
									},
									"id": 961,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_callOptionalReturn",
									"nameLocation": "5380:19:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 931,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 928,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "5407:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 961,
												"src": "5400:12:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$231",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 927,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 926,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 231,
														"src": "5400:6:6"
													},
													"referencedDeclaration": 231,
													"src": "5400:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$231",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 930,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5427:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 961,
												"src": "5414:17:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 929,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5414:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5399:33:6"
									},
									"returnParameters": {
										"id": 932,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5441:0:6"
									},
									"scope": 1010,
									"src": "5371:649:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 1008,
										"nodeType": "Block",
										"src": "6620:513:6",
										"statements": [
											{
												"assignments": [
													973,
													975
												],
												"declarations": [
													{
														"constant": false,
														"id": 973,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "6926:7:6",
														"nodeType": "VariableDeclaration",
														"scope": 1008,
														"src": "6921:12:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 972,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "6921:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 975,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "6948:10:6",
														"nodeType": "VariableDeclaration",
														"scope": 1008,
														"src": "6935:23:6",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 974,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "6935:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 983,
												"initialValue": {
													"arguments": [
														{
															"id": 981,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 967,
															"src": "6982:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 978,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 965,
																	"src": "6970:5:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$231",
																		"typeString": "contract IERC20"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20_$231",
																		"typeString": "contract IERC20"
																	}
																],
																"id": 977,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "6962:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 976,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "6962:7:6",
																	"typeDescriptions": {}
																}
															},
															"id": 979,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6962:14:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 980,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "call",
														"nodeType": "MemberAccess",
														"src": "6962:19:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 982,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6962:25:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6920:67:6"
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 1006,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"id": 998,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 984,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 973,
															"src": "7018:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&&",
														"rightExpression": {
															"components": [
																{
																	"commonType": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"id": 996,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 988,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"expression": {
																				"id": 985,
																				"name": "returndata",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 975,
																				"src": "7030:10:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			},
																			"id": 986,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "length",
																			"nodeType": "MemberAccess",
																			"src": "7030:17:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 987,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "7051:1:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "7030:22:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "||",
																	"rightExpression": {
																		"arguments": [
																			{
																				"id": 991,
																				"name": "returndata",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 975,
																				"src": "7067:10:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			},
																			{
																				"components": [
																					{
																						"id": 993,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "7080:4:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_bool_$",
																							"typeString": "type(bool)"
																						},
																						"typeName": {
																							"id": 992,
																							"name": "bool",
																							"nodeType": "ElementaryTypeName",
																							"src": "7080:4:6",
																							"typeDescriptions": {}
																						}
																					}
																				],
																				"id": 994,
																				"isConstant": false,
																				"isInlineArray": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "TupleExpression",
																				"src": "7079:6:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_bool_$",
																					"typeString": "type(bool)"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				},
																				{
																					"typeIdentifier": "t_type$_t_bool_$",
																					"typeString": "type(bool)"
																				}
																			],
																			"expression": {
																				"id": 989,
																				"name": "abi",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967295,
																				"src": "7056:3:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_abi",
																					"typeString": "abi"
																				}
																			},
																			"id": 990,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"memberName": "decode",
																			"nodeType": "MemberAccess",
																			"src": "7056:10:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
																				"typeString": "function () pure"
																			}
																		},
																		"id": 995,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "7056:30:6",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"src": "7030:56:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																}
															],
															"id": 997,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "7029:58:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"src": "7018:69:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 1003,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 965,
																		"src": "7118:5:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$231",
																			"typeString": "contract IERC20"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_IERC20_$231",
																			"typeString": "contract IERC20"
																		}
																	],
																	"id": 1002,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "7110:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 1001,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "7110:7:6",
																		"typeDescriptions": {}
																	}
																},
																"id": 1004,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7110:14:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"expression": {
																"id": 999,
																"name": "Address",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 631,
																"src": "7091:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_Address_$631_$",
																	"typeString": "type(library Address)"
																}
															},
															"id": 1000,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "isContract",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 319,
															"src": "7091:18:6",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																"typeString": "function (address) view returns (bool)"
															}
														},
														"id": 1005,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7091:34:6",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "7018:107:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 971,
												"id": 1007,
												"nodeType": "Return",
												"src": "6998:127:6"
											}
										]
									},
									"documentation": {
										"id": 962,
										"nodeType": "StructuredDocumentation",
										"src": "6028:497:6",
										"text": " @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants).\n This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead."
									},
									"id": 1009,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_callOptionalReturnBool",
									"nameLocation": "6540:23:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 968,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 965,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "6571:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 1009,
												"src": "6564:12:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$231",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 964,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 963,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 231,
														"src": "6564:6:6"
													},
													"referencedDeclaration": 231,
													"src": "6564:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$231",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 967,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6591:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 1009,
												"src": "6578:17:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 966,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6578:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6563:33:6"
									},
									"returnParameters": {
										"id": 971,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 970,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1009,
												"src": "6614:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 969,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6614:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6613:6:6"
									},
									"scope": 1010,
									"src": "6531:602:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 1011,
							"src": "778:6358:6",
							"usedErrors": []
						}
					],
					"src": "118:7020:6"
				},
				"id": 6
			}
		}
	}
}