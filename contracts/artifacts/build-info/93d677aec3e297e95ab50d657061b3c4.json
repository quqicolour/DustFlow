{
	"id": "93d677aec3e297e95ab50d657061b3c4",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.19",
	"solcLongVersion": "0.8.19+commit.7dd6d404",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/TimeMarket.sol": {
				"content": "//SPDX-License-Identifier:MIT\r\npragma solidity ^0.8.9;\r\npragma abicoder v2;\r\nimport \"../libraries/SafeERC20.sol\";\r\nimport \"../interfaces/ITimeStruct.sol\";\r\nimport \"../interfaces/IError.sol\";\r\nimport \"../libraries/TimeFee.sol\";\r\n//uniswap v3\r\nimport '../interfaces/IERC721Receiver.sol';\r\nimport '../interfaces/IUniswapV3Factory.sol';\r\nimport '../interfaces/UniswapV3/INonfungiblePositionManager.sol';\r\n\r\n//uniswap v2\r\n\r\ncontract TimeMarket is ITimeStruct, IError{\r\n    using SafeERC20 for IERC20;\r\n    uint56 private clearingTime;\r\n    uint64 id;\r\n    address private airdropToken;\r\n\r\n    //uni v3\r\n    address private univ3Factory=0x1F98431c8aD98523631AE4a59f267346ea31F984;\r\n    address private NonfungiblePositionManager=0xC36442b4a4522E871399CD717aBDD847Ab11FE88;\r\n\r\n    constructor(address _airdropToken,uint _clearingTime){\r\n        airdropToken=_airdropToken;\r\n        clearingTime=uint56(_clearingTime);\r\n    }\r\n\r\n    mapping(uint64=>tradeMes)private _tradeMes;\r\n    //出售者是否在交易时间结束前存入某个交易的空投代币\r\n    mapping(address => mapping(uint256=>bool))private ifInject; \r\n\r\n    //交易成功，购买者是否提取空投代币\r\n    mapping(address => mapping(uint256=>bool))public userIfWithdraw1;\r\n    //交易成功，出售者是否提取稳定币\r\n    mapping(address => mapping(uint256=>bool))public userIfWithdraw2;\r\n    //交易失败，购买者是否提取违约金\r\n    mapping(address => mapping(uint256=>bool))public userIfWithdraw3;\r\n    //未交易，购买者取回money\r\n    mapping(address => mapping(uint256=>bool))public userIfWithdraw4;\r\n\r\n    //购买\r\n    function buy(address _tokenAddress,address token1,uint128 _buyAmount,uint128 _buyPrice)external{\r\n        uint total=_buyAmount*_buyPrice;\r\n        //默认选择交易量高的fee，默认选择token1为usdc地址\r\n        address thisPool=getPoolAddress(_tokenAddress,token1,1000);\r\n        if(total<100 ether){\r\n            revert NotEnoughAmount();\r\n        }\r\n        tradeMes memory newTradeMes=tradeMes({\r\n            tradeState:1,\r\n            tradeId:id,\r\n            buyTime:uint56(block.timestamp),\r\n            buyTotalAmount:_buyAmount,\r\n            buyPrice:_buyPrice,\r\n            tokenAddress:_tokenAddress,\r\n            buyerAddress:msg.sender,\r\n            solderAddress:address(this)\r\n        });\r\n        _tradeMes[id]=newTradeMes;\r\n        //将代币转入该合约\r\n        IERC20(_tokenAddress).safeTransferFrom(msg.sender,address(this),total);\r\n        //合约授权并转入uniswap v3的对应池子地址\r\n        IERC20(_tokenAddress).safeApprove(thisPool,total);\r\n        IERC20(_tokenAddress).safeTransferFrom(address(this),thisPool,total);\r\n        id++;\r\n    }\r\n\r\n    //出售版本 \r\n    function Sale(uint64 _id,address token1) external {\r\n        tradeMes memory maxTradeMes=_tradeMes[_id];\r\n        require(maxTradeMes.tradeState==1);  //未产生交易的事务\r\n        address promiseStableToken=maxTradeMes.tokenAddress;\r\n    \r\n        //默认选择交易量高的fee，默认选择token1为usdc地址\r\n        address thisPool=getPoolAddress(promiseStableToken,token1,1000);\r\n        uint penalAmount=getPenal(maxTradeMes.buyPrice, maxTradeMes.buyTotalAmount);\r\n        //质押违约金\r\n        IERC20(promiseStableToken).safeTransferFrom(\r\n            msg.sender,\r\n            address(this),\r\n            penalAmount\r\n        );\r\n        //合约授权并转入uniswap v3的对应池子地址\r\n        IERC20(promiseStableToken).safeApprove(thisPool,penalAmount);\r\n        IERC20(promiseStableToken).safeTransferFrom(address(this),thisPool,penalAmount);\r\n        _tradeMes[_id].solderAddress=msg.sender;\r\n        //寻找到出售者则更改为3\r\n        _tradeMes[_id].tradeState=2;\r\n    }\r\n\r\n    //出售者放入自己成交的空投token数量(在清算结束1小时前存入空投代币，否则视为违约)\r\n    function injectFutureToken(uint64 _id)external{\r\n        //是否已放入约定的空投代币数量\r\n        if(ifInject[msg.sender][_id]=false){revert AlreadyInjectToken();}\r\n        //发送者是否是出售者,同时也意味着出售者已经质押\r\n        if(getSolder(_id)!=msg.sender){revert NorSolder();}\r\n\r\n        //需要质押的空投代币数量\r\n        uint256 thisAirdropAmount=_tradeMes[_id].buyTotalAmount;\r\n        IERC20(airdropToken).safeTransferFrom(msg.sender,address(this),thisAirdropAmount);\r\n        ifInject[msg.sender][_id]=true;\r\n        _tradeMes[_id].tradeState=3;\r\n    }\r\n\r\n    function buyerWithdrawAirdorp(uint64 _id)external{\r\n        address buyer=getBuyer(_id);\r\n        //是否是该购买者\r\n        if(msg.sender!=buyer){revert NotBuyer();}\r\n        //该笔交易是否出售者已经质押空投代币\r\n        if(_tradeMes[_id].tradeState!=3){revert NotInjectToken();} \r\n        uint128 buyAmount=_tradeMes[_id].buyTotalAmount;\r\n        uint128 buyerPrice=_tradeMes[_id].buyPrice;\r\n        //费用=购买数量*购买价格\r\n        uint256 fee=TimeFee.fee(buyAmount*buyerPrice);\r\n        //转移费用给协议所有者\r\n        IERC20(airdropToken).safeTransfer(address(this),fee);\r\n        //转移给购买者\r\n        IERC20(airdropToken).safeTransfer(buyer,buyAmount-fee);\r\n        _tradeMes[_id].tradeState=4;\r\n    }\r\n\r\n    //交易成功,出售者提取稳定币\r\n    function solderWithdrawStable(uint64 _id)external{\r\n        address solder=getSolder(_id);\r\n        //是否是该出售者\r\n        require(msg.sender==solder); \r\n        //交易对手是否质押相应成交的空投token\r\n        require(ifInject[solder][_id]);\r\n        //购买者是否提取\r\n        require(userIfWithdraw2[msg.sender][_id]==false);\r\n        address promiseStableToken=_tradeMes[_id].tokenAddress;\r\n        uint256 total=_tradeMes[_id].buyPrice*_tradeMes[_id].buyTotalAmount;\r\n        uint256 penalSumAmount=getPenal(_tradeMes[_id].buyPrice,_tradeMes[_id].buyTotalAmount);\r\n        uint256 fee=TimeFee.fee(total);\r\n        //转移费用给协议所有者\r\n        IERC20(promiseStableToken).safeTransfer(address(this),fee);\r\n        //转移给出售者\r\n        IERC20(promiseStableToken).safeTransfer(\r\n            solder,\r\n            total-fee\r\n        );\r\n        //转移质押的违约金给出售者\r\n        IERC20(promiseStableToken).safeTransfer(\r\n            solder,\r\n            penalSumAmount\r\n        );\r\n        //用户提取设置为true\r\n        userIfWithdraw2[msg.sender][_id]=true; \r\n    }\r\n\r\n    //交易失败，购买者提取违约金（未产生交易退回money）\r\n    function buyerWithdrawRefund(uint64 _id)external{\r\n        address buyer=getBuyer(_id);\r\n        address solder=getSolder(_id);\r\n        //是否是该出售者\r\n        require(msg.sender==buyer); \r\n        //交易对手是否质押相应成交的空投token\r\n        require(ifInject[solder][_id]==false);\r\n        require(userIfWithdraw3[msg.sender][_id]==false);\r\n        //是否是该购买者\r\n        require(msg.sender==buyer);  \r\n        address promiseStableToken=_tradeMes[_id].tokenAddress;\r\n        uint256 penalSumAmount=getPenal(_tradeMes[_id].buyPrice,_tradeMes[_id].buyTotalAmount);\r\n        uint256 fee=TimeFee.fee(penalSumAmount);\r\n        //费用\r\n        IERC20(promiseStableToken).safeTransfer(\r\n            address(this),\r\n            fee\r\n        );\r\n        //转移相应稳定币到购买者\r\n        IERC20(promiseStableToken).safeTransfer(\r\n            buyer,\r\n            penalSumAmount-fee\r\n        );\r\n        userIfWithdraw3[msg.sender][_id]=true;\r\n\r\n        if(_tradeMes[_id].tradeState==1){\r\n            require(userIfWithdraw4[msg.sender][_id]==false);\r\n            uint256 total=_tradeMes[_id].buyPrice*_tradeMes[_id].buyTotalAmount;\r\n            //取回token\r\n            IERC20(promiseStableToken).safeTransfer(\r\n                getBuyer(_id),\r\n                total\r\n            );\r\n            userIfWithdraw4[msg.sender][_id]=true;\r\n        }\r\n        _tradeMes[_id].tradeState=5;\r\n    }\r\n\r\n    //计算个人放入univ3获得的利息是多少\r\n    function profileEarn(uint64 _id)public {\r\n\r\n    }\r\n\r\n    //根据token0,token1获取到V3池子地址(第二种方法)\r\n    function getPoolAddress(address token0,address token1,uint24 _fee)public view returns(address thisPool){\r\n        thisPool = IUniswapV3Factory(univ3Factory).getPool(\r\n            token0,\r\n            token1,\r\n            _fee\r\n        );\r\n        return thisPool;\r\n    }\r\n   \r\n    //根据交易id获取到购买者\r\n    function getBuyer(uint64 _id)internal view returns(address){\r\n        return _tradeMes[_id].buyerAddress;\r\n    }\r\n\r\n    //根据交易id获取到出售者\r\n    function getSolder(uint64 _id)internal view returns(address){\r\n        return _tradeMes[_id].solderAddress;\r\n    }\r\n\r\n    //计算出售者需要质押的违约金(稳定币)\r\n    function getPenal(uint128 _soldPrice, uint128 _soldAmount)public pure returns (uint256){\r\n        uint256 thisAmount = _soldPrice*_soldAmount;\r\n        if (thisAmount >= 100 ether && thisAmount < 1000 ether) {\r\n            return (thisAmount * 50) / 100;\r\n        } else if (thisAmount >= 1000 ether && thisAmount < 10000 ether) {\r\n            return (thisAmount * 40) / 100;\r\n        } else if (thisAmount > 10000 ether) {\r\n            return (thisAmount * 25) / 100;\r\n        } else {\r\n            revert NotEnoughAmount();\r\n        }\r\n    }\r\n\r\n}"
			},
			"interfaces/UniswapV3/INonfungiblePositionManager.sol": {
				"content": "//SPDX-License-Identifier:MIT\r\npragma solidity >=0.8.0;\r\npragma abicoder v2;\r\n\r\nimport '../../interfaces/IERC721Metadata.sol';\r\nimport '../../interfaces/IERC721Enumerable.sol';\r\n\r\nimport '../../interfaces/UniswapV3/IPoolInitializer.sol';\r\nimport '../../interfaces/UniswapV3/IERC721Permit.sol';\r\nimport '../../interfaces/UniswapV3/IPeripheryPayments.sol';\r\nimport '../../interfaces/UniswapV3/IPeripheryImmutableState.sol';\r\nimport '../../libraries/PoolAddress.sol';\r\n\r\n/// @title Non-fungible token for positions\r\n/// @notice Wraps Uniswap V3 positions in a non-fungible token interface which allows for them to be transferred\r\n/// and authorized.\r\ninterface INonfungiblePositionManager is\r\n    IPoolInitializer,\r\n    IPeripheryPayments,\r\n    IPeripheryImmutableState,\r\n    IERC721Metadata,\r\n    IERC721Enumerable,\r\n    IERC721Permit\r\n{\r\n    /// @notice Emitted when liquidity is increased for a position NFT\r\n    /// @dev Also emitted when a token is minted\r\n    /// @param tokenId The ID of the token for which liquidity was increased\r\n    /// @param liquidity The amount by which liquidity for the NFT position was increased\r\n    /// @param amount0 The amount of token0 that was paid for the increase in liquidity\r\n    /// @param amount1 The amount of token1 that was paid for the increase in liquidity\r\n    event IncreaseLiquidity(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\r\n    /// @notice Emitted when liquidity is decreased for a position NFT\r\n    /// @param tokenId The ID of the token for which liquidity was decreased\r\n    /// @param liquidity The amount by which liquidity for the NFT position was decreased\r\n    /// @param amount0 The amount of token0 that was accounted for the decrease in liquidity\r\n    /// @param amount1 The amount of token1 that was accounted for the decrease in liquidity\r\n    event DecreaseLiquidity(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\r\n    /// @notice Emitted when tokens are collected for a position NFT\r\n    /// @dev The amounts reported may not be exactly equivalent to the amounts transferred, due to rounding behavior\r\n    /// @param tokenId The ID of the token for which underlying tokens were collected\r\n    /// @param recipient The address of the account that received the collected tokens\r\n    /// @param amount0 The amount of token0 owed to the position that was collected\r\n    /// @param amount1 The amount of token1 owed to the position that was collected\r\n    event Collect(uint256 indexed tokenId, address recipient, uint256 amount0, uint256 amount1);\r\n\r\n    /// @notice Returns the position information associated with a given token ID.\r\n    /// @dev Throws if the token ID is not valid.\r\n    /// @param tokenId The ID of the token that represents the position\r\n    /// @return nonce The nonce for permits\r\n    /// @return operator The address that is approved for spending\r\n    /// @return token0 The address of the token0 for a specific pool\r\n    /// @return token1 The address of the token1 for a specific pool\r\n    /// @return fee The fee associated with the pool\r\n    /// @return tickLower The lower end of the tick range for the position\r\n    /// @return tickUpper The higher end of the tick range for the position\r\n    /// @return liquidity The liquidity of the position\r\n    /// @return feeGrowthInside0LastX128 The fee growth of token0 as of the last action on the individual position\r\n    /// @return feeGrowthInside1LastX128 The fee growth of token1 as of the last action on the individual position\r\n    /// @return tokensOwed0 The uncollected amount of token0 owed to the position as of the last computation\r\n    /// @return tokensOwed1 The uncollected amount of token1 owed to the position as of the last computation\r\n    function positions(uint256 tokenId)\r\n        external\r\n        view\r\n        returns (\r\n            uint96 nonce,\r\n            address operator,\r\n            address token0,\r\n            address token1,\r\n            uint24 fee,\r\n            int24 tickLower,\r\n            int24 tickUpper,\r\n            uint128 liquidity,\r\n            uint256 feeGrowthInside0LastX128,\r\n            uint256 feeGrowthInside1LastX128,\r\n            uint128 tokensOwed0,\r\n            uint128 tokensOwed1\r\n        );\r\n\r\n    struct MintParams {\r\n        address token0;\r\n        address token1;\r\n        uint24 fee;\r\n        int24 tickLower;\r\n        int24 tickUpper;\r\n        uint256 amount0Desired;\r\n        uint256 amount1Desired;\r\n        uint256 amount0Min;\r\n        uint256 amount1Min;\r\n        address recipient;\r\n        uint256 deadline;\r\n    }\r\n\r\n    /// @notice Creates a new position wrapped in a NFT\r\n    /// @dev Call this when the pool does exist and is initialized. Note that if the pool is created but not initialized\r\n    /// a method does not exist, i.e. the pool is assumed to be initialized.\r\n    /// @param params The params necessary to mint a position, encoded as `MintParams` in calldata\r\n    /// @return tokenId The ID of the token that represents the minted position\r\n    /// @return liquidity The amount of liquidity for this position\r\n    /// @return amount0 The amount of token0\r\n    /// @return amount1 The amount of token1\r\n    function mint(MintParams calldata params)\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 tokenId,\r\n            uint128 liquidity,\r\n            uint256 amount0,\r\n            uint256 amount1\r\n        );\r\n\r\n    struct IncreaseLiquidityParams {\r\n        uint256 tokenId;\r\n        uint256 amount0Desired;\r\n        uint256 amount1Desired;\r\n        uint256 amount0Min;\r\n        uint256 amount1Min;\r\n        uint256 deadline;\r\n    }\r\n\r\n    /// @notice Increases the amount of liquidity in a position, with tokens paid by the `msg.sender`\r\n    /// @param params tokenId The ID of the token for which liquidity is being increased,\r\n    /// amount0Desired The desired amount of token0 to be spent,\r\n    /// amount1Desired The desired amount of token1 to be spent,\r\n    /// amount0Min The minimum amount of token0 to spend, which serves as a slippage check,\r\n    /// amount1Min The minimum amount of token1 to spend, which serves as a slippage check,\r\n    /// deadline The time by which the transaction must be included to effect the change\r\n    /// @return liquidity The new liquidity amount as a result of the increase\r\n    /// @return amount0 The amount of token0 to acheive resulting liquidity\r\n    /// @return amount1 The amount of token1 to acheive resulting liquidity\r\n    function increaseLiquidity(IncreaseLiquidityParams calldata params)\r\n        external\r\n        payable\r\n        returns (\r\n            uint128 liquidity,\r\n            uint256 amount0,\r\n            uint256 amount1\r\n        );\r\n\r\n    struct DecreaseLiquidityParams {\r\n        uint256 tokenId;\r\n        uint128 liquidity;\r\n        uint256 amount0Min;\r\n        uint256 amount1Min;\r\n        uint256 deadline;\r\n    }\r\n\r\n    /// @notice Decreases the amount of liquidity in a position and accounts it to the position\r\n    /// @param params tokenId The ID of the token for which liquidity is being decreased,\r\n    /// amount The amount by which liquidity will be decreased,\r\n    /// amount0Min The minimum amount of token0 that should be accounted for the burned liquidity,\r\n    /// amount1Min The minimum amount of token1 that should be accounted for the burned liquidity,\r\n    /// deadline The time by which the transaction must be included to effect the change\r\n    /// @return amount0 The amount of token0 accounted to the position's tokens owed\r\n    /// @return amount1 The amount of token1 accounted to the position's tokens owed\r\n    function decreaseLiquidity(DecreaseLiquidityParams calldata params)\r\n        external\r\n        payable\r\n        returns (uint256 amount0, uint256 amount1);\r\n\r\n    struct CollectParams {\r\n        uint256 tokenId;\r\n        address recipient;\r\n        uint128 amount0Max;\r\n        uint128 amount1Max;\r\n    }\r\n\r\n    /// @notice Collects up to a maximum amount of fees owed to a specific position to the recipient\r\n    /// @param params tokenId The ID of the NFT for which tokens are being collected,\r\n    /// recipient The account that should receive the tokens,\r\n    /// amount0Max The maximum amount of token0 to collect,\r\n    /// amount1Max The maximum amount of token1 to collect\r\n    /// @return amount0 The amount of fees collected in token0\r\n    /// @return amount1 The amount of fees collected in token1\r\n    function collect(CollectParams calldata params) external payable returns (uint256 amount0, uint256 amount1);\r\n\r\n    /// @notice Burns a token ID, which deletes it from the NFT contract. The token must have 0 liquidity and all tokens\r\n    /// must be collected first.\r\n    /// @param tokenId The ID of the token that is being burned\r\n    function burn(uint256 tokenId) external payable;\r\n}"
			},
			"interfaces/IUniswapV3Factory.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.8.0;\r\n\r\n/// @title The interface for the Uniswap V3 Factory\r\n/// @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\r\ninterface IUniswapV3Factory {\r\n    /// @notice Emitted when the owner of the factory is changed\r\n    /// @param oldOwner The owner before the owner was changed\r\n    /// @param newOwner The owner after the owner was changed\r\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\r\n\r\n    /// @notice Emitted when a pool is created\r\n    /// @param token0 The first token of the pool by address sort order\r\n    /// @param token1 The second token of the pool by address sort order\r\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\r\n    /// @param tickSpacing The minimum number of ticks between initialized ticks\r\n    /// @param pool The address of the created pool\r\n    event PoolCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        uint24 indexed fee,\r\n        int24 tickSpacing,\r\n        address pool\r\n    );\r\n\r\n    /// @notice Emitted when a new fee amount is enabled for pool creation via the factory\r\n    /// @param fee The enabled fee, denominated in hundredths of a bip\r\n    /// @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee\r\n    event FeeAmountEnabled(uint24 indexed fee, int24 indexed tickSpacing);\r\n\r\n    /// @notice Returns the current owner of the factory\r\n    /// @dev Can be changed by the current owner via setOwner\r\n    /// @return The address of the factory owner\r\n    function owner() external view returns (address);\r\n\r\n    /// @notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\r\n    /// @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\r\n    /// @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\r\n    /// @return The tick spacing\r\n    function feeAmountTickSpacing(uint24 fee) external view returns (int24);\r\n\r\n    /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\r\n    /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\r\n    /// @param tokenA The contract address of either token0 or token1\r\n    /// @param tokenB The contract address of the other token\r\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\r\n    /// @return pool The pool address\r\n    function getPool(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint24 fee\r\n    ) external view returns (address pool);\r\n\r\n    /// @notice Creates a pool for the given two tokens and fee\r\n    /// @param tokenA One of the two tokens in the desired pool\r\n    /// @param tokenB The other of the two tokens in the desired pool\r\n    /// @param fee The desired fee for the pool\r\n    /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\r\n    /// from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\r\n    /// are invalid.\r\n    /// @return pool The address of the newly created pool\r\n    function createPool(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint24 fee\r\n    ) external returns (address pool);\r\n\r\n    /// @notice Updates the owner of the factory\r\n    /// @dev Must be called by the current owner\r\n    /// @param _owner The new owner of the factory\r\n    function setOwner(address _owner) external;\r\n\r\n    /// @notice Enables a fee amount with the given tickSpacing\r\n    /// @dev Fee amounts may never be removed once enabled\r\n    /// @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\r\n    /// @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount\r\n    function enableFeeAmount(uint24 fee, int24 tickSpacing) external;\r\n}"
			},
			"interfaces/IERC721Receiver.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\r\n\r\npragma solidity >=0.8.0;\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}"
			},
			"libraries/TimeFee.sol": {
				"content": "//SPDX-License-Identifier:MIT\r\npragma solidity >=0.8.9;\r\n\r\nlibrary TimeFee{\r\n    /*\r\n        *  100 ether<=amount<1000 ether, 1%\r\n        *  1000 ether<=amount<10000 ether,0.5%\r\n        *  amount>10000 ether,0.25%\r\n        * other error\r\n    */\r\n    function fee(uint256 stableAmount)internal pure returns(uint256 stableFee){\r\n        if(stableAmount>=100 ether && stableAmount<1000 ether){\r\n            return stableAmount/100;\r\n        }else if(stableAmount>=1000 ether && stableAmount<10000 ether){\r\n            return stableAmount/200;\r\n        }else if(stableAmount>=10000 ether){\r\n            return stableAmount/400;\r\n        }else{\r\n            return 0;\r\n        }\r\n    }\r\n}"
			},
			"interfaces/IError.sol": {
				"content": "//SPDX-License-Identifier:MIT\r\npragma solidity >=0.8.0;\r\n\r\ninterface IError{\r\n    //购买数量<100\r\n    error NotEnoughAmount();\r\n    //已经放入约定的空投代币数量\r\n    error AlreadyInjectToken();\r\n    //没有放入约定的空投代币数量\r\n    error NotInjectToken();\r\n    //不是购买者\r\n    error NotBuyer();\r\n    //不是出售者\r\n    error NorSolder();\r\n}"
			},
			"interfaces/ITimeStruct.sol": {
				"content": "//SPDX-License-Identifier:MIT\r\npragma solidity >=0.8.0;\r\n\r\ninterface ITimeStruct{\r\n    struct tradeMes{\r\n        uint8 tradeState; \r\n        uint64 tradeId;\r\n        uint56 buyTime;\r\n        uint128 buyTotalAmount; //预期空投代币数量\r\n        uint128 buyPrice;       //buyPrice/1000=当前价格\r\n        address tokenAddress;\r\n        address buyerAddress;\r\n        address solderAddress;\r\n    }\r\n}"
			},
			"libraries/SafeERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\r\n\r\npragma solidity >=0.8.0;\r\n\r\nimport {IERC20} from \"../interfaces/IERC20.sol\";\r\nimport {IERC20Permit} from \"../interfaces/IERC20Permit.sol\";\r\nimport {Address} from \"../libraries/Address.sol\";\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    /**\r\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\r\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 oldAllowance = token.allowance(address(this), spender);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\r\n     * to be set to zero before setting it to a non-zero value, such as USDT.\r\n     */\r\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\r\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\r\n\r\n        if (!_callOptionalReturnBool(token, approvalCall)) {\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\r\n            _callOptionalReturn(token, approvalCall);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\r\n     * Revert on invalid signature.\r\n     */\r\n    function safePermit(\r\n        IERC20Permit token,\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal {\r\n        uint256 nonceBefore = token.nonces(owner);\r\n        token.permit(owner, spender, value, deadline, v, r, s);\r\n        uint256 nonceAfter = token.nonces(owner);\r\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     *\r\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\r\n     */\r\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\r\n        // and not revert is the subcall reverts.\r\n\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        return\r\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\r\n    }\r\n}\r\n"
			},
			"libraries/Address.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\r\n\r\npragma solidity >=0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     *\r\n     * Furthermore, `isContract` will also return true if the target contract within\r\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\r\n     * which only has an effect at the end of a transaction.\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\r\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\r\n     *\r\n     * _Available since v4.8._\r\n     */\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        if (success) {\r\n            if (returndata.length == 0) {\r\n                // only check isContract if the call was successful and the return data is empty\r\n                // otherwise we already know that it was a contract\r\n                require(isContract(target), \"Address: call to non-contract\");\r\n            }\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason or using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length > 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert(errorMessage);\r\n        }\r\n    }\r\n}\r\n"
			},
			"interfaces/IERC20Permit.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\r\n\r\npragma solidity >=0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\r\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\r\n *\r\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\r\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\r\n * need to send a transaction, and thus is not required to hold Ether at all.\r\n *\r\n * ==== Security Considerations\r\n *\r\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\r\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\r\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\r\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\r\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\r\n * generally recommended is:\r\n *\r\n * ```solidity\r\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\r\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\r\n *     doThing(..., value);\r\n * }\r\n *\r\n * function doThing(..., uint256 value) public {\r\n *     token.safeTransferFrom(msg.sender, address(this), value);\r\n *     ...\r\n * }\r\n * ```\r\n *\r\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\r\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\r\n * {SafeERC20-safeTransferFrom}).\r\n *\r\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\r\n * contracts should have entry points that don't rely on permit.\r\n */\r\ninterface IERC20Permit {\r\n    /**\r\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\r\n     * given ``owner``'s signed approval.\r\n     *\r\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\r\n     * ordering also apply here.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `deadline` must be a timestamp in the future.\r\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\r\n     * over the EIP712-formatted function arguments.\r\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\r\n     *\r\n     * For more information on the signature format, see the\r\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\r\n     * section].\r\n     *\r\n     * CAUTION: See Security Considerations above.\r\n     */\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Returns the current nonce for `owner`. This value must be\r\n     * included whenever a signature is generated for {permit}.\r\n     *\r\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\r\n     * prevents a signature from being used multiple times.\r\n     */\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\r\n     */\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n}\r\n"
			},
			"interfaces/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n"
			},
			"libraries/PoolAddress.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.8.0;\r\n\r\n/// @title Provides functions for deriving a pool address from the factory, tokens, and the fee\r\nlibrary PoolAddress {\r\n    bytes32 internal constant POOL_INIT_CODE_HASH = 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54;\r\n\r\n    /// @notice The identifying key of the pool\r\n    struct PoolKey {\r\n        address token0;\r\n        address token1;\r\n        uint24 fee;\r\n    }\r\n\r\n    /// @notice Returns PoolKey: the ordered tokens with the matched fee levels\r\n    /// @param tokenA The first token of a pool, unsorted\r\n    /// @param tokenB The second token of a pool, unsorted\r\n    /// @param fee The fee level of the pool\r\n    /// @return Poolkey The pool details with ordered token0 and token1 assignments\r\n    function getPoolKey(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint24 fee\r\n    ) internal pure returns (PoolKey memory) {\r\n        if (tokenA > tokenB) (tokenA, tokenB) = (tokenB, tokenA);\r\n        return PoolKey({token0: tokenA, token1: tokenB, fee: fee});\r\n    }\r\n\r\n    /// @notice Deterministically computes the pool address given the factory and PoolKey\r\n    /// @param factory The Uniswap V3 factory contract address\r\n    /// @param key The PoolKey\r\n    /// @return pool The contract address of the V3 pool\r\n    function computeAddress(address factory, PoolKey memory key) internal pure returns (address pool) {\r\n        require(key.token0 < key.token1);\r\n        pool = address(uint160(uint(\r\n                keccak256(\r\n                    abi.encodePacked(\r\n                        bytes1(0xff),\r\n                        factory,\r\n                        keccak256(abi.encode(key.token0, key.token1, key.fee)),\r\n                        POOL_INIT_CODE_HASH\r\n                    )\r\n                )\r\n            )\r\n        ));\r\n    }\r\n}"
			},
			"interfaces/UniswapV3/IPeripheryImmutableState.sol": {
				"content": "//SPDX-License-Identifier:MIT\r\npragma solidity >=0.8.0;\r\n\r\n/// @title Immutable state\r\n/// @notice Functions that return immutable state of the router\r\ninterface IPeripheryImmutableState {\r\n    /// @return Returns the address of the Uniswap V3 factory\r\n    function factory() external view returns (address);\r\n\r\n    /// @return Returns the address of WETH9\r\n    function WETH9() external view returns (address);\r\n}"
			},
			"interfaces/UniswapV3/IPeripheryPayments.sol": {
				"content": "//SPDX-License-Identifier:MIT\r\npragma solidity >=0.8.0;\r\n\r\n/// @title Periphery Payments\r\n/// @notice Functions to ease deposits and withdrawals of ETH\r\ninterface IPeripheryPayments {\r\n    /// @notice Unwraps the contract's WETH9 balance and sends it to recipient as ETH.\r\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\r\n    /// @param amountMinimum The minimum amount of WETH9 to unwrap\r\n    /// @param recipient The address receiving ETH\r\n    function unwrapWETH9(uint256 amountMinimum, address recipient) external payable;\r\n\r\n    /// @notice Refunds any ETH balance held by this contract to the `msg.sender`\r\n    /// @dev Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps\r\n    /// that use ether for the input amount\r\n    function refundETH() external payable;\r\n\r\n    /// @notice Transfers the full amount of a token held by this contract to recipient\r\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing the token from users\r\n    /// @param token The contract address of the token which will be transferred to `recipient`\r\n    /// @param amountMinimum The minimum amount of token required for a transfer\r\n    /// @param recipient The destination address of the token\r\n    function sweepToken(\r\n        address token,\r\n        uint256 amountMinimum,\r\n        address recipient\r\n    ) external payable;\r\n}"
			},
			"interfaces/UniswapV3/IERC721Permit.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.8.0;\r\n\r\nimport '../../interfaces/IERC721.sol';\r\n\r\n/// @title ERC721 with permit\r\n/// @notice Extension to ERC721 that includes a permit function for signature based approvals\r\ninterface IERC721Permit is IERC721 {\r\n    /// @notice The permit typehash used in the permit signature\r\n    /// @return The typehash for the permit\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    /// @notice The domain separator used in the permit signature\r\n    /// @return The domain seperator used in encoding of permit signature\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    /// @notice Approve of a specific token ID for spending by spender via signature\r\n    /// @param spender The account that is being approved\r\n    /// @param tokenId The ID of the token that is being approved for spending\r\n    /// @param deadline The deadline timestamp by which the call must be mined for the approve to work\r\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\r\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\r\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\r\n    function permit(\r\n        address spender,\r\n        uint256 tokenId,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external payable;\r\n}"
			},
			"interfaces/UniswapV3/IPoolInitializer.sol": {
				"content": "//SPDX-License-Identifier:MIT\r\npragma solidity >=0.8.0;\r\npragma abicoder v2;\r\n\r\n/// @title Creates and initializes V3 Pools\r\n/// @notice Provides a method for creating and initializing a pool, if necessary, for bundling with other methods that\r\n/// require the pool to exist.\r\ninterface IPoolInitializer {\r\n    /// @notice Creates a new pool if it does not exist, then initializes if not initialized\r\n    /// @dev This method can be bundled with others via IMulticall for the first action (e.g. mint) performed against a pool\r\n    /// @param token0 The contract address of token0 of the pool\r\n    /// @param token1 The contract address of token1 of the pool\r\n    /// @param fee The fee amount of the v3 pool for the specified token pair\r\n    /// @param sqrtPriceX96 The initial square root price of the pool as a Q64.96 value\r\n    /// @return pool Returns the pool address based on the pair of tokens and fee, will return the newly created pool address if necessary\r\n    function createAndInitializePoolIfNecessary(\r\n        address token0,\r\n        address token1,\r\n        uint24 fee,\r\n        uint160 sqrtPriceX96\r\n    ) external payable returns (address pool);\r\n}"
			},
			"interfaces/IERC721Enumerable.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.8.0;\r\n\r\nimport \"../interfaces/IERC721.sol\";\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Enumerable is IERC721 {\r\n\r\n    /**\r\n     * @dev Returns the total amount of tokens stored by the contract.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\r\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\r\n\r\n    /**\r\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\r\n     * Use along with {totalSupply} to enumerate all tokens.\r\n     */\r\n    function tokenByIndex(uint256 index) external view returns (uint256);\r\n}\r\n"
			},
			"interfaces/IERC721Metadata.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\r\n\r\npragma solidity >=0.8.0;\r\n\r\nimport \"../interfaces/IERC721.sol\";\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Metadata is IERC721 {\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}"
			},
			"interfaces/IERC721.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\r\n\r\npragma solidity >=0.8.0;\r\n\r\nimport {IERC165} from \"../interfaces/IERC165.sol\";\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\r\n     *   a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\r\n     *   {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\r\n     *   a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\r\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\r\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the address zero.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n}\r\n"
			},
			"interfaces/IERC165.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\r\n\r\npragma solidity >=0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"contracts/TimeMarket.sol": {
				"TimeMarket": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_airdropToken",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "_clearingTime",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"inputs": [],
							"name": "AlreadyInjectToken",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "NorSolder",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "NotBuyer",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "NotEnoughAmount",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "NotInjectToken",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint64",
									"name": "_id",
									"type": "uint64"
								},
								{
									"internalType": "address",
									"name": "token1",
									"type": "address"
								}
							],
							"name": "Sale",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_tokenAddress",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "token1",
									"type": "address"
								},
								{
									"internalType": "uint128",
									"name": "_buyAmount",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "_buyPrice",
									"type": "uint128"
								}
							],
							"name": "buy",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint64",
									"name": "_id",
									"type": "uint64"
								}
							],
							"name": "buyerWithdrawAirdorp",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint64",
									"name": "_id",
									"type": "uint64"
								}
							],
							"name": "buyerWithdrawRefund",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint128",
									"name": "_soldPrice",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "_soldAmount",
									"type": "uint128"
								}
							],
							"name": "getPenal",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token0",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "token1",
									"type": "address"
								},
								{
									"internalType": "uint24",
									"name": "_fee",
									"type": "uint24"
								}
							],
							"name": "getPoolAddress",
							"outputs": [
								{
									"internalType": "address",
									"name": "thisPool",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint64",
									"name": "_id",
									"type": "uint64"
								}
							],
							"name": "injectFutureToken",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint64",
									"name": "_id",
									"type": "uint64"
								}
							],
							"name": "profileEarn",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint64",
									"name": "_id",
									"type": "uint64"
								}
							],
							"name": "solderWithdrawStable",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"name": "userIfWithdraw1",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"name": "userIfWithdraw2",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"name": "userIfWithdraw3",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"name": "userIfWithdraw4",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/TimeMarket.sol\":419:9371  contract TimeMarket is ITimeStruct, IError{... */\n  mstore(0x40, 0x80)\n    /* \"contracts/TimeMarket.sol\":631:673  0x1F98431c8aD98523631AE4a59f267346ea31F984 */\n  0x1f98431c8ad98523631ae4a59f267346ea31f984\n    /* \"contracts/TimeMarket.sol\":602:673  address private univ3Factory=0x1F98431c8aD98523631AE4a59f267346ea31F984 */\n  0x02\n  exp(0x0100, 0x00)\n  dup2\n  sload\n  dup2\n  0xffffffffffffffffffffffffffffffffffffffff\n  mul\n  not\n  and\n  swap1\n  dup4\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  mul\n  or\n  swap1\n  sstore\n  pop\n    /* \"contracts/TimeMarket.sol\":723:765  0xC36442b4a4522E871399CD717aBDD847Ab11FE88 */\n  0xc36442b4a4522e871399cd717abdd847ab11fe88\n    /* \"contracts/TimeMarket.sol\":680:765  address private NonfungiblePositionManager=0xC36442b4a4522E871399CD717aBDD847Ab11FE88 */\n  0x03\n  exp(0x0100, 0x00)\n  dup2\n  sload\n  dup2\n  0xffffffffffffffffffffffffffffffffffffffff\n  mul\n  not\n  and\n  swap1\n  dup4\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  mul\n  or\n  swap1\n  sstore\n  pop\n    /* \"contracts/TimeMarket.sol\":774:917  constructor(address _airdropToken,uint _clearingTime){... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  mload(0x40)\n  sub(codesize, bytecodeSize)\n  dup1\n  bytecodeSize\n  dup4\n  codecopy\n  dup2\n  dup2\n  add\n  0x40\n  mstore\n  dup2\n  add\n  swap1\n  tag_2\n  swap2\n  swap1\n  tag_3\n  jump\t// in\ntag_2:\n    /* \"contracts/TimeMarket.sol\":851:864  _airdropToken */\n  dup2\n    /* \"contracts/TimeMarket.sol\":838:850  airdropToken */\n  0x01\n  0x00\n    /* \"contracts/TimeMarket.sol\":838:864  airdropToken=_airdropToken */\n  0x0100\n  exp\n  dup2\n  sload\n  dup2\n  0xffffffffffffffffffffffffffffffffffffffff\n  mul\n  not\n  and\n  swap1\n  dup4\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  mul\n  or\n  swap1\n  sstore\n  pop\n    /* \"contracts/TimeMarket.sol\":895:908  _clearingTime */\n  dup1\n    /* \"contracts/TimeMarket.sol\":875:887  clearingTime */\n  0x00\n  dup1\n    /* \"contracts/TimeMarket.sol\":875:909  clearingTime=uint56(_clearingTime) */\n  0x0100\n  exp\n  dup2\n  sload\n  dup2\n  0xffffffffffffff\n  mul\n  not\n  and\n  swap1\n  dup4\n  0xffffffffffffff\n  and\n  mul\n  or\n  swap1\n  sstore\n  pop\n    /* \"contracts/TimeMarket.sol\":774:917  constructor(address _airdropToken,uint _clearingTime){... */\n  pop\n  pop\n    /* \"contracts/TimeMarket.sol\":419:9371  contract TimeMarket is ITimeStruct, IError{... */\n  jump(tag_6)\n    /* \"#utility.yul\":88:205   */\ntag_8:\n    /* \"#utility.yul\":197:198   */\n  0x00\n    /* \"#utility.yul\":194:195   */\n  dup1\n    /* \"#utility.yul\":187:199   */\n  revert\n    /* \"#utility.yul\":334:460   */\ntag_10:\n    /* \"#utility.yul\":371:378   */\n  0x00\n    /* \"#utility.yul\":411:453   */\n  0xffffffffffffffffffffffffffffffffffffffff\n    /* \"#utility.yul\":404:409   */\n  dup3\n    /* \"#utility.yul\":400:454   */\n  and\n    /* \"#utility.yul\":389:454   */\n  swap1\n  pop\n    /* \"#utility.yul\":334:460   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":466:562   */\ntag_11:\n    /* \"#utility.yul\":503:510   */\n  0x00\n    /* \"#utility.yul\":532:556   */\n  tag_23\n    /* \"#utility.yul\":550:555   */\n  dup3\n    /* \"#utility.yul\":532:556   */\n  tag_10\n  jump\t// in\ntag_23:\n    /* \"#utility.yul\":521:556   */\n  swap1\n  pop\n    /* \"#utility.yul\":466:562   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":568:690   */\ntag_12:\n    /* \"#utility.yul\":641:665   */\n  tag_25\n    /* \"#utility.yul\":659:664   */\n  dup2\n    /* \"#utility.yul\":641:665   */\n  tag_11\n  jump\t// in\ntag_25:\n    /* \"#utility.yul\":634:639   */\n  dup2\n    /* \"#utility.yul\":631:666   */\n  eq\n    /* \"#utility.yul\":621:684   */\n  tag_26\n  jumpi\n    /* \"#utility.yul\":680:681   */\n  0x00\n    /* \"#utility.yul\":677:678   */\n  dup1\n    /* \"#utility.yul\":670:682   */\n  revert\n    /* \"#utility.yul\":621:684   */\ntag_26:\n    /* \"#utility.yul\":568:690   */\n  pop\n  jump\t// out\n    /* \"#utility.yul\":696:839   */\ntag_13:\n    /* \"#utility.yul\":753:758   */\n  0x00\n    /* \"#utility.yul\":784:790   */\n  dup2\n    /* \"#utility.yul\":778:791   */\n  mload\n    /* \"#utility.yul\":769:791   */\n  swap1\n  pop\n    /* \"#utility.yul\":800:833   */\n  tag_28\n    /* \"#utility.yul\":827:832   */\n  dup2\n    /* \"#utility.yul\":800:833   */\n  tag_12\n  jump\t// in\ntag_28:\n    /* \"#utility.yul\":696:839   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":845:922   */\ntag_14:\n    /* \"#utility.yul\":882:889   */\n  0x00\n    /* \"#utility.yul\":911:916   */\n  dup2\n    /* \"#utility.yul\":900:916   */\n  swap1\n  pop\n    /* \"#utility.yul\":845:922   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":928:1050   */\ntag_15:\n    /* \"#utility.yul\":1001:1025   */\n  tag_31\n    /* \"#utility.yul\":1019:1024   */\n  dup2\n    /* \"#utility.yul\":1001:1025   */\n  tag_14\n  jump\t// in\ntag_31:\n    /* \"#utility.yul\":994:999   */\n  dup2\n    /* \"#utility.yul\":991:1026   */\n  eq\n    /* \"#utility.yul\":981:1044   */\n  tag_32\n  jumpi\n    /* \"#utility.yul\":1040:1041   */\n  0x00\n    /* \"#utility.yul\":1037:1038   */\n  dup1\n    /* \"#utility.yul\":1030:1042   */\n  revert\n    /* \"#utility.yul\":981:1044   */\ntag_32:\n    /* \"#utility.yul\":928:1050   */\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1056:1199   */\ntag_16:\n    /* \"#utility.yul\":1113:1118   */\n  0x00\n    /* \"#utility.yul\":1144:1150   */\n  dup2\n    /* \"#utility.yul\":1138:1151   */\n  mload\n    /* \"#utility.yul\":1129:1151   */\n  swap1\n  pop\n    /* \"#utility.yul\":1160:1193   */\n  tag_34\n    /* \"#utility.yul\":1187:1192   */\n  dup2\n    /* \"#utility.yul\":1160:1193   */\n  tag_15\n  jump\t// in\ntag_34:\n    /* \"#utility.yul\":1056:1199   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1205:1712   */\ntag_3:\n    /* \"#utility.yul\":1284:1290   */\n  0x00\n    /* \"#utility.yul\":1292:1298   */\n  dup1\n    /* \"#utility.yul\":1341:1343   */\n  0x40\n    /* \"#utility.yul\":1329:1338   */\n  dup4\n    /* \"#utility.yul\":1320:1327   */\n  dup6\n    /* \"#utility.yul\":1316:1339   */\n  sub\n    /* \"#utility.yul\":1312:1344   */\n  slt\n    /* \"#utility.yul\":1309:1428   */\n  iszero\n  tag_36\n  jumpi\n    /* \"#utility.yul\":1347:1426   */\n  tag_37\n  tag_8\n  jump\t// in\ntag_37:\n    /* \"#utility.yul\":1309:1428   */\ntag_36:\n    /* \"#utility.yul\":1467:1468   */\n  0x00\n    /* \"#utility.yul\":1492:1556   */\n  tag_38\n    /* \"#utility.yul\":1548:1555   */\n  dup6\n    /* \"#utility.yul\":1539:1545   */\n  dup3\n    /* \"#utility.yul\":1528:1537   */\n  dup7\n    /* \"#utility.yul\":1524:1546   */\n  add\n    /* \"#utility.yul\":1492:1556   */\n  tag_13\n  jump\t// in\ntag_38:\n    /* \"#utility.yul\":1482:1556   */\n  swap3\n  pop\n    /* \"#utility.yul\":1438:1566   */\n  pop\n    /* \"#utility.yul\":1605:1607   */\n  0x20\n    /* \"#utility.yul\":1631:1695   */\n  tag_39\n    /* \"#utility.yul\":1687:1694   */\n  dup6\n    /* \"#utility.yul\":1678:1684   */\n  dup3\n    /* \"#utility.yul\":1667:1676   */\n  dup7\n    /* \"#utility.yul\":1663:1685   */\n  add\n    /* \"#utility.yul\":1631:1695   */\n  tag_16\n  jump\t// in\ntag_39:\n    /* \"#utility.yul\":1621:1695   */\n  swap2\n  pop\n    /* \"#utility.yul\":1576:1705   */\n  pop\n    /* \"#utility.yul\":1205:1712   */\n  swap3\n  pop\n  swap3\n  swap1\n  pop\n  jump\t// out\n    /* \"contracts/TimeMarket.sol\":419:9371  contract TimeMarket is ITimeStruct, IError{... */\ntag_6:\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/TimeMarket.sol\":419:9371  contract TimeMarket is ITimeStruct, IError{... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x98c50fdd\n      gt\n      tag_16\n      jumpi\n      dup1\n      0xc3cf1aa6\n      gt\n      tag_17\n      jumpi\n      dup1\n      0xc3cf1aa6\n      eq\n      tag_12\n      jumpi\n      dup1\n      0xd91af492\n      eq\n      tag_13\n      jumpi\n      dup1\n      0xdf0905c6\n      eq\n      tag_14\n      jumpi\n      dup1\n      0xfc993ea8\n      eq\n      tag_15\n      jumpi\n      jump(tag_2)\n    tag_17:\n      dup1\n      0x98c50fdd\n      eq\n      tag_9\n      jumpi\n      dup1\n      0xb8d7f980\n      eq\n      tag_10\n      jumpi\n      dup1\n      0xc0102de4\n      eq\n      tag_11\n      jumpi\n      jump(tag_2)\n    tag_16:\n      dup1\n      0x0d45431d\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x25ac3a73\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x2895cb7b\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x59de2f60\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x696d6283\n      eq\n      tag_7\n      jumpi\n      dup1\n      0x77bcd8a6\n      eq\n      tag_8\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"contracts/TimeMarket.sol\":1624:2717  function buy(address _tokenAddress,address token1,uint128 _buyAmount,uint128 _buyPrice)external{... */\n    tag_3:\n      tag_18\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_19\n      swap2\n      swap1\n      tag_20\n      jump\t// in\n    tag_19:\n      tag_21\n      jump\t// in\n    tag_18:\n      stop\n        /* \"contracts/TimeMarket.sol\":3890:4497  function injectFutureToken(uint64 _id)external{... */\n    tag_4:\n      tag_22\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_23\n      swap2\n      swap1\n      tag_24\n      jump\t// in\n    tag_23:\n      tag_25\n      jump\t// in\n    tag_22:\n      stop\n        /* \"contracts/TimeMarket.sol\":6542:7975  function buyerWithdrawRefund(uint64 _id)external{... */\n    tag_5:\n      tag_26\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_27\n      swap2\n      swap1\n      tag_24\n      jump\t// in\n    tag_27:\n      tag_28\n      jump\t// in\n    tag_26:\n      stop\n        /* \"contracts/TimeMarket.sol\":1178:1242  mapping(address => mapping(uint256=>bool))public userIfWithdraw1 */\n    tag_6:\n      tag_29\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_30\n      swap2\n      swap1\n      tag_31\n      jump\t// in\n    tag_30:\n      tag_32\n      jump\t// in\n    tag_29:\n      mload(0x40)\n      tag_33\n      swap2\n      swap1\n      tag_34\n      jump\t// in\n    tag_33:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/TimeMarket.sol\":8162:8432  function getPoolAddress(address token0,address token1,uint24 _fee)public view returns(address thisPool){... */\n    tag_7:\n      tag_35\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_36\n      swap2\n      swap1\n      tag_37\n      jump\t// in\n    tag_36:\n      tag_38\n      jump\t// in\n    tag_35:\n      mload(0x40)\n      tag_39\n      swap2\n      swap1\n      tag_40\n      jump\t// in\n    tag_39:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/TimeMarket.sol\":5318:6455  function solderWithdrawStable(uint64 _id)external{... */\n    tag_8:\n      tag_41\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_42\n      swap2\n      swap1\n      tag_24\n      jump\t// in\n    tag_42:\n      tag_43\n      jump\t// in\n    tag_41:\n      stop\n        /* \"contracts/TimeMarket.sol\":8823:9366  function getPenal(uint128 _soldPrice, uint128 _soldAmount)public pure returns (uint256){... */\n    tag_9:\n      tag_44\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_45\n      swap2\n      swap1\n      tag_46\n      jump\t// in\n    tag_45:\n      tag_47\n      jump\t// in\n    tag_44:\n      mload(0x40)\n      tag_48\n      swap2\n      swap1\n      tag_49\n      jump\t// in\n    tag_48:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/TimeMarket.sol\":1426:1490  mapping(address => mapping(uint256=>bool))public userIfWithdraw3 */\n    tag_10:\n      tag_50\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_51\n      swap2\n      swap1\n      tag_31\n      jump\t// in\n    tag_51:\n      tag_52\n      jump\t// in\n    tag_50:\n      mload(0x40)\n      tag_53\n      swap2\n      swap1\n      tag_34\n      jump\t// in\n    tag_53:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/TimeMarket.sol\":4505:5265  function buyerWithdrawAirdorp(uint64 _id)external{... */\n    tag_11:\n      tag_54\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_55\n      swap2\n      swap1\n      tag_24\n      jump\t// in\n    tag_55:\n      tag_56\n      jump\t// in\n    tag_54:\n      stop\n        /* \"contracts/TimeMarket.sol\":8038:8087  function profileEarn(uint64 _id)public {... */\n    tag_12:\n      tag_57\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_58\n      swap2\n      swap1\n      tag_24\n      jump\t// in\n    tag_58:\n      tag_59\n      jump\t// in\n    tag_57:\n      stop\n        /* \"contracts/TimeMarket.sol\":2746:3761  function Sale(uint64 _id,address token1) external {... */\n    tag_13:\n      tag_60\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_61\n      swap2\n      swap1\n      tag_62\n      jump\t// in\n    tag_61:\n      tag_63\n      jump\t// in\n    tag_60:\n      stop\n        /* \"contracts/TimeMarket.sol\":1302:1366  mapping(address => mapping(uint256=>bool))public userIfWithdraw2 */\n    tag_14:\n      tag_64\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_65\n      swap2\n      swap1\n      tag_31\n      jump\t// in\n    tag_65:\n      tag_66\n      jump\t// in\n    tag_64:\n      mload(0x40)\n      tag_67\n      swap2\n      swap1\n      tag_34\n      jump\t// in\n    tag_67:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/TimeMarket.sol\":1537:1601  mapping(address => mapping(uint256=>bool))public userIfWithdraw4 */\n    tag_15:\n      tag_68\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_69\n      swap2\n      swap1\n      tag_31\n      jump\t// in\n    tag_69:\n      tag_70\n      jump\t// in\n    tag_68:\n      mload(0x40)\n      tag_71\n      swap2\n      swap1\n      tag_34\n      jump\t// in\n    tag_71:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/TimeMarket.sol\":1624:2717  function buy(address _tokenAddress,address token1,uint128 _buyAmount,uint128 _buyPrice)external{... */\n    tag_21:\n        /* \"contracts/TimeMarket.sol\":1730:1740  uint total */\n      0x00\n        /* \"contracts/TimeMarket.sol\":1752:1761  _buyPrice */\n      dup2\n        /* \"contracts/TimeMarket.sol\":1741:1751  _buyAmount */\n      dup4\n        /* \"contracts/TimeMarket.sol\":1741:1761  _buyAmount*_buyPrice */\n      tag_73\n      swap2\n      swap1\n      tag_74\n      jump\t// in\n    tag_73:\n        /* \"contracts/TimeMarket.sol\":1730:1761  uint total=_buyAmount*_buyPrice */\n      0xffffffffffffffffffffffffffffffff\n      and\n      swap1\n      pop\n        /* \"contracts/TimeMarket.sol\":1848:1864  address thisPool */\n      0x00\n        /* \"contracts/TimeMarket.sol\":1865:1906  getPoolAddress(_tokenAddress,token1,1000) */\n      tag_75\n        /* \"contracts/TimeMarket.sol\":1880:1893  _tokenAddress */\n      dup7\n        /* \"contracts/TimeMarket.sol\":1894:1900  token1 */\n      dup7\n        /* \"contracts/TimeMarket.sol\":1901:1905  1000 */\n      0x03e8\n        /* \"contracts/TimeMarket.sol\":1865:1879  getPoolAddress */\n      tag_38\n        /* \"contracts/TimeMarket.sol\":1865:1906  getPoolAddress(_tokenAddress,token1,1000) */\n      jump\t// in\n    tag_75:\n        /* \"contracts/TimeMarket.sol\":1848:1906  address thisPool=getPoolAddress(_tokenAddress,token1,1000) */\n      swap1\n      pop\n        /* \"contracts/TimeMarket.sol\":1926:1935  100 ether */\n      0x056bc75e2d63100000\n        /* \"contracts/TimeMarket.sol\":1920:1925  total */\n      dup3\n        /* \"contracts/TimeMarket.sol\":1920:1935  total<100 ether */\n      lt\n        /* \"contracts/TimeMarket.sol\":1917:1987  if(total<100 ether){... */\n      iszero\n      tag_76\n      jumpi\n        /* \"contracts/TimeMarket.sol\":1958:1975  NotEnoughAmount() */\n      mload(0x40)\n      0xe008b5f900000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/TimeMarket.sol\":1917:1987  if(total<100 ether){... */\n    tag_76:\n        /* \"contracts/TimeMarket.sol\":1997:2024  tradeMes memory newTradeMes */\n      0x00\n        /* \"contracts/TimeMarket.sol\":2025:2338  tradeMes({... */\n      mload(0x40)\n      dup1\n      0x0100\n      add\n      0x40\n      mstore\n      dup1\n        /* \"contracts/TimeMarket.sol\":2060:2061  1 */\n      0x01\n        /* \"contracts/TimeMarket.sol\":2025:2338  tradeMes({... */\n      0xff\n      and\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/TimeMarket.sol\":2084:2086  id */\n      0x00\n      0x07\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffff\n      and\n        /* \"contracts/TimeMarket.sol\":2025:2338  tradeMes({... */\n      0xffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/TimeMarket.sol\":2116:2131  block.timestamp */\n      timestamp\n        /* \"contracts/TimeMarket.sol\":2025:2338  tradeMes({... */\n      0xffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/TimeMarket.sol\":2162:2172  _buyAmount */\n      dup7\n        /* \"contracts/TimeMarket.sol\":2025:2338  tradeMes({... */\n      0xffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/TimeMarket.sol\":2196:2205  _buyPrice */\n      dup6\n        /* \"contracts/TimeMarket.sol\":2025:2338  tradeMes({... */\n      0xffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/TimeMarket.sol\":2233:2246  _tokenAddress */\n      dup9\n        /* \"contracts/TimeMarket.sol\":2025:2338  tradeMes({... */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/TimeMarket.sol\":2274:2284  msg.sender */\n      caller\n        /* \"contracts/TimeMarket.sol\":2025:2338  tradeMes({... */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/TimeMarket.sol\":2321:2325  this */\n      address\n        /* \"contracts/TimeMarket.sol\":2025:2338  tradeMes({... */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      pop\n        /* \"contracts/TimeMarket.sol\":1997:2338  tradeMes memory newTradeMes=tradeMes({... */\n      swap1\n      pop\n        /* \"contracts/TimeMarket.sol\":2363:2374  newTradeMes */\n      dup1\n        /* \"contracts/TimeMarket.sol\":2349:2358  _tradeMes */\n      0x04\n        /* \"contracts/TimeMarket.sol\":2349:2362  _tradeMes[id] */\n      0x00\n        /* \"contracts/TimeMarket.sol\":2359:2361  id */\n      dup1\n      0x07\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffff\n      and\n        /* \"contracts/TimeMarket.sol\":2349:2362  _tradeMes[id] */\n      0xffffffffffffffff\n      and\n      0xffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/TimeMarket.sol\":2349:2374  _tradeMes[id]=newTradeMes */\n      0x00\n      dup3\n      add\n      mload\n      dup2\n      0x00\n      add\n      exp(0x0100, 0x00)\n      dup2\n      sload\n      dup2\n      0xff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n      0x20\n      dup3\n      add\n      mload\n      dup2\n      0x00\n      add\n      exp(0x0100, 0x01)\n      dup2\n      sload\n      dup2\n      0xffffffffffffffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffffffffffffffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n      0x40\n      dup3\n      add\n      mload\n      dup2\n      0x00\n      add\n      exp(0x0100, 0x09)\n      dup2\n      sload\n      dup2\n      0xffffffffffffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffffffffffffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n      0x60\n      dup3\n      add\n      mload\n      dup2\n      0x00\n      add\n      exp(0x0100, 0x10)\n      dup2\n      sload\n      dup2\n      0xffffffffffffffffffffffffffffffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffffffffffffffffffffffffffffffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n      0x80\n      dup3\n      add\n      mload\n      dup2\n      0x01\n      add\n      exp(0x0100, 0x00)\n      dup2\n      sload\n      dup2\n      0xffffffffffffffffffffffffffffffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffffffffffffffffffffffffffffffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n      0xa0\n      dup3\n      add\n      mload\n      dup2\n      0x02\n      add\n      exp(0x0100, 0x00)\n      dup2\n      sload\n      dup2\n      0xffffffffffffffffffffffffffffffffffffffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n      0xc0\n      dup3\n      add\n      mload\n      dup2\n      0x03\n      add\n      exp(0x0100, 0x00)\n      dup2\n      sload\n      dup2\n      0xffffffffffffffffffffffffffffffffffffffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n      0xe0\n      dup3\n      add\n      mload\n      dup2\n      0x04\n      add\n      exp(0x0100, 0x00)\n      dup2\n      sload\n      dup2\n      0xffffffffffffffffffffffffffffffffffffffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n      swap1\n      pop\n      pop\n        /* \"contracts/TimeMarket.sol\":2421:2491  IERC20(_tokenAddress).safeTransferFrom(msg.sender,address(this),total) */\n      tag_77\n        /* \"contracts/TimeMarket.sol\":2460:2470  msg.sender */\n      caller\n        /* \"contracts/TimeMarket.sol\":2479:2483  this */\n      address\n        /* \"contracts/TimeMarket.sol\":2485:2490  total */\n      dup6\n        /* \"contracts/TimeMarket.sol\":2428:2441  _tokenAddress */\n      dup11\n        /* \"contracts/TimeMarket.sol\":2421:2459  IERC20(_tokenAddress).safeTransferFrom */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      tag_78\n      swap1\n        /* \"contracts/TimeMarket.sol\":2421:2491  IERC20(_tokenAddress).safeTransferFrom(msg.sender,address(this),total) */\n      swap4\n      swap3\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_77:\n        /* \"contracts/TimeMarket.sol\":2566:2615  IERC20(_tokenAddress).safeApprove(thisPool,total) */\n      tag_79\n        /* \"contracts/TimeMarket.sol\":2600:2608  thisPool */\n      dup3\n        /* \"contracts/TimeMarket.sol\":2609:2614  total */\n      dup5\n        /* \"contracts/TimeMarket.sol\":2573:2586  _tokenAddress */\n      dup10\n        /* \"contracts/TimeMarket.sol\":2566:2599  IERC20(_tokenAddress).safeApprove */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      tag_80\n      swap1\n        /* \"contracts/TimeMarket.sol\":2566:2615  IERC20(_tokenAddress).safeApprove(thisPool,total) */\n      swap3\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_79:\n        /* \"contracts/TimeMarket.sol\":2626:2694  IERC20(_tokenAddress).safeTransferFrom(address(this),thisPool,total) */\n      tag_81\n        /* \"contracts/TimeMarket.sol\":2673:2677  this */\n      address\n        /* \"contracts/TimeMarket.sol\":2679:2687  thisPool */\n      dup4\n        /* \"contracts/TimeMarket.sol\":2688:2693  total */\n      dup6\n        /* \"contracts/TimeMarket.sol\":2633:2646  _tokenAddress */\n      dup11\n        /* \"contracts/TimeMarket.sol\":2626:2664  IERC20(_tokenAddress).safeTransferFrom */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      tag_78\n      swap1\n        /* \"contracts/TimeMarket.sol\":2626:2694  IERC20(_tokenAddress).safeTransferFrom(address(this),thisPool,total) */\n      swap4\n      swap3\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_81:\n        /* \"contracts/TimeMarket.sol\":2705:2707  id */\n      0x00\n      0x07\n        /* \"contracts/TimeMarket.sol\":2705:2709  id++ */\n      dup2\n      dup2\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffff\n      and\n      dup1\n      swap3\n      swap2\n      swap1\n      tag_82\n      swap1\n      tag_83\n      jump\t// in\n    tag_82:\n      swap2\n      swap1\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xffffffffffffffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffffffffffffffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n      pop\n        /* \"contracts/TimeMarket.sol\":1719:2717  {... */\n      pop\n      pop\n      pop\n        /* \"contracts/TimeMarket.sol\":1624:2717  function buy(address _tokenAddress,address token1,uint128 _buyAmount,uint128 _buyPrice)external{... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/TimeMarket.sol\":3890:4497  function injectFutureToken(uint64 _id)external{... */\n    tag_25:\n        /* \"contracts/TimeMarket.sol\":4030:4035  false */\n      0x00\n        /* \"contracts/TimeMarket.sol\":4004:4012  ifInject */\n      0x05\n        /* \"contracts/TimeMarket.sol\":4004:4024  ifInject[msg.sender] */\n      0x00\n        /* \"contracts/TimeMarket.sol\":4013:4023  msg.sender */\n      caller\n        /* \"contracts/TimeMarket.sol\":4004:4024  ifInject[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/TimeMarket.sol\":4004:4029  ifInject[msg.sender][_id] */\n      0x00\n        /* \"contracts/TimeMarket.sol\":4025:4028  _id */\n      dup4\n        /* \"contracts/TimeMarket.sol\":4004:4029  ifInject[msg.sender][_id] */\n      0xffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n        /* \"contracts/TimeMarket.sol\":4004:4035  ifInject[msg.sender][_id]=false */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xff\n      mul\n      not\n      and\n      swap1\n      dup4\n      iszero\n      iszero\n      mul\n      or\n      swap1\n      sstore\n        /* \"contracts/TimeMarket.sol\":4001:4066  if(ifInject[msg.sender][_id]=false){revert AlreadyInjectToken();} */\n      iszero\n      tag_85\n      jumpi\n        /* \"contracts/TimeMarket.sol\":4044:4064  AlreadyInjectToken() */\n      mload(0x40)\n      0x4232716900000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/TimeMarket.sol\":4001:4066  if(ifInject[msg.sender][_id]=false){revert AlreadyInjectToken();} */\n    tag_85:\n        /* \"contracts/TimeMarket.sol\":4174:4184  msg.sender */\n      caller\n        /* \"contracts/TimeMarket.sol\":4158:4184  getSolder(_id)!=msg.sender */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/TimeMarket.sol\":4158:4172  getSolder(_id) */\n      tag_86\n        /* \"contracts/TimeMarket.sol\":4168:4171  _id */\n      dup3\n        /* \"contracts/TimeMarket.sol\":4158:4167  getSolder */\n      tag_87\n        /* \"contracts/TimeMarket.sol\":4158:4172  getSolder(_id) */\n      jump\t// in\n    tag_86:\n        /* \"contracts/TimeMarket.sol\":4158:4184  getSolder(_id)!=msg.sender */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"contracts/TimeMarket.sol\":4155:4206  if(getSolder(_id)!=msg.sender){revert NorSolder();} */\n      tag_88\n      jumpi\n        /* \"contracts/TimeMarket.sol\":4193:4204  NorSolder() */\n      mload(0x40)\n      0xd7c498bf00000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/TimeMarket.sol\":4155:4206  if(getSolder(_id)!=msg.sender){revert NorSolder();} */\n    tag_88:\n        /* \"contracts/TimeMarket.sol\":4263:4288  uint256 thisAirdropAmount */\n      0x00\n        /* \"contracts/TimeMarket.sol\":4289:4298  _tradeMes */\n      0x04\n        /* \"contracts/TimeMarket.sol\":4289:4303  _tradeMes[_id] */\n      0x00\n        /* \"contracts/TimeMarket.sol\":4299:4302  _id */\n      dup4\n        /* \"contracts/TimeMarket.sol\":4289:4303  _tradeMes[_id] */\n      0xffffffffffffffff\n      and\n      0xffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/TimeMarket.sol\":4289:4318  _tradeMes[_id].buyTotalAmount */\n      0x00\n      add\n      0x10\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/TimeMarket.sol\":4263:4318  uint256 thisAirdropAmount=_tradeMes[_id].buyTotalAmount */\n      0xffffffffffffffffffffffffffffffff\n      and\n      swap1\n      pop\n        /* \"contracts/TimeMarket.sol\":4329:4410  IERC20(airdropToken).safeTransferFrom(msg.sender,address(this),thisAirdropAmount) */\n      tag_89\n        /* \"contracts/TimeMarket.sol\":4367:4377  msg.sender */\n      caller\n        /* \"contracts/TimeMarket.sol\":4386:4390  this */\n      address\n        /* \"contracts/TimeMarket.sol\":4392:4409  thisAirdropAmount */\n      dup4\n        /* \"contracts/TimeMarket.sol\":4336:4348  airdropToken */\n      0x01\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/TimeMarket.sol\":4329:4366  IERC20(airdropToken).safeTransferFrom */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      tag_78\n      swap1\n        /* \"contracts/TimeMarket.sol\":4329:4410  IERC20(airdropToken).safeTransferFrom(msg.sender,address(this),thisAirdropAmount) */\n      swap4\n      swap3\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_89:\n        /* \"contracts/TimeMarket.sol\":4447:4451  true */\n      0x01\n        /* \"contracts/TimeMarket.sol\":4421:4429  ifInject */\n      0x05\n        /* \"contracts/TimeMarket.sol\":4421:4441  ifInject[msg.sender] */\n      0x00\n        /* \"contracts/TimeMarket.sol\":4430:4440  msg.sender */\n      caller\n        /* \"contracts/TimeMarket.sol\":4421:4441  ifInject[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/TimeMarket.sol\":4421:4446  ifInject[msg.sender][_id] */\n      0x00\n        /* \"contracts/TimeMarket.sol\":4442:4445  _id */\n      dup5\n        /* \"contracts/TimeMarket.sol\":4421:4446  ifInject[msg.sender][_id] */\n      0xffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n        /* \"contracts/TimeMarket.sol\":4421:4451  ifInject[msg.sender][_id]=true */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xff\n      mul\n      not\n      and\n      swap1\n      dup4\n      iszero\n      iszero\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"contracts/TimeMarket.sol\":4488:4489  3 */\n      0x03\n        /* \"contracts/TimeMarket.sol\":4462:4471  _tradeMes */\n      0x04\n        /* \"contracts/TimeMarket.sol\":4462:4476  _tradeMes[_id] */\n      0x00\n        /* \"contracts/TimeMarket.sol\":4472:4475  _id */\n      dup5\n        /* \"contracts/TimeMarket.sol\":4462:4476  _tradeMes[_id] */\n      0xffffffffffffffff\n      and\n      0xffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/TimeMarket.sol\":4462:4487  _tradeMes[_id].tradeState */\n      0x00\n      add\n      0x00\n        /* \"contracts/TimeMarket.sol\":4462:4489  _tradeMes[_id].tradeState=3 */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"contracts/TimeMarket.sol\":3936:4497  {... */\n      pop\n        /* \"contracts/TimeMarket.sol\":3890:4497  function injectFutureToken(uint64 _id)external{... */\n      pop\n      jump\t// out\n        /* \"contracts/TimeMarket.sol\":6542:7975  function buyerWithdrawRefund(uint64 _id)external{... */\n    tag_28:\n        /* \"contracts/TimeMarket.sol\":6601:6614  address buyer */\n      0x00\n        /* \"contracts/TimeMarket.sol\":6615:6628  getBuyer(_id) */\n      tag_91\n        /* \"contracts/TimeMarket.sol\":6624:6627  _id */\n      dup3\n        /* \"contracts/TimeMarket.sol\":6615:6623  getBuyer */\n      tag_92\n        /* \"contracts/TimeMarket.sol\":6615:6628  getBuyer(_id) */\n      jump\t// in\n    tag_91:\n        /* \"contracts/TimeMarket.sol\":6601:6628  address buyer=getBuyer(_id) */\n      swap1\n      pop\n        /* \"contracts/TimeMarket.sol\":6639:6653  address solder */\n      0x00\n        /* \"contracts/TimeMarket.sol\":6654:6668  getSolder(_id) */\n      tag_93\n        /* \"contracts/TimeMarket.sol\":6664:6667  _id */\n      dup4\n        /* \"contracts/TimeMarket.sol\":6654:6663  getSolder */\n      tag_87\n        /* \"contracts/TimeMarket.sol\":6654:6668  getSolder(_id) */\n      jump\t// in\n    tag_93:\n        /* \"contracts/TimeMarket.sol\":6639:6668  address solder=getSolder(_id) */\n      swap1\n      pop\n        /* \"contracts/TimeMarket.sol\":6732:6737  buyer */\n      dup2\n        /* \"contracts/TimeMarket.sol\":6720:6737  msg.sender==buyer */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/TimeMarket.sol\":6720:6730  msg.sender */\n      caller\n        /* \"contracts/TimeMarket.sol\":6720:6737  msg.sender==buyer */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"contracts/TimeMarket.sol\":6712:6738  require(msg.sender==buyer) */\n      tag_94\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_94:\n        /* \"contracts/TimeMarket.sol\":6843:6848  false */\n      0x00\n        /* \"contracts/TimeMarket.sol\":6820:6848  ifInject[solder][_id]==false */\n      iszero\n      iszero\n        /* \"contracts/TimeMarket.sol\":6820:6828  ifInject */\n      0x05\n        /* \"contracts/TimeMarket.sol\":6820:6836  ifInject[solder] */\n      0x00\n        /* \"contracts/TimeMarket.sol\":6829:6835  solder */\n      dup4\n        /* \"contracts/TimeMarket.sol\":6820:6836  ifInject[solder] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/TimeMarket.sol\":6820:6841  ifInject[solder][_id] */\n      0x00\n        /* \"contracts/TimeMarket.sol\":6837:6840  _id */\n      dup6\n        /* \"contracts/TimeMarket.sol\":6820:6841  ifInject[solder][_id] */\n      0xffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n        /* \"contracts/TimeMarket.sol\":6820:6848  ifInject[solder][_id]==false */\n      iszero\n      iszero\n      eq\n        /* \"contracts/TimeMarket.sol\":6812:6849  require(ifInject[solder][_id]==false) */\n      tag_95\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_95:\n        /* \"contracts/TimeMarket.sol\":6902:6907  false */\n      0x00\n        /* \"contracts/TimeMarket.sol\":6868:6907  userIfWithdraw3[msg.sender][_id]==false */\n      iszero\n      iszero\n        /* \"contracts/TimeMarket.sol\":6868:6883  userIfWithdraw3 */\n      0x08\n        /* \"contracts/TimeMarket.sol\":6868:6895  userIfWithdraw3[msg.sender] */\n      0x00\n        /* \"contracts/TimeMarket.sol\":6884:6894  msg.sender */\n      caller\n        /* \"contracts/TimeMarket.sol\":6868:6895  userIfWithdraw3[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/TimeMarket.sol\":6868:6900  userIfWithdraw3[msg.sender][_id] */\n      0x00\n        /* \"contracts/TimeMarket.sol\":6896:6899  _id */\n      dup6\n        /* \"contracts/TimeMarket.sol\":6868:6900  userIfWithdraw3[msg.sender][_id] */\n      0xffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n        /* \"contracts/TimeMarket.sol\":6868:6907  userIfWithdraw3[msg.sender][_id]==false */\n      iszero\n      iszero\n      eq\n        /* \"contracts/TimeMarket.sol\":6860:6908  require(userIfWithdraw3[msg.sender][_id]==false) */\n      tag_96\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_96:\n        /* \"contracts/TimeMarket.sol\":6972:6977  buyer */\n      dup2\n        /* \"contracts/TimeMarket.sol\":6960:6977  msg.sender==buyer */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/TimeMarket.sol\":6960:6970  msg.sender */\n      caller\n        /* \"contracts/TimeMarket.sol\":6960:6977  msg.sender==buyer */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"contracts/TimeMarket.sol\":6952:6978  require(msg.sender==buyer) */\n      tag_97\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_97:\n        /* \"contracts/TimeMarket.sol\":6991:7017  address promiseStableToken */\n      0x00\n        /* \"contracts/TimeMarket.sol\":7018:7027  _tradeMes */\n      0x04\n        /* \"contracts/TimeMarket.sol\":7018:7032  _tradeMes[_id] */\n      0x00\n        /* \"contracts/TimeMarket.sol\":7028:7031  _id */\n      dup6\n        /* \"contracts/TimeMarket.sol\":7018:7032  _tradeMes[_id] */\n      0xffffffffffffffff\n      and\n      0xffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/TimeMarket.sol\":7018:7045  _tradeMes[_id].tokenAddress */\n      0x02\n      add\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/TimeMarket.sol\":6991:7045  address promiseStableToken=_tradeMes[_id].tokenAddress */\n      swap1\n      pop\n        /* \"contracts/TimeMarket.sol\":7056:7078  uint256 penalSumAmount */\n      0x00\n        /* \"contracts/TimeMarket.sol\":7079:7142  getPenal(_tradeMes[_id].buyPrice,_tradeMes[_id].buyTotalAmount) */\n      tag_98\n        /* \"contracts/TimeMarket.sol\":7088:7097  _tradeMes */\n      0x04\n        /* \"contracts/TimeMarket.sol\":7088:7102  _tradeMes[_id] */\n      0x00\n        /* \"contracts/TimeMarket.sol\":7098:7101  _id */\n      dup8\n        /* \"contracts/TimeMarket.sol\":7088:7102  _tradeMes[_id] */\n      0xffffffffffffffff\n      and\n      0xffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/TimeMarket.sol\":7088:7111  _tradeMes[_id].buyPrice */\n      0x01\n      add\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/TimeMarket.sol\":7112:7121  _tradeMes */\n      0x04\n        /* \"contracts/TimeMarket.sol\":7112:7126  _tradeMes[_id] */\n      0x00\n        /* \"contracts/TimeMarket.sol\":7122:7125  _id */\n      dup9\n        /* \"contracts/TimeMarket.sol\":7112:7126  _tradeMes[_id] */\n      0xffffffffffffffff\n      and\n      0xffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/TimeMarket.sol\":7112:7141  _tradeMes[_id].buyTotalAmount */\n      0x00\n      add\n      0x10\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/TimeMarket.sol\":7079:7087  getPenal */\n      tag_47\n        /* \"contracts/TimeMarket.sol\":7079:7142  getPenal(_tradeMes[_id].buyPrice,_tradeMes[_id].buyTotalAmount) */\n      jump\t// in\n    tag_98:\n        /* \"contracts/TimeMarket.sol\":7056:7142  uint256 penalSumAmount=getPenal(_tradeMes[_id].buyPrice,_tradeMes[_id].buyTotalAmount) */\n      swap1\n      pop\n        /* \"contracts/TimeMarket.sol\":7153:7164  uint256 fee */\n      0x00\n        /* \"contracts/TimeMarket.sol\":7165:7192  TimeFee.fee(penalSumAmount) */\n      tag_99\n        /* \"contracts/TimeMarket.sol\":7177:7191  penalSumAmount */\n      dup3\n        /* \"contracts/TimeMarket.sol\":7165:7176  TimeFee.fee */\n      tag_100\n        /* \"contracts/TimeMarket.sol\":7165:7192  TimeFee.fee(penalSumAmount) */\n      jump\t// in\n    tag_99:\n        /* \"contracts/TimeMarket.sol\":7153:7192  uint256 fee=TimeFee.fee(penalSumAmount) */\n      swap1\n      pop\n        /* \"contracts/TimeMarket.sol\":7221:7317  IERC20(promiseStableToken).safeTransfer(... */\n      tag_101\n        /* \"contracts/TimeMarket.sol\":7283:7287  this */\n      address\n        /* \"contracts/TimeMarket.sol\":7303:7306  fee */\n      dup3\n        /* \"contracts/TimeMarket.sol\":7228:7246  promiseStableToken */\n      dup6\n        /* \"contracts/TimeMarket.sol\":7221:7260  IERC20(promiseStableToken).safeTransfer */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      tag_102\n      swap1\n        /* \"contracts/TimeMarket.sol\":7221:7317  IERC20(promiseStableToken).safeTransfer(... */\n      swap3\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_101:\n        /* \"contracts/TimeMarket.sol\":7373:7476  IERC20(promiseStableToken).safeTransfer(... */\n      tag_103\n        /* \"contracts/TimeMarket.sol\":7427:7432  buyer */\n      dup6\n        /* \"contracts/TimeMarket.sol\":7462:7465  fee */\n      dup3\n        /* \"contracts/TimeMarket.sol\":7447:7461  penalSumAmount */\n      dup5\n        /* \"contracts/TimeMarket.sol\":7447:7465  penalSumAmount-fee */\n      tag_104\n      swap2\n      swap1\n      tag_105\n      jump\t// in\n    tag_104:\n        /* \"contracts/TimeMarket.sol\":7380:7398  promiseStableToken */\n      dup6\n        /* \"contracts/TimeMarket.sol\":7373:7412  IERC20(promiseStableToken).safeTransfer */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      tag_102\n      swap1\n        /* \"contracts/TimeMarket.sol\":7373:7476  IERC20(promiseStableToken).safeTransfer(... */\n      swap3\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_103:\n        /* \"contracts/TimeMarket.sol\":7520:7524  true */\n      0x01\n        /* \"contracts/TimeMarket.sol\":7487:7502  userIfWithdraw3 */\n      0x08\n        /* \"contracts/TimeMarket.sol\":7487:7514  userIfWithdraw3[msg.sender] */\n      0x00\n        /* \"contracts/TimeMarket.sol\":7503:7513  msg.sender */\n      caller\n        /* \"contracts/TimeMarket.sol\":7487:7514  userIfWithdraw3[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/TimeMarket.sol\":7487:7519  userIfWithdraw3[msg.sender][_id] */\n      0x00\n        /* \"contracts/TimeMarket.sol\":7515:7518  _id */\n      dup9\n        /* \"contracts/TimeMarket.sol\":7487:7519  userIfWithdraw3[msg.sender][_id] */\n      0xffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n        /* \"contracts/TimeMarket.sol\":7487:7524  userIfWithdraw3[msg.sender][_id]=true */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xff\n      mul\n      not\n      and\n      swap1\n      dup4\n      iszero\n      iszero\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"contracts/TimeMarket.sol\":7567:7568  1 */\n      0x01\n        /* \"contracts/TimeMarket.sol\":7540:7549  _tradeMes */\n      0x04\n        /* \"contracts/TimeMarket.sol\":7540:7554  _tradeMes[_id] */\n      0x00\n        /* \"contracts/TimeMarket.sol\":7550:7553  _id */\n      dup9\n        /* \"contracts/TimeMarket.sol\":7540:7554  _tradeMes[_id] */\n      0xffffffffffffffff\n      and\n      0xffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/TimeMarket.sol\":7540:7565  _tradeMes[_id].tradeState */\n      0x00\n      add\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n        /* \"contracts/TimeMarket.sol\":7540:7568  _tradeMes[_id].tradeState==1 */\n      0xff\n      and\n      sub\n        /* \"contracts/TimeMarket.sol\":7537:7930  if(_tradeMes[_id].tradeState==1){... */\n      tag_106\n      jumpi\n        /* \"contracts/TimeMarket.sol\":7626:7631  false */\n      0x00\n        /* \"contracts/TimeMarket.sol\":7592:7631  userIfWithdraw4[msg.sender][_id]==false */\n      iszero\n      iszero\n        /* \"contracts/TimeMarket.sol\":7592:7607  userIfWithdraw4 */\n      0x09\n        /* \"contracts/TimeMarket.sol\":7592:7619  userIfWithdraw4[msg.sender] */\n      0x00\n        /* \"contracts/TimeMarket.sol\":7608:7618  msg.sender */\n      caller\n        /* \"contracts/TimeMarket.sol\":7592:7619  userIfWithdraw4[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/TimeMarket.sol\":7592:7624  userIfWithdraw4[msg.sender][_id] */\n      0x00\n        /* \"contracts/TimeMarket.sol\":7620:7623  _id */\n      dup9\n        /* \"contracts/TimeMarket.sol\":7592:7624  userIfWithdraw4[msg.sender][_id] */\n      0xffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n        /* \"contracts/TimeMarket.sol\":7592:7631  userIfWithdraw4[msg.sender][_id]==false */\n      iszero\n      iszero\n      eq\n        /* \"contracts/TimeMarket.sol\":7584:7632  require(userIfWithdraw4[msg.sender][_id]==false) */\n      tag_107\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_107:\n        /* \"contracts/TimeMarket.sol\":7647:7660  uint256 total */\n      0x00\n        /* \"contracts/TimeMarket.sol\":7685:7694  _tradeMes */\n      0x04\n        /* \"contracts/TimeMarket.sol\":7685:7699  _tradeMes[_id] */\n      0x00\n        /* \"contracts/TimeMarket.sol\":7695:7698  _id */\n      dup9\n        /* \"contracts/TimeMarket.sol\":7685:7699  _tradeMes[_id] */\n      0xffffffffffffffff\n      and\n      0xffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/TimeMarket.sol\":7685:7714  _tradeMes[_id].buyTotalAmount */\n      0x00\n      add\n      0x10\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/TimeMarket.sol\":7661:7670  _tradeMes */\n      0x04\n        /* \"contracts/TimeMarket.sol\":7661:7675  _tradeMes[_id] */\n      0x00\n        /* \"contracts/TimeMarket.sol\":7671:7674  _id */\n      dup10\n        /* \"contracts/TimeMarket.sol\":7661:7675  _tradeMes[_id] */\n      0xffffffffffffffff\n      and\n      0xffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/TimeMarket.sol\":7661:7684  _tradeMes[_id].buyPrice */\n      0x01\n      add\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/TimeMarket.sol\":7661:7714  _tradeMes[_id].buyPrice*_tradeMes[_id].buyTotalAmount */\n      tag_108\n      swap2\n      swap1\n      tag_74\n      jump\t// in\n    tag_108:\n        /* \"contracts/TimeMarket.sol\":7647:7714  uint256 total=_tradeMes[_id].buyPrice*_tradeMes[_id].buyTotalAmount */\n      0xffffffffffffffffffffffffffffffff\n      and\n      swap1\n      pop\n        /* \"contracts/TimeMarket.sol\":7756:7866  IERC20(promiseStableToken).safeTransfer(... */\n      tag_109\n        /* \"contracts/TimeMarket.sol\":7814:7827  getBuyer(_id) */\n      tag_110\n        /* \"contracts/TimeMarket.sol\":7823:7826  _id */\n      dup9\n        /* \"contracts/TimeMarket.sol\":7814:7822  getBuyer */\n      tag_92\n        /* \"contracts/TimeMarket.sol\":7814:7827  getBuyer(_id) */\n      jump\t// in\n    tag_110:\n        /* \"contracts/TimeMarket.sol\":7846:7851  total */\n      dup3\n        /* \"contracts/TimeMarket.sol\":7763:7781  promiseStableToken */\n      dup7\n        /* \"contracts/TimeMarket.sol\":7756:7795  IERC20(promiseStableToken).safeTransfer */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      tag_102\n      swap1\n        /* \"contracts/TimeMarket.sol\":7756:7866  IERC20(promiseStableToken).safeTransfer(... */\n      swap3\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_109:\n        /* \"contracts/TimeMarket.sol\":7914:7918  true */\n      0x01\n        /* \"contracts/TimeMarket.sol\":7881:7896  userIfWithdraw4 */\n      0x09\n        /* \"contracts/TimeMarket.sol\":7881:7908  userIfWithdraw4[msg.sender] */\n      0x00\n        /* \"contracts/TimeMarket.sol\":7897:7907  msg.sender */\n      caller\n        /* \"contracts/TimeMarket.sol\":7881:7908  userIfWithdraw4[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/TimeMarket.sol\":7881:7913  userIfWithdraw4[msg.sender][_id] */\n      0x00\n        /* \"contracts/TimeMarket.sol\":7909:7912  _id */\n      dup10\n        /* \"contracts/TimeMarket.sol\":7881:7913  userIfWithdraw4[msg.sender][_id] */\n      0xffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n        /* \"contracts/TimeMarket.sol\":7881:7918  userIfWithdraw4[msg.sender][_id]=true */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xff\n      mul\n      not\n      and\n      swap1\n      dup4\n      iszero\n      iszero\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"contracts/TimeMarket.sol\":7569:7930  {... */\n      pop\n        /* \"contracts/TimeMarket.sol\":7537:7930  if(_tradeMes[_id].tradeState==1){... */\n    tag_106:\n        /* \"contracts/TimeMarket.sol\":7966:7967  5 */\n      0x05\n        /* \"contracts/TimeMarket.sol\":7940:7949  _tradeMes */\n      0x04\n        /* \"contracts/TimeMarket.sol\":7940:7954  _tradeMes[_id] */\n      0x00\n        /* \"contracts/TimeMarket.sol\":7950:7953  _id */\n      dup9\n        /* \"contracts/TimeMarket.sol\":7940:7954  _tradeMes[_id] */\n      0xffffffffffffffff\n      and\n      0xffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/TimeMarket.sol\":7940:7965  _tradeMes[_id].tradeState */\n      0x00\n      add\n      0x00\n        /* \"contracts/TimeMarket.sol\":7940:7967  _tradeMes[_id].tradeState=5 */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"contracts/TimeMarket.sol\":6590:7975  {... */\n      pop\n      pop\n      pop\n      pop\n      pop\n        /* \"contracts/TimeMarket.sol\":6542:7975  function buyerWithdrawRefund(uint64 _id)external{... */\n      pop\n      jump\t// out\n        /* \"contracts/TimeMarket.sol\":1178:1242  mapping(address => mapping(uint256=>bool))public userIfWithdraw1 */\n    tag_32:\n      mstore(0x20, 0x06)\n      dup2\n      0x00\n      mstore\n      mstore(0x20, keccak256(0x00, 0x40))\n      dup1\n      0x00\n      mstore\n      keccak256(0x00, 0x40)\n      0x00\n      swap2\n      pop\n      swap2\n      pop\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n      dup2\n      jump\t// out\n        /* \"contracts/TimeMarket.sol\":8162:8432  function getPoolAddress(address token0,address token1,uint24 _fee)public view returns(address thisPool){... */\n    tag_38:\n        /* \"contracts/TimeMarket.sol\":8248:8264  address thisPool */\n      0x00\n        /* \"contracts/TimeMarket.sol\":8305:8317  univ3Factory */\n      0x02\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/TimeMarket.sol\":8287:8326  IUniswapV3Factory(univ3Factory).getPool */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x1698ee82\n        /* \"contracts/TimeMarket.sol\":8341:8347  token0 */\n      dup6\n        /* \"contracts/TimeMarket.sol\":8362:8368  token1 */\n      dup6\n        /* \"contracts/TimeMarket.sol\":8383:8387  _fee */\n      dup6\n        /* \"contracts/TimeMarket.sol\":8287:8398  IUniswapV3Factory(univ3Factory).getPool(... */\n      mload(0x40)\n      dup5\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      tag_112\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_113\n      jump\t// in\n    tag_112:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_115\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_115:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_116\n      swap2\n      swap1\n      tag_117\n      jump\t// in\n    tag_116:\n        /* \"contracts/TimeMarket.sol\":8276:8398  thisPool = IUniswapV3Factory(univ3Factory).getPool(... */\n      swap1\n      pop\n        /* \"contracts/TimeMarket.sol\":8162:8432  function getPoolAddress(address token0,address token1,uint24 _fee)public view returns(address thisPool){... */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/TimeMarket.sol\":5318:6455  function solderWithdrawStable(uint64 _id)external{... */\n    tag_43:\n        /* \"contracts/TimeMarket.sol\":5378:5392  address solder */\n      0x00\n        /* \"contracts/TimeMarket.sol\":5393:5407  getSolder(_id) */\n      tag_119\n        /* \"contracts/TimeMarket.sol\":5403:5406  _id */\n      dup3\n        /* \"contracts/TimeMarket.sol\":5393:5402  getSolder */\n      tag_87\n        /* \"contracts/TimeMarket.sol\":5393:5407  getSolder(_id) */\n      jump\t// in\n    tag_119:\n        /* \"contracts/TimeMarket.sol\":5378:5407  address solder=getSolder(_id) */\n      swap1\n      pop\n        /* \"contracts/TimeMarket.sol\":5471:5477  solder */\n      dup1\n        /* \"contracts/TimeMarket.sol\":5459:5477  msg.sender==solder */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/TimeMarket.sol\":5459:5469  msg.sender */\n      caller\n        /* \"contracts/TimeMarket.sol\":5459:5477  msg.sender==solder */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"contracts/TimeMarket.sol\":5451:5478  require(msg.sender==solder) */\n      tag_120\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_120:\n        /* \"contracts/TimeMarket.sol\":5560:5568  ifInject */\n      0x05\n        /* \"contracts/TimeMarket.sol\":5560:5576  ifInject[solder] */\n      0x00\n        /* \"contracts/TimeMarket.sol\":5569:5575  solder */\n      dup3\n        /* \"contracts/TimeMarket.sol\":5560:5576  ifInject[solder] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/TimeMarket.sol\":5560:5581  ifInject[solder][_id] */\n      0x00\n        /* \"contracts/TimeMarket.sol\":5577:5580  _id */\n      dup4\n        /* \"contracts/TimeMarket.sol\":5560:5581  ifInject[solder][_id] */\n      0xffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n        /* \"contracts/TimeMarket.sol\":5552:5582  require(ifInject[solder][_id]) */\n      tag_121\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_121:\n        /* \"contracts/TimeMarket.sol\":5668:5673  false */\n      0x00\n        /* \"contracts/TimeMarket.sol\":5634:5673  userIfWithdraw2[msg.sender][_id]==false */\n      iszero\n      iszero\n        /* \"contracts/TimeMarket.sol\":5634:5649  userIfWithdraw2 */\n      0x07\n        /* \"contracts/TimeMarket.sol\":5634:5661  userIfWithdraw2[msg.sender] */\n      0x00\n        /* \"contracts/TimeMarket.sol\":5650:5660  msg.sender */\n      caller\n        /* \"contracts/TimeMarket.sol\":5634:5661  userIfWithdraw2[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/TimeMarket.sol\":5634:5666  userIfWithdraw2[msg.sender][_id] */\n      0x00\n        /* \"contracts/TimeMarket.sol\":5662:5665  _id */\n      dup5\n        /* \"contracts/TimeMarket.sol\":5634:5666  userIfWithdraw2[msg.sender][_id] */\n      0xffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n        /* \"contracts/TimeMarket.sol\":5634:5673  userIfWithdraw2[msg.sender][_id]==false */\n      iszero\n      iszero\n      eq\n        /* \"contracts/TimeMarket.sol\":5626:5674  require(userIfWithdraw2[msg.sender][_id]==false) */\n      tag_122\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_122:\n        /* \"contracts/TimeMarket.sol\":5685:5711  address promiseStableToken */\n      0x00\n        /* \"contracts/TimeMarket.sol\":5712:5721  _tradeMes */\n      0x04\n        /* \"contracts/TimeMarket.sol\":5712:5726  _tradeMes[_id] */\n      0x00\n        /* \"contracts/TimeMarket.sol\":5722:5725  _id */\n      dup5\n        /* \"contracts/TimeMarket.sol\":5712:5726  _tradeMes[_id] */\n      0xffffffffffffffff\n      and\n      0xffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/TimeMarket.sol\":5712:5739  _tradeMes[_id].tokenAddress */\n      0x02\n      add\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/TimeMarket.sol\":5685:5739  address promiseStableToken=_tradeMes[_id].tokenAddress */\n      swap1\n      pop\n        /* \"contracts/TimeMarket.sol\":5750:5763  uint256 total */\n      0x00\n        /* \"contracts/TimeMarket.sol\":5788:5797  _tradeMes */\n      0x04\n        /* \"contracts/TimeMarket.sol\":5788:5802  _tradeMes[_id] */\n      0x00\n        /* \"contracts/TimeMarket.sol\":5798:5801  _id */\n      dup6\n        /* \"contracts/TimeMarket.sol\":5788:5802  _tradeMes[_id] */\n      0xffffffffffffffff\n      and\n      0xffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/TimeMarket.sol\":5788:5817  _tradeMes[_id].buyTotalAmount */\n      0x00\n      add\n      0x10\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/TimeMarket.sol\":5764:5773  _tradeMes */\n      0x04\n        /* \"contracts/TimeMarket.sol\":5764:5778  _tradeMes[_id] */\n      0x00\n        /* \"contracts/TimeMarket.sol\":5774:5777  _id */\n      dup7\n        /* \"contracts/TimeMarket.sol\":5764:5778  _tradeMes[_id] */\n      0xffffffffffffffff\n      and\n      0xffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/TimeMarket.sol\":5764:5787  _tradeMes[_id].buyPrice */\n      0x01\n      add\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/TimeMarket.sol\":5764:5817  _tradeMes[_id].buyPrice*_tradeMes[_id].buyTotalAmount */\n      tag_123\n      swap2\n      swap1\n      tag_74\n      jump\t// in\n    tag_123:\n        /* \"contracts/TimeMarket.sol\":5750:5817  uint256 total=_tradeMes[_id].buyPrice*_tradeMes[_id].buyTotalAmount */\n      0xffffffffffffffffffffffffffffffff\n      and\n      swap1\n      pop\n        /* \"contracts/TimeMarket.sol\":5828:5850  uint256 penalSumAmount */\n      0x00\n        /* \"contracts/TimeMarket.sol\":5851:5914  getPenal(_tradeMes[_id].buyPrice,_tradeMes[_id].buyTotalAmount) */\n      tag_124\n        /* \"contracts/TimeMarket.sol\":5860:5869  _tradeMes */\n      0x04\n        /* \"contracts/TimeMarket.sol\":5860:5874  _tradeMes[_id] */\n      0x00\n        /* \"contracts/TimeMarket.sol\":5870:5873  _id */\n      dup8\n        /* \"contracts/TimeMarket.sol\":5860:5874  _tradeMes[_id] */\n      0xffffffffffffffff\n      and\n      0xffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/TimeMarket.sol\":5860:5883  _tradeMes[_id].buyPrice */\n      0x01\n      add\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/TimeMarket.sol\":5884:5893  _tradeMes */\n      0x04\n        /* \"contracts/TimeMarket.sol\":5884:5898  _tradeMes[_id] */\n      0x00\n        /* \"contracts/TimeMarket.sol\":5894:5897  _id */\n      dup9\n        /* \"contracts/TimeMarket.sol\":5884:5898  _tradeMes[_id] */\n      0xffffffffffffffff\n      and\n      0xffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/TimeMarket.sol\":5884:5913  _tradeMes[_id].buyTotalAmount */\n      0x00\n      add\n      0x10\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/TimeMarket.sol\":5851:5859  getPenal */\n      tag_47\n        /* \"contracts/TimeMarket.sol\":5851:5914  getPenal(_tradeMes[_id].buyPrice,_tradeMes[_id].buyTotalAmount) */\n      jump\t// in\n    tag_124:\n        /* \"contracts/TimeMarket.sol\":5828:5914  uint256 penalSumAmount=getPenal(_tradeMes[_id].buyPrice,_tradeMes[_id].buyTotalAmount) */\n      swap1\n      pop\n        /* \"contracts/TimeMarket.sol\":5925:5936  uint256 fee */\n      0x00\n        /* \"contracts/TimeMarket.sol\":5937:5955  TimeFee.fee(total) */\n      tag_125\n        /* \"contracts/TimeMarket.sol\":5949:5954  total */\n      dup4\n        /* \"contracts/TimeMarket.sol\":5937:5948  TimeFee.fee */\n      tag_100\n        /* \"contracts/TimeMarket.sol\":5937:5955  TimeFee.fee(total) */\n      jump\t// in\n    tag_125:\n        /* \"contracts/TimeMarket.sol\":5925:5955  uint256 fee=TimeFee.fee(total) */\n      swap1\n      pop\n        /* \"contracts/TimeMarket.sol\":6008:6066  IERC20(promiseStableToken).safeTransfer(address(this),fee) */\n      tag_126\n        /* \"contracts/TimeMarket.sol\":6056:6060  this */\n      address\n        /* \"contracts/TimeMarket.sol\":6062:6065  fee */\n      dup3\n        /* \"contracts/TimeMarket.sol\":6015:6033  promiseStableToken */\n      dup7\n        /* \"contracts/TimeMarket.sol\":6008:6047  IERC20(promiseStableToken).safeTransfer */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      tag_102\n      swap1\n        /* \"contracts/TimeMarket.sol\":6008:6066  IERC20(promiseStableToken).safeTransfer(address(this),fee) */\n      swap3\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_126:\n        /* \"contracts/TimeMarket.sol\":6107:6202  IERC20(promiseStableToken).safeTransfer(... */\n      tag_127\n        /* \"contracts/TimeMarket.sol\":6161:6167  solder */\n      dup6\n        /* \"contracts/TimeMarket.sol\":6188:6191  fee */\n      dup3\n        /* \"contracts/TimeMarket.sol\":6182:6187  total */\n      dup6\n        /* \"contracts/TimeMarket.sol\":6182:6191  total-fee */\n      tag_128\n      swap2\n      swap1\n      tag_105\n      jump\t// in\n    tag_128:\n        /* \"contracts/TimeMarket.sol\":6114:6132  promiseStableToken */\n      dup7\n        /* \"contracts/TimeMarket.sol\":6107:6146  IERC20(promiseStableToken).safeTransfer */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      tag_102\n      swap1\n        /* \"contracts/TimeMarket.sol\":6107:6202  IERC20(promiseStableToken).safeTransfer(... */\n      swap3\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_127:\n        /* \"contracts/TimeMarket.sol\":6261:6361  IERC20(promiseStableToken).safeTransfer(... */\n      tag_129\n        /* \"contracts/TimeMarket.sol\":6315:6321  solder */\n      dup6\n        /* \"contracts/TimeMarket.sol\":6336:6350  penalSumAmount */\n      dup4\n        /* \"contracts/TimeMarket.sol\":6268:6286  promiseStableToken */\n      dup7\n        /* \"contracts/TimeMarket.sol\":6261:6300  IERC20(promiseStableToken).safeTransfer */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      tag_102\n      swap1\n        /* \"contracts/TimeMarket.sol\":6261:6361  IERC20(promiseStableToken).safeTransfer(... */\n      swap3\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_129:\n        /* \"contracts/TimeMarket.sol\":6442:6446  true */\n      0x01\n        /* \"contracts/TimeMarket.sol\":6409:6424  userIfWithdraw2 */\n      0x07\n        /* \"contracts/TimeMarket.sol\":6409:6436  userIfWithdraw2[msg.sender] */\n      0x00\n        /* \"contracts/TimeMarket.sol\":6425:6435  msg.sender */\n      caller\n        /* \"contracts/TimeMarket.sol\":6409:6436  userIfWithdraw2[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/TimeMarket.sol\":6409:6441  userIfWithdraw2[msg.sender][_id] */\n      0x00\n        /* \"contracts/TimeMarket.sol\":6437:6440  _id */\n      dup9\n        /* \"contracts/TimeMarket.sol\":6409:6441  userIfWithdraw2[msg.sender][_id] */\n      0xffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n        /* \"contracts/TimeMarket.sol\":6409:6446  userIfWithdraw2[msg.sender][_id]=true */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xff\n      mul\n      not\n      and\n      swap1\n      dup4\n      iszero\n      iszero\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"contracts/TimeMarket.sol\":5367:6455  {... */\n      pop\n      pop\n      pop\n      pop\n      pop\n        /* \"contracts/TimeMarket.sol\":5318:6455  function solderWithdrawStable(uint64 _id)external{... */\n      pop\n      jump\t// out\n        /* \"contracts/TimeMarket.sol\":8823:9366  function getPenal(uint128 _soldPrice, uint128 _soldAmount)public pure returns (uint256){... */\n    tag_47:\n        /* \"contracts/TimeMarket.sol\":8902:8909  uint256 */\n      0x00\n        /* \"contracts/TimeMarket.sol\":8921:8939  uint256 thisAmount */\n      dup1\n        /* \"contracts/TimeMarket.sol\":8953:8964  _soldAmount */\n      dup3\n        /* \"contracts/TimeMarket.sol\":8942:8952  _soldPrice */\n      dup5\n        /* \"contracts/TimeMarket.sol\":8942:8964  _soldPrice*_soldAmount */\n      tag_131\n      swap2\n      swap1\n      tag_74\n      jump\t// in\n    tag_131:\n        /* \"contracts/TimeMarket.sol\":8921:8964  uint256 thisAmount = _soldPrice*_soldAmount */\n      0xffffffffffffffffffffffffffffffff\n      and\n      swap1\n      pop\n        /* \"contracts/TimeMarket.sol\":8993:9002  100 ether */\n      0x056bc75e2d63100000\n        /* \"contracts/TimeMarket.sol\":8979:8989  thisAmount */\n      dup2\n        /* \"contracts/TimeMarket.sol\":8979:9002  thisAmount >= 100 ether */\n      lt\n      iszero\n        /* \"contracts/TimeMarket.sol\":8979:9029  thisAmount >= 100 ether && thisAmount < 1000 ether */\n      dup1\n      iszero\n      tag_132\n      jumpi\n      pop\n        /* \"contracts/TimeMarket.sol\":9019:9029  1000 ether */\n      0x3635c9adc5dea00000\n        /* \"contracts/TimeMarket.sol\":9006:9016  thisAmount */\n      dup2\n        /* \"contracts/TimeMarket.sol\":9006:9029  thisAmount < 1000 ether */\n      lt\n        /* \"contracts/TimeMarket.sol\":8979:9029  thisAmount >= 100 ether && thisAmount < 1000 ether */\n    tag_132:\n        /* \"contracts/TimeMarket.sol\":8975:9359  if (thisAmount >= 100 ether && thisAmount < 1000 ether) {... */\n      iszero\n      tag_133\n      jumpi\n        /* \"contracts/TimeMarket.sol\":9073:9076  100 */\n      0x64\n        /* \"contracts/TimeMarket.sol\":9067:9069  50 */\n      0x32\n        /* \"contracts/TimeMarket.sol\":9054:9064  thisAmount */\n      dup3\n        /* \"contracts/TimeMarket.sol\":9054:9069  thisAmount * 50 */\n      tag_134\n      swap2\n      swap1\n      tag_135\n      jump\t// in\n    tag_134:\n        /* \"contracts/TimeMarket.sol\":9053:9076  (thisAmount * 50) / 100 */\n      tag_136\n      swap2\n      swap1\n      tag_137\n      jump\t// in\n    tag_136:\n        /* \"contracts/TimeMarket.sol\":9046:9076  return (thisAmount * 50) / 100 */\n      swap2\n      pop\n      pop\n      jump(tag_130)\n        /* \"contracts/TimeMarket.sol\":8975:9359  if (thisAmount >= 100 ether && thisAmount < 1000 ether) {... */\n    tag_133:\n        /* \"contracts/TimeMarket.sol\":9112:9122  1000 ether */\n      0x3635c9adc5dea00000\n        /* \"contracts/TimeMarket.sol\":9098:9108  thisAmount */\n      dup2\n        /* \"contracts/TimeMarket.sol\":9098:9122  thisAmount >= 1000 ether */\n      lt\n      iszero\n        /* \"contracts/TimeMarket.sol\":9098:9150  thisAmount >= 1000 ether && thisAmount < 10000 ether */\n      dup1\n      iszero\n      tag_139\n      jumpi\n      pop\n        /* \"contracts/TimeMarket.sol\":9139:9150  10000 ether */\n      0x021e19e0c9bab2400000\n        /* \"contracts/TimeMarket.sol\":9126:9136  thisAmount */\n      dup2\n        /* \"contracts/TimeMarket.sol\":9126:9150  thisAmount < 10000 ether */\n      lt\n        /* \"contracts/TimeMarket.sol\":9098:9150  thisAmount >= 1000 ether && thisAmount < 10000 ether */\n    tag_139:\n        /* \"contracts/TimeMarket.sol\":9094:9359  if (thisAmount >= 1000 ether && thisAmount < 10000 ether) {... */\n      iszero\n      tag_140\n      jumpi\n        /* \"contracts/TimeMarket.sol\":9194:9197  100 */\n      0x64\n        /* \"contracts/TimeMarket.sol\":9188:9190  40 */\n      0x28\n        /* \"contracts/TimeMarket.sol\":9175:9185  thisAmount */\n      dup3\n        /* \"contracts/TimeMarket.sol\":9175:9190  thisAmount * 40 */\n      tag_141\n      swap2\n      swap1\n      tag_135\n      jump\t// in\n    tag_141:\n        /* \"contracts/TimeMarket.sol\":9174:9197  (thisAmount * 40) / 100 */\n      tag_142\n      swap2\n      swap1\n      tag_137\n      jump\t// in\n    tag_142:\n        /* \"contracts/TimeMarket.sol\":9167:9197  return (thisAmount * 40) / 100 */\n      swap2\n      pop\n      pop\n      jump(tag_130)\n        /* \"contracts/TimeMarket.sol\":9094:9359  if (thisAmount >= 1000 ether && thisAmount < 10000 ether) {... */\n    tag_140:\n        /* \"contracts/TimeMarket.sol\":9232:9243  10000 ether */\n      0x021e19e0c9bab2400000\n        /* \"contracts/TimeMarket.sol\":9219:9229  thisAmount */\n      dup2\n        /* \"contracts/TimeMarket.sol\":9219:9243  thisAmount > 10000 ether */\n      gt\n        /* \"contracts/TimeMarket.sol\":9215:9359  if (thisAmount > 10000 ether) {... */\n      iszero\n      tag_144\n      jumpi\n        /* \"contracts/TimeMarket.sol\":9287:9290  100 */\n      0x64\n        /* \"contracts/TimeMarket.sol\":9281:9283  25 */\n      0x19\n        /* \"contracts/TimeMarket.sol\":9268:9278  thisAmount */\n      dup3\n        /* \"contracts/TimeMarket.sol\":9268:9283  thisAmount * 25 */\n      tag_145\n      swap2\n      swap1\n      tag_135\n      jump\t// in\n    tag_145:\n        /* \"contracts/TimeMarket.sol\":9267:9290  (thisAmount * 25) / 100 */\n      tag_146\n      swap2\n      swap1\n      tag_137\n      jump\t// in\n    tag_146:\n        /* \"contracts/TimeMarket.sol\":9260:9290  return (thisAmount * 25) / 100 */\n      swap2\n      pop\n      pop\n      jump(tag_130)\n        /* \"contracts/TimeMarket.sol\":9215:9359  if (thisAmount > 10000 ether) {... */\n    tag_144:\n        /* \"contracts/TimeMarket.sol\":9330:9347  NotEnoughAmount() */\n      mload(0x40)\n      0xe008b5f900000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/TimeMarket.sol\":8823:9366  function getPenal(uint128 _soldPrice, uint128 _soldAmount)public pure returns (uint256){... */\n    tag_130:\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/TimeMarket.sol\":1426:1490  mapping(address => mapping(uint256=>bool))public userIfWithdraw3 */\n    tag_52:\n      mstore(0x20, 0x08)\n      dup2\n      0x00\n      mstore\n      mstore(0x20, keccak256(0x00, 0x40))\n      dup1\n      0x00\n      mstore\n      keccak256(0x00, 0x40)\n      0x00\n      swap2\n      pop\n      swap2\n      pop\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n      dup2\n      jump\t// out\n        /* \"contracts/TimeMarket.sol\":4505:5265  function buyerWithdrawAirdorp(uint64 _id)external{... */\n    tag_56:\n        /* \"contracts/TimeMarket.sol\":4565:4578  address buyer */\n      0x00\n        /* \"contracts/TimeMarket.sol\":4579:4592  getBuyer(_id) */\n      tag_149\n        /* \"contracts/TimeMarket.sol\":4588:4591  _id */\n      dup3\n        /* \"contracts/TimeMarket.sol\":4579:4587  getBuyer */\n      tag_92\n        /* \"contracts/TimeMarket.sol\":4579:4592  getBuyer(_id) */\n      jump\t// in\n    tag_149:\n        /* \"contracts/TimeMarket.sol\":4565:4592  address buyer=getBuyer(_id) */\n      swap1\n      pop\n        /* \"contracts/TimeMarket.sol\":4651:4656  buyer */\n      dup1\n        /* \"contracts/TimeMarket.sol\":4639:4656  msg.sender!=buyer */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/TimeMarket.sol\":4639:4649  msg.sender */\n      caller\n        /* \"contracts/TimeMarket.sol\":4639:4656  msg.sender!=buyer */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"contracts/TimeMarket.sol\":4636:4677  if(msg.sender!=buyer){revert NotBuyer();} */\n      tag_150\n      jumpi\n        /* \"contracts/TimeMarket.sol\":4665:4675  NotBuyer() */\n      mload(0x40)\n      0x472e017e00000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/TimeMarket.sol\":4636:4677  if(msg.sender!=buyer){revert NotBuyer();} */\n    tag_150:\n        /* \"contracts/TimeMarket.sol\":4780:4781  3 */\n      0x03\n        /* \"contracts/TimeMarket.sol\":4753:4762  _tradeMes */\n      0x04\n        /* \"contracts/TimeMarket.sol\":4753:4767  _tradeMes[_id] */\n      0x00\n        /* \"contracts/TimeMarket.sol\":4763:4766  _id */\n      dup5\n        /* \"contracts/TimeMarket.sol\":4753:4767  _tradeMes[_id] */\n      0xffffffffffffffff\n      and\n      0xffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/TimeMarket.sol\":4753:4778  _tradeMes[_id].tradeState */\n      0x00\n      add\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n        /* \"contracts/TimeMarket.sol\":4753:4781  _tradeMes[_id].tradeState!=3 */\n      0xff\n      and\n      eq\n        /* \"contracts/TimeMarket.sol\":4750:4808  if(_tradeMes[_id].tradeState!=3){revert NotInjectToken();} */\n      tag_151\n      jumpi\n        /* \"contracts/TimeMarket.sol\":4790:4806  NotInjectToken() */\n      mload(0x40)\n      0xde4461cd00000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/TimeMarket.sol\":4750:4808  if(_tradeMes[_id].tradeState!=3){revert NotInjectToken();} */\n    tag_151:\n        /* \"contracts/TimeMarket.sol\":4819:4836  uint128 buyAmount */\n      0x00\n        /* \"contracts/TimeMarket.sol\":4837:4846  _tradeMes */\n      0x04\n        /* \"contracts/TimeMarket.sol\":4837:4851  _tradeMes[_id] */\n      0x00\n        /* \"contracts/TimeMarket.sol\":4847:4850  _id */\n      dup5\n        /* \"contracts/TimeMarket.sol\":4837:4851  _tradeMes[_id] */\n      0xffffffffffffffff\n      and\n      0xffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/TimeMarket.sol\":4837:4866  _tradeMes[_id].buyTotalAmount */\n      0x00\n      add\n      0x10\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/TimeMarket.sol\":4819:4866  uint128 buyAmount=_tradeMes[_id].buyTotalAmount */\n      swap1\n      pop\n        /* \"contracts/TimeMarket.sol\":4877:4895  uint128 buyerPrice */\n      0x00\n        /* \"contracts/TimeMarket.sol\":4896:4905  _tradeMes */\n      0x04\n        /* \"contracts/TimeMarket.sol\":4896:4910  _tradeMes[_id] */\n      0x00\n        /* \"contracts/TimeMarket.sol\":4906:4909  _id */\n      dup6\n        /* \"contracts/TimeMarket.sol\":4896:4910  _tradeMes[_id] */\n      0xffffffffffffffff\n      and\n      0xffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/TimeMarket.sol\":4896:4919  _tradeMes[_id].buyPrice */\n      0x01\n      add\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/TimeMarket.sol\":4877:4919  uint128 buyerPrice=_tradeMes[_id].buyPrice */\n      swap1\n      pop\n        /* \"contracts/TimeMarket.sol\":4974:4985  uint256 fee */\n      0x00\n        /* \"contracts/TimeMarket.sol\":4986:5019  TimeFee.fee(buyAmount*buyerPrice) */\n      tag_152\n        /* \"contracts/TimeMarket.sol\":5008:5018  buyerPrice */\n      dup3\n        /* \"contracts/TimeMarket.sol\":4998:5007  buyAmount */\n      dup5\n        /* \"contracts/TimeMarket.sol\":4998:5018  buyAmount*buyerPrice */\n      tag_153\n      swap2\n      swap1\n      tag_74\n      jump\t// in\n    tag_153:\n        /* \"contracts/TimeMarket.sol\":4986:5019  TimeFee.fee(buyAmount*buyerPrice) */\n      0xffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/TimeMarket.sol\":4986:4997  TimeFee.fee */\n      tag_100\n        /* \"contracts/TimeMarket.sol\":4986:5019  TimeFee.fee(buyAmount*buyerPrice) */\n      jump\t// in\n    tag_152:\n        /* \"contracts/TimeMarket.sol\":4974:5019  uint256 fee=TimeFee.fee(buyAmount*buyerPrice) */\n      swap1\n      pop\n        /* \"contracts/TimeMarket.sol\":5072:5124  IERC20(airdropToken).safeTransfer(address(this),fee) */\n      tag_154\n        /* \"contracts/TimeMarket.sol\":5114:5118  this */\n      address\n        /* \"contracts/TimeMarket.sol\":5120:5123  fee */\n      dup3\n        /* \"contracts/TimeMarket.sol\":5079:5091  airdropToken */\n      0x01\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/TimeMarket.sol\":5072:5105  IERC20(airdropToken).safeTransfer */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      tag_102\n      swap1\n        /* \"contracts/TimeMarket.sol\":5072:5124  IERC20(airdropToken).safeTransfer(address(this),fee) */\n      swap3\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_154:\n        /* \"contracts/TimeMarket.sol\":5165:5219  IERC20(airdropToken).safeTransfer(buyer,buyAmount-fee) */\n      tag_155\n        /* \"contracts/TimeMarket.sol\":5199:5204  buyer */\n      dup5\n        /* \"contracts/TimeMarket.sol\":5215:5218  fee */\n      dup3\n        /* \"contracts/TimeMarket.sol\":5205:5214  buyAmount */\n      dup6\n        /* \"contracts/TimeMarket.sol\":5205:5218  buyAmount-fee */\n      0xffffffffffffffffffffffffffffffff\n      and\n      tag_156\n      swap2\n      swap1\n      tag_105\n      jump\t// in\n    tag_156:\n        /* \"contracts/TimeMarket.sol\":5172:5184  airdropToken */\n      0x01\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/TimeMarket.sol\":5165:5198  IERC20(airdropToken).safeTransfer */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      tag_102\n      swap1\n        /* \"contracts/TimeMarket.sol\":5165:5219  IERC20(airdropToken).safeTransfer(buyer,buyAmount-fee) */\n      swap3\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_155:\n        /* \"contracts/TimeMarket.sol\":5256:5257  4 */\n      0x04\n        /* \"contracts/TimeMarket.sol\":5230:5239  _tradeMes */\n      dup1\n        /* \"contracts/TimeMarket.sol\":5230:5244  _tradeMes[_id] */\n      0x00\n        /* \"contracts/TimeMarket.sol\":5240:5243  _id */\n      dup8\n        /* \"contracts/TimeMarket.sol\":5230:5244  _tradeMes[_id] */\n      0xffffffffffffffff\n      and\n      0xffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/TimeMarket.sol\":5230:5255  _tradeMes[_id].tradeState */\n      0x00\n      add\n      0x00\n        /* \"contracts/TimeMarket.sol\":5230:5257  _tradeMes[_id].tradeState=4 */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"contracts/TimeMarket.sol\":4554:5265  {... */\n      pop\n      pop\n      pop\n      pop\n        /* \"contracts/TimeMarket.sol\":4505:5265  function buyerWithdrawAirdorp(uint64 _id)external{... */\n      pop\n      jump\t// out\n        /* \"contracts/TimeMarket.sol\":8038:8087  function profileEarn(uint64 _id)public {... */\n    tag_59:\n      pop\n      jump\t// out\n        /* \"contracts/TimeMarket.sol\":2746:3761  function Sale(uint64 _id,address token1) external {... */\n    tag_63:\n        /* \"contracts/TimeMarket.sol\":2807:2834  tradeMes memory maxTradeMes */\n      0x00\n        /* \"contracts/TimeMarket.sol\":2835:2844  _tradeMes */\n      0x04\n        /* \"contracts/TimeMarket.sol\":2835:2849  _tradeMes[_id] */\n      0x00\n        /* \"contracts/TimeMarket.sol\":2845:2848  _id */\n      dup5\n        /* \"contracts/TimeMarket.sol\":2835:2849  _tradeMes[_id] */\n      0xffffffffffffffff\n      and\n      0xffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/TimeMarket.sol\":2807:2849  tradeMes memory maxTradeMes=_tradeMes[_id] */\n      mload(0x40)\n      dup1\n      0x0100\n      add\n      0x40\n      mstore\n      swap1\n      dup2\n      0x00\n      dup3\n      add\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n      0xff\n      and\n      0xff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup3\n      add\n      0x01\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffff\n      and\n      0xffffffffffffffff\n      and\n      0xffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup3\n      add\n      0x09\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffff\n      and\n      0xffffffffffffff\n      and\n      0xffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup3\n      add\n      0x10\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      0x01\n      dup3\n      add\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      0x02\n      dup3\n      add\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      0x03\n      dup3\n      add\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      0x04\n      dup3\n      add\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      pop\n      pop\n      swap1\n      pop\n        /* \"contracts/TimeMarket.sol\":2892:2893  1 */\n      0x01\n        /* \"contracts/TimeMarket.sol\":2868:2879  maxTradeMes */\n      dup2\n        /* \"contracts/TimeMarket.sol\":2868:2890  maxTradeMes.tradeState */\n      0x00\n      add\n      mload\n        /* \"contracts/TimeMarket.sol\":2868:2893  maxTradeMes.tradeState==1 */\n      0xff\n      and\n      eq\n        /* \"contracts/TimeMarket.sol\":2860:2894  require(maxTradeMes.tradeState==1) */\n      tag_159\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_159:\n        /* \"contracts/TimeMarket.sol\":2933:2959  address promiseStableToken */\n      0x00\n        /* \"contracts/TimeMarket.sol\":2960:2971  maxTradeMes */\n      dup2\n        /* \"contracts/TimeMarket.sol\":2960:2984  maxTradeMes.tokenAddress */\n      0xa0\n      add\n      mload\n        /* \"contracts/TimeMarket.sol\":2933:2984  address promiseStableToken=maxTradeMes.tokenAddress */\n      swap1\n      pop\n        /* \"contracts/TimeMarket.sol\":3077:3093  address thisPool */\n      0x00\n        /* \"contracts/TimeMarket.sol\":3094:3140  getPoolAddress(promiseStableToken,token1,1000) */\n      tag_160\n        /* \"contracts/TimeMarket.sol\":3109:3127  promiseStableToken */\n      dup3\n        /* \"contracts/TimeMarket.sol\":3128:3134  token1 */\n      dup6\n        /* \"contracts/TimeMarket.sol\":3135:3139  1000 */\n      0x03e8\n        /* \"contracts/TimeMarket.sol\":3094:3108  getPoolAddress */\n      tag_38\n        /* \"contracts/TimeMarket.sol\":3094:3140  getPoolAddress(promiseStableToken,token1,1000) */\n      jump\t// in\n    tag_160:\n        /* \"contracts/TimeMarket.sol\":3077:3140  address thisPool=getPoolAddress(promiseStableToken,token1,1000) */\n      swap1\n      pop\n        /* \"contracts/TimeMarket.sol\":3151:3167  uint penalAmount */\n      0x00\n        /* \"contracts/TimeMarket.sol\":3168:3226  getPenal(maxTradeMes.buyPrice, maxTradeMes.buyTotalAmount) */\n      tag_161\n        /* \"contracts/TimeMarket.sol\":3177:3188  maxTradeMes */\n      dup5\n        /* \"contracts/TimeMarket.sol\":3177:3197  maxTradeMes.buyPrice */\n      0x80\n      add\n      mload\n        /* \"contracts/TimeMarket.sol\":3199:3210  maxTradeMes */\n      dup6\n        /* \"contracts/TimeMarket.sol\":3199:3225  maxTradeMes.buyTotalAmount */\n      0x60\n      add\n      mload\n        /* \"contracts/TimeMarket.sol\":3168:3176  getPenal */\n      tag_47\n        /* \"contracts/TimeMarket.sol\":3168:3226  getPenal(maxTradeMes.buyPrice, maxTradeMes.buyTotalAmount) */\n      jump\t// in\n    tag_161:\n        /* \"contracts/TimeMarket.sol\":3151:3226  uint penalAmount=getPenal(maxTradeMes.buyPrice, maxTradeMes.buyTotalAmount) */\n      swap1\n      pop\n        /* \"contracts/TimeMarket.sol\":3264:3397  IERC20(promiseStableToken).safeTransferFrom(... */\n      tag_162\n        /* \"contracts/TimeMarket.sol\":3322:3332  msg.sender */\n      caller\n        /* \"contracts/TimeMarket.sol\":3355:3359  this */\n      address\n        /* \"contracts/TimeMarket.sol\":3375:3386  penalAmount */\n      dup4\n        /* \"contracts/TimeMarket.sol\":3271:3289  promiseStableToken */\n      dup7\n        /* \"contracts/TimeMarket.sol\":3264:3307  IERC20(promiseStableToken).safeTransferFrom */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      tag_78\n      swap1\n        /* \"contracts/TimeMarket.sol\":3264:3397  IERC20(promiseStableToken).safeTransferFrom(... */\n      swap4\n      swap3\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_162:\n        /* \"contracts/TimeMarket.sol\":3472:3532  IERC20(promiseStableToken).safeApprove(thisPool,penalAmount) */\n      tag_163\n        /* \"contracts/TimeMarket.sol\":3511:3519  thisPool */\n      dup3\n        /* \"contracts/TimeMarket.sol\":3520:3531  penalAmount */\n      dup3\n        /* \"contracts/TimeMarket.sol\":3479:3497  promiseStableToken */\n      dup6\n        /* \"contracts/TimeMarket.sol\":3472:3510  IERC20(promiseStableToken).safeApprove */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      tag_80\n      swap1\n        /* \"contracts/TimeMarket.sol\":3472:3532  IERC20(promiseStableToken).safeApprove(thisPool,penalAmount) */\n      swap3\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_163:\n        /* \"contracts/TimeMarket.sol\":3543:3622  IERC20(promiseStableToken).safeTransferFrom(address(this),thisPool,penalAmount) */\n      tag_164\n        /* \"contracts/TimeMarket.sol\":3595:3599  this */\n      address\n        /* \"contracts/TimeMarket.sol\":3601:3609  thisPool */\n      dup4\n        /* \"contracts/TimeMarket.sol\":3610:3621  penalAmount */\n      dup4\n        /* \"contracts/TimeMarket.sol\":3550:3568  promiseStableToken */\n      dup7\n        /* \"contracts/TimeMarket.sol\":3543:3586  IERC20(promiseStableToken).safeTransferFrom */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      tag_78\n      swap1\n        /* \"contracts/TimeMarket.sol\":3543:3622  IERC20(promiseStableToken).safeTransferFrom(address(this),thisPool,penalAmount) */\n      swap4\n      swap3\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_164:\n        /* \"contracts/TimeMarket.sol\":3662:3672  msg.sender */\n      caller\n        /* \"contracts/TimeMarket.sol\":3633:3642  _tradeMes */\n      0x04\n        /* \"contracts/TimeMarket.sol\":3633:3647  _tradeMes[_id] */\n      0x00\n        /* \"contracts/TimeMarket.sol\":3643:3646  _id */\n      dup9\n        /* \"contracts/TimeMarket.sol\":3633:3647  _tradeMes[_id] */\n      0xffffffffffffffff\n      and\n      0xffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/TimeMarket.sol\":3633:3661  _tradeMes[_id].solderAddress */\n      0x04\n      add\n      0x00\n        /* \"contracts/TimeMarket.sol\":3633:3672  _tradeMes[_id].solderAddress=msg.sender */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xffffffffffffffffffffffffffffffffffffffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"contracts/TimeMarket.sol\":3752:3753  2 */\n      0x02\n        /* \"contracts/TimeMarket.sol\":3726:3735  _tradeMes */\n      0x04\n        /* \"contracts/TimeMarket.sol\":3726:3740  _tradeMes[_id] */\n      0x00\n        /* \"contracts/TimeMarket.sol\":3736:3739  _id */\n      dup9\n        /* \"contracts/TimeMarket.sol\":3726:3740  _tradeMes[_id] */\n      0xffffffffffffffff\n      and\n      0xffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/TimeMarket.sol\":3726:3751  _tradeMes[_id].tradeState */\n      0x00\n      add\n      0x00\n        /* \"contracts/TimeMarket.sol\":3726:3753  _tradeMes[_id].tradeState=2 */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"contracts/TimeMarket.sol\":2796:3761  {... */\n      pop\n      pop\n      pop\n      pop\n        /* \"contracts/TimeMarket.sol\":2746:3761  function Sale(uint64 _id,address token1) external {... */\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/TimeMarket.sol\":1302:1366  mapping(address => mapping(uint256=>bool))public userIfWithdraw2 */\n    tag_66:\n      mstore(0x20, 0x07)\n      dup2\n      0x00\n      mstore\n      mstore(0x20, keccak256(0x00, 0x40))\n      dup1\n      0x00\n      mstore\n      keccak256(0x00, 0x40)\n      0x00\n      swap2\n      pop\n      swap2\n      pop\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n      dup2\n      jump\t// out\n        /* \"contracts/TimeMarket.sol\":1537:1601  mapping(address => mapping(uint256=>bool))public userIfWithdraw4 */\n    tag_70:\n      mstore(0x20, 0x09)\n      dup2\n      0x00\n      mstore\n      mstore(0x20, keccak256(0x00, 0x40))\n      dup1\n      0x00\n      mstore\n      keccak256(0x00, 0x40)\n      0x00\n      swap2\n      pop\n      swap2\n      pop\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n      dup2\n      jump\t// out\n        /* \"libraries/SafeERC20.sol\":1447:1652  function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {... */\n    tag_78:\n        /* \"libraries/SafeERC20.sol\":1548:1644  _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value)) */\n      tag_166\n        /* \"libraries/SafeERC20.sol\":1568:1573  token */\n      dup5\n        /* \"libraries/SafeERC20.sol\":1598:1625  token.transferFrom.selector */\n      shl(0xe0, 0x23b872dd)\n        /* \"libraries/SafeERC20.sol\":1627:1631  from */\n      dup6\n        /* \"libraries/SafeERC20.sol\":1633:1635  to */\n      dup6\n        /* \"libraries/SafeERC20.sol\":1637:1642  value */\n      dup6\n        /* \"libraries/SafeERC20.sol\":1575:1643  abi.encodeWithSelector(token.transferFrom.selector, from, to, value) */\n      add(0x24, mload(0x40))\n      tag_167\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_168\n      jump\t// in\n    tag_167:\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n      swap1\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n      0x20\n      dup3\n      add\n      dup1\n      mload\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n      dup4\n      dup2\n      dup4\n      and\n      or\n      dup4\n      mstore\n      pop\n      pop\n      pop\n      pop\n        /* \"libraries/SafeERC20.sol\":1548:1567  _callOptionalReturn */\n      tag_169\n        /* \"libraries/SafeERC20.sol\":1548:1644  _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value)) */\n      jump\t// in\n    tag_166:\n        /* \"libraries/SafeERC20.sol\":1447:1652  function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"libraries/SafeERC20.sol\":1921:2503  function safeApprove(IERC20 token, address spender, uint256 value) internal {... */\n    tag_80:\n        /* \"libraries/SafeERC20.sol\":2260:2261  0 */\n      0x00\n        /* \"libraries/SafeERC20.sol\":2251:2256  value */\n      dup2\n        /* \"libraries/SafeERC20.sol\":2251:2261  value == 0 */\n      eq\n        /* \"libraries/SafeERC20.sol\":2250:2312  (value == 0) || (token.allowance(address(this), spender) == 0) */\n      dup1\n      tag_171\n      jumpi\n      pop\n        /* \"libraries/SafeERC20.sol\":2310:2311  0 */\n      0x00\n        /* \"libraries/SafeERC20.sol\":2267:2272  token */\n      dup4\n        /* \"libraries/SafeERC20.sol\":2267:2282  token.allowance */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xdd62ed3e\n        /* \"libraries/SafeERC20.sol\":2291:2295  this */\n      address\n        /* \"libraries/SafeERC20.sol\":2298:2305  spender */\n      dup6\n        /* \"libraries/SafeERC20.sol\":2267:2306  token.allowance(address(this), spender) */\n      mload(0x40)\n      dup4\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      tag_172\n      swap3\n      swap2\n      swap1\n      tag_173\n      jump\t// in\n    tag_172:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_175\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_175:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_176\n      swap2\n      swap1\n      tag_177\n      jump\t// in\n    tag_176:\n        /* \"libraries/SafeERC20.sol\":2267:2311  token.allowance(address(this), spender) == 0 */\n      eq\n        /* \"libraries/SafeERC20.sol\":2250:2312  (value == 0) || (token.allowance(address(this), spender) == 0) */\n    tag_171:\n        /* \"libraries/SafeERC20.sol\":2228:2394  require(... */\n      tag_178\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_179\n      swap1\n      tag_180\n      jump\t// in\n    tag_179:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_178:\n        /* \"libraries/SafeERC20.sol\":2405:2495  _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value)) */\n      tag_181\n        /* \"libraries/SafeERC20.sol\":2425:2430  token */\n      dup4\n        /* \"libraries/SafeERC20.sol\":2455:2477  token.approve.selector */\n      shl(0xe0, 0x095ea7b3)\n        /* \"libraries/SafeERC20.sol\":2479:2486  spender */\n      dup5\n        /* \"libraries/SafeERC20.sol\":2488:2493  value */\n      dup5\n        /* \"libraries/SafeERC20.sol\":2432:2494  abi.encodeWithSelector(token.approve.selector, spender, value) */\n      add(0x24, mload(0x40))\n      tag_182\n      swap3\n      swap2\n      swap1\n      tag_183\n      jump\t// in\n    tag_182:\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n      swap1\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n      0x20\n      dup3\n      add\n      dup1\n      mload\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n      dup4\n      dup2\n      dup4\n      and\n      or\n      dup4\n      mstore\n      pop\n      pop\n      pop\n      pop\n        /* \"libraries/SafeERC20.sol\":2405:2424  _callOptionalReturn */\n      tag_169\n        /* \"libraries/SafeERC20.sol\":2405:2495  _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value)) */\n      jump\t// in\n    tag_181:\n        /* \"libraries/SafeERC20.sol\":1921:2503  function safeApprove(IERC20 token, address spender, uint256 value) internal {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/TimeMarket.sol\":8643:8757  function getSolder(uint64 _id)internal view returns(address){... */\n    tag_87:\n        /* \"contracts/TimeMarket.sol\":8695:8702  address */\n      0x00\n        /* \"contracts/TimeMarket.sol\":8721:8730  _tradeMes */\n      0x04\n        /* \"contracts/TimeMarket.sol\":8721:8735  _tradeMes[_id] */\n      0x00\n        /* \"contracts/TimeMarket.sol\":8731:8734  _id */\n      dup4\n        /* \"contracts/TimeMarket.sol\":8721:8735  _tradeMes[_id] */\n      0xffffffffffffffff\n      and\n      0xffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/TimeMarket.sol\":8721:8749  _tradeMes[_id].solderAddress */\n      0x04\n      add\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/TimeMarket.sol\":8714:8749  return _tradeMes[_id].solderAddress */\n      swap1\n      pop\n        /* \"contracts/TimeMarket.sol\":8643:8757  function getSolder(uint64 _id)internal view returns(address){... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"contracts/TimeMarket.sol\":8483:8595  function getBuyer(uint64 _id)internal view returns(address){... */\n    tag_92:\n        /* \"contracts/TimeMarket.sol\":8534:8541  address */\n      0x00\n        /* \"contracts/TimeMarket.sol\":8560:8569  _tradeMes */\n      0x04\n        /* \"contracts/TimeMarket.sol\":8560:8574  _tradeMes[_id] */\n      0x00\n        /* \"contracts/TimeMarket.sol\":8570:8573  _id */\n      dup4\n        /* \"contracts/TimeMarket.sol\":8560:8574  _tradeMes[_id] */\n      0xffffffffffffffff\n      and\n      0xffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/TimeMarket.sol\":8560:8587  _tradeMes[_id].buyerAddress */\n      0x03\n      add\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/TimeMarket.sol\":8553:8587  return _tradeMes[_id].buyerAddress */\n      swap1\n      pop\n        /* \"contracts/TimeMarket.sol\":8483:8595  function getBuyer(uint64 _id)internal view returns(address){... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"libraries/TimeFee.sol\":250:680  function fee(uint256 stableAmount)internal pure returns(uint256 stableFee){... */\n    tag_100:\n        /* \"libraries/TimeFee.sol\":306:323  uint256 stableFee */\n      0x00\n        /* \"libraries/TimeFee.sol\":352:361  100 ether */\n      0x056bc75e2d63100000\n        /* \"libraries/TimeFee.sol\":338:350  stableAmount */\n      dup3\n        /* \"libraries/TimeFee.sol\":338:361  stableAmount>=100 ether */\n      lt\n      iszero\n        /* \"libraries/TimeFee.sol\":338:388  stableAmount>=100 ether && stableAmount<1000 ether */\n      dup1\n      iszero\n      tag_187\n      jumpi\n      pop\n        /* \"libraries/TimeFee.sol\":378:388  1000 ether */\n      0x3635c9adc5dea00000\n        /* \"libraries/TimeFee.sol\":365:377  stableAmount */\n      dup3\n        /* \"libraries/TimeFee.sol\":365:388  stableAmount<1000 ether */\n      lt\n        /* \"libraries/TimeFee.sol\":338:388  stableAmount>=100 ether && stableAmount<1000 ether */\n    tag_187:\n        /* \"libraries/TimeFee.sol\":335:673  if(stableAmount>=100 ether && stableAmount<1000 ether){... */\n      iszero\n      tag_188\n      jumpi\n        /* \"libraries/TimeFee.sol\":424:427  100 */\n      0x64\n        /* \"libraries/TimeFee.sol\":411:423  stableAmount */\n      dup3\n        /* \"libraries/TimeFee.sol\":411:427  stableAmount/100 */\n      tag_189\n      swap2\n      swap1\n      tag_137\n      jump\t// in\n    tag_189:\n        /* \"libraries/TimeFee.sol\":404:427  return stableAmount/100 */\n      swap1\n      pop\n      jump(tag_186)\n        /* \"libraries/TimeFee.sol\":335:673  if(stableAmount>=100 ether && stableAmount<1000 ether){... */\n    tag_188:\n        /* \"libraries/TimeFee.sol\":461:471  1000 ether */\n      0x3635c9adc5dea00000\n        /* \"libraries/TimeFee.sol\":447:459  stableAmount */\n      dup3\n        /* \"libraries/TimeFee.sol\":447:471  stableAmount>=1000 ether */\n      lt\n      iszero\n        /* \"libraries/TimeFee.sol\":447:499  stableAmount>=1000 ether && stableAmount<10000 ether */\n      dup1\n      iszero\n      tag_191\n      jumpi\n      pop\n        /* \"libraries/TimeFee.sol\":488:499  10000 ether */\n      0x021e19e0c9bab2400000\n        /* \"libraries/TimeFee.sol\":475:487  stableAmount */\n      dup3\n        /* \"libraries/TimeFee.sol\":475:499  stableAmount<10000 ether */\n      lt\n        /* \"libraries/TimeFee.sol\":447:499  stableAmount>=1000 ether && stableAmount<10000 ether */\n    tag_191:\n        /* \"libraries/TimeFee.sol\":444:673  if(stableAmount>=1000 ether && stableAmount<10000 ether){... */\n      iszero\n      tag_192\n      jumpi\n        /* \"libraries/TimeFee.sol\":535:538  200 */\n      0xc8\n        /* \"libraries/TimeFee.sol\":522:534  stableAmount */\n      dup3\n        /* \"libraries/TimeFee.sol\":522:538  stableAmount/200 */\n      tag_193\n      swap2\n      swap1\n      tag_137\n      jump\t// in\n    tag_193:\n        /* \"libraries/TimeFee.sol\":515:538  return stableAmount/200 */\n      swap1\n      pop\n      jump(tag_186)\n        /* \"libraries/TimeFee.sol\":444:673  if(stableAmount>=1000 ether && stableAmount<10000 ether){... */\n    tag_192:\n        /* \"libraries/TimeFee.sol\":572:583  10000 ether */\n      0x021e19e0c9bab2400000\n        /* \"libraries/TimeFee.sol\":558:570  stableAmount */\n      dup3\n        /* \"libraries/TimeFee.sol\":558:583  stableAmount>=10000 ether */\n      lt\n        /* \"libraries/TimeFee.sol\":555:673  if(stableAmount>=10000 ether){... */\n      tag_195\n      jumpi\n        /* \"libraries/TimeFee.sol\":619:622  400 */\n      0x0190\n        /* \"libraries/TimeFee.sol\":606:618  stableAmount */\n      dup3\n        /* \"libraries/TimeFee.sol\":606:622  stableAmount/400 */\n      tag_196\n      swap2\n      swap1\n      tag_137\n      jump\t// in\n    tag_196:\n        /* \"libraries/TimeFee.sol\":599:622  return stableAmount/400 */\n      swap1\n      pop\n      jump(tag_186)\n        /* \"libraries/TimeFee.sol\":555:673  if(stableAmount>=10000 ether){... */\n    tag_195:\n        /* \"libraries/TimeFee.sol\":660:661  0 */\n      0x00\n        /* \"libraries/TimeFee.sol\":653:661  return 0 */\n      swap1\n      pop\n        /* \"libraries/TimeFee.sol\":250:680  function fee(uint256 stableAmount)internal pure returns(uint256 stableFee){... */\n    tag_186:\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"libraries/SafeERC20.sol\":1025:1202  function safeTransfer(IERC20 token, address to, uint256 value) internal {... */\n    tag_102:\n        /* \"libraries/SafeERC20.sol\":1108:1194  _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value)) */\n      tag_199\n        /* \"libraries/SafeERC20.sol\":1128:1133  token */\n      dup4\n        /* \"libraries/SafeERC20.sol\":1158:1181  token.transfer.selector */\n      shl(0xe0, 0xa9059cbb)\n        /* \"libraries/SafeERC20.sol\":1183:1185  to */\n      dup5\n        /* \"libraries/SafeERC20.sol\":1187:1192  value */\n      dup5\n        /* \"libraries/SafeERC20.sol\":1135:1193  abi.encodeWithSelector(token.transfer.selector, to, value) */\n      add(0x24, mload(0x40))\n      tag_200\n      swap3\n      swap2\n      swap1\n      tag_183\n      jump\t// in\n    tag_200:\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n      swap1\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n      0x20\n      dup3\n      add\n      dup1\n      mload\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n      dup4\n      dup2\n      dup4\n      and\n      or\n      dup4\n      mstore\n      pop\n      pop\n      pop\n      pop\n        /* \"libraries/SafeERC20.sol\":1108:1127  _callOptionalReturn */\n      tag_169\n        /* \"libraries/SafeERC20.sol\":1108:1194  _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value)) */\n      jump\t// in\n    tag_199:\n        /* \"libraries/SafeERC20.sol\":1025:1202  function safeTransfer(IERC20 token, address to, uint256 value) internal {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"libraries/SafeERC20.sol\":5371:6020  function _callOptionalReturn(IERC20 token, bytes memory data) private {... */\n    tag_169:\n        /* \"libraries/SafeERC20.sol\":5795:5818  bytes memory returndata */\n      0x00\n        /* \"libraries/SafeERC20.sol\":5821:5890  address(token).functionCall(data, \"SafeERC20: low-level call failed\") */\n      tag_202\n        /* \"libraries/SafeERC20.sol\":5849:5853  data */\n      dup3\n        /* \"libraries/SafeERC20.sol\":5821:5890  address(token).functionCall(data, \"SafeERC20: low-level call failed\") */\n      mload(0x40)\n      dup1\n      0x40\n      add\n      0x40\n      mstore\n      dup1\n      0x20\n      dup2\n      mstore\n      0x20\n      add\n      0x5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564\n      dup2\n      mstore\n      pop\n        /* \"libraries/SafeERC20.sol\":5829:5834  token */\n      dup6\n        /* \"libraries/SafeERC20.sol\":5821:5848  address(token).functionCall */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      tag_203\n      swap1\n        /* \"libraries/SafeERC20.sol\":5821:5890  address(token).functionCall(data, \"SafeERC20: low-level call failed\") */\n      swap3\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_202:\n        /* \"libraries/SafeERC20.sol\":5795:5890  bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\") */\n      swap1\n      pop\n        /* \"libraries/SafeERC20.sol\":5930:5931  0 */\n      0x00\n        /* \"libraries/SafeERC20.sol\":5909:5919  returndata */\n      dup2\n        /* \"libraries/SafeERC20.sol\":5909:5926  returndata.length */\n      mload\n        /* \"libraries/SafeERC20.sol\":5909:5931  returndata.length == 0 */\n      eq\n        /* \"libraries/SafeERC20.sol\":5909:5965  returndata.length == 0 || abi.decode(returndata, (bool)) */\n      dup1\n      tag_204\n      jumpi\n      pop\n        /* \"libraries/SafeERC20.sol\":5946:5956  returndata */\n      dup1\n        /* \"libraries/SafeERC20.sol\":5935:5965  abi.decode(returndata, (bool)) */\n      dup1\n      0x20\n      add\n      swap1\n      mload\n      dup2\n      add\n      swap1\n      tag_205\n      swap2\n      swap1\n      tag_206\n      jump\t// in\n    tag_205:\n        /* \"libraries/SafeERC20.sol\":5909:5965  returndata.length == 0 || abi.decode(returndata, (bool)) */\n    tag_204:\n        /* \"libraries/SafeERC20.sol\":5901:6012  require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\") */\n      tag_207\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_208\n      swap1\n      tag_209\n      jump\t// in\n    tag_208:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_207:\n        /* \"libraries/SafeERC20.sol\":5441:6020  {... */\n      pop\n        /* \"libraries/SafeERC20.sol\":5371:6020  function _callOptionalReturn(IERC20 token, bytes memory data) private {... */\n      pop\n      pop\n      jump\t// out\n        /* \"libraries/Address.sol\":4207:4436  function functionCall(... */\n    tag_203:\n        /* \"libraries/Address.sol\":4344:4356  bytes memory */\n      0x60\n        /* \"libraries/Address.sol\":4376:4428  functionCallWithValue(target, data, 0, errorMessage) */\n      tag_211\n        /* \"libraries/Address.sol\":4398:4404  target */\n      dup5\n        /* \"libraries/Address.sol\":4406:4410  data */\n      dup5\n        /* \"libraries/Address.sol\":4412:4413  0 */\n      0x00\n        /* \"libraries/Address.sol\":4415:4427  errorMessage */\n      dup6\n        /* \"libraries/Address.sol\":4376:4397  functionCallWithValue */\n      tag_212\n        /* \"libraries/Address.sol\":4376:4428  functionCallWithValue(target, data, 0, errorMessage) */\n      jump\t// in\n    tag_211:\n        /* \"libraries/Address.sol\":4369:4428  return functionCallWithValue(target, data, 0, errorMessage) */\n      swap1\n      pop\n        /* \"libraries/Address.sol\":4207:4436  function functionCall(... */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"libraries/Address.sol\":5293:5748  function functionCallWithValue(... */\n    tag_212:\n        /* \"libraries/Address.sol\":5463:5475  bytes memory */\n      0x60\n        /* \"libraries/Address.sol\":5521:5526  value */\n      dup3\n        /* \"libraries/Address.sol\":5496:5517  address(this).balance */\n      selfbalance\n        /* \"libraries/Address.sol\":5496:5526  address(this).balance >= value */\n      lt\n      iszero\n        /* \"libraries/Address.sol\":5488:5569  require(address(this).balance >= value, \"Address: insufficient balance for call\") */\n      tag_214\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_215\n      swap1\n      tag_216\n      jump\t// in\n    tag_215:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_214:\n        /* \"libraries/Address.sol\":5581:5593  bool success */\n      0x00\n        /* \"libraries/Address.sol\":5595:5618  bytes memory returndata */\n      dup1\n        /* \"libraries/Address.sol\":5622:5628  target */\n      dup7\n        /* \"libraries/Address.sol\":5622:5633  target.call */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"libraries/Address.sol\":5641:5646  value */\n      dup6\n        /* \"libraries/Address.sol\":5648:5652  data */\n      dup8\n        /* \"libraries/Address.sol\":5622:5653  target.call{value: value}(data) */\n      mload(0x40)\n      tag_217\n      swap2\n      swap1\n      tag_218\n      jump\t// in\n    tag_217:\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup6\n      dup8\n      gas\n      call\n      swap3\n      pop\n      pop\n      pop\n      returndatasize\n      dup1\n      0x00\n      dup2\n      eq\n      tag_221\n      jumpi\n      mload(0x40)\n      swap2\n      pop\n      and(add(returndatasize, 0x3f), not(0x1f))\n      dup3\n      add\n      0x40\n      mstore\n      returndatasize\n      dup3\n      mstore\n      returndatasize\n      0x00\n      0x20\n      dup5\n      add\n      returndatacopy\n      jump(tag_220)\n    tag_221:\n      0x60\n      swap2\n      pop\n    tag_220:\n      pop\n        /* \"libraries/Address.sol\":5580:5653  (bool success, bytes memory returndata) = target.call{value: value}(data) */\n      swap2\n      pop\n      swap2\n      pop\n        /* \"libraries/Address.sol\":5671:5740  verifyCallResultFromTarget(target, success, returndata, errorMessage) */\n      tag_222\n        /* \"libraries/Address.sol\":5698:5704  target */\n      dup8\n        /* \"libraries/Address.sol\":5706:5713  success */\n      dup4\n        /* \"libraries/Address.sol\":5715:5725  returndata */\n      dup4\n        /* \"libraries/Address.sol\":5727:5739  errorMessage */\n      dup8\n        /* \"libraries/Address.sol\":5671:5697  verifyCallResultFromTarget */\n      tag_223\n        /* \"libraries/Address.sol\":5671:5740  verifyCallResultFromTarget(target, success, returndata, errorMessage) */\n      jump\t// in\n    tag_222:\n        /* \"libraries/Address.sol\":5664:5740  return verifyCallResultFromTarget(target, success, returndata, errorMessage) */\n      swap3\n      pop\n      pop\n      pop\n        /* \"libraries/Address.sol\":5293:5748  function functionCallWithValue(... */\n      swap5\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"libraries/Address.sol\":7866:8510  function verifyCallResultFromTarget(... */\n    tag_223:\n        /* \"libraries/Address.sol\":8051:8063  bytes memory */\n      0x60\n        /* \"libraries/Address.sol\":8080:8087  success */\n      dup4\n        /* \"libraries/Address.sol\":8076:8503  if (success) {... */\n      iszero\n      tag_225\n      jumpi\n        /* \"libraries/Address.sol\":8129:8130  0 */\n      0x00\n        /* \"libraries/Address.sol\":8108:8118  returndata */\n      dup4\n        /* \"libraries/Address.sol\":8108:8125  returndata.length */\n      mload\n        /* \"libraries/Address.sol\":8108:8130  returndata.length == 0 */\n      sub\n        /* \"libraries/Address.sol\":8104:8394  if (returndata.length == 0) {... */\n      tag_226\n      jumpi\n        /* \"libraries/Address.sol\":8326:8344  isContract(target) */\n      tag_227\n        /* \"libraries/Address.sol\":8337:8343  target */\n      dup6\n        /* \"libraries/Address.sol\":8326:8336  isContract */\n      tag_228\n        /* \"libraries/Address.sol\":8326:8344  isContract(target) */\n      jump\t// in\n    tag_227:\n        /* \"libraries/Address.sol\":8318:8378  require(isContract(target), \"Address: call to non-contract\") */\n      tag_229\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_230\n      swap1\n      tag_231\n      jump\t// in\n    tag_230:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_229:\n        /* \"libraries/Address.sol\":8104:8394  if (returndata.length == 0) {... */\n    tag_226:\n        /* \"libraries/Address.sol\":8415:8425  returndata */\n      dup3\n        /* \"libraries/Address.sol\":8408:8425  return returndata */\n      swap1\n      pop\n      jump(tag_224)\n        /* \"libraries/Address.sol\":8076:8503  if (success) {... */\n    tag_225:\n        /* \"libraries/Address.sol\":8458:8491  _revert(returndata, errorMessage) */\n      tag_233\n        /* \"libraries/Address.sol\":8466:8476  returndata */\n      dup4\n        /* \"libraries/Address.sol\":8478:8490  errorMessage */\n      dup4\n        /* \"libraries/Address.sol\":8458:8465  _revert */\n      tag_234\n        /* \"libraries/Address.sol\":8458:8491  _revert(returndata, errorMessage) */\n      jump\t// in\n    tag_233:\n        /* \"libraries/Address.sol\":7866:8510  function verifyCallResultFromTarget(... */\n    tag_224:\n      swap5\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"libraries/Address.sol\":1452:1778  function isContract(address account) internal view returns (bool) {... */\n    tag_228:\n        /* \"libraries/Address.sol\":1512:1516  bool */\n      0x00\n        /* \"libraries/Address.sol\":1769:1770  0 */\n      dup1\n        /* \"libraries/Address.sol\":1747:1754  account */\n      dup3\n        /* \"libraries/Address.sol\":1747:1766  account.code.length */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      extcodesize\n        /* \"libraries/Address.sol\":1747:1770  account.code.length > 0 */\n      gt\n        /* \"libraries/Address.sol\":1740:1770  return account.code.length > 0 */\n      swap1\n      pop\n        /* \"libraries/Address.sol\":1452:1778  function isContract(address account) internal view returns (bool) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"libraries/Address.sol\":9052:9604  function _revert(bytes memory returndata, string memory errorMessage) private pure {... */\n    tag_234:\n        /* \"libraries/Address.sol\":9233:9234  0 */\n      0x00\n        /* \"libraries/Address.sol\":9213:9223  returndata */\n      dup3\n        /* \"libraries/Address.sol\":9213:9230  returndata.length */\n      mload\n        /* \"libraries/Address.sol\":9213:9234  returndata.length > 0 */\n      gt\n        /* \"libraries/Address.sol\":9209:9597  if (returndata.length > 0) {... */\n      iszero\n      tag_237\n      jumpi\n        /* \"libraries/Address.sol\":9445:9455  returndata */\n      dup2\n        /* \"libraries/Address.sol\":9439:9456  mload(returndata) */\n      mload\n        /* \"libraries/Address.sol\":9502:9517  returndata_size */\n      dup1\n        /* \"libraries/Address.sol\":9489:9499  returndata */\n      dup4\n        /* \"libraries/Address.sol\":9485:9487  32 */\n      0x20\n        /* \"libraries/Address.sol\":9481:9500  add(32, returndata) */\n      add\n        /* \"libraries/Address.sol\":9474:9518  revert(add(32, returndata), returndata_size) */\n      revert\n        /* \"libraries/Address.sol\":9209:9597  if (returndata.length > 0) {... */\n    tag_237:\n        /* \"libraries/Address.sol\":9572:9584  errorMessage */\n      dup1\n        /* \"libraries/Address.sol\":9565:9585  revert(errorMessage) */\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_239\n      swap2\n      swap1\n      tag_240\n      jump\t// in\n    tag_239:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"#utility.yul\":88:205   */\n    tag_242:\n        /* \"#utility.yul\":197:198   */\n      0x00\n        /* \"#utility.yul\":194:195   */\n      dup1\n        /* \"#utility.yul\":187:199   */\n      revert\n        /* \"#utility.yul\":334:460   */\n    tag_244:\n        /* \"#utility.yul\":371:378   */\n      0x00\n        /* \"#utility.yul\":411:453   */\n      0xffffffffffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":404:409   */\n      dup3\n        /* \"#utility.yul\":400:454   */\n      and\n        /* \"#utility.yul\":389:454   */\n      swap1\n      pop\n        /* \"#utility.yul\":334:460   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":466:562   */\n    tag_245:\n        /* \"#utility.yul\":503:510   */\n      0x00\n        /* \"#utility.yul\":532:556   */\n      tag_293\n        /* \"#utility.yul\":550:555   */\n      dup3\n        /* \"#utility.yul\":532:556   */\n      tag_244\n      jump\t// in\n    tag_293:\n        /* \"#utility.yul\":521:556   */\n      swap1\n      pop\n        /* \"#utility.yul\":466:562   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":568:690   */\n    tag_246:\n        /* \"#utility.yul\":641:665   */\n      tag_295\n        /* \"#utility.yul\":659:664   */\n      dup2\n        /* \"#utility.yul\":641:665   */\n      tag_245\n      jump\t// in\n    tag_295:\n        /* \"#utility.yul\":634:639   */\n      dup2\n        /* \"#utility.yul\":631:666   */\n      eq\n        /* \"#utility.yul\":621:684   */\n      tag_296\n      jumpi\n        /* \"#utility.yul\":680:681   */\n      0x00\n        /* \"#utility.yul\":677:678   */\n      dup1\n        /* \"#utility.yul\":670:682   */\n      revert\n        /* \"#utility.yul\":621:684   */\n    tag_296:\n        /* \"#utility.yul\":568:690   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":696:835   */\n    tag_247:\n        /* \"#utility.yul\":742:747   */\n      0x00\n        /* \"#utility.yul\":780:786   */\n      dup2\n        /* \"#utility.yul\":767:787   */\n      calldataload\n        /* \"#utility.yul\":758:787   */\n      swap1\n      pop\n        /* \"#utility.yul\":796:829   */\n      tag_298\n        /* \"#utility.yul\":823:828   */\n      dup2\n        /* \"#utility.yul\":796:829   */\n      tag_246\n      jump\t// in\n    tag_298:\n        /* \"#utility.yul\":696:835   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":841:959   */\n    tag_248:\n        /* \"#utility.yul\":878:885   */\n      0x00\n        /* \"#utility.yul\":918:952   */\n      0xffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":911:916   */\n      dup3\n        /* \"#utility.yul\":907:953   */\n      and\n        /* \"#utility.yul\":896:953   */\n      swap1\n      pop\n        /* \"#utility.yul\":841:959   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":965:1087   */\n    tag_249:\n        /* \"#utility.yul\":1038:1062   */\n      tag_301\n        /* \"#utility.yul\":1056:1061   */\n      dup2\n        /* \"#utility.yul\":1038:1062   */\n      tag_248\n      jump\t// in\n    tag_301:\n        /* \"#utility.yul\":1031:1036   */\n      dup2\n        /* \"#utility.yul\":1028:1063   */\n      eq\n        /* \"#utility.yul\":1018:1081   */\n      tag_302\n      jumpi\n        /* \"#utility.yul\":1077:1078   */\n      0x00\n        /* \"#utility.yul\":1074:1075   */\n      dup1\n        /* \"#utility.yul\":1067:1079   */\n      revert\n        /* \"#utility.yul\":1018:1081   */\n    tag_302:\n        /* \"#utility.yul\":965:1087   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1093:1232   */\n    tag_250:\n        /* \"#utility.yul\":1139:1144   */\n      0x00\n        /* \"#utility.yul\":1177:1183   */\n      dup2\n        /* \"#utility.yul\":1164:1184   */\n      calldataload\n        /* \"#utility.yul\":1155:1184   */\n      swap1\n      pop\n        /* \"#utility.yul\":1193:1226   */\n      tag_304\n        /* \"#utility.yul\":1220:1225   */\n      dup2\n        /* \"#utility.yul\":1193:1226   */\n      tag_249\n      jump\t// in\n    tag_304:\n        /* \"#utility.yul\":1093:1232   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1238:2003   */\n    tag_20:\n        /* \"#utility.yul\":1324:1330   */\n      0x00\n        /* \"#utility.yul\":1332:1338   */\n      dup1\n        /* \"#utility.yul\":1340:1346   */\n      0x00\n        /* \"#utility.yul\":1348:1354   */\n      dup1\n        /* \"#utility.yul\":1397:1400   */\n      0x80\n        /* \"#utility.yul\":1385:1394   */\n      dup6\n        /* \"#utility.yul\":1376:1383   */\n      dup8\n        /* \"#utility.yul\":1372:1395   */\n      sub\n        /* \"#utility.yul\":1368:1401   */\n      slt\n        /* \"#utility.yul\":1365:1485   */\n      iszero\n      tag_306\n      jumpi\n        /* \"#utility.yul\":1404:1483   */\n      tag_307\n      tag_242\n      jump\t// in\n    tag_307:\n        /* \"#utility.yul\":1365:1485   */\n    tag_306:\n        /* \"#utility.yul\":1524:1525   */\n      0x00\n        /* \"#utility.yul\":1549:1602   */\n      tag_308\n        /* \"#utility.yul\":1594:1601   */\n      dup8\n        /* \"#utility.yul\":1585:1591   */\n      dup3\n        /* \"#utility.yul\":1574:1583   */\n      dup9\n        /* \"#utility.yul\":1570:1592   */\n      add\n        /* \"#utility.yul\":1549:1602   */\n      tag_247\n      jump\t// in\n    tag_308:\n        /* \"#utility.yul\":1539:1602   */\n      swap5\n      pop\n        /* \"#utility.yul\":1495:1612   */\n      pop\n        /* \"#utility.yul\":1651:1653   */\n      0x20\n        /* \"#utility.yul\":1677:1730   */\n      tag_309\n        /* \"#utility.yul\":1722:1729   */\n      dup8\n        /* \"#utility.yul\":1713:1719   */\n      dup3\n        /* \"#utility.yul\":1702:1711   */\n      dup9\n        /* \"#utility.yul\":1698:1720   */\n      add\n        /* \"#utility.yul\":1677:1730   */\n      tag_247\n      jump\t// in\n    tag_309:\n        /* \"#utility.yul\":1667:1730   */\n      swap4\n      pop\n        /* \"#utility.yul\":1622:1740   */\n      pop\n        /* \"#utility.yul\":1779:1781   */\n      0x40\n        /* \"#utility.yul\":1805:1858   */\n      tag_310\n        /* \"#utility.yul\":1850:1857   */\n      dup8\n        /* \"#utility.yul\":1841:1847   */\n      dup3\n        /* \"#utility.yul\":1830:1839   */\n      dup9\n        /* \"#utility.yul\":1826:1848   */\n      add\n        /* \"#utility.yul\":1805:1858   */\n      tag_250\n      jump\t// in\n    tag_310:\n        /* \"#utility.yul\":1795:1858   */\n      swap3\n      pop\n        /* \"#utility.yul\":1750:1868   */\n      pop\n        /* \"#utility.yul\":1907:1909   */\n      0x60\n        /* \"#utility.yul\":1933:1986   */\n      tag_311\n        /* \"#utility.yul\":1978:1985   */\n      dup8\n        /* \"#utility.yul\":1969:1975   */\n      dup3\n        /* \"#utility.yul\":1958:1967   */\n      dup9\n        /* \"#utility.yul\":1954:1976   */\n      add\n        /* \"#utility.yul\":1933:1986   */\n      tag_250\n      jump\t// in\n    tag_311:\n        /* \"#utility.yul\":1923:1986   */\n      swap2\n      pop\n        /* \"#utility.yul\":1878:1996   */\n      pop\n        /* \"#utility.yul\":1238:2003   */\n      swap3\n      swap6\n      swap2\n      swap5\n      pop\n      swap3\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2009:2110   */\n    tag_251:\n        /* \"#utility.yul\":2045:2052   */\n      0x00\n        /* \"#utility.yul\":2085:2103   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":2078:2083   */\n      dup3\n        /* \"#utility.yul\":2074:2104   */\n      and\n        /* \"#utility.yul\":2063:2104   */\n      swap1\n      pop\n        /* \"#utility.yul\":2009:2110   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2116:2236   */\n    tag_252:\n        /* \"#utility.yul\":2188:2211   */\n      tag_314\n        /* \"#utility.yul\":2205:2210   */\n      dup2\n        /* \"#utility.yul\":2188:2211   */\n      tag_251\n      jump\t// in\n    tag_314:\n        /* \"#utility.yul\":2181:2186   */\n      dup2\n        /* \"#utility.yul\":2178:2212   */\n      eq\n        /* \"#utility.yul\":2168:2230   */\n      tag_315\n      jumpi\n        /* \"#utility.yul\":2226:2227   */\n      0x00\n        /* \"#utility.yul\":2223:2224   */\n      dup1\n        /* \"#utility.yul\":2216:2228   */\n      revert\n        /* \"#utility.yul\":2168:2230   */\n    tag_315:\n        /* \"#utility.yul\":2116:2236   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2242:2379   */\n    tag_253:\n        /* \"#utility.yul\":2287:2292   */\n      0x00\n        /* \"#utility.yul\":2325:2331   */\n      dup2\n        /* \"#utility.yul\":2312:2332   */\n      calldataload\n        /* \"#utility.yul\":2303:2332   */\n      swap1\n      pop\n        /* \"#utility.yul\":2341:2373   */\n      tag_317\n        /* \"#utility.yul\":2367:2372   */\n      dup2\n        /* \"#utility.yul\":2341:2373   */\n      tag_252\n      jump\t// in\n    tag_317:\n        /* \"#utility.yul\":2242:2379   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2385:2712   */\n    tag_24:\n        /* \"#utility.yul\":2443:2449   */\n      0x00\n        /* \"#utility.yul\":2492:2494   */\n      0x20\n        /* \"#utility.yul\":2480:2489   */\n      dup3\n        /* \"#utility.yul\":2471:2478   */\n      dup5\n        /* \"#utility.yul\":2467:2490   */\n      sub\n        /* \"#utility.yul\":2463:2495   */\n      slt\n        /* \"#utility.yul\":2460:2579   */\n      iszero\n      tag_319\n      jumpi\n        /* \"#utility.yul\":2498:2577   */\n      tag_320\n      tag_242\n      jump\t// in\n    tag_320:\n        /* \"#utility.yul\":2460:2579   */\n    tag_319:\n        /* \"#utility.yul\":2618:2619   */\n      0x00\n        /* \"#utility.yul\":2643:2695   */\n      tag_321\n        /* \"#utility.yul\":2687:2694   */\n      dup5\n        /* \"#utility.yul\":2678:2684   */\n      dup3\n        /* \"#utility.yul\":2667:2676   */\n      dup6\n        /* \"#utility.yul\":2663:2685   */\n      add\n        /* \"#utility.yul\":2643:2695   */\n      tag_253\n      jump\t// in\n    tag_321:\n        /* \"#utility.yul\":2633:2695   */\n      swap2\n      pop\n        /* \"#utility.yul\":2589:2705   */\n      pop\n        /* \"#utility.yul\":2385:2712   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2718:2795   */\n    tag_254:\n        /* \"#utility.yul\":2755:2762   */\n      0x00\n        /* \"#utility.yul\":2784:2789   */\n      dup2\n        /* \"#utility.yul\":2773:2789   */\n      swap1\n      pop\n        /* \"#utility.yul\":2718:2795   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2801:2923   */\n    tag_255:\n        /* \"#utility.yul\":2874:2898   */\n      tag_324\n        /* \"#utility.yul\":2892:2897   */\n      dup2\n        /* \"#utility.yul\":2874:2898   */\n      tag_254\n      jump\t// in\n    tag_324:\n        /* \"#utility.yul\":2867:2872   */\n      dup2\n        /* \"#utility.yul\":2864:2899   */\n      eq\n        /* \"#utility.yul\":2854:2917   */\n      tag_325\n      jumpi\n        /* \"#utility.yul\":2913:2914   */\n      0x00\n        /* \"#utility.yul\":2910:2911   */\n      dup1\n        /* \"#utility.yul\":2903:2915   */\n      revert\n        /* \"#utility.yul\":2854:2917   */\n    tag_325:\n        /* \"#utility.yul\":2801:2923   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2929:3068   */\n    tag_256:\n        /* \"#utility.yul\":2975:2980   */\n      0x00\n        /* \"#utility.yul\":3013:3019   */\n      dup2\n        /* \"#utility.yul\":3000:3020   */\n      calldataload\n        /* \"#utility.yul\":2991:3020   */\n      swap1\n      pop\n        /* \"#utility.yul\":3029:3062   */\n      tag_327\n        /* \"#utility.yul\":3056:3061   */\n      dup2\n        /* \"#utility.yul\":3029:3062   */\n      tag_255\n      jump\t// in\n    tag_327:\n        /* \"#utility.yul\":2929:3068   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3074:3548   */\n    tag_31:\n        /* \"#utility.yul\":3142:3148   */\n      0x00\n        /* \"#utility.yul\":3150:3156   */\n      dup1\n        /* \"#utility.yul\":3199:3201   */\n      0x40\n        /* \"#utility.yul\":3187:3196   */\n      dup4\n        /* \"#utility.yul\":3178:3185   */\n      dup6\n        /* \"#utility.yul\":3174:3197   */\n      sub\n        /* \"#utility.yul\":3170:3202   */\n      slt\n        /* \"#utility.yul\":3167:3286   */\n      iszero\n      tag_329\n      jumpi\n        /* \"#utility.yul\":3205:3284   */\n      tag_330\n      tag_242\n      jump\t// in\n    tag_330:\n        /* \"#utility.yul\":3167:3286   */\n    tag_329:\n        /* \"#utility.yul\":3325:3326   */\n      0x00\n        /* \"#utility.yul\":3350:3403   */\n      tag_331\n        /* \"#utility.yul\":3395:3402   */\n      dup6\n        /* \"#utility.yul\":3386:3392   */\n      dup3\n        /* \"#utility.yul\":3375:3384   */\n      dup7\n        /* \"#utility.yul\":3371:3393   */\n      add\n        /* \"#utility.yul\":3350:3403   */\n      tag_247\n      jump\t// in\n    tag_331:\n        /* \"#utility.yul\":3340:3403   */\n      swap3\n      pop\n        /* \"#utility.yul\":3296:3413   */\n      pop\n        /* \"#utility.yul\":3452:3454   */\n      0x20\n        /* \"#utility.yul\":3478:3531   */\n      tag_332\n        /* \"#utility.yul\":3523:3530   */\n      dup6\n        /* \"#utility.yul\":3514:3520   */\n      dup3\n        /* \"#utility.yul\":3503:3512   */\n      dup7\n        /* \"#utility.yul\":3499:3521   */\n      add\n        /* \"#utility.yul\":3478:3531   */\n      tag_256\n      jump\t// in\n    tag_332:\n        /* \"#utility.yul\":3468:3531   */\n      swap2\n      pop\n        /* \"#utility.yul\":3423:3541   */\n      pop\n        /* \"#utility.yul\":3074:3548   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3554:3644   */\n    tag_257:\n        /* \"#utility.yul\":3588:3595   */\n      0x00\n        /* \"#utility.yul\":3631:3636   */\n      dup2\n        /* \"#utility.yul\":3624:3637   */\n      iszero\n        /* \"#utility.yul\":3617:3638   */\n      iszero\n        /* \"#utility.yul\":3606:3638   */\n      swap1\n      pop\n        /* \"#utility.yul\":3554:3644   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3650:3759   */\n    tag_258:\n        /* \"#utility.yul\":3731:3752   */\n      tag_335\n        /* \"#utility.yul\":3746:3751   */\n      dup2\n        /* \"#utility.yul\":3731:3752   */\n      tag_257\n      jump\t// in\n    tag_335:\n        /* \"#utility.yul\":3726:3729   */\n      dup3\n        /* \"#utility.yul\":3719:3753   */\n      mstore\n        /* \"#utility.yul\":3650:3759   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3765:3975   */\n    tag_34:\n        /* \"#utility.yul\":3852:3856   */\n      0x00\n        /* \"#utility.yul\":3890:3892   */\n      0x20\n        /* \"#utility.yul\":3879:3888   */\n      dup3\n        /* \"#utility.yul\":3875:3893   */\n      add\n        /* \"#utility.yul\":3867:3893   */\n      swap1\n      pop\n        /* \"#utility.yul\":3903:3968   */\n      tag_337\n        /* \"#utility.yul\":3965:3966   */\n      0x00\n        /* \"#utility.yul\":3954:3963   */\n      dup4\n        /* \"#utility.yul\":3950:3967   */\n      add\n        /* \"#utility.yul\":3941:3947   */\n      dup5\n        /* \"#utility.yul\":3903:3968   */\n      tag_258\n      jump\t// in\n    tag_337:\n        /* \"#utility.yul\":3765:3975   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3981:4072   */\n    tag_259:\n        /* \"#utility.yul\":4017:4024   */\n      0x00\n        /* \"#utility.yul\":4057:4065   */\n      0xffffff\n        /* \"#utility.yul\":4050:4055   */\n      dup3\n        /* \"#utility.yul\":4046:4066   */\n      and\n        /* \"#utility.yul\":4035:4066   */\n      swap1\n      pop\n        /* \"#utility.yul\":3981:4072   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4078:4198   */\n    tag_260:\n        /* \"#utility.yul\":4150:4173   */\n      tag_340\n        /* \"#utility.yul\":4167:4172   */\n      dup2\n        /* \"#utility.yul\":4150:4173   */\n      tag_259\n      jump\t// in\n    tag_340:\n        /* \"#utility.yul\":4143:4148   */\n      dup2\n        /* \"#utility.yul\":4140:4174   */\n      eq\n        /* \"#utility.yul\":4130:4192   */\n      tag_341\n      jumpi\n        /* \"#utility.yul\":4188:4189   */\n      0x00\n        /* \"#utility.yul\":4185:4186   */\n      dup1\n        /* \"#utility.yul\":4178:4190   */\n      revert\n        /* \"#utility.yul\":4130:4192   */\n    tag_341:\n        /* \"#utility.yul\":4078:4198   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4204:4341   */\n    tag_261:\n        /* \"#utility.yul\":4249:4254   */\n      0x00\n        /* \"#utility.yul\":4287:4293   */\n      dup2\n        /* \"#utility.yul\":4274:4294   */\n      calldataload\n        /* \"#utility.yul\":4265:4294   */\n      swap1\n      pop\n        /* \"#utility.yul\":4303:4335   */\n      tag_343\n        /* \"#utility.yul\":4329:4334   */\n      dup2\n        /* \"#utility.yul\":4303:4335   */\n      tag_260\n      jump\t// in\n    tag_343:\n        /* \"#utility.yul\":4204:4341   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4347:4964   */\n    tag_37:\n        /* \"#utility.yul\":4423:4429   */\n      0x00\n        /* \"#utility.yul\":4431:4437   */\n      dup1\n        /* \"#utility.yul\":4439:4445   */\n      0x00\n        /* \"#utility.yul\":4488:4490   */\n      0x60\n        /* \"#utility.yul\":4476:4485   */\n      dup5\n        /* \"#utility.yul\":4467:4474   */\n      dup7\n        /* \"#utility.yul\":4463:4486   */\n      sub\n        /* \"#utility.yul\":4459:4491   */\n      slt\n        /* \"#utility.yul\":4456:4575   */\n      iszero\n      tag_345\n      jumpi\n        /* \"#utility.yul\":4494:4573   */\n      tag_346\n      tag_242\n      jump\t// in\n    tag_346:\n        /* \"#utility.yul\":4456:4575   */\n    tag_345:\n        /* \"#utility.yul\":4614:4615   */\n      0x00\n        /* \"#utility.yul\":4639:4692   */\n      tag_347\n        /* \"#utility.yul\":4684:4691   */\n      dup7\n        /* \"#utility.yul\":4675:4681   */\n      dup3\n        /* \"#utility.yul\":4664:4673   */\n      dup8\n        /* \"#utility.yul\":4660:4682   */\n      add\n        /* \"#utility.yul\":4639:4692   */\n      tag_247\n      jump\t// in\n    tag_347:\n        /* \"#utility.yul\":4629:4692   */\n      swap4\n      pop\n        /* \"#utility.yul\":4585:4702   */\n      pop\n        /* \"#utility.yul\":4741:4743   */\n      0x20\n        /* \"#utility.yul\":4767:4820   */\n      tag_348\n        /* \"#utility.yul\":4812:4819   */\n      dup7\n        /* \"#utility.yul\":4803:4809   */\n      dup3\n        /* \"#utility.yul\":4792:4801   */\n      dup8\n        /* \"#utility.yul\":4788:4810   */\n      add\n        /* \"#utility.yul\":4767:4820   */\n      tag_247\n      jump\t// in\n    tag_348:\n        /* \"#utility.yul\":4757:4820   */\n      swap3\n      pop\n        /* \"#utility.yul\":4712:4830   */\n      pop\n        /* \"#utility.yul\":4869:4871   */\n      0x40\n        /* \"#utility.yul\":4895:4947   */\n      tag_349\n        /* \"#utility.yul\":4939:4946   */\n      dup7\n        /* \"#utility.yul\":4930:4936   */\n      dup3\n        /* \"#utility.yul\":4919:4928   */\n      dup8\n        /* \"#utility.yul\":4915:4937   */\n      add\n        /* \"#utility.yul\":4895:4947   */\n      tag_261\n      jump\t// in\n    tag_349:\n        /* \"#utility.yul\":4885:4947   */\n      swap2\n      pop\n        /* \"#utility.yul\":4840:4957   */\n      pop\n        /* \"#utility.yul\":4347:4964   */\n      swap3\n      pop\n      swap3\n      pop\n      swap3\n      jump\t// out\n        /* \"#utility.yul\":4970:5088   */\n    tag_262:\n        /* \"#utility.yul\":5057:5081   */\n      tag_351\n        /* \"#utility.yul\":5075:5080   */\n      dup2\n        /* \"#utility.yul\":5057:5081   */\n      tag_245\n      jump\t// in\n    tag_351:\n        /* \"#utility.yul\":5052:5055   */\n      dup3\n        /* \"#utility.yul\":5045:5082   */\n      mstore\n        /* \"#utility.yul\":4970:5088   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5094:5316   */\n    tag_40:\n        /* \"#utility.yul\":5187:5191   */\n      0x00\n        /* \"#utility.yul\":5225:5227   */\n      0x20\n        /* \"#utility.yul\":5214:5223   */\n      dup3\n        /* \"#utility.yul\":5210:5228   */\n      add\n        /* \"#utility.yul\":5202:5228   */\n      swap1\n      pop\n        /* \"#utility.yul\":5238:5309   */\n      tag_353\n        /* \"#utility.yul\":5306:5307   */\n      0x00\n        /* \"#utility.yul\":5295:5304   */\n      dup4\n        /* \"#utility.yul\":5291:5308   */\n      add\n        /* \"#utility.yul\":5282:5288   */\n      dup5\n        /* \"#utility.yul\":5238:5309   */\n      tag_262\n      jump\t// in\n    tag_353:\n        /* \"#utility.yul\":5094:5316   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5322:5796   */\n    tag_46:\n        /* \"#utility.yul\":5390:5396   */\n      0x00\n        /* \"#utility.yul\":5398:5404   */\n      dup1\n        /* \"#utility.yul\":5447:5449   */\n      0x40\n        /* \"#utility.yul\":5435:5444   */\n      dup4\n        /* \"#utility.yul\":5426:5433   */\n      dup6\n        /* \"#utility.yul\":5422:5445   */\n      sub\n        /* \"#utility.yul\":5418:5450   */\n      slt\n        /* \"#utility.yul\":5415:5534   */\n      iszero\n      tag_355\n      jumpi\n        /* \"#utility.yul\":5453:5532   */\n      tag_356\n      tag_242\n      jump\t// in\n    tag_356:\n        /* \"#utility.yul\":5415:5534   */\n    tag_355:\n        /* \"#utility.yul\":5573:5574   */\n      0x00\n        /* \"#utility.yul\":5598:5651   */\n      tag_357\n        /* \"#utility.yul\":5643:5650   */\n      dup6\n        /* \"#utility.yul\":5634:5640   */\n      dup3\n        /* \"#utility.yul\":5623:5632   */\n      dup7\n        /* \"#utility.yul\":5619:5641   */\n      add\n        /* \"#utility.yul\":5598:5651   */\n      tag_250\n      jump\t// in\n    tag_357:\n        /* \"#utility.yul\":5588:5651   */\n      swap3\n      pop\n        /* \"#utility.yul\":5544:5661   */\n      pop\n        /* \"#utility.yul\":5700:5702   */\n      0x20\n        /* \"#utility.yul\":5726:5779   */\n      tag_358\n        /* \"#utility.yul\":5771:5778   */\n      dup6\n        /* \"#utility.yul\":5762:5768   */\n      dup3\n        /* \"#utility.yul\":5751:5760   */\n      dup7\n        /* \"#utility.yul\":5747:5769   */\n      add\n        /* \"#utility.yul\":5726:5779   */\n      tag_250\n      jump\t// in\n    tag_358:\n        /* \"#utility.yul\":5716:5779   */\n      swap2\n      pop\n        /* \"#utility.yul\":5671:5789   */\n      pop\n        /* \"#utility.yul\":5322:5796   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5802:5920   */\n    tag_263:\n        /* \"#utility.yul\":5889:5913   */\n      tag_360\n        /* \"#utility.yul\":5907:5912   */\n      dup2\n        /* \"#utility.yul\":5889:5913   */\n      tag_254\n      jump\t// in\n    tag_360:\n        /* \"#utility.yul\":5884:5887   */\n      dup3\n        /* \"#utility.yul\":5877:5914   */\n      mstore\n        /* \"#utility.yul\":5802:5920   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5926:6148   */\n    tag_49:\n        /* \"#utility.yul\":6019:6023   */\n      0x00\n        /* \"#utility.yul\":6057:6059   */\n      0x20\n        /* \"#utility.yul\":6046:6055   */\n      dup3\n        /* \"#utility.yul\":6042:6060   */\n      add\n        /* \"#utility.yul\":6034:6060   */\n      swap1\n      pop\n        /* \"#utility.yul\":6070:6141   */\n      tag_362\n        /* \"#utility.yul\":6138:6139   */\n      0x00\n        /* \"#utility.yul\":6127:6136   */\n      dup4\n        /* \"#utility.yul\":6123:6140   */\n      add\n        /* \"#utility.yul\":6114:6120   */\n      dup5\n        /* \"#utility.yul\":6070:6141   */\n      tag_263\n      jump\t// in\n    tag_362:\n        /* \"#utility.yul\":5926:6148   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6154:6626   */\n    tag_62:\n        /* \"#utility.yul\":6221:6227   */\n      0x00\n        /* \"#utility.yul\":6229:6235   */\n      dup1\n        /* \"#utility.yul\":6278:6280   */\n      0x40\n        /* \"#utility.yul\":6266:6275   */\n      dup4\n        /* \"#utility.yul\":6257:6264   */\n      dup6\n        /* \"#utility.yul\":6253:6276   */\n      sub\n        /* \"#utility.yul\":6249:6281   */\n      slt\n        /* \"#utility.yul\":6246:6365   */\n      iszero\n      tag_364\n      jumpi\n        /* \"#utility.yul\":6284:6363   */\n      tag_365\n      tag_242\n      jump\t// in\n    tag_365:\n        /* \"#utility.yul\":6246:6365   */\n    tag_364:\n        /* \"#utility.yul\":6404:6405   */\n      0x00\n        /* \"#utility.yul\":6429:6481   */\n      tag_366\n        /* \"#utility.yul\":6473:6480   */\n      dup6\n        /* \"#utility.yul\":6464:6470   */\n      dup3\n        /* \"#utility.yul\":6453:6462   */\n      dup7\n        /* \"#utility.yul\":6449:6471   */\n      add\n        /* \"#utility.yul\":6429:6481   */\n      tag_253\n      jump\t// in\n    tag_366:\n        /* \"#utility.yul\":6419:6481   */\n      swap3\n      pop\n        /* \"#utility.yul\":6375:6491   */\n      pop\n        /* \"#utility.yul\":6530:6532   */\n      0x20\n        /* \"#utility.yul\":6556:6609   */\n      tag_367\n        /* \"#utility.yul\":6601:6608   */\n      dup6\n        /* \"#utility.yul\":6592:6598   */\n      dup3\n        /* \"#utility.yul\":6581:6590   */\n      dup7\n        /* \"#utility.yul\":6577:6599   */\n      add\n        /* \"#utility.yul\":6556:6609   */\n      tag_247\n      jump\t// in\n    tag_367:\n        /* \"#utility.yul\":6546:6609   */\n      swap2\n      pop\n        /* \"#utility.yul\":6501:6619   */\n      pop\n        /* \"#utility.yul\":6154:6626   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6632:6812   */\n    tag_264:\n        /* \"#utility.yul\":6680:6757   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":6677:6678   */\n      0x00\n        /* \"#utility.yul\":6670:6758   */\n      mstore\n        /* \"#utility.yul\":6777:6781   */\n      0x11\n        /* \"#utility.yul\":6774:6775   */\n      0x04\n        /* \"#utility.yul\":6767:6782   */\n      mstore\n        /* \"#utility.yul\":6801:6805   */\n      0x24\n        /* \"#utility.yul\":6798:6799   */\n      0x00\n        /* \"#utility.yul\":6791:6806   */\n      revert\n        /* \"#utility.yul\":6818:7097   */\n    tag_74:\n        /* \"#utility.yul\":6858:6865   */\n      0x00\n        /* \"#utility.yul\":6881:6901   */\n      tag_370\n        /* \"#utility.yul\":6899:6900   */\n      dup3\n        /* \"#utility.yul\":6881:6901   */\n      tag_248\n      jump\t// in\n    tag_370:\n        /* \"#utility.yul\":6876:6901   */\n      swap2\n      pop\n        /* \"#utility.yul\":6915:6935   */\n      tag_371\n        /* \"#utility.yul\":6933:6934   */\n      dup4\n        /* \"#utility.yul\":6915:6935   */\n      tag_248\n      jump\t// in\n    tag_371:\n        /* \"#utility.yul\":6910:6935   */\n      swap3\n      pop\n        /* \"#utility.yul\":6970:6971   */\n      dup3\n        /* \"#utility.yul\":6967:6968   */\n      dup3\n        /* \"#utility.yul\":6963:6972   */\n      mul\n        /* \"#utility.yul\":6992:7022   */\n      tag_372\n        /* \"#utility.yul\":7010:7021   */\n      dup2\n        /* \"#utility.yul\":6992:7022   */\n      tag_248\n      jump\t// in\n    tag_372:\n        /* \"#utility.yul\":6981:7022   */\n      swap2\n      pop\n        /* \"#utility.yul\":7054:7065   */\n      dup1\n        /* \"#utility.yul\":7045:7052   */\n      dup3\n        /* \"#utility.yul\":7042:7066   */\n      eq\n        /* \"#utility.yul\":7032:7090   */\n      tag_373\n      jumpi\n        /* \"#utility.yul\":7070:7088   */\n      tag_374\n      tag_264\n      jump\t// in\n    tag_374:\n        /* \"#utility.yul\":7032:7090   */\n    tag_373:\n        /* \"#utility.yul\":6866:7097   */\n      pop\n        /* \"#utility.yul\":6818:7097   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7103:7286   */\n    tag_83:\n        /* \"#utility.yul\":7141:7144   */\n      0x00\n        /* \"#utility.yul\":7164:7187   */\n      tag_376\n        /* \"#utility.yul\":7181:7186   */\n      dup3\n        /* \"#utility.yul\":7164:7187   */\n      tag_251\n      jump\t// in\n    tag_376:\n        /* \"#utility.yul\":7155:7187   */\n      swap2\n      pop\n        /* \"#utility.yul\":7209:7227   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":7202:7207   */\n      dup3\n        /* \"#utility.yul\":7199:7228   */\n      sub\n        /* \"#utility.yul\":7196:7251   */\n      tag_377\n      jumpi\n        /* \"#utility.yul\":7231:7249   */\n      tag_378\n      tag_264\n      jump\t// in\n    tag_378:\n        /* \"#utility.yul\":7196:7251   */\n    tag_377:\n        /* \"#utility.yul\":7278:7279   */\n      0x01\n        /* \"#utility.yul\":7271:7276   */\n      dup3\n        /* \"#utility.yul\":7267:7280   */\n      add\n        /* \"#utility.yul\":7260:7280   */\n      swap1\n      pop\n        /* \"#utility.yul\":7103:7286   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7292:7486   */\n    tag_105:\n        /* \"#utility.yul\":7332:7336   */\n      0x00\n        /* \"#utility.yul\":7352:7372   */\n      tag_380\n        /* \"#utility.yul\":7370:7371   */\n      dup3\n        /* \"#utility.yul\":7352:7372   */\n      tag_254\n      jump\t// in\n    tag_380:\n        /* \"#utility.yul\":7347:7372   */\n      swap2\n      pop\n        /* \"#utility.yul\":7386:7406   */\n      tag_381\n        /* \"#utility.yul\":7404:7405   */\n      dup4\n        /* \"#utility.yul\":7386:7406   */\n      tag_254\n      jump\t// in\n    tag_381:\n        /* \"#utility.yul\":7381:7406   */\n      swap3\n      pop\n        /* \"#utility.yul\":7430:7431   */\n      dup3\n        /* \"#utility.yul\":7427:7428   */\n      dup3\n        /* \"#utility.yul\":7423:7432   */\n      sub\n        /* \"#utility.yul\":7415:7432   */\n      swap1\n      pop\n        /* \"#utility.yul\":7454:7455   */\n      dup2\n        /* \"#utility.yul\":7448:7452   */\n      dup2\n        /* \"#utility.yul\":7445:7456   */\n      gt\n        /* \"#utility.yul\":7442:7479   */\n      iszero\n      tag_382\n      jumpi\n        /* \"#utility.yul\":7459:7477   */\n      tag_383\n      tag_264\n      jump\t// in\n    tag_383:\n        /* \"#utility.yul\":7442:7479   */\n    tag_382:\n        /* \"#utility.yul\":7292:7486   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7492:7607   */\n    tag_265:\n        /* \"#utility.yul\":7577:7600   */\n      tag_385\n        /* \"#utility.yul\":7594:7599   */\n      dup2\n        /* \"#utility.yul\":7577:7600   */\n      tag_259\n      jump\t// in\n    tag_385:\n        /* \"#utility.yul\":7572:7575   */\n      dup3\n        /* \"#utility.yul\":7565:7601   */\n      mstore\n        /* \"#utility.yul\":7492:7607   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7613:8051   */\n    tag_113:\n        /* \"#utility.yul\":7760:7764   */\n      0x00\n        /* \"#utility.yul\":7798:7800   */\n      0x60\n        /* \"#utility.yul\":7787:7796   */\n      dup3\n        /* \"#utility.yul\":7783:7801   */\n      add\n        /* \"#utility.yul\":7775:7801   */\n      swap1\n      pop\n        /* \"#utility.yul\":7811:7882   */\n      tag_387\n        /* \"#utility.yul\":7879:7880   */\n      0x00\n        /* \"#utility.yul\":7868:7877   */\n      dup4\n        /* \"#utility.yul\":7864:7881   */\n      add\n        /* \"#utility.yul\":7855:7861   */\n      dup7\n        /* \"#utility.yul\":7811:7882   */\n      tag_262\n      jump\t// in\n    tag_387:\n        /* \"#utility.yul\":7892:7964   */\n      tag_388\n        /* \"#utility.yul\":7960:7962   */\n      0x20\n        /* \"#utility.yul\":7949:7958   */\n      dup4\n        /* \"#utility.yul\":7945:7963   */\n      add\n        /* \"#utility.yul\":7936:7942   */\n      dup6\n        /* \"#utility.yul\":7892:7964   */\n      tag_262\n      jump\t// in\n    tag_388:\n        /* \"#utility.yul\":7974:8044   */\n      tag_389\n        /* \"#utility.yul\":8040:8042   */\n      0x40\n        /* \"#utility.yul\":8029:8038   */\n      dup4\n        /* \"#utility.yul\":8025:8043   */\n      add\n        /* \"#utility.yul\":8016:8022   */\n      dup5\n        /* \"#utility.yul\":7974:8044   */\n      tag_265\n      jump\t// in\n    tag_389:\n        /* \"#utility.yul\":7613:8051   */\n      swap5\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8057:8200   */\n    tag_266:\n        /* \"#utility.yul\":8114:8119   */\n      0x00\n        /* \"#utility.yul\":8145:8151   */\n      dup2\n        /* \"#utility.yul\":8139:8152   */\n      mload\n        /* \"#utility.yul\":8130:8152   */\n      swap1\n      pop\n        /* \"#utility.yul\":8161:8194   */\n      tag_391\n        /* \"#utility.yul\":8188:8193   */\n      dup2\n        /* \"#utility.yul\":8161:8194   */\n      tag_246\n      jump\t// in\n    tag_391:\n        /* \"#utility.yul\":8057:8200   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8206:8557   */\n    tag_117:\n        /* \"#utility.yul\":8276:8282   */\n      0x00\n        /* \"#utility.yul\":8325:8327   */\n      0x20\n        /* \"#utility.yul\":8313:8322   */\n      dup3\n        /* \"#utility.yul\":8304:8311   */\n      dup5\n        /* \"#utility.yul\":8300:8323   */\n      sub\n        /* \"#utility.yul\":8296:8328   */\n      slt\n        /* \"#utility.yul\":8293:8412   */\n      iszero\n      tag_393\n      jumpi\n        /* \"#utility.yul\":8331:8410   */\n      tag_394\n      tag_242\n      jump\t// in\n    tag_394:\n        /* \"#utility.yul\":8293:8412   */\n    tag_393:\n        /* \"#utility.yul\":8451:8452   */\n      0x00\n        /* \"#utility.yul\":8476:8540   */\n      tag_395\n        /* \"#utility.yul\":8532:8539   */\n      dup5\n        /* \"#utility.yul\":8523:8529   */\n      dup3\n        /* \"#utility.yul\":8512:8521   */\n      dup6\n        /* \"#utility.yul\":8508:8530   */\n      add\n        /* \"#utility.yul\":8476:8540   */\n      tag_266\n      jump\t// in\n    tag_395:\n        /* \"#utility.yul\":8466:8540   */\n      swap2\n      pop\n        /* \"#utility.yul\":8422:8550   */\n      pop\n        /* \"#utility.yul\":8206:8557   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8563:8973   */\n    tag_135:\n        /* \"#utility.yul\":8603:8610   */\n      0x00\n        /* \"#utility.yul\":8626:8646   */\n      tag_397\n        /* \"#utility.yul\":8644:8645   */\n      dup3\n        /* \"#utility.yul\":8626:8646   */\n      tag_254\n      jump\t// in\n    tag_397:\n        /* \"#utility.yul\":8621:8646   */\n      swap2\n      pop\n        /* \"#utility.yul\":8660:8680   */\n      tag_398\n        /* \"#utility.yul\":8678:8679   */\n      dup4\n        /* \"#utility.yul\":8660:8680   */\n      tag_254\n      jump\t// in\n    tag_398:\n        /* \"#utility.yul\":8655:8680   */\n      swap3\n      pop\n        /* \"#utility.yul\":8715:8716   */\n      dup3\n        /* \"#utility.yul\":8712:8713   */\n      dup3\n        /* \"#utility.yul\":8708:8717   */\n      mul\n        /* \"#utility.yul\":8737:8767   */\n      tag_399\n        /* \"#utility.yul\":8755:8766   */\n      dup2\n        /* \"#utility.yul\":8737:8767   */\n      tag_254\n      jump\t// in\n    tag_399:\n        /* \"#utility.yul\":8726:8767   */\n      swap2\n      pop\n        /* \"#utility.yul\":8916:8917   */\n      dup3\n        /* \"#utility.yul\":8907:8914   */\n      dup3\n        /* \"#utility.yul\":8903:8918   */\n      div\n        /* \"#utility.yul\":8900:8901   */\n      dup5\n        /* \"#utility.yul\":8897:8919   */\n      eq\n        /* \"#utility.yul\":8877:8878   */\n      dup4\n        /* \"#utility.yul\":8870:8879   */\n      iszero\n        /* \"#utility.yul\":8850:8933   */\n      or\n        /* \"#utility.yul\":8827:8966   */\n      tag_400\n      jumpi\n        /* \"#utility.yul\":8946:8964   */\n      tag_401\n      tag_264\n      jump\t// in\n    tag_401:\n        /* \"#utility.yul\":8827:8966   */\n    tag_400:\n        /* \"#utility.yul\":8611:8973   */\n      pop\n        /* \"#utility.yul\":8563:8973   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8979:9159   */\n    tag_267:\n        /* \"#utility.yul\":9027:9104   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":9024:9025   */\n      0x00\n        /* \"#utility.yul\":9017:9105   */\n      mstore\n        /* \"#utility.yul\":9124:9128   */\n      0x12\n        /* \"#utility.yul\":9121:9122   */\n      0x04\n        /* \"#utility.yul\":9114:9129   */\n      mstore\n        /* \"#utility.yul\":9148:9152   */\n      0x24\n        /* \"#utility.yul\":9145:9146   */\n      0x00\n        /* \"#utility.yul\":9138:9153   */\n      revert\n        /* \"#utility.yul\":9165:9350   */\n    tag_137:\n        /* \"#utility.yul\":9205:9206   */\n      0x00\n        /* \"#utility.yul\":9222:9242   */\n      tag_404\n        /* \"#utility.yul\":9240:9241   */\n      dup3\n        /* \"#utility.yul\":9222:9242   */\n      tag_254\n      jump\t// in\n    tag_404:\n        /* \"#utility.yul\":9217:9242   */\n      swap2\n      pop\n        /* \"#utility.yul\":9256:9276   */\n      tag_405\n        /* \"#utility.yul\":9274:9275   */\n      dup4\n        /* \"#utility.yul\":9256:9276   */\n      tag_254\n      jump\t// in\n    tag_405:\n        /* \"#utility.yul\":9251:9276   */\n      swap3\n      pop\n        /* \"#utility.yul\":9295:9296   */\n      dup3\n        /* \"#utility.yul\":9285:9320   */\n      tag_406\n      jumpi\n        /* \"#utility.yul\":9300:9318   */\n      tag_407\n      tag_267\n      jump\t// in\n    tag_407:\n        /* \"#utility.yul\":9285:9320   */\n    tag_406:\n        /* \"#utility.yul\":9342:9343   */\n      dup3\n        /* \"#utility.yul\":9339:9340   */\n      dup3\n        /* \"#utility.yul\":9335:9344   */\n      div\n        /* \"#utility.yul\":9330:9344   */\n      swap1\n      pop\n        /* \"#utility.yul\":9165:9350   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9356:9798   */\n    tag_168:\n        /* \"#utility.yul\":9505:9509   */\n      0x00\n        /* \"#utility.yul\":9543:9545   */\n      0x60\n        /* \"#utility.yul\":9532:9541   */\n      dup3\n        /* \"#utility.yul\":9528:9546   */\n      add\n        /* \"#utility.yul\":9520:9546   */\n      swap1\n      pop\n        /* \"#utility.yul\":9556:9627   */\n      tag_409\n        /* \"#utility.yul\":9624:9625   */\n      0x00\n        /* \"#utility.yul\":9613:9622   */\n      dup4\n        /* \"#utility.yul\":9609:9626   */\n      add\n        /* \"#utility.yul\":9600:9606   */\n      dup7\n        /* \"#utility.yul\":9556:9627   */\n      tag_262\n      jump\t// in\n    tag_409:\n        /* \"#utility.yul\":9637:9709   */\n      tag_410\n        /* \"#utility.yul\":9705:9707   */\n      0x20\n        /* \"#utility.yul\":9694:9703   */\n      dup4\n        /* \"#utility.yul\":9690:9708   */\n      add\n        /* \"#utility.yul\":9681:9687   */\n      dup6\n        /* \"#utility.yul\":9637:9709   */\n      tag_262\n      jump\t// in\n    tag_410:\n        /* \"#utility.yul\":9719:9791   */\n      tag_411\n        /* \"#utility.yul\":9787:9789   */\n      0x40\n        /* \"#utility.yul\":9776:9785   */\n      dup4\n        /* \"#utility.yul\":9772:9790   */\n      add\n        /* \"#utility.yul\":9763:9769   */\n      dup5\n        /* \"#utility.yul\":9719:9791   */\n      tag_263\n      jump\t// in\n    tag_411:\n        /* \"#utility.yul\":9356:9798   */\n      swap5\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9804:10136   */\n    tag_173:\n        /* \"#utility.yul\":9925:9929   */\n      0x00\n        /* \"#utility.yul\":9963:9965   */\n      0x40\n        /* \"#utility.yul\":9952:9961   */\n      dup3\n        /* \"#utility.yul\":9948:9966   */\n      add\n        /* \"#utility.yul\":9940:9966   */\n      swap1\n      pop\n        /* \"#utility.yul\":9976:10047   */\n      tag_413\n        /* \"#utility.yul\":10044:10045   */\n      0x00\n        /* \"#utility.yul\":10033:10042   */\n      dup4\n        /* \"#utility.yul\":10029:10046   */\n      add\n        /* \"#utility.yul\":10020:10026   */\n      dup6\n        /* \"#utility.yul\":9976:10047   */\n      tag_262\n      jump\t// in\n    tag_413:\n        /* \"#utility.yul\":10057:10129   */\n      tag_414\n        /* \"#utility.yul\":10125:10127   */\n      0x20\n        /* \"#utility.yul\":10114:10123   */\n      dup4\n        /* \"#utility.yul\":10110:10128   */\n      add\n        /* \"#utility.yul\":10101:10107   */\n      dup5\n        /* \"#utility.yul\":10057:10129   */\n      tag_262\n      jump\t// in\n    tag_414:\n        /* \"#utility.yul\":9804:10136   */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10142:10285   */\n    tag_268:\n        /* \"#utility.yul\":10199:10204   */\n      0x00\n        /* \"#utility.yul\":10230:10236   */\n      dup2\n        /* \"#utility.yul\":10224:10237   */\n      mload\n        /* \"#utility.yul\":10215:10237   */\n      swap1\n      pop\n        /* \"#utility.yul\":10246:10279   */\n      tag_416\n        /* \"#utility.yul\":10273:10278   */\n      dup2\n        /* \"#utility.yul\":10246:10279   */\n      tag_255\n      jump\t// in\n    tag_416:\n        /* \"#utility.yul\":10142:10285   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10291:10642   */\n    tag_177:\n        /* \"#utility.yul\":10361:10367   */\n      0x00\n        /* \"#utility.yul\":10410:10412   */\n      0x20\n        /* \"#utility.yul\":10398:10407   */\n      dup3\n        /* \"#utility.yul\":10389:10396   */\n      dup5\n        /* \"#utility.yul\":10385:10408   */\n      sub\n        /* \"#utility.yul\":10381:10413   */\n      slt\n        /* \"#utility.yul\":10378:10497   */\n      iszero\n      tag_418\n      jumpi\n        /* \"#utility.yul\":10416:10495   */\n      tag_419\n      tag_242\n      jump\t// in\n    tag_419:\n        /* \"#utility.yul\":10378:10497   */\n    tag_418:\n        /* \"#utility.yul\":10536:10537   */\n      0x00\n        /* \"#utility.yul\":10561:10625   */\n      tag_420\n        /* \"#utility.yul\":10617:10624   */\n      dup5\n        /* \"#utility.yul\":10608:10614   */\n      dup3\n        /* \"#utility.yul\":10597:10606   */\n      dup6\n        /* \"#utility.yul\":10593:10615   */\n      add\n        /* \"#utility.yul\":10561:10625   */\n      tag_268\n      jump\t// in\n    tag_420:\n        /* \"#utility.yul\":10551:10625   */\n      swap2\n      pop\n        /* \"#utility.yul\":10507:10635   */\n      pop\n        /* \"#utility.yul\":10291:10642   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10648:10817   */\n    tag_269:\n        /* \"#utility.yul\":10732:10743   */\n      0x00\n        /* \"#utility.yul\":10766:10772   */\n      dup3\n        /* \"#utility.yul\":10761:10764   */\n      dup3\n        /* \"#utility.yul\":10754:10773   */\n      mstore\n        /* \"#utility.yul\":10806:10810   */\n      0x20\n        /* \"#utility.yul\":10801:10804   */\n      dup3\n        /* \"#utility.yul\":10797:10811   */\n      add\n        /* \"#utility.yul\":10782:10811   */\n      swap1\n      pop\n        /* \"#utility.yul\":10648:10817   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10823:11064   */\n    tag_270:\n        /* \"#utility.yul\":10963:10997   */\n      0x5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f\n        /* \"#utility.yul\":10959:10960   */\n      0x00\n        /* \"#utility.yul\":10951:10957   */\n      dup3\n        /* \"#utility.yul\":10947:10961   */\n      add\n        /* \"#utility.yul\":10940:10998   */\n      mstore\n        /* \"#utility.yul\":11032:11056   */\n      0x20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000\n        /* \"#utility.yul\":11027:11029   */\n      0x20\n        /* \"#utility.yul\":11019:11025   */\n      dup3\n        /* \"#utility.yul\":11015:11030   */\n      add\n        /* \"#utility.yul\":11008:11057   */\n      mstore\n        /* \"#utility.yul\":10823:11064   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11070:11436   */\n    tag_271:\n        /* \"#utility.yul\":11212:11215   */\n      0x00\n        /* \"#utility.yul\":11233:11300   */\n      tag_424\n        /* \"#utility.yul\":11297:11299   */\n      0x36\n        /* \"#utility.yul\":11292:11295   */\n      dup4\n        /* \"#utility.yul\":11233:11300   */\n      tag_269\n      jump\t// in\n    tag_424:\n        /* \"#utility.yul\":11226:11300   */\n      swap2\n      pop\n        /* \"#utility.yul\":11309:11402   */\n      tag_425\n        /* \"#utility.yul\":11398:11401   */\n      dup3\n        /* \"#utility.yul\":11309:11402   */\n      tag_270\n      jump\t// in\n    tag_425:\n        /* \"#utility.yul\":11427:11429   */\n      0x40\n        /* \"#utility.yul\":11422:11425   */\n      dup3\n        /* \"#utility.yul\":11418:11430   */\n      add\n        /* \"#utility.yul\":11411:11430   */\n      swap1\n      pop\n        /* \"#utility.yul\":11070:11436   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11442:11861   */\n    tag_180:\n        /* \"#utility.yul\":11608:11612   */\n      0x00\n        /* \"#utility.yul\":11646:11648   */\n      0x20\n        /* \"#utility.yul\":11635:11644   */\n      dup3\n        /* \"#utility.yul\":11631:11649   */\n      add\n        /* \"#utility.yul\":11623:11649   */\n      swap1\n      pop\n        /* \"#utility.yul\":11695:11704   */\n      dup2\n        /* \"#utility.yul\":11689:11693   */\n      dup2\n        /* \"#utility.yul\":11685:11705   */\n      sub\n        /* \"#utility.yul\":11681:11682   */\n      0x00\n        /* \"#utility.yul\":11670:11679   */\n      dup4\n        /* \"#utility.yul\":11666:11683   */\n      add\n        /* \"#utility.yul\":11659:11706   */\n      mstore\n        /* \"#utility.yul\":11723:11854   */\n      tag_427\n        /* \"#utility.yul\":11849:11853   */\n      dup2\n        /* \"#utility.yul\":11723:11854   */\n      tag_271\n      jump\t// in\n    tag_427:\n        /* \"#utility.yul\":11715:11854   */\n      swap1\n      pop\n        /* \"#utility.yul\":11442:11861   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11867:12199   */\n    tag_183:\n        /* \"#utility.yul\":11988:11992   */\n      0x00\n        /* \"#utility.yul\":12026:12028   */\n      0x40\n        /* \"#utility.yul\":12015:12024   */\n      dup3\n        /* \"#utility.yul\":12011:12029   */\n      add\n        /* \"#utility.yul\":12003:12029   */\n      swap1\n      pop\n        /* \"#utility.yul\":12039:12110   */\n      tag_429\n        /* \"#utility.yul\":12107:12108   */\n      0x00\n        /* \"#utility.yul\":12096:12105   */\n      dup4\n        /* \"#utility.yul\":12092:12109   */\n      add\n        /* \"#utility.yul\":12083:12089   */\n      dup6\n        /* \"#utility.yul\":12039:12110   */\n      tag_262\n      jump\t// in\n    tag_429:\n        /* \"#utility.yul\":12120:12192   */\n      tag_430\n        /* \"#utility.yul\":12188:12190   */\n      0x20\n        /* \"#utility.yul\":12177:12186   */\n      dup4\n        /* \"#utility.yul\":12173:12191   */\n      add\n        /* \"#utility.yul\":12164:12170   */\n      dup5\n        /* \"#utility.yul\":12120:12192   */\n      tag_263\n      jump\t// in\n    tag_430:\n        /* \"#utility.yul\":11867:12199   */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":12205:12321   */\n    tag_272:\n        /* \"#utility.yul\":12275:12296   */\n      tag_432\n        /* \"#utility.yul\":12290:12295   */\n      dup2\n        /* \"#utility.yul\":12275:12296   */\n      tag_257\n      jump\t// in\n    tag_432:\n        /* \"#utility.yul\":12268:12273   */\n      dup2\n        /* \"#utility.yul\":12265:12297   */\n      eq\n        /* \"#utility.yul\":12255:12315   */\n      tag_433\n      jumpi\n        /* \"#utility.yul\":12311:12312   */\n      0x00\n        /* \"#utility.yul\":12308:12309   */\n      dup1\n        /* \"#utility.yul\":12301:12313   */\n      revert\n        /* \"#utility.yul\":12255:12315   */\n    tag_433:\n        /* \"#utility.yul\":12205:12321   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":12327:12464   */\n    tag_273:\n        /* \"#utility.yul\":12381:12386   */\n      0x00\n        /* \"#utility.yul\":12412:12418   */\n      dup2\n        /* \"#utility.yul\":12406:12419   */\n      mload\n        /* \"#utility.yul\":12397:12419   */\n      swap1\n      pop\n        /* \"#utility.yul\":12428:12458   */\n      tag_435\n        /* \"#utility.yul\":12452:12457   */\n      dup2\n        /* \"#utility.yul\":12428:12458   */\n      tag_272\n      jump\t// in\n    tag_435:\n        /* \"#utility.yul\":12327:12464   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":12470:12815   */\n    tag_206:\n        /* \"#utility.yul\":12537:12543   */\n      0x00\n        /* \"#utility.yul\":12586:12588   */\n      0x20\n        /* \"#utility.yul\":12574:12583   */\n      dup3\n        /* \"#utility.yul\":12565:12572   */\n      dup5\n        /* \"#utility.yul\":12561:12584   */\n      sub\n        /* \"#utility.yul\":12557:12589   */\n      slt\n        /* \"#utility.yul\":12554:12673   */\n      iszero\n      tag_437\n      jumpi\n        /* \"#utility.yul\":12592:12671   */\n      tag_438\n      tag_242\n      jump\t// in\n    tag_438:\n        /* \"#utility.yul\":12554:12673   */\n    tag_437:\n        /* \"#utility.yul\":12712:12713   */\n      0x00\n        /* \"#utility.yul\":12737:12798   */\n      tag_439\n        /* \"#utility.yul\":12790:12797   */\n      dup5\n        /* \"#utility.yul\":12781:12787   */\n      dup3\n        /* \"#utility.yul\":12770:12779   */\n      dup6\n        /* \"#utility.yul\":12766:12788   */\n      add\n        /* \"#utility.yul\":12737:12798   */\n      tag_273\n      jump\t// in\n    tag_439:\n        /* \"#utility.yul\":12727:12798   */\n      swap2\n      pop\n        /* \"#utility.yul\":12683:12808   */\n      pop\n        /* \"#utility.yul\":12470:12815   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":12821:13050   */\n    tag_274:\n        /* \"#utility.yul\":12961:12995   */\n      0x5361666545524332303a204552433230206f7065726174696f6e20646964206e\n        /* \"#utility.yul\":12957:12958   */\n      0x00\n        /* \"#utility.yul\":12949:12955   */\n      dup3\n        /* \"#utility.yul\":12945:12959   */\n      add\n        /* \"#utility.yul\":12938:12996   */\n      mstore\n        /* \"#utility.yul\":13030:13042   */\n      0x6f74207375636365656400000000000000000000000000000000000000000000\n        /* \"#utility.yul\":13025:13027   */\n      0x20\n        /* \"#utility.yul\":13017:13023   */\n      dup3\n        /* \"#utility.yul\":13013:13028   */\n      add\n        /* \"#utility.yul\":13006:13043   */\n      mstore\n        /* \"#utility.yul\":12821:13050   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":13056:13422   */\n    tag_275:\n        /* \"#utility.yul\":13198:13201   */\n      0x00\n        /* \"#utility.yul\":13219:13286   */\n      tag_442\n        /* \"#utility.yul\":13283:13285   */\n      0x2a\n        /* \"#utility.yul\":13278:13281   */\n      dup4\n        /* \"#utility.yul\":13219:13286   */\n      tag_269\n      jump\t// in\n    tag_442:\n        /* \"#utility.yul\":13212:13286   */\n      swap2\n      pop\n        /* \"#utility.yul\":13295:13388   */\n      tag_443\n        /* \"#utility.yul\":13384:13387   */\n      dup3\n        /* \"#utility.yul\":13295:13388   */\n      tag_274\n      jump\t// in\n    tag_443:\n        /* \"#utility.yul\":13413:13415   */\n      0x40\n        /* \"#utility.yul\":13408:13411   */\n      dup3\n        /* \"#utility.yul\":13404:13416   */\n      add\n        /* \"#utility.yul\":13397:13416   */\n      swap1\n      pop\n        /* \"#utility.yul\":13056:13422   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":13428:13847   */\n    tag_209:\n        /* \"#utility.yul\":13594:13598   */\n      0x00\n        /* \"#utility.yul\":13632:13634   */\n      0x20\n        /* \"#utility.yul\":13621:13630   */\n      dup3\n        /* \"#utility.yul\":13617:13635   */\n      add\n        /* \"#utility.yul\":13609:13635   */\n      swap1\n      pop\n        /* \"#utility.yul\":13681:13690   */\n      dup2\n        /* \"#utility.yul\":13675:13679   */\n      dup2\n        /* \"#utility.yul\":13671:13691   */\n      sub\n        /* \"#utility.yul\":13667:13668   */\n      0x00\n        /* \"#utility.yul\":13656:13665   */\n      dup4\n        /* \"#utility.yul\":13652:13669   */\n      add\n        /* \"#utility.yul\":13645:13692   */\n      mstore\n        /* \"#utility.yul\":13709:13840   */\n      tag_445\n        /* \"#utility.yul\":13835:13839   */\n      dup2\n        /* \"#utility.yul\":13709:13840   */\n      tag_275\n      jump\t// in\n    tag_445:\n        /* \"#utility.yul\":13701:13840   */\n      swap1\n      pop\n        /* \"#utility.yul\":13428:13847   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":13853:14078   */\n    tag_276:\n        /* \"#utility.yul\":13993:14027   */\n      0x416464726573733a20696e73756666696369656e742062616c616e636520666f\n        /* \"#utility.yul\":13989:13990   */\n      0x00\n        /* \"#utility.yul\":13981:13987   */\n      dup3\n        /* \"#utility.yul\":13977:13991   */\n      add\n        /* \"#utility.yul\":13970:14028   */\n      mstore\n        /* \"#utility.yul\":14062:14070   */\n      0x722063616c6c0000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":14057:14059   */\n      0x20\n        /* \"#utility.yul\":14049:14055   */\n      dup3\n        /* \"#utility.yul\":14045:14060   */\n      add\n        /* \"#utility.yul\":14038:14071   */\n      mstore\n        /* \"#utility.yul\":13853:14078   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":14084:14450   */\n    tag_277:\n        /* \"#utility.yul\":14226:14229   */\n      0x00\n        /* \"#utility.yul\":14247:14314   */\n      tag_448\n        /* \"#utility.yul\":14311:14313   */\n      0x26\n        /* \"#utility.yul\":14306:14309   */\n      dup4\n        /* \"#utility.yul\":14247:14314   */\n      tag_269\n      jump\t// in\n    tag_448:\n        /* \"#utility.yul\":14240:14314   */\n      swap2\n      pop\n        /* \"#utility.yul\":14323:14416   */\n      tag_449\n        /* \"#utility.yul\":14412:14415   */\n      dup3\n        /* \"#utility.yul\":14323:14416   */\n      tag_276\n      jump\t// in\n    tag_449:\n        /* \"#utility.yul\":14441:14443   */\n      0x40\n        /* \"#utility.yul\":14436:14439   */\n      dup3\n        /* \"#utility.yul\":14432:14444   */\n      add\n        /* \"#utility.yul\":14425:14444   */\n      swap1\n      pop\n        /* \"#utility.yul\":14084:14450   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":14456:14875   */\n    tag_216:\n        /* \"#utility.yul\":14622:14626   */\n      0x00\n        /* \"#utility.yul\":14660:14662   */\n      0x20\n        /* \"#utility.yul\":14649:14658   */\n      dup3\n        /* \"#utility.yul\":14645:14663   */\n      add\n        /* \"#utility.yul\":14637:14663   */\n      swap1\n      pop\n        /* \"#utility.yul\":14709:14718   */\n      dup2\n        /* \"#utility.yul\":14703:14707   */\n      dup2\n        /* \"#utility.yul\":14699:14719   */\n      sub\n        /* \"#utility.yul\":14695:14696   */\n      0x00\n        /* \"#utility.yul\":14684:14693   */\n      dup4\n        /* \"#utility.yul\":14680:14697   */\n      add\n        /* \"#utility.yul\":14673:14720   */\n      mstore\n        /* \"#utility.yul\":14737:14868   */\n      tag_451\n        /* \"#utility.yul\":14863:14867   */\n      dup2\n        /* \"#utility.yul\":14737:14868   */\n      tag_277\n      jump\t// in\n    tag_451:\n        /* \"#utility.yul\":14729:14868   */\n      swap1\n      pop\n        /* \"#utility.yul\":14456:14875   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":14881:14979   */\n    tag_278:\n        /* \"#utility.yul\":14932:14938   */\n      0x00\n        /* \"#utility.yul\":14966:14971   */\n      dup2\n        /* \"#utility.yul\":14960:14972   */\n      mload\n        /* \"#utility.yul\":14950:14972   */\n      swap1\n      pop\n        /* \"#utility.yul\":14881:14979   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":14985:15132   */\n    tag_279:\n        /* \"#utility.yul\":15086:15097   */\n      0x00\n        /* \"#utility.yul\":15123:15126   */\n      dup2\n        /* \"#utility.yul\":15108:15126   */\n      swap1\n      pop\n        /* \"#utility.yul\":14985:15132   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":15138:15384   */\n    tag_280:\n        /* \"#utility.yul\":15219:15220   */\n      0x00\n        /* \"#utility.yul\":15229:15342   */\n    tag_455:\n        /* \"#utility.yul\":15243:15249   */\n      dup4\n        /* \"#utility.yul\":15240:15241   */\n      dup2\n        /* \"#utility.yul\":15237:15250   */\n      lt\n        /* \"#utility.yul\":15229:15342   */\n      iszero\n      tag_457\n      jumpi\n        /* \"#utility.yul\":15328:15329   */\n      dup1\n        /* \"#utility.yul\":15323:15326   */\n      dup3\n        /* \"#utility.yul\":15319:15330   */\n      add\n        /* \"#utility.yul\":15313:15331   */\n      mload\n        /* \"#utility.yul\":15309:15310   */\n      dup2\n        /* \"#utility.yul\":15304:15307   */\n      dup5\n        /* \"#utility.yul\":15300:15311   */\n      add\n        /* \"#utility.yul\":15293:15332   */\n      mstore\n        /* \"#utility.yul\":15265:15267   */\n      0x20\n        /* \"#utility.yul\":15262:15263   */\n      dup2\n        /* \"#utility.yul\":15258:15268   */\n      add\n        /* \"#utility.yul\":15253:15268   */\n      swap1\n      pop\n        /* \"#utility.yul\":15229:15342   */\n      jump(tag_455)\n    tag_457:\n        /* \"#utility.yul\":15376:15377   */\n      0x00\n        /* \"#utility.yul\":15367:15373   */\n      dup5\n        /* \"#utility.yul\":15362:15365   */\n      dup5\n        /* \"#utility.yul\":15358:15374   */\n      add\n        /* \"#utility.yul\":15351:15378   */\n      mstore\n        /* \"#utility.yul\":15200:15384   */\n      pop\n        /* \"#utility.yul\":15138:15384   */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":15390:15776   */\n    tag_281:\n        /* \"#utility.yul\":15494:15497   */\n      0x00\n        /* \"#utility.yul\":15522:15560   */\n      tag_459\n        /* \"#utility.yul\":15554:15559   */\n      dup3\n        /* \"#utility.yul\":15522:15560   */\n      tag_278\n      jump\t// in\n    tag_459:\n        /* \"#utility.yul\":15576:15664   */\n      tag_460\n        /* \"#utility.yul\":15657:15663   */\n      dup2\n        /* \"#utility.yul\":15652:15655   */\n      dup6\n        /* \"#utility.yul\":15576:15664   */\n      tag_279\n      jump\t// in\n    tag_460:\n        /* \"#utility.yul\":15569:15664   */\n      swap4\n      pop\n        /* \"#utility.yul\":15673:15738   */\n      tag_461\n        /* \"#utility.yul\":15731:15737   */\n      dup2\n        /* \"#utility.yul\":15726:15729   */\n      dup6\n        /* \"#utility.yul\":15719:15723   */\n      0x20\n        /* \"#utility.yul\":15712:15717   */\n      dup7\n        /* \"#utility.yul\":15708:15724   */\n      add\n        /* \"#utility.yul\":15673:15738   */\n      tag_280\n      jump\t// in\n    tag_461:\n        /* \"#utility.yul\":15763:15769   */\n      dup1\n        /* \"#utility.yul\":15758:15761   */\n      dup5\n        /* \"#utility.yul\":15754:15770   */\n      add\n        /* \"#utility.yul\":15747:15770   */\n      swap2\n      pop\n        /* \"#utility.yul\":15498:15776   */\n      pop\n        /* \"#utility.yul\":15390:15776   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":15782:16053   */\n    tag_218:\n        /* \"#utility.yul\":15912:15915   */\n      0x00\n        /* \"#utility.yul\":15934:16027   */\n      tag_463\n        /* \"#utility.yul\":16023:16026   */\n      dup3\n        /* \"#utility.yul\":16014:16020   */\n      dup5\n        /* \"#utility.yul\":15934:16027   */\n      tag_281\n      jump\t// in\n    tag_463:\n        /* \"#utility.yul\":15927:16027   */\n      swap2\n      pop\n        /* \"#utility.yul\":16044:16047   */\n      dup2\n        /* \"#utility.yul\":16037:16047   */\n      swap1\n      pop\n        /* \"#utility.yul\":15782:16053   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":16059:16238   */\n    tag_282:\n        /* \"#utility.yul\":16199:16230   */\n      0x416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000\n        /* \"#utility.yul\":16195:16196   */\n      0x00\n        /* \"#utility.yul\":16187:16193   */\n      dup3\n        /* \"#utility.yul\":16183:16197   */\n      add\n        /* \"#utility.yul\":16176:16231   */\n      mstore\n        /* \"#utility.yul\":16059:16238   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":16244:16610   */\n    tag_283:\n        /* \"#utility.yul\":16386:16389   */\n      0x00\n        /* \"#utility.yul\":16407:16474   */\n      tag_466\n        /* \"#utility.yul\":16471:16473   */\n      0x1d\n        /* \"#utility.yul\":16466:16469   */\n      dup4\n        /* \"#utility.yul\":16407:16474   */\n      tag_269\n      jump\t// in\n    tag_466:\n        /* \"#utility.yul\":16400:16474   */\n      swap2\n      pop\n        /* \"#utility.yul\":16483:16576   */\n      tag_467\n        /* \"#utility.yul\":16572:16575   */\n      dup3\n        /* \"#utility.yul\":16483:16576   */\n      tag_282\n      jump\t// in\n    tag_467:\n        /* \"#utility.yul\":16601:16603   */\n      0x20\n        /* \"#utility.yul\":16596:16599   */\n      dup3\n        /* \"#utility.yul\":16592:16604   */\n      add\n        /* \"#utility.yul\":16585:16604   */\n      swap1\n      pop\n        /* \"#utility.yul\":16244:16610   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":16616:17035   */\n    tag_231:\n        /* \"#utility.yul\":16782:16786   */\n      0x00\n        /* \"#utility.yul\":16820:16822   */\n      0x20\n        /* \"#utility.yul\":16809:16818   */\n      dup3\n        /* \"#utility.yul\":16805:16823   */\n      add\n        /* \"#utility.yul\":16797:16823   */\n      swap1\n      pop\n        /* \"#utility.yul\":16869:16878   */\n      dup2\n        /* \"#utility.yul\":16863:16867   */\n      dup2\n        /* \"#utility.yul\":16859:16879   */\n      sub\n        /* \"#utility.yul\":16855:16856   */\n      0x00\n        /* \"#utility.yul\":16844:16853   */\n      dup4\n        /* \"#utility.yul\":16840:16857   */\n      add\n        /* \"#utility.yul\":16833:16880   */\n      mstore\n        /* \"#utility.yul\":16897:17028   */\n      tag_469\n        /* \"#utility.yul\":17023:17027   */\n      dup2\n        /* \"#utility.yul\":16897:17028   */\n      tag_283\n      jump\t// in\n    tag_469:\n        /* \"#utility.yul\":16889:17028   */\n      swap1\n      pop\n        /* \"#utility.yul\":16616:17035   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":17041:17140   */\n    tag_284:\n        /* \"#utility.yul\":17093:17099   */\n      0x00\n        /* \"#utility.yul\":17127:17132   */\n      dup2\n        /* \"#utility.yul\":17121:17133   */\n      mload\n        /* \"#utility.yul\":17111:17133   */\n      swap1\n      pop\n        /* \"#utility.yul\":17041:17140   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":17146:17248   */\n    tag_285:\n        /* \"#utility.yul\":17187:17193   */\n      0x00\n        /* \"#utility.yul\":17238:17240   */\n      0x1f\n        /* \"#utility.yul\":17234:17241   */\n      not\n        /* \"#utility.yul\":17229:17231   */\n      0x1f\n        /* \"#utility.yul\":17222:17227   */\n      dup4\n        /* \"#utility.yul\":17218:17232   */\n      add\n        /* \"#utility.yul\":17214:17242   */\n      and\n        /* \"#utility.yul\":17204:17242   */\n      swap1\n      pop\n        /* \"#utility.yul\":17146:17248   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":17254:17631   */\n    tag_286:\n        /* \"#utility.yul\":17342:17345   */\n      0x00\n        /* \"#utility.yul\":17370:17409   */\n      tag_473\n        /* \"#utility.yul\":17403:17408   */\n      dup3\n        /* \"#utility.yul\":17370:17409   */\n      tag_284\n      jump\t// in\n    tag_473:\n        /* \"#utility.yul\":17425:17496   */\n      tag_474\n        /* \"#utility.yul\":17489:17495   */\n      dup2\n        /* \"#utility.yul\":17484:17487   */\n      dup6\n        /* \"#utility.yul\":17425:17496   */\n      tag_269\n      jump\t// in\n    tag_474:\n        /* \"#utility.yul\":17418:17496   */\n      swap4\n      pop\n        /* \"#utility.yul\":17505:17570   */\n      tag_475\n        /* \"#utility.yul\":17563:17569   */\n      dup2\n        /* \"#utility.yul\":17558:17561   */\n      dup6\n        /* \"#utility.yul\":17551:17555   */\n      0x20\n        /* \"#utility.yul\":17544:17549   */\n      dup7\n        /* \"#utility.yul\":17540:17556   */\n      add\n        /* \"#utility.yul\":17505:17570   */\n      tag_280\n      jump\t// in\n    tag_475:\n        /* \"#utility.yul\":17595:17624   */\n      tag_476\n        /* \"#utility.yul\":17617:17623   */\n      dup2\n        /* \"#utility.yul\":17595:17624   */\n      tag_285\n      jump\t// in\n    tag_476:\n        /* \"#utility.yul\":17590:17593   */\n      dup5\n        /* \"#utility.yul\":17586:17625   */\n      add\n        /* \"#utility.yul\":17579:17625   */\n      swap2\n      pop\n        /* \"#utility.yul\":17346:17631   */\n      pop\n        /* \"#utility.yul\":17254:17631   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":17637:17950   */\n    tag_240:\n        /* \"#utility.yul\":17750:17754   */\n      0x00\n        /* \"#utility.yul\":17788:17790   */\n      0x20\n        /* \"#utility.yul\":17777:17786   */\n      dup3\n        /* \"#utility.yul\":17773:17791   */\n      add\n        /* \"#utility.yul\":17765:17791   */\n      swap1\n      pop\n        /* \"#utility.yul\":17837:17846   */\n      dup2\n        /* \"#utility.yul\":17831:17835   */\n      dup2\n        /* \"#utility.yul\":17827:17847   */\n      sub\n        /* \"#utility.yul\":17823:17824   */\n      0x00\n        /* \"#utility.yul\":17812:17821   */\n      dup4\n        /* \"#utility.yul\":17808:17825   */\n      add\n        /* \"#utility.yul\":17801:17848   */\n      mstore\n        /* \"#utility.yul\":17865:17943   */\n      tag_478\n        /* \"#utility.yul\":17938:17942   */\n      dup2\n        /* \"#utility.yul\":17929:17935   */\n      dup5\n        /* \"#utility.yul\":17865:17943   */\n      tag_286\n      jump\t// in\n    tag_478:\n        /* \"#utility.yul\":17857:17943   */\n      swap1\n      pop\n        /* \"#utility.yul\":17637:17950   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n\n    auxdata: 0xa26469706673582212205bee183ca04199921b2222961c958043d10d422c901cae9895ae3815e3cd613064736f6c63430008130033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"@_48": {
									"entryPoint": null,
									"id": 48,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_decode_t_address_fromMemory": {
									"entryPoint": 419,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_uint256_fromMemory": {
									"entryPoint": 478,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_addresst_uint256_fromMemory": {
									"entryPoint": 501,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"allocate_unbounded": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"cleanup_t_address": {
									"entryPoint": 373,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint160": {
									"entryPoint": 341,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint256": {
									"entryPoint": 442,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
									"entryPoint": 336,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"validator_revert_t_address": {
									"entryPoint": 393,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_uint256": {
									"entryPoint": 452,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:1715:20",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "47:35:20",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "57:19:20",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "73:2:20",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "67:5:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "67:9:20"
															},
															"variableNames": [
																{
																	"name": "memPtr",
																	"nodeType": "YulIdentifier",
																	"src": "57:6:20"
																}
															]
														}
													]
												},
												"name": "allocate_unbounded",
												"nodeType": "YulFunctionDefinition",
												"returnVariables": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "40:6:20",
														"type": ""
													}
												],
												"src": "7:75:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "177:28:20",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "194:1:20",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "197:1:20",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "187:6:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "187:12:20"
															},
															"nodeType": "YulExpressionStatement",
															"src": "187:12:20"
														}
													]
												},
												"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
												"nodeType": "YulFunctionDefinition",
												"src": "88:117:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "300:28:20",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "317:1:20",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "320:1:20",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "310:6:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "310:12:20"
															},
															"nodeType": "YulExpressionStatement",
															"src": "310:12:20"
														}
													]
												},
												"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
												"nodeType": "YulFunctionDefinition",
												"src": "211:117:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "379:81:20",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "389:65:20",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "404:5:20"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "411:42:20",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "400:3:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "400:54:20"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "389:7:20"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint160",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "361:5:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "371:7:20",
														"type": ""
													}
												],
												"src": "334:126:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "511:51:20",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "521:35:20",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "550:5:20"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint160",
																	"nodeType": "YulIdentifier",
																	"src": "532:17:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "532:24:20"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "521:7:20"
																}
															]
														}
													]
												},
												"name": "cleanup_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "493:5:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "503:7:20",
														"type": ""
													}
												],
												"src": "466:96:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "611:79:20",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "668:16:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "677:1:20",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "680:1:20",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "670:6:20"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "670:12:20"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "670:12:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "634:5:20"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "659:5:20"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_address",
																					"nodeType": "YulIdentifier",
																					"src": "641:17:20"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "641:24:20"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "631:2:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "631:35:20"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "624:6:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "624:43:20"
															},
															"nodeType": "YulIf",
															"src": "621:63:20"
														}
													]
												},
												"name": "validator_revert_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "604:5:20",
														"type": ""
													}
												],
												"src": "568:122:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "759:80:20",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "769:22:20",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "784:6:20"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "778:5:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "778:13:20"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "769:5:20"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "827:5:20"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "800:26:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "800:33:20"
															},
															"nodeType": "YulExpressionStatement",
															"src": "800:33:20"
														}
													]
												},
												"name": "abi_decode_t_address_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "737:6:20",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "745:3:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "753:5:20",
														"type": ""
													}
												],
												"src": "696:143:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "890:32:20",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "900:16:20",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "911:5:20"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "900:7:20"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "872:5:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "882:7:20",
														"type": ""
													}
												],
												"src": "845:77:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "971:79:20",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1028:16:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1037:1:20",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1040:1:20",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1030:6:20"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1030:12:20"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1030:12:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "994:5:20"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "1019:5:20"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_uint256",
																					"nodeType": "YulIdentifier",
																					"src": "1001:17:20"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1001:24:20"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "991:2:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "991:35:20"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "984:6:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "984:43:20"
															},
															"nodeType": "YulIf",
															"src": "981:63:20"
														}
													]
												},
												"name": "validator_revert_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "964:5:20",
														"type": ""
													}
												],
												"src": "928:122:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1119:80:20",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1129:22:20",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "1144:6:20"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1138:5:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "1138:13:20"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "1129:5:20"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "1187:5:20"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "1160:26:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "1160:33:20"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1160:33:20"
														}
													]
												},
												"name": "abi_decode_t_uint256_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "1097:6:20",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "1105:3:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1113:5:20",
														"type": ""
													}
												],
												"src": "1056:143:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1299:413:20",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1345:83:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "1347:77:20"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1347:79:20"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1347:79:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1320:7:20"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1329:9:20"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1316:3:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1316:23:20"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1341:2:20",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1312:3:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "1312:32:20"
															},
															"nodeType": "YulIf",
															"src": "1309:119:20"
														},
														{
															"nodeType": "YulBlock",
															"src": "1438:128:20",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "1453:15:20",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1467:1:20",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "1457:6:20",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "1482:74:20",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "1528:9:20"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "1539:6:20"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1524:3:20"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1524:22:20"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1548:7:20"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address_fromMemory",
																			"nodeType": "YulIdentifier",
																			"src": "1492:31:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1492:64:20"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "1482:6:20"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "1576:129:20",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "1591:16:20",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1605:2:20",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "1595:6:20",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "1621:74:20",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "1667:9:20"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "1678:6:20"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1663:3:20"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1663:22:20"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1687:7:20"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256_fromMemory",
																			"nodeType": "YulIdentifier",
																			"src": "1631:31:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1631:64:20"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nodeType": "YulIdentifier",
																			"src": "1621:6:20"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1261:9:20",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1272:7:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1284:6:20",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1292:6:20",
														"type": ""
													}
												],
												"src": "1205:507:20"
											}
										]
									},
									"contents": "{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_addresst_uint256_fromMemory(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n}\n",
									"id": 20,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"linkReferences": {},
							"object": "",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH20 0x1F98431C8AD98523631AE4A59F267346EA31F984 PUSH1 0x2 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH20 0xC36442B4A4522E871399CD717ABDD847AB11FE88 PUSH1 0x3 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP CALLVALUE DUP1 ISZERO PUSH3 0xBB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x2E78 CODESIZE SUB DUP1 PUSH3 0x2E78 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH3 0xE1 SWAP2 SWAP1 PUSH3 0x1F5 JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH7 0xFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH7 0xFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP POP PUSH3 0x23C JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x182 DUP3 PUSH3 0x155 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x194 DUP2 PUSH3 0x175 JUMP JUMPDEST DUP2 EQ PUSH3 0x1A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x1B4 DUP2 PUSH3 0x189 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x1CF DUP2 PUSH3 0x1BA JUMP JUMPDEST DUP2 EQ PUSH3 0x1DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x1EF DUP2 PUSH3 0x1C4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x20F JUMPI PUSH3 0x20E PUSH3 0x150 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH3 0x21F DUP6 DUP3 DUP7 ADD PUSH3 0x1A3 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH3 0x232 DUP6 DUP3 DUP7 ADD PUSH3 0x1DE JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x2C2C DUP1 PUSH3 0x24C PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xCF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x98C50FDD GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xC3CF1AA6 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xC3CF1AA6 EQ PUSH2 0x220 JUMPI DUP1 PUSH4 0xD91AF492 EQ PUSH2 0x23C JUMPI DUP1 PUSH4 0xDF0905C6 EQ PUSH2 0x258 JUMPI DUP1 PUSH4 0xFC993EA8 EQ PUSH2 0x288 JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0x98C50FDD EQ PUSH2 0x1A4 JUMPI DUP1 PUSH4 0xB8D7F980 EQ PUSH2 0x1D4 JUMPI DUP1 PUSH4 0xC0102DE4 EQ PUSH2 0x204 JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0xD45431D EQ PUSH2 0xD4 JUMPI DUP1 PUSH4 0x25AC3A73 EQ PUSH2 0xF0 JUMPI DUP1 PUSH4 0x2895CB7B EQ PUSH2 0x10C JUMPI DUP1 PUSH4 0x59DE2F60 EQ PUSH2 0x128 JUMPI DUP1 PUSH4 0x696D6283 EQ PUSH2 0x158 JUMPI DUP1 PUSH4 0x77BCD8A6 EQ PUSH2 0x188 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xEE PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xE9 SWAP2 SWAP1 PUSH2 0x22C4 JUMP JUMPDEST PUSH2 0x2B8 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x10A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x105 SWAP2 SWAP1 PUSH2 0x236B JUMP JUMPDEST PUSH2 0x6EA JUMP JUMPDEST STOP JUMPDEST PUSH2 0x126 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x121 SWAP2 SWAP1 PUSH2 0x236B JUMP JUMPDEST PUSH2 0x967 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x142 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x13D SWAP2 SWAP1 PUSH2 0x23CE JUMP JUMPDEST PUSH2 0xF07 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x14F SWAP2 SWAP1 PUSH2 0x2429 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x172 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x16D SWAP2 SWAP1 PUSH2 0x247F JUMP JUMPDEST PUSH2 0xF36 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x17F SWAP2 SWAP1 PUSH2 0x24E1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1A2 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x19D SWAP2 SWAP1 PUSH2 0x236B JUMP JUMPDEST PUSH2 0xFE1 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1BE PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1B9 SWAP2 SWAP1 PUSH2 0x24FC JUMP JUMPDEST PUSH2 0x13BA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1CB SWAP2 SWAP1 PUSH2 0x254B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1EE PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1E9 SWAP2 SWAP1 PUSH2 0x23CE JUMP JUMPDEST PUSH2 0x14D7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1FB SWAP2 SWAP1 PUSH2 0x2429 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x21E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x219 SWAP2 SWAP1 PUSH2 0x236B JUMP JUMPDEST PUSH2 0x1506 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x23A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x235 SWAP2 SWAP1 PUSH2 0x236B JUMP JUMPDEST PUSH2 0x17AD JUMP JUMPDEST STOP JUMPDEST PUSH2 0x256 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x251 SWAP2 SWAP1 PUSH2 0x2566 JUMP JUMPDEST PUSH2 0x17B0 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x272 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x26D SWAP2 SWAP1 PUSH2 0x23CE JUMP JUMPDEST PUSH2 0x1B79 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x27F SWAP2 SWAP1 PUSH2 0x2429 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2A2 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x29D SWAP2 SWAP1 PUSH2 0x23CE JUMP JUMPDEST PUSH2 0x1BA8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2AF SWAP2 SWAP1 PUSH2 0x2429 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP2 DUP4 PUSH2 0x2C6 SWAP2 SWAP1 PUSH2 0x25D5 JUMP JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 PUSH2 0x2E9 DUP7 DUP7 PUSH2 0x3E8 PUSH2 0xF36 JUMP JUMPDEST SWAP1 POP PUSH9 0x56BC75E2D63100000 DUP3 LT ISZERO PUSH2 0x32E JUMPI PUSH1 0x40 MLOAD PUSH32 0xE008B5F900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH2 0x100 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1 PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x7 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD TIMESTAMP PUSH7 0xFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP SWAP1 POP DUP1 PUSH1 0x4 PUSH1 0x0 DUP1 PUSH1 0x7 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0xFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH8 0xFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x9 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH7 0xFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH7 0xFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x60 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x10 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x80 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0xA0 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0xC0 DUP3 ADD MLOAD DUP2 PUSH1 0x3 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0xE0 DUP3 ADD MLOAD DUP2 PUSH1 0x4 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP SWAP1 POP POP PUSH2 0x63C CALLER ADDRESS DUP6 DUP11 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1BD7 SWAP1 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x667 DUP3 DUP5 DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1C60 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x694 ADDRESS DUP4 DUP6 DUP11 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1BD7 SWAP1 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 PUSH1 0x7 DUP2 DUP2 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND DUP1 SWAP3 SWAP2 SWAP1 PUSH2 0x6BA SWAP1 PUSH2 0x2612 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH8 0xFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE ISZERO PUSH2 0x793 JUMPI PUSH1 0x40 MLOAD PUSH32 0x4232716900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x7B3 DUP3 PUSH2 0x1DAF JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x800 JUMPI PUSH1 0x40 MLOAD PUSH32 0xD7C498BF00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x4 PUSH1 0x0 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x10 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH2 0x8AC CALLER ADDRESS DUP4 PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1BD7 SWAP1 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0x5 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x3 PUSH1 0x4 PUSH1 0x0 DUP5 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0xFF AND MUL OR SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x972 DUP3 PUSH2 0x1E03 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x97F DUP4 PUSH2 0x1DAF JUMP JUMPDEST SWAP1 POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x9B9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 ISZERO ISZERO PUSH1 0x5 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP6 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO EQ PUSH2 0xA31 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 ISZERO ISZERO PUSH1 0x8 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP6 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO EQ PUSH2 0xAA9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xAE1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x4 PUSH1 0x0 DUP6 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 PUSH2 0xBC8 PUSH1 0x4 PUSH1 0x0 DUP8 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x4 PUSH1 0x0 DUP9 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x10 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x13BA JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xBD5 DUP3 PUSH2 0x1E57 JUMP JUMPDEST SWAP1 POP PUSH2 0xC02 ADDRESS DUP3 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1EFE SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0xC38 DUP6 DUP3 DUP5 PUSH2 0xC12 SWAP2 SWAP1 PUSH2 0x2642 JUMP JUMPDEST DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1EFE SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0x8 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP9 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x4 PUSH1 0x0 DUP9 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND SUB PUSH2 0xEBB JUMPI PUSH1 0x0 ISZERO ISZERO PUSH1 0x9 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP9 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO EQ PUSH2 0xD65 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x4 PUSH1 0x0 DUP9 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x10 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x4 PUSH1 0x0 DUP10 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xDFF SWAP2 SWAP1 PUSH2 0x25D5 JUMP JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH2 0xE46 PUSH2 0xE1F DUP9 PUSH2 0x1E03 JUMP JUMPDEST DUP3 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1EFE SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0x9 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP10 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP POP JUMPDEST PUSH1 0x5 PUSH1 0x4 PUSH1 0x0 DUP9 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0xFF AND MUL OR SWAP1 SSTORE POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x6 PUSH1 0x20 MSTORE DUP2 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP2 POP SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x1698EE82 DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF97 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2685 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xFB4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xFD8 SWAP2 SWAP1 PUSH2 0x26D1 JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFEC DUP3 PUSH2 0x1DAF JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1026 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x5 PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1097 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 ISZERO ISZERO PUSH1 0x7 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO EQ PUSH2 0x110F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x4 PUSH1 0x0 DUP5 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 PUSH1 0x4 PUSH1 0x0 DUP6 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x10 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x4 PUSH1 0x0 DUP7 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x11F8 SWAP2 SWAP1 PUSH2 0x25D5 JUMP JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 PUSH2 0x12A4 PUSH1 0x4 PUSH1 0x0 DUP8 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x4 PUSH1 0x0 DUP9 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x10 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x13BA JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x12B1 DUP4 PUSH2 0x1E57 JUMP JUMPDEST SWAP1 POP PUSH2 0x12DE ADDRESS DUP3 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1EFE SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x1314 DUP6 DUP3 DUP6 PUSH2 0x12EE SWAP2 SWAP1 PUSH2 0x2642 JUMP JUMPDEST DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1EFE SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x133F DUP6 DUP4 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1EFE SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0x7 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP9 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 PUSH2 0x13C9 SWAP2 SWAP1 PUSH2 0x25D5 JUMP JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH9 0x56BC75E2D63100000 DUP2 LT ISZERO DUP1 ISZERO PUSH2 0x13FE JUMPI POP PUSH9 0x3635C9ADC5DEA00000 DUP2 LT JUMPDEST ISZERO PUSH2 0x1424 JUMPI PUSH1 0x64 PUSH1 0x32 DUP3 PUSH2 0x1412 SWAP2 SWAP1 PUSH2 0x26FE JUMP JUMPDEST PUSH2 0x141C SWAP2 SWAP1 PUSH2 0x276F JUMP JUMPDEST SWAP2 POP POP PUSH2 0x14D1 JUMP JUMPDEST PUSH9 0x3635C9ADC5DEA00000 DUP2 LT ISZERO DUP1 ISZERO PUSH2 0x1446 JUMPI POP PUSH10 0x21E19E0C9BAB2400000 DUP2 LT JUMPDEST ISZERO PUSH2 0x146C JUMPI PUSH1 0x64 PUSH1 0x28 DUP3 PUSH2 0x145A SWAP2 SWAP1 PUSH2 0x26FE JUMP JUMPDEST PUSH2 0x1464 SWAP2 SWAP1 PUSH2 0x276F JUMP JUMPDEST SWAP2 POP POP PUSH2 0x14D1 JUMP JUMPDEST PUSH10 0x21E19E0C9BAB2400000 DUP2 GT ISZERO PUSH2 0x149F JUMPI PUSH1 0x64 PUSH1 0x19 DUP3 PUSH2 0x148D SWAP2 SWAP1 PUSH2 0x26FE JUMP JUMPDEST PUSH2 0x1497 SWAP2 SWAP1 PUSH2 0x276F JUMP JUMPDEST SWAP2 POP POP PUSH2 0x14D1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xE008B5F900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x8 PUSH1 0x20 MSTORE DUP2 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP2 POP SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1511 DUP3 PUSH2 0x1E03 JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1578 JUMPI PUSH1 0x40 MLOAD PUSH32 0x472E017E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x4 PUSH1 0x0 DUP5 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND EQ PUSH2 0x15EC JUMPI PUSH1 0x40 MLOAD PUSH32 0xDE4461CD00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x4 PUSH1 0x0 DUP5 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x10 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 PUSH1 0x4 PUSH1 0x0 DUP6 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 PUSH2 0x16AA DUP3 DUP5 PUSH2 0x1693 SWAP2 SWAP1 PUSH2 0x25D5 JUMP JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1E57 JUMP JUMPDEST SWAP1 POP PUSH2 0x16F9 ADDRESS DUP3 PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1EFE SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x1763 DUP5 DUP3 DUP6 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x171B SWAP2 SWAP1 PUSH2 0x2642 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1EFE SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x4 DUP1 PUSH1 0x0 DUP8 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0xFF AND MUL OR SWAP1 SSTORE POP POP POP POP POP POP JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 PUSH1 0x0 DUP5 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH2 0x100 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP3 ADD PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP3 ADD PUSH1 0x9 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH7 0xFFFFFFFFFFFFFF AND PUSH7 0xFFFFFFFFFFFFFF AND PUSH7 0xFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP3 ADD PUSH1 0x10 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x4 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP POP SWAP1 POP PUSH1 0x1 DUP2 PUSH1 0x0 ADD MLOAD PUSH1 0xFF AND EQ PUSH2 0x1A0F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP2 PUSH1 0xA0 ADD MLOAD SWAP1 POP PUSH1 0x0 PUSH2 0x1A27 DUP3 DUP6 PUSH2 0x3E8 PUSH2 0xF36 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1A3D DUP5 PUSH1 0x80 ADD MLOAD DUP6 PUSH1 0x60 ADD MLOAD PUSH2 0x13BA JUMP JUMPDEST SWAP1 POP PUSH2 0x1A6C CALLER ADDRESS DUP4 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1BD7 SWAP1 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x1A97 DUP3 DUP3 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1C60 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x1AC4 ADDRESS DUP4 DUP4 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1BD7 SWAP1 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST CALLER PUSH1 0x4 PUSH1 0x0 DUP9 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x4 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x2 PUSH1 0x4 PUSH1 0x0 DUP9 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0xFF AND MUL OR SWAP1 SSTORE POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x7 PUSH1 0x20 MSTORE DUP2 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP2 POP SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x9 PUSH1 0x20 MSTORE DUP2 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP2 POP SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x1C5A DUP5 PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1BF8 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x27A0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0x1F84 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 EQ DUP1 PUSH2 0x1CEA JUMPI POP PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xDD62ED3E ADDRESS DUP6 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1CA7 SWAP3 SWAP2 SWAP1 PUSH2 0x27D7 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1CC4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1CE8 SWAP2 SWAP1 PUSH2 0x2815 JUMP JUMPDEST EQ JUMPDEST PUSH2 0x1D29 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1D20 SWAP1 PUSH2 0x28C5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1DAA DUP4 PUSH4 0x95EA7B3 PUSH1 0xE0 SHL DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1D48 SWAP3 SWAP2 SWAP1 PUSH2 0x28E5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0x1F84 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 PUSH1 0x0 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x4 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 PUSH1 0x0 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH9 0x56BC75E2D63100000 DUP3 LT ISZERO DUP1 ISZERO PUSH2 0x1E7A JUMPI POP PUSH9 0x3635C9ADC5DEA00000 DUP3 LT JUMPDEST ISZERO PUSH2 0x1E93 JUMPI PUSH1 0x64 DUP3 PUSH2 0x1E8C SWAP2 SWAP1 PUSH2 0x276F JUMP JUMPDEST SWAP1 POP PUSH2 0x1EF9 JUMP JUMPDEST PUSH9 0x3635C9ADC5DEA00000 DUP3 LT ISZERO DUP1 ISZERO PUSH2 0x1EB5 JUMPI POP PUSH10 0x21E19E0C9BAB2400000 DUP3 LT JUMPDEST ISZERO PUSH2 0x1ECE JUMPI PUSH1 0xC8 DUP3 PUSH2 0x1EC7 SWAP2 SWAP1 PUSH2 0x276F JUMP JUMPDEST SWAP1 POP PUSH2 0x1EF9 JUMP JUMPDEST PUSH10 0x21E19E0C9BAB2400000 DUP3 LT PUSH2 0x1EF4 JUMPI PUSH2 0x190 DUP3 PUSH2 0x1EED SWAP2 SWAP1 PUSH2 0x276F JUMP JUMPDEST SWAP1 POP PUSH2 0x1EF9 JUMP JUMPDEST PUSH1 0x0 SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1F7F DUP4 PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1F1D SWAP3 SWAP2 SWAP1 PUSH2 0x28E5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0x1F84 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1FE6 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x204C SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD EQ DUP1 PUSH2 0x2008 JUMPI POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x2007 SWAP2 SWAP1 PUSH2 0x293A JUMP JUMPDEST JUMPDEST PUSH2 0x2047 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x203E SWAP1 PUSH2 0x29D9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x205B DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x2064 JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x20A9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x20A0 SWAP1 PUSH2 0x2A6B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x20D2 SWAP2 SWAP1 PUSH2 0x2AFC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x210F JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2114 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x2125 DUP8 DUP4 DUP4 DUP8 PUSH2 0x2131 JUMP JUMPDEST SWAP3 POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x2193 JUMPI PUSH1 0x0 DUP4 MLOAD SUB PUSH2 0x218B JUMPI PUSH2 0x214B DUP6 PUSH2 0x21A6 JUMP JUMPDEST PUSH2 0x218A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2181 SWAP1 PUSH2 0x2B5F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST DUP3 SWAP1 POP PUSH2 0x219E JUMP JUMPDEST PUSH2 0x219D DUP4 DUP4 PUSH2 0x21C9 JUMP JUMPDEST JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD GT ISZERO PUSH2 0x21DC JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2210 SWAP2 SWAP1 PUSH2 0x2BD4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2249 DUP3 PUSH2 0x221E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2259 DUP2 PUSH2 0x223E JUMP JUMPDEST DUP2 EQ PUSH2 0x2264 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2276 DUP2 PUSH2 0x2250 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x22A1 DUP2 PUSH2 0x227C JUMP JUMPDEST DUP2 EQ PUSH2 0x22AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x22BE DUP2 PUSH2 0x2298 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x22DE JUMPI PUSH2 0x22DD PUSH2 0x2219 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x22EC DUP8 DUP3 DUP9 ADD PUSH2 0x2267 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x22FD DUP8 DUP3 DUP9 ADD PUSH2 0x2267 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x230E DUP8 DUP3 DUP9 ADD PUSH2 0x22AF JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 PUSH2 0x231F DUP8 DUP3 DUP9 ADD PUSH2 0x22AF JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2348 DUP2 PUSH2 0x232B JUMP JUMPDEST DUP2 EQ PUSH2 0x2353 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2365 DUP2 PUSH2 0x233F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2381 JUMPI PUSH2 0x2380 PUSH2 0x2219 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x238F DUP5 DUP3 DUP6 ADD PUSH2 0x2356 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x23AB DUP2 PUSH2 0x2398 JUMP JUMPDEST DUP2 EQ PUSH2 0x23B6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x23C8 DUP2 PUSH2 0x23A2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x23E5 JUMPI PUSH2 0x23E4 PUSH2 0x2219 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x23F3 DUP6 DUP3 DUP7 ADD PUSH2 0x2267 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x2404 DUP6 DUP3 DUP7 ADD PUSH2 0x23B9 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2423 DUP2 PUSH2 0x240E JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x243E PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x241A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0xFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x245C DUP2 PUSH2 0x2444 JUMP JUMPDEST DUP2 EQ PUSH2 0x2467 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2479 DUP2 PUSH2 0x2453 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2498 JUMPI PUSH2 0x2497 PUSH2 0x2219 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x24A6 DUP7 DUP3 DUP8 ADD PUSH2 0x2267 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x24B7 DUP7 DUP3 DUP8 ADD PUSH2 0x2267 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x24C8 DUP7 DUP3 DUP8 ADD PUSH2 0x246A JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH2 0x24DB DUP2 PUSH2 0x223E JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x24F6 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x24D2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2513 JUMPI PUSH2 0x2512 PUSH2 0x2219 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2521 DUP6 DUP3 DUP7 ADD PUSH2 0x22AF JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x2532 DUP6 DUP3 DUP7 ADD PUSH2 0x22AF JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x2545 DUP2 PUSH2 0x2398 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2560 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x253C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x257D JUMPI PUSH2 0x257C PUSH2 0x2219 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x258B DUP6 DUP3 DUP7 ADD PUSH2 0x2356 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x259C DUP6 DUP3 DUP7 ADD PUSH2 0x2267 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x25E0 DUP3 PUSH2 0x227C JUMP JUMPDEST SWAP2 POP PUSH2 0x25EB DUP4 PUSH2 0x227C JUMP JUMPDEST SWAP3 POP DUP3 DUP3 MUL PUSH2 0x25F9 DUP2 PUSH2 0x227C JUMP JUMPDEST SWAP2 POP DUP1 DUP3 EQ PUSH2 0x260B JUMPI PUSH2 0x260A PUSH2 0x25A6 JUMP JUMPDEST JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x261D DUP3 PUSH2 0x232B JUMP JUMPDEST SWAP2 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x2637 JUMPI PUSH2 0x2636 PUSH2 0x25A6 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x264D DUP3 PUSH2 0x2398 JUMP JUMPDEST SWAP2 POP PUSH2 0x2658 DUP4 PUSH2 0x2398 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0x2670 JUMPI PUSH2 0x266F PUSH2 0x25A6 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x267F DUP2 PUSH2 0x2444 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x269A PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x24D2 JUMP JUMPDEST PUSH2 0x26A7 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x24D2 JUMP JUMPDEST PUSH2 0x26B4 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x2676 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x26CB DUP2 PUSH2 0x2250 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x26E7 JUMPI PUSH2 0x26E6 PUSH2 0x2219 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x26F5 DUP5 DUP3 DUP6 ADD PUSH2 0x26BC JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2709 DUP3 PUSH2 0x2398 JUMP JUMPDEST SWAP2 POP PUSH2 0x2714 DUP4 PUSH2 0x2398 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 MUL PUSH2 0x2722 DUP2 PUSH2 0x2398 JUMP JUMPDEST SWAP2 POP DUP3 DUP3 DIV DUP5 EQ DUP4 ISZERO OR PUSH2 0x2739 JUMPI PUSH2 0x2738 PUSH2 0x25A6 JUMP JUMPDEST JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x277A DUP3 PUSH2 0x2398 JUMP JUMPDEST SWAP2 POP PUSH2 0x2785 DUP4 PUSH2 0x2398 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x2795 JUMPI PUSH2 0x2794 PUSH2 0x2740 JUMP JUMPDEST JUMPDEST DUP3 DUP3 DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x27B5 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x24D2 JUMP JUMPDEST PUSH2 0x27C2 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x24D2 JUMP JUMPDEST PUSH2 0x27CF PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x253C JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x27EC PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x24D2 JUMP JUMPDEST PUSH2 0x27F9 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x24D2 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x280F DUP2 PUSH2 0x23A2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x282B JUMPI PUSH2 0x282A PUSH2 0x2219 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2839 DUP5 DUP3 DUP6 ADD PUSH2 0x2800 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x5361666545524332303A20617070726F76652066726F6D206E6F6E2D7A65726F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x20746F206E6F6E2D7A65726F20616C6C6F77616E636500000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x28AF PUSH1 0x36 DUP4 PUSH2 0x2842 JUMP JUMPDEST SWAP2 POP PUSH2 0x28BA DUP3 PUSH2 0x2853 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x28DE DUP2 PUSH2 0x28A2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x28FA PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x24D2 JUMP JUMPDEST PUSH2 0x2907 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x253C JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x2917 DUP2 PUSH2 0x240E JUMP JUMPDEST DUP2 EQ PUSH2 0x2922 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x2934 DUP2 PUSH2 0x290E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2950 JUMPI PUSH2 0x294F PUSH2 0x2219 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x295E DUP5 DUP3 DUP6 ADD PUSH2 0x2925 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F74207375636365656400000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x29C3 PUSH1 0x2A DUP4 PUSH2 0x2842 JUMP JUMPDEST SWAP2 POP PUSH2 0x29CE DUP3 PUSH2 0x2967 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x29F2 DUP2 PUSH2 0x29B6 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x722063616C6C0000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A55 PUSH1 0x26 DUP4 PUSH2 0x2842 JUMP JUMPDEST SWAP2 POP PUSH2 0x2A60 DUP3 PUSH2 0x29F9 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2A84 DUP2 PUSH2 0x2A48 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2ABF JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x2AA4 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2AD6 DUP3 PUSH2 0x2A8B JUMP JUMPDEST PUSH2 0x2AE0 DUP2 DUP6 PUSH2 0x2A96 JUMP JUMPDEST SWAP4 POP PUSH2 0x2AF0 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x2AA1 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B08 DUP3 DUP5 PUSH2 0x2ACB JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B49 PUSH1 0x1D DUP4 PUSH2 0x2842 JUMP JUMPDEST SWAP2 POP PUSH2 0x2B54 DUP3 PUSH2 0x2B13 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2B78 DUP2 PUSH2 0x2B3C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2BA6 DUP3 PUSH2 0x2B7F JUMP JUMPDEST PUSH2 0x2BB0 DUP2 DUP6 PUSH2 0x2842 JUMP JUMPDEST SWAP4 POP PUSH2 0x2BC0 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x2AA1 JUMP JUMPDEST PUSH2 0x2BC9 DUP2 PUSH2 0x2B8A JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2BEE DUP2 DUP5 PUSH2 0x2B9B JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 JUMPDEST 0xEE XOR EXTCODECOPY LOG0 COINBASE SWAP10 SWAP3 SHL 0x22 0x22 SWAP7 SHR SWAP6 DUP1 NUMBER 0xD1 0xD TIMESTAMP 0x2C SWAP1 SHR 0xAE SWAP9 SWAP6 0xAE CODESIZE ISZERO 0xE3 0xCD PUSH2 0x3064 PUSH20 0x6F6C634300081300330000000000000000000000 ",
							"sourceMap": "419:8952:0:-:0;;;631:42;602:71;;;;;;;;;;;;;;;;;;;;723:42;680:85;;;;;;;;;;;;;;;;;;;;774:143;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;851:13;838:12;;:26;;;;;;;;;;;;;;;;;;895:13;875:12;;:34;;;;;;;;;;;;;;;;;;774:143;;419:8952;;88:117:20;197:1;194;187:12;334:126;371:7;411:42;404:5;400:54;389:65;;334:126;;;:::o;466:96::-;503:7;532:24;550:5;532:24;:::i;:::-;521:35;;466:96;;;:::o;568:122::-;641:24;659:5;641:24;:::i;:::-;634:5;631:35;621:63;;680:1;677;670:12;621:63;568:122;:::o;696:143::-;753:5;784:6;778:13;769:22;;800:33;827:5;800:33;:::i;:::-;696:143;;;;:::o;845:77::-;882:7;911:5;900:16;;845:77;;;:::o;928:122::-;1001:24;1019:5;1001:24;:::i;:::-;994:5;991:35;981:63;;1040:1;1037;1030:12;981:63;928:122;:::o;1056:143::-;1113:5;1144:6;1138:13;1129:22;;1160:33;1187:5;1160:33;:::i;:::-;1056:143;;;;:::o;1205:507::-;1284:6;1292;1341:2;1329:9;1320:7;1316:23;1312:32;1309:119;;;1347:79;;:::i;:::-;1309:119;1467:1;1492:64;1548:7;1539:6;1528:9;1524:22;1492:64;:::i;:::-;1482:74;;1438:128;1605:2;1631:64;1687:7;1678:6;1667:9;1663:22;1631:64;:::i;:::-;1621:74;;1576:129;1205:507;;;;;:::o;419:8952:0:-;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@Sale_273": {
									"entryPoint": 6064,
									"id": 273,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_callOptionalReturn_2316": {
									"entryPoint": 8068,
									"id": 2316,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_revert_1885": {
									"entryPoint": 8649,
									"id": 1885,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@buy_181": {
									"entryPoint": 696,
									"id": 181,
									"parameterSlots": 4,
									"returnSlots": 0
								},
								"@buyerWithdrawAirdorp_422": {
									"entryPoint": 5382,
									"id": 422,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@buyerWithdrawRefund_704": {
									"entryPoint": 2407,
									"id": 704,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@fee_2413": {
									"entryPoint": 7767,
									"id": 2413,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@functionCallWithValue_1710": {
									"entryPoint": 8292,
									"id": 1710,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"@functionCall_1646": {
									"entryPoint": 8268,
									"id": 1646,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@getBuyer_748": {
									"entryPoint": 7683,
									"id": 748,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@getPenal_825": {
									"entryPoint": 5050,
									"id": 825,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@getPoolAddress_735": {
									"entryPoint": 3894,
									"id": 735,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@getSolder_761": {
									"entryPoint": 7599,
									"id": 761,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@injectFutureToken_339": {
									"entryPoint": 1770,
									"id": 339,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@isContract_1574": {
									"entryPoint": 8614,
									"id": 1574,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@profileEarn_710": {
									"entryPoint": 6061,
									"id": 710,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@safeApprove_2093": {
									"entryPoint": 7264,
									"id": 2093,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@safeTransferFrom_2049": {
									"entryPoint": 7127,
									"id": 2049,
									"parameterSlots": 4,
									"returnSlots": 0
								},
								"@safeTransfer_2022": {
									"entryPoint": 7934,
									"id": 2022,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@solderWithdrawStable_537": {
									"entryPoint": 4065,
									"id": 537,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@userIfWithdraw1_65": {
									"entryPoint": 3847,
									"id": 65,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@userIfWithdraw2_71": {
									"entryPoint": 7033,
									"id": 71,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@userIfWithdraw3_77": {
									"entryPoint": 5335,
									"id": 77,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@userIfWithdraw4_83": {
									"entryPoint": 7080,
									"id": 83,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@verifyCallResultFromTarget_1841": {
									"entryPoint": 8497,
									"id": 1841,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"abi_decode_t_address": {
									"entryPoint": 8807,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_address_fromMemory": {
									"entryPoint": 9916,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_bool_fromMemory": {
									"entryPoint": 10533,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_uint128": {
									"entryPoint": 8879,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_uint24": {
									"entryPoint": 9322,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_uint256": {
									"entryPoint": 9145,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_uint256_fromMemory": {
									"entryPoint": 10240,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_uint64": {
									"entryPoint": 9046,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address_fromMemory": {
									"entryPoint": 9937,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_addresst_addresst_uint128t_uint128": {
									"entryPoint": 8900,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 4
								},
								"abi_decode_tuple_t_addresst_addresst_uint24": {
									"entryPoint": 9343,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 3
								},
								"abi_decode_tuple_t_addresst_uint256": {
									"entryPoint": 9166,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_bool_fromMemory": {
									"entryPoint": 10554,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_uint128t_uint128": {
									"entryPoint": 9468,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_uint256_fromMemory": {
									"entryPoint": 10261,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_uint64": {
									"entryPoint": 9067,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_uint64t_address": {
									"entryPoint": 9574,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_encode_t_address_to_t_address_fromStack": {
									"entryPoint": 9426,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_bool_to_t_bool_fromStack": {
									"entryPoint": 9242,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack": {
									"entryPoint": 10955,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 11163,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 10824,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 11068,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 10678,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 10402,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_uint24_to_t_uint24_fromStack": {
									"entryPoint": 9846,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_uint256_to_t_uint256_fromStack": {
									"entryPoint": 9532,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed": {
									"entryPoint": 11004,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
									"entryPoint": 9441,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed": {
									"entryPoint": 10199,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_address_t_uint24__to_t_address_t_address_t_uint24__fromStack_reversed": {
									"entryPoint": 9861,
									"id": null,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed": {
									"entryPoint": 10144,
									"id": null,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed": {
									"entryPoint": 10469,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
									"entryPoint": 9257,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 11220,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 10859,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 11103,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 10713,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 10437,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": 9547,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"allocate_unbounded": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"array_length_t_bytes_memory_ptr": {
									"entryPoint": 10891,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_length_t_string_memory_ptr": {
									"entryPoint": 11135,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack": {
									"entryPoint": 10902,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"array_storeLengthForEncoding_t_string_memory_ptr_fromStack": {
									"entryPoint": 10306,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_div_t_uint256": {
									"entryPoint": 10095,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_mul_t_uint128": {
									"entryPoint": 9685,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_mul_t_uint256": {
									"entryPoint": 9982,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_sub_t_uint256": {
									"entryPoint": 9794,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"cleanup_t_address": {
									"entryPoint": 8766,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_bool": {
									"entryPoint": 9230,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint128": {
									"entryPoint": 8828,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint160": {
									"entryPoint": 8734,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint24": {
									"entryPoint": 9284,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint256": {
									"entryPoint": 9112,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint64": {
									"entryPoint": 9003,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"copy_memory_to_memory_with_cleanup": {
									"entryPoint": 10913,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"increment_t_uint64": {
									"entryPoint": 9746,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"panic_error_0x11": {
									"entryPoint": 9638,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x12": {
									"entryPoint": 10048,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
									"entryPoint": 8729,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"round_up_to_mul_of_32": {
									"entryPoint": 11146,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"store_literal_in_memory_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c": {
									"entryPoint": 10745,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad": {
									"entryPoint": 11027,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"store_literal_in_memory_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd": {
									"entryPoint": 10599,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"store_literal_in_memory_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25": {
									"entryPoint": 10323,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_address": {
									"entryPoint": 8784,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_bool": {
									"entryPoint": 10510,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_uint128": {
									"entryPoint": 8856,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_uint24": {
									"entryPoint": 9299,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_uint256": {
									"entryPoint": 9122,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_uint64": {
									"entryPoint": 9023,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:17953:20",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "47:35:20",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "57:19:20",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "73:2:20",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "67:5:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "67:9:20"
															},
															"variableNames": [
																{
																	"name": "memPtr",
																	"nodeType": "YulIdentifier",
																	"src": "57:6:20"
																}
															]
														}
													]
												},
												"name": "allocate_unbounded",
												"nodeType": "YulFunctionDefinition",
												"returnVariables": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "40:6:20",
														"type": ""
													}
												],
												"src": "7:75:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "177:28:20",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "194:1:20",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "197:1:20",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "187:6:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "187:12:20"
															},
															"nodeType": "YulExpressionStatement",
															"src": "187:12:20"
														}
													]
												},
												"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
												"nodeType": "YulFunctionDefinition",
												"src": "88:117:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "300:28:20",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "317:1:20",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "320:1:20",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "310:6:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "310:12:20"
															},
															"nodeType": "YulExpressionStatement",
															"src": "310:12:20"
														}
													]
												},
												"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
												"nodeType": "YulFunctionDefinition",
												"src": "211:117:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "379:81:20",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "389:65:20",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "404:5:20"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "411:42:20",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "400:3:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "400:54:20"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "389:7:20"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint160",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "361:5:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "371:7:20",
														"type": ""
													}
												],
												"src": "334:126:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "511:51:20",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "521:35:20",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "550:5:20"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint160",
																	"nodeType": "YulIdentifier",
																	"src": "532:17:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "532:24:20"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "521:7:20"
																}
															]
														}
													]
												},
												"name": "cleanup_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "493:5:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "503:7:20",
														"type": ""
													}
												],
												"src": "466:96:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "611:79:20",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "668:16:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "677:1:20",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "680:1:20",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "670:6:20"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "670:12:20"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "670:12:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "634:5:20"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "659:5:20"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_address",
																					"nodeType": "YulIdentifier",
																					"src": "641:17:20"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "641:24:20"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "631:2:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "631:35:20"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "624:6:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "624:43:20"
															},
															"nodeType": "YulIf",
															"src": "621:63:20"
														}
													]
												},
												"name": "validator_revert_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "604:5:20",
														"type": ""
													}
												],
												"src": "568:122:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "748:87:20",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "758:29:20",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "780:6:20"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "767:12:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "767:20:20"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "758:5:20"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "823:5:20"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "796:26:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "796:33:20"
															},
															"nodeType": "YulExpressionStatement",
															"src": "796:33:20"
														}
													]
												},
												"name": "abi_decode_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "726:6:20",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "734:3:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "742:5:20",
														"type": ""
													}
												],
												"src": "696:139:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "886:73:20",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "896:57:20",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "911:5:20"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "918:34:20",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "907:3:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "907:46:20"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "896:7:20"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint128",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "868:5:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "878:7:20",
														"type": ""
													}
												],
												"src": "841:118:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1008:79:20",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1065:16:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1074:1:20",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1077:1:20",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1067:6:20"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1067:12:20"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1067:12:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "1031:5:20"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "1056:5:20"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_uint128",
																					"nodeType": "YulIdentifier",
																					"src": "1038:17:20"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1038:24:20"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "1028:2:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1028:35:20"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "1021:6:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "1021:43:20"
															},
															"nodeType": "YulIf",
															"src": "1018:63:20"
														}
													]
												},
												"name": "validator_revert_t_uint128",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1001:5:20",
														"type": ""
													}
												],
												"src": "965:122:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1145:87:20",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1155:29:20",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "1177:6:20"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1164:12:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "1164:20:20"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "1155:5:20"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "1220:5:20"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_uint128",
																	"nodeType": "YulIdentifier",
																	"src": "1193:26:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "1193:33:20"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1193:33:20"
														}
													]
												},
												"name": "abi_decode_t_uint128",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "1123:6:20",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "1131:3:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1139:5:20",
														"type": ""
													}
												],
												"src": "1093:139:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1355:648:20",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1402:83:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "1404:77:20"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1404:79:20"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1404:79:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1376:7:20"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1385:9:20"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1372:3:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1372:23:20"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1397:3:20",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1368:3:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "1368:33:20"
															},
															"nodeType": "YulIf",
															"src": "1365:120:20"
														},
														{
															"nodeType": "YulBlock",
															"src": "1495:117:20",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "1510:15:20",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1524:1:20",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "1514:6:20",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "1539:63:20",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "1574:9:20"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "1585:6:20"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1570:3:20"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1570:22:20"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1594:7:20"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "1549:20:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1549:53:20"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "1539:6:20"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "1622:118:20",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "1637:16:20",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1651:2:20",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "1641:6:20",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "1667:63:20",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "1702:9:20"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "1713:6:20"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1698:3:20"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1698:22:20"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1722:7:20"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "1677:20:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1677:53:20"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nodeType": "YulIdentifier",
																			"src": "1667:6:20"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "1750:118:20",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "1765:16:20",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1779:2:20",
																		"type": "",
																		"value": "64"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "1769:6:20",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "1795:63:20",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "1830:9:20"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "1841:6:20"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1826:3:20"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1826:22:20"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1850:7:20"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint128",
																			"nodeType": "YulIdentifier",
																			"src": "1805:20:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1805:53:20"
																	},
																	"variableNames": [
																		{
																			"name": "value2",
																			"nodeType": "YulIdentifier",
																			"src": "1795:6:20"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "1878:118:20",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "1893:16:20",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1907:2:20",
																		"type": "",
																		"value": "96"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "1897:6:20",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "1923:63:20",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "1958:9:20"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "1969:6:20"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1954:3:20"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1954:22:20"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1978:7:20"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint128",
																			"nodeType": "YulIdentifier",
																			"src": "1933:20:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1933:53:20"
																	},
																	"variableNames": [
																		{
																			"name": "value3",
																			"nodeType": "YulIdentifier",
																			"src": "1923:6:20"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint128t_uint128",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1301:9:20",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1312:7:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1324:6:20",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1332:6:20",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "1340:6:20",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "1348:6:20",
														"type": ""
													}
												],
												"src": "1238:765:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2053:57:20",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2063:41:20",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "2078:5:20"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2085:18:20",
																		"type": "",
																		"value": "0xffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "2074:3:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "2074:30:20"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "2063:7:20"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint64",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2035:5:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "2045:7:20",
														"type": ""
													}
												],
												"src": "2009:101:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2158:78:20",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2214:16:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2223:1:20",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2226:1:20",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2216:6:20"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2216:12:20"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2216:12:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "2181:5:20"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "2205:5:20"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_uint64",
																					"nodeType": "YulIdentifier",
																					"src": "2188:16:20"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2188:23:20"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "2178:2:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2178:34:20"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "2171:6:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "2171:42:20"
															},
															"nodeType": "YulIf",
															"src": "2168:62:20"
														}
													]
												},
												"name": "validator_revert_t_uint64",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2151:5:20",
														"type": ""
													}
												],
												"src": "2116:120:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2293:86:20",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2303:29:20",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "2325:6:20"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2312:12:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "2312:20:20"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "2303:5:20"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "2367:5:20"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_uint64",
																	"nodeType": "YulIdentifier",
																	"src": "2341:25:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "2341:32:20"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2341:32:20"
														}
													]
												},
												"name": "abi_decode_t_uint64",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "2271:6:20",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "2279:3:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2287:5:20",
														"type": ""
													}
												],
												"src": "2242:137:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2450:262:20",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2496:83:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "2498:77:20"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2498:79:20"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2498:79:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2471:7:20"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2480:9:20"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2467:3:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2467:23:20"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2492:2:20",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2463:3:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "2463:32:20"
															},
															"nodeType": "YulIf",
															"src": "2460:119:20"
														},
														{
															"nodeType": "YulBlock",
															"src": "2589:116:20",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "2604:15:20",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2618:1:20",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "2608:6:20",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "2633:62:20",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "2667:9:20"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "2678:6:20"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "2663:3:20"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2663:22:20"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2687:7:20"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint64",
																			"nodeType": "YulIdentifier",
																			"src": "2643:19:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2643:52:20"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "2633:6:20"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint64",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2420:9:20",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2431:7:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2443:6:20",
														"type": ""
													}
												],
												"src": "2385:327:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2763:32:20",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2773:16:20",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "2784:5:20"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "2773:7:20"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2745:5:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "2755:7:20",
														"type": ""
													}
												],
												"src": "2718:77:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2844:79:20",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2901:16:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2910:1:20",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2913:1:20",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2903:6:20"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2903:12:20"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2903:12:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "2867:5:20"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "2892:5:20"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_uint256",
																					"nodeType": "YulIdentifier",
																					"src": "2874:17:20"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2874:24:20"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "2864:2:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2864:35:20"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "2857:6:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "2857:43:20"
															},
															"nodeType": "YulIf",
															"src": "2854:63:20"
														}
													]
												},
												"name": "validator_revert_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2837:5:20",
														"type": ""
													}
												],
												"src": "2801:122:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2981:87:20",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2991:29:20",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "3013:6:20"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "3000:12:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "3000:20:20"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "2991:5:20"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "3056:5:20"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "3029:26:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "3029:33:20"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3029:33:20"
														}
													]
												},
												"name": "abi_decode_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "2959:6:20",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "2967:3:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2975:5:20",
														"type": ""
													}
												],
												"src": "2929:139:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3157:391:20",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3203:83:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "3205:77:20"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3205:79:20"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3205:79:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3178:7:20"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3187:9:20"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "3174:3:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3174:23:20"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3199:2:20",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "3170:3:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "3170:32:20"
															},
															"nodeType": "YulIf",
															"src": "3167:119:20"
														},
														{
															"nodeType": "YulBlock",
															"src": "3296:117:20",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "3311:15:20",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3325:1:20",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "3315:6:20",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "3340:63:20",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "3375:9:20"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "3386:6:20"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "3371:3:20"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3371:22:20"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3395:7:20"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "3350:20:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3350:53:20"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "3340:6:20"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "3423:118:20",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "3438:16:20",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3452:2:20",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "3442:6:20",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "3468:63:20",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "3503:9:20"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "3514:6:20"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "3499:3:20"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3499:22:20"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3523:7:20"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "3478:20:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3478:53:20"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nodeType": "YulIdentifier",
																			"src": "3468:6:20"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3119:9:20",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "3130:7:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3142:6:20",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "3150:6:20",
														"type": ""
													}
												],
												"src": "3074:474:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3596:48:20",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3606:32:20",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "3631:5:20"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "3624:6:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3624:13:20"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "3617:6:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "3617:21:20"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "3606:7:20"
																}
															]
														}
													]
												},
												"name": "cleanup_t_bool",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3578:5:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "3588:7:20",
														"type": ""
													}
												],
												"src": "3554:90:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3709:50:20",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "3726:3:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "3746:5:20"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_bool",
																			"nodeType": "YulIdentifier",
																			"src": "3731:14:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3731:21:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3719:6:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "3719:34:20"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3719:34:20"
														}
													]
												},
												"name": "abi_encode_t_bool_to_t_bool_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3697:5:20",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "3704:3:20",
														"type": ""
													}
												],
												"src": "3650:109:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3857:118:20",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3867:26:20",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3879:9:20"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3890:2:20",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3875:3:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "3875:18:20"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3867:4:20"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "3941:6:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3954:9:20"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3965:1:20",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3950:3:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3950:17:20"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bool_to_t_bool_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "3903:37:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "3903:65:20"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3903:65:20"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3829:9:20",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3841:6:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3852:4:20",
														"type": ""
													}
												],
												"src": "3765:210:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4025:47:20",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4035:31:20",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "4050:5:20"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4057:8:20",
																		"type": "",
																		"value": "0xffffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "4046:3:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "4046:20:20"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "4035:7:20"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint24",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "4007:5:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "4017:7:20",
														"type": ""
													}
												],
												"src": "3981:91:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4120:78:20",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4176:16:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4185:1:20",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4188:1:20",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "4178:6:20"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4178:12:20"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4178:12:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "4143:5:20"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "4167:5:20"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_uint24",
																					"nodeType": "YulIdentifier",
																					"src": "4150:16:20"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4150:23:20"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "4140:2:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4140:34:20"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "4133:6:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "4133:42:20"
															},
															"nodeType": "YulIf",
															"src": "4130:62:20"
														}
													]
												},
												"name": "validator_revert_t_uint24",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "4113:5:20",
														"type": ""
													}
												],
												"src": "4078:120:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4255:86:20",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4265:29:20",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "4287:6:20"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "4274:12:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "4274:20:20"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "4265:5:20"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "4329:5:20"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_uint24",
																	"nodeType": "YulIdentifier",
																	"src": "4303:25:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "4303:32:20"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4303:32:20"
														}
													]
												},
												"name": "abi_decode_t_uint24",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "4233:6:20",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "4241:3:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "4249:5:20",
														"type": ""
													}
												],
												"src": "4204:137:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4446:518:20",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4492:83:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "4494:77:20"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4494:79:20"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4494:79:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "4467:7:20"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4476:9:20"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "4463:3:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4463:23:20"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4488:2:20",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "4459:3:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "4459:32:20"
															},
															"nodeType": "YulIf",
															"src": "4456:119:20"
														},
														{
															"nodeType": "YulBlock",
															"src": "4585:117:20",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "4600:15:20",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4614:1:20",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "4604:6:20",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "4629:63:20",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "4664:9:20"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "4675:6:20"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "4660:3:20"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4660:22:20"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "4684:7:20"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "4639:20:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4639:53:20"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "4629:6:20"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "4712:118:20",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "4727:16:20",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4741:2:20",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "4731:6:20",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "4757:63:20",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "4792:9:20"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "4803:6:20"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "4788:3:20"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4788:22:20"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "4812:7:20"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "4767:20:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4767:53:20"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nodeType": "YulIdentifier",
																			"src": "4757:6:20"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "4840:117:20",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "4855:16:20",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4869:2:20",
																		"type": "",
																		"value": "64"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "4859:6:20",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "4885:62:20",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "4919:9:20"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "4930:6:20"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "4915:3:20"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4915:22:20"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "4939:7:20"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint24",
																			"nodeType": "YulIdentifier",
																			"src": "4895:19:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4895:52:20"
																	},
																	"variableNames": [
																		{
																			"name": "value2",
																			"nodeType": "YulIdentifier",
																			"src": "4885:6:20"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint24",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4400:9:20",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "4411:7:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4423:6:20",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "4431:6:20",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "4439:6:20",
														"type": ""
													}
												],
												"src": "4347:617:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5035:53:20",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "5052:3:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "5075:5:20"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "5057:17:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5057:24:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5045:6:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "5045:37:20"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5045:37:20"
														}
													]
												},
												"name": "abi_encode_t_address_to_t_address_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "5023:5:20",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "5030:3:20",
														"type": ""
													}
												],
												"src": "4970:118:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5192:124:20",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5202:26:20",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5214:9:20"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5225:2:20",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5210:3:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "5210:18:20"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5202:4:20"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "5282:6:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5295:9:20"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5306:1:20",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5291:3:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5291:17:20"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "5238:43:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "5238:71:20"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5238:71:20"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5164:9:20",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5176:6:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5187:4:20",
														"type": ""
													}
												],
												"src": "5094:222:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5405:391:20",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5451:83:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "5453:77:20"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5453:79:20"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5453:79:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "5426:7:20"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5435:9:20"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "5422:3:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5422:23:20"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5447:2:20",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "5418:3:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "5418:32:20"
															},
															"nodeType": "YulIf",
															"src": "5415:119:20"
														},
														{
															"nodeType": "YulBlock",
															"src": "5544:117:20",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "5559:15:20",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5573:1:20",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "5563:6:20",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "5588:63:20",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "5623:9:20"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "5634:6:20"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "5619:3:20"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5619:22:20"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "5643:7:20"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint128",
																			"nodeType": "YulIdentifier",
																			"src": "5598:20:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5598:53:20"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "5588:6:20"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "5671:118:20",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "5686:16:20",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5700:2:20",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "5690:6:20",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "5716:63:20",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "5751:9:20"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "5762:6:20"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "5747:3:20"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5747:22:20"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "5771:7:20"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint128",
																			"nodeType": "YulIdentifier",
																			"src": "5726:20:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5726:53:20"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nodeType": "YulIdentifier",
																			"src": "5716:6:20"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint128t_uint128",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5367:9:20",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "5378:7:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5390:6:20",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "5398:6:20",
														"type": ""
													}
												],
												"src": "5322:474:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5867:53:20",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "5884:3:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "5907:5:20"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "5889:17:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5889:24:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5877:6:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "5877:37:20"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5877:37:20"
														}
													]
												},
												"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "5855:5:20",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "5862:3:20",
														"type": ""
													}
												],
												"src": "5802:118:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6024:124:20",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6034:26:20",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6046:9:20"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6057:2:20",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6042:3:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "6042:18:20"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6034:4:20"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "6114:6:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6127:9:20"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6138:1:20",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6123:3:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6123:17:20"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "6070:43:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "6070:71:20"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6070:71:20"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5996:9:20",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "6008:6:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6019:4:20",
														"type": ""
													}
												],
												"src": "5926:222:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6236:390:20",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "6282:83:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "6284:77:20"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6284:79:20"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "6284:79:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "6257:7:20"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6266:9:20"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "6253:3:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6253:23:20"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6278:2:20",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "6249:3:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "6249:32:20"
															},
															"nodeType": "YulIf",
															"src": "6246:119:20"
														},
														{
															"nodeType": "YulBlock",
															"src": "6375:116:20",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "6390:15:20",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6404:1:20",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "6394:6:20",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "6419:62:20",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "6453:9:20"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "6464:6:20"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "6449:3:20"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "6449:22:20"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "6473:7:20"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint64",
																			"nodeType": "YulIdentifier",
																			"src": "6429:19:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6429:52:20"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "6419:6:20"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "6501:118:20",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "6516:16:20",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6530:2:20",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "6520:6:20",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "6546:63:20",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "6581:9:20"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "6592:6:20"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "6577:3:20"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "6577:22:20"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "6601:7:20"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "6556:20:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6556:53:20"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nodeType": "YulIdentifier",
																			"src": "6546:6:20"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint64t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6198:9:20",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "6209:7:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "6221:6:20",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "6229:6:20",
														"type": ""
													}
												],
												"src": "6154:472:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6660:152:20",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6677:1:20",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6680:77:20",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6670:6:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "6670:88:20"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6670:88:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6774:1:20",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6777:4:20",
																		"type": "",
																		"value": "0x11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6767:6:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "6767:15:20"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6767:15:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6798:1:20",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6801:4:20",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "6791:6:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "6791:15:20"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6791:15:20"
														}
													]
												},
												"name": "panic_error_0x11",
												"nodeType": "YulFunctionDefinition",
												"src": "6632:180:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6866:231:20",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6876:25:20",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "6899:1:20"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint128",
																	"nodeType": "YulIdentifier",
																	"src": "6881:17:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "6881:20:20"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nodeType": "YulIdentifier",
																	"src": "6876:1:20"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6910:25:20",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "6933:1:20"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint128",
																	"nodeType": "YulIdentifier",
																	"src": "6915:17:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "6915:20:20"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nodeType": "YulIdentifier",
																	"src": "6910:1:20"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6944:28:20",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "6967:1:20"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "6970:1:20"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nodeType": "YulIdentifier",
																	"src": "6963:3:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "6963:9:20"
															},
															"variables": [
																{
																	"name": "product_raw",
																	"nodeType": "YulTypedName",
																	"src": "6948:11:20",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6981:41:20",
															"value": {
																"arguments": [
																	{
																		"name": "product_raw",
																		"nodeType": "YulIdentifier",
																		"src": "7010:11:20"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint128",
																	"nodeType": "YulIdentifier",
																	"src": "6992:17:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "6992:30:20"
															},
															"variableNames": [
																{
																	"name": "product",
																	"nodeType": "YulIdentifier",
																	"src": "6981:7:20"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "7068:22:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "7070:16:20"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7070:18:20"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "7070:18:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "product",
																				"nodeType": "YulIdentifier",
																				"src": "7045:7:20"
																			},
																			{
																				"name": "product_raw",
																				"nodeType": "YulIdentifier",
																				"src": "7054:11:20"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "7042:2:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7042:24:20"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "7035:6:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "7035:32:20"
															},
															"nodeType": "YulIf",
															"src": "7032:58:20"
														}
													]
												},
												"name": "checked_mul_t_uint128",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "6849:1:20",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "6852:1:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "product",
														"nodeType": "YulTypedName",
														"src": "6858:7:20",
														"type": ""
													}
												],
												"src": "6818:279:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7145:141:20",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7155:32:20",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "7181:5:20"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint64",
																	"nodeType": "YulIdentifier",
																	"src": "7164:16:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "7164:23:20"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "7155:5:20"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "7229:22:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "7231:16:20"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7231:18:20"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "7231:18:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "7202:5:20"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7209:18:20",
																		"type": "",
																		"value": "0xffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "7199:2:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "7199:29:20"
															},
															"nodeType": "YulIf",
															"src": "7196:55:20"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7260:20:20",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "7271:5:20"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7278:1:20",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7267:3:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "7267:13:20"
															},
															"variableNames": [
																{
																	"name": "ret",
																	"nodeType": "YulIdentifier",
																	"src": "7260:3:20"
																}
															]
														}
													]
												},
												"name": "increment_t_uint64",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "7131:5:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "ret",
														"nodeType": "YulTypedName",
														"src": "7141:3:20",
														"type": ""
													}
												],
												"src": "7103:183:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7337:149:20",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7347:25:20",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "7370:1:20"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "7352:17:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "7352:20:20"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nodeType": "YulIdentifier",
																	"src": "7347:1:20"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7381:25:20",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "7404:1:20"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "7386:17:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "7386:20:20"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nodeType": "YulIdentifier",
																	"src": "7381:1:20"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7415:17:20",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "7427:1:20"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "7430:1:20"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "7423:3:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "7423:9:20"
															},
															"variableNames": [
																{
																	"name": "diff",
																	"nodeType": "YulIdentifier",
																	"src": "7415:4:20"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "7457:22:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "7459:16:20"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7459:18:20"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "7459:18:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "diff",
																		"nodeType": "YulIdentifier",
																		"src": "7448:4:20"
																	},
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "7454:1:20"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "7445:2:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "7445:11:20"
															},
															"nodeType": "YulIf",
															"src": "7442:37:20"
														}
													]
												},
												"name": "checked_sub_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "7323:1:20",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "7326:1:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "diff",
														"nodeType": "YulTypedName",
														"src": "7332:4:20",
														"type": ""
													}
												],
												"src": "7292:194:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7555:52:20",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "7572:3:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "7594:5:20"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_uint24",
																			"nodeType": "YulIdentifier",
																			"src": "7577:16:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7577:23:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7565:6:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "7565:36:20"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7565:36:20"
														}
													]
												},
												"name": "abi_encode_t_uint24_to_t_uint24_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "7543:5:20",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "7550:3:20",
														"type": ""
													}
												],
												"src": "7492:115:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7765:286:20",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7775:26:20",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7787:9:20"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7798:2:20",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7783:3:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "7783:18:20"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7775:4:20"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "7855:6:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7868:9:20"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7879:1:20",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7864:3:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7864:17:20"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "7811:43:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "7811:71:20"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7811:71:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "7936:6:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7949:9:20"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7960:2:20",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7945:3:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7945:18:20"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "7892:43:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "7892:72:20"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7892:72:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "8016:6:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8029:9:20"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8040:2:20",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8025:3:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8025:18:20"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint24_to_t_uint24_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "7974:41:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "7974:70:20"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7974:70:20"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_address_t_uint24__to_t_address_t_address_t_uint24__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7721:9:20",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "7733:6:20",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "7741:6:20",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "7749:6:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "7760:4:20",
														"type": ""
													}
												],
												"src": "7613:438:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8120:80:20",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "8130:22:20",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "8145:6:20"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "8139:5:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "8139:13:20"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "8130:5:20"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "8188:5:20"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "8161:26:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "8161:33:20"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8161:33:20"
														}
													]
												},
												"name": "abi_decode_t_address_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "8098:6:20",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "8106:3:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "8114:5:20",
														"type": ""
													}
												],
												"src": "8057:143:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8283:274:20",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "8329:83:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "8331:77:20"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8331:79:20"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "8331:79:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "8304:7:20"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8313:9:20"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "8300:3:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8300:23:20"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8325:2:20",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "8296:3:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "8296:32:20"
															},
															"nodeType": "YulIf",
															"src": "8293:119:20"
														},
														{
															"nodeType": "YulBlock",
															"src": "8422:128:20",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "8437:15:20",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8451:1:20",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "8441:6:20",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "8466:74:20",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "8512:9:20"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "8523:6:20"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "8508:3:20"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "8508:22:20"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "8532:7:20"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address_fromMemory",
																			"nodeType": "YulIdentifier",
																			"src": "8476:31:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8476:64:20"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "8466:6:20"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "8253:9:20",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "8264:7:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "8276:6:20",
														"type": ""
													}
												],
												"src": "8206:351:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8611:362:20",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "8621:25:20",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "8644:1:20"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "8626:17:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "8626:20:20"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nodeType": "YulIdentifier",
																	"src": "8621:1:20"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "8655:25:20",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "8678:1:20"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "8660:17:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "8660:20:20"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nodeType": "YulIdentifier",
																	"src": "8655:1:20"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "8689:28:20",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "8712:1:20"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "8715:1:20"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nodeType": "YulIdentifier",
																	"src": "8708:3:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "8708:9:20"
															},
															"variables": [
																{
																	"name": "product_raw",
																	"nodeType": "YulTypedName",
																	"src": "8693:11:20",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "8726:41:20",
															"value": {
																"arguments": [
																	{
																		"name": "product_raw",
																		"nodeType": "YulIdentifier",
																		"src": "8755:11:20"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "8737:17:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "8737:30:20"
															},
															"variableNames": [
																{
																	"name": "product",
																	"nodeType": "YulIdentifier",
																	"src": "8726:7:20"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "8944:22:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "8946:16:20"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8946:18:20"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "8946:18:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "x",
																						"nodeType": "YulIdentifier",
																						"src": "8877:1:20"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "8870:6:20"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "8870:9:20"
																			},
																			{
																				"arguments": [
																					{
																						"name": "y",
																						"nodeType": "YulIdentifier",
																						"src": "8900:1:20"
																					},
																					{
																						"arguments": [
																							{
																								"name": "product",
																								"nodeType": "YulIdentifier",
																								"src": "8907:7:20"
																							},
																							{
																								"name": "x",
																								"nodeType": "YulIdentifier",
																								"src": "8916:1:20"
																							}
																						],
																						"functionName": {
																							"name": "div",
																							"nodeType": "YulIdentifier",
																							"src": "8903:3:20"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "8903:15:20"
																					}
																				],
																				"functionName": {
																					"name": "eq",
																					"nodeType": "YulIdentifier",
																					"src": "8897:2:20"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "8897:22:20"
																			}
																		],
																		"functionName": {
																			"name": "or",
																			"nodeType": "YulIdentifier",
																			"src": "8850:2:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8850:83:20"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "8830:6:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "8830:113:20"
															},
															"nodeType": "YulIf",
															"src": "8827:139:20"
														}
													]
												},
												"name": "checked_mul_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "8594:1:20",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "8597:1:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "product",
														"nodeType": "YulTypedName",
														"src": "8603:7:20",
														"type": ""
													}
												],
												"src": "8563:410:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9007:152:20",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9024:1:20",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9027:77:20",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9017:6:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "9017:88:20"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9017:88:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9121:1:20",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9124:4:20",
																		"type": "",
																		"value": "0x12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9114:6:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "9114:15:20"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9114:15:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9145:1:20",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9148:4:20",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "9138:6:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "9138:15:20"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9138:15:20"
														}
													]
												},
												"name": "panic_error_0x12",
												"nodeType": "YulFunctionDefinition",
												"src": "8979:180:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9207:143:20",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "9217:25:20",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "9240:1:20"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "9222:17:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "9222:20:20"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nodeType": "YulIdentifier",
																	"src": "9217:1:20"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "9251:25:20",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "9274:1:20"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "9256:17:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "9256:20:20"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nodeType": "YulIdentifier",
																	"src": "9251:1:20"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "9298:22:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x12",
																				"nodeType": "YulIdentifier",
																				"src": "9300:16:20"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9300:18:20"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "9300:18:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "9295:1:20"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "9288:6:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "9288:9:20"
															},
															"nodeType": "YulIf",
															"src": "9285:35:20"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9330:14:20",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "9339:1:20"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "9342:1:20"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nodeType": "YulIdentifier",
																	"src": "9335:3:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "9335:9:20"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "9330:1:20"
																}
															]
														}
													]
												},
												"name": "checked_div_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "9196:1:20",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "9199:1:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "r",
														"nodeType": "YulTypedName",
														"src": "9205:1:20",
														"type": ""
													}
												],
												"src": "9165:185:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9510:288:20",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "9520:26:20",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9532:9:20"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9543:2:20",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9528:3:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "9528:18:20"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "9520:4:20"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "9600:6:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9613:9:20"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9624:1:20",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9609:3:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9609:17:20"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "9556:43:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "9556:71:20"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9556:71:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "9681:6:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9694:9:20"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9705:2:20",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9690:3:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9690:18:20"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "9637:43:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "9637:72:20"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9637:72:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "9763:6:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9776:9:20"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9787:2:20",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9772:3:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9772:18:20"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "9719:43:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "9719:72:20"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9719:72:20"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "9466:9:20",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "9478:6:20",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "9486:6:20",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "9494:6:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "9505:4:20",
														"type": ""
													}
												],
												"src": "9356:442:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9930:206:20",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "9940:26:20",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9952:9:20"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9963:2:20",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9948:3:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "9948:18:20"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "9940:4:20"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "10020:6:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10033:9:20"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10044:1:20",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10029:3:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10029:17:20"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "9976:43:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "9976:71:20"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9976:71:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "10101:6:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10114:9:20"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10125:2:20",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10110:3:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10110:18:20"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "10057:43:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "10057:72:20"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10057:72:20"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "9894:9:20",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "9906:6:20",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "9914:6:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "9925:4:20",
														"type": ""
													}
												],
												"src": "9804:332:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10205:80:20",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "10215:22:20",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "10230:6:20"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "10224:5:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "10224:13:20"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "10215:5:20"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "10273:5:20"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "10246:26:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "10246:33:20"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10246:33:20"
														}
													]
												},
												"name": "abi_decode_t_uint256_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "10183:6:20",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "10191:3:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "10199:5:20",
														"type": ""
													}
												],
												"src": "10142:143:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10368:274:20",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "10414:83:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "10416:77:20"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "10416:79:20"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "10416:79:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "10389:7:20"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10398:9:20"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "10385:3:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10385:23:20"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10410:2:20",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "10381:3:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "10381:32:20"
															},
															"nodeType": "YulIf",
															"src": "10378:119:20"
														},
														{
															"nodeType": "YulBlock",
															"src": "10507:128:20",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "10522:15:20",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10536:1:20",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "10526:6:20",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "10551:74:20",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "10597:9:20"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "10608:6:20"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "10593:3:20"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "10593:22:20"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "10617:7:20"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256_fromMemory",
																			"nodeType": "YulIdentifier",
																			"src": "10561:31:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10561:64:20"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "10551:6:20"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "10338:9:20",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "10349:7:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "10361:6:20",
														"type": ""
													}
												],
												"src": "10291:351:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10744:73:20",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "10761:3:20"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "10766:6:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10754:6:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "10754:19:20"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10754:19:20"
														},
														{
															"nodeType": "YulAssignment",
															"src": "10782:29:20",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "10801:3:20"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10806:4:20",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "10797:3:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "10797:14:20"
															},
															"variableNames": [
																{
																	"name": "updated_pos",
																	"nodeType": "YulIdentifier",
																	"src": "10782:11:20"
																}
															]
														}
													]
												},
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "10716:3:20",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "10721:6:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "updated_pos",
														"nodeType": "YulTypedName",
														"src": "10732:11:20",
														"type": ""
													}
												],
												"src": "10648:169:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10929:135:20",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "10951:6:20"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10959:1:20",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10947:3:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10947:14:20"
																	},
																	{
																		"hexValue": "5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "10963:34:20",
																		"type": "",
																		"value": "SafeERC20: approve from non-zero"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10940:6:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "10940:58:20"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10940:58:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "11019:6:20"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11027:2:20",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11015:3:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11015:15:20"
																	},
																	{
																		"hexValue": "20746f206e6f6e2d7a65726f20616c6c6f77616e6365",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "11032:24:20",
																		"type": "",
																		"value": " to non-zero allowance"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11008:6:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "11008:49:20"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11008:49:20"
														}
													]
												},
												"name": "store_literal_in_memory_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "10921:6:20",
														"type": ""
													}
												],
												"src": "10823:241:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11216:220:20",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "11226:74:20",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "11292:3:20"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11297:2:20",
																		"type": "",
																		"value": "54"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "11233:58:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "11233:67:20"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "11226:3:20"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "11398:3:20"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25",
																	"nodeType": "YulIdentifier",
																	"src": "11309:88:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "11309:93:20"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11309:93:20"
														},
														{
															"nodeType": "YulAssignment",
															"src": "11411:19:20",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "11422:3:20"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11427:2:20",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "11418:3:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "11418:12:20"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "11411:3:20"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "11204:3:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "11212:3:20",
														"type": ""
													}
												],
												"src": "11070:366:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11613:248:20",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "11623:26:20",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "11635:9:20"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11646:2:20",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "11631:3:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "11631:18:20"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "11623:4:20"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11670:9:20"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11681:1:20",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11666:3:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11666:17:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "11689:4:20"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11695:9:20"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "11685:3:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11685:20:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11659:6:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "11659:47:20"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11659:47:20"
														},
														{
															"nodeType": "YulAssignment",
															"src": "11715:139:20",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "11849:4:20"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "11723:124:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "11723:131:20"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "11715:4:20"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "11593:9:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "11608:4:20",
														"type": ""
													}
												],
												"src": "11442:419:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11993:206:20",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "12003:26:20",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "12015:9:20"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12026:2:20",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "12011:3:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "12011:18:20"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "12003:4:20"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "12083:6:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12096:9:20"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12107:1:20",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12092:3:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12092:17:20"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "12039:43:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "12039:71:20"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12039:71:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "12164:6:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12177:9:20"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12188:2:20",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12173:3:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12173:18:20"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "12120:43:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "12120:72:20"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12120:72:20"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "11957:9:20",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "11969:6:20",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "11977:6:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "11988:4:20",
														"type": ""
													}
												],
												"src": "11867:332:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12245:76:20",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "12299:16:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "12308:1:20",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "12311:1:20",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "12301:6:20"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "12301:12:20"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "12301:12:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "12268:5:20"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "12290:5:20"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_bool",
																					"nodeType": "YulIdentifier",
																					"src": "12275:14:20"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "12275:21:20"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "12265:2:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12265:32:20"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "12258:6:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "12258:40:20"
															},
															"nodeType": "YulIf",
															"src": "12255:60:20"
														}
													]
												},
												"name": "validator_revert_t_bool",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "12238:5:20",
														"type": ""
													}
												],
												"src": "12205:116:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12387:77:20",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "12397:22:20",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "12412:6:20"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "12406:5:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "12406:13:20"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "12397:5:20"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "12452:5:20"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_bool",
																	"nodeType": "YulIdentifier",
																	"src": "12428:23:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "12428:30:20"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12428:30:20"
														}
													]
												},
												"name": "abi_decode_t_bool_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "12365:6:20",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "12373:3:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "12381:5:20",
														"type": ""
													}
												],
												"src": "12327:137:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12544:271:20",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "12590:83:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "12592:77:20"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "12592:79:20"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "12592:79:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "12565:7:20"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12574:9:20"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "12561:3:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12561:23:20"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12586:2:20",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "12557:3:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "12557:32:20"
															},
															"nodeType": "YulIf",
															"src": "12554:119:20"
														},
														{
															"nodeType": "YulBlock",
															"src": "12683:125:20",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "12698:15:20",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12712:1:20",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "12702:6:20",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "12727:71:20",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "12770:9:20"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "12781:6:20"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "12766:3:20"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "12766:22:20"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "12790:7:20"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_bool_fromMemory",
																			"nodeType": "YulIdentifier",
																			"src": "12737:28:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12737:61:20"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "12727:6:20"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bool_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "12514:9:20",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "12525:7:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "12537:6:20",
														"type": ""
													}
												],
												"src": "12470:345:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12927:123:20",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "12949:6:20"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12957:1:20",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12945:3:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12945:14:20"
																	},
																	{
																		"hexValue": "5361666545524332303a204552433230206f7065726174696f6e20646964206e",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "12961:34:20",
																		"type": "",
																		"value": "SafeERC20: ERC20 operation did n"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12938:6:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "12938:58:20"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12938:58:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "13017:6:20"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13025:2:20",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13013:3:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13013:15:20"
																	},
																	{
																		"hexValue": "6f742073756363656564",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "13030:12:20",
																		"type": "",
																		"value": "ot succeed"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13006:6:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "13006:37:20"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13006:37:20"
														}
													]
												},
												"name": "store_literal_in_memory_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "12919:6:20",
														"type": ""
													}
												],
												"src": "12821:229:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13202:220:20",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "13212:74:20",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "13278:3:20"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13283:2:20",
																		"type": "",
																		"value": "42"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "13219:58:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "13219:67:20"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "13212:3:20"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "13384:3:20"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd",
																	"nodeType": "YulIdentifier",
																	"src": "13295:88:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "13295:93:20"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13295:93:20"
														},
														{
															"nodeType": "YulAssignment",
															"src": "13397:19:20",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "13408:3:20"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13413:2:20",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "13404:3:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "13404:12:20"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "13397:3:20"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "13190:3:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "13198:3:20",
														"type": ""
													}
												],
												"src": "13056:366:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13599:248:20",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "13609:26:20",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "13621:9:20"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13632:2:20",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "13617:3:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "13617:18:20"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "13609:4:20"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13656:9:20"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13667:1:20",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13652:3:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13652:17:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "13675:4:20"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13681:9:20"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "13671:3:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13671:20:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13645:6:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "13645:47:20"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13645:47:20"
														},
														{
															"nodeType": "YulAssignment",
															"src": "13701:139:20",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "13835:4:20"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "13709:124:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "13709:131:20"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "13701:4:20"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "13579:9:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "13594:4:20",
														"type": ""
													}
												],
												"src": "13428:419:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13959:119:20",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "13981:6:20"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13989:1:20",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13977:3:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13977:14:20"
																	},
																	{
																		"hexValue": "416464726573733a20696e73756666696369656e742062616c616e636520666f",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "13993:34:20",
																		"type": "",
																		"value": "Address: insufficient balance fo"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13970:6:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "13970:58:20"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13970:58:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "14049:6:20"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14057:2:20",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "14045:3:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14045:15:20"
																	},
																	{
																		"hexValue": "722063616c6c",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "14062:8:20",
																		"type": "",
																		"value": "r call"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14038:6:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "14038:33:20"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14038:33:20"
														}
													]
												},
												"name": "store_literal_in_memory_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "13951:6:20",
														"type": ""
													}
												],
												"src": "13853:225:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "14230:220:20",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "14240:74:20",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "14306:3:20"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14311:2:20",
																		"type": "",
																		"value": "38"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "14247:58:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "14247:67:20"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "14240:3:20"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "14412:3:20"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																	"nodeType": "YulIdentifier",
																	"src": "14323:88:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "14323:93:20"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14323:93:20"
														},
														{
															"nodeType": "YulAssignment",
															"src": "14425:19:20",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "14436:3:20"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14441:2:20",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "14432:3:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "14432:12:20"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "14425:3:20"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "14218:3:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "14226:3:20",
														"type": ""
													}
												],
												"src": "14084:366:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "14627:248:20",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "14637:26:20",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "14649:9:20"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14660:2:20",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "14645:3:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "14645:18:20"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "14637:4:20"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "14684:9:20"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14695:1:20",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "14680:3:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14680:17:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "14703:4:20"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "14709:9:20"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "14699:3:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14699:20:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14673:6:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "14673:47:20"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14673:47:20"
														},
														{
															"nodeType": "YulAssignment",
															"src": "14729:139:20",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "14863:4:20"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "14737:124:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "14737:131:20"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "14729:4:20"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "14607:9:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "14622:4:20",
														"type": ""
													}
												],
												"src": "14456:419:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "14939:40:20",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "14950:22:20",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "14966:5:20"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "14960:5:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "14960:12:20"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "14950:6:20"
																}
															]
														}
													]
												},
												"name": "array_length_t_bytes_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "14922:5:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "14932:6:20",
														"type": ""
													}
												],
												"src": "14881:98:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "15098:34:20",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "15108:18:20",
															"value": {
																"name": "pos",
																"nodeType": "YulIdentifier",
																"src": "15123:3:20"
															},
															"variableNames": [
																{
																	"name": "updated_pos",
																	"nodeType": "YulIdentifier",
																	"src": "15108:11:20"
																}
															]
														}
													]
												},
												"name": "array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "15070:3:20",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "15075:6:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "updated_pos",
														"nodeType": "YulTypedName",
														"src": "15086:11:20",
														"type": ""
													}
												],
												"src": "14985:147:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "15200:184:20",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "15210:10:20",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "15219:1:20",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "15214:1:20",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "15279:63:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "15304:3:20"
																						},
																						{
																							"name": "i",
																							"nodeType": "YulIdentifier",
																							"src": "15309:1:20"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "15300:3:20"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "15300:11:20"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "src",
																									"nodeType": "YulIdentifier",
																									"src": "15323:3:20"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "15328:1:20"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "15319:3:20"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "15319:11:20"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "15313:5:20"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "15313:18:20"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "15293:6:20"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "15293:39:20"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "15293:39:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "15240:1:20"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "15243:6:20"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "15237:2:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "15237:13:20"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "15251:19:20",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "15253:15:20",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "15262:1:20"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "15265:2:20",
																					"type": "",
																					"value": "32"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "15258:3:20"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "15258:10:20"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "15253:1:20"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "15233:3:20",
																"statements": []
															},
															"src": "15229:113:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dst",
																				"nodeType": "YulIdentifier",
																				"src": "15362:3:20"
																			},
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "15367:6:20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "15358:3:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "15358:16:20"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15376:1:20",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "15351:6:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "15351:27:20"
															},
															"nodeType": "YulExpressionStatement",
															"src": "15351:27:20"
														}
													]
												},
												"name": "copy_memory_to_memory_with_cleanup",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "15182:3:20",
														"type": ""
													},
													{
														"name": "dst",
														"nodeType": "YulTypedName",
														"src": "15187:3:20",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "15192:6:20",
														"type": ""
													}
												],
												"src": "15138:246:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "15498:278:20",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "15508:52:20",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "15554:5:20"
																	}
																],
																"functionName": {
																	"name": "array_length_t_bytes_memory_ptr",
																	"nodeType": "YulIdentifier",
																	"src": "15522:31:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "15522:38:20"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "15512:6:20",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "15569:95:20",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "15652:3:20"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "15657:6:20"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "15576:75:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "15576:88:20"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "15569:3:20"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "15712:5:20"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "15719:4:20",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "15708:3:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "15708:16:20"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "15726:3:20"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "15731:6:20"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory_with_cleanup",
																	"nodeType": "YulIdentifier",
																	"src": "15673:34:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "15673:65:20"
															},
															"nodeType": "YulExpressionStatement",
															"src": "15673:65:20"
														},
														{
															"nodeType": "YulAssignment",
															"src": "15747:23:20",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "15758:3:20"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "15763:6:20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "15754:3:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "15754:16:20"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "15747:3:20"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "15479:5:20",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "15486:3:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "15494:3:20",
														"type": ""
													}
												],
												"src": "15390:386:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "15916:137:20",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "15927:100:20",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "16014:6:20"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "16023:3:20"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "15934:79:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "15934:93:20"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "15927:3:20"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "16037:10:20",
															"value": {
																"name": "pos",
																"nodeType": "YulIdentifier",
																"src": "16044:3:20"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "16037:3:20"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "15895:3:20",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "15901:6:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "15912:3:20",
														"type": ""
													}
												],
												"src": "15782:271:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "16165:73:20",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "16187:6:20"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "16195:1:20",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "16183:3:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "16183:14:20"
																	},
																	{
																		"hexValue": "416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "16199:31:20",
																		"type": "",
																		"value": "Address: call to non-contract"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "16176:6:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "16176:55:20"
															},
															"nodeType": "YulExpressionStatement",
															"src": "16176:55:20"
														}
													]
												},
												"name": "store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "16157:6:20",
														"type": ""
													}
												],
												"src": "16059:179:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "16390:220:20",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "16400:74:20",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "16466:3:20"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "16471:2:20",
																		"type": "",
																		"value": "29"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "16407:58:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "16407:67:20"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "16400:3:20"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "16572:3:20"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																	"nodeType": "YulIdentifier",
																	"src": "16483:88:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "16483:93:20"
															},
															"nodeType": "YulExpressionStatement",
															"src": "16483:93:20"
														},
														{
															"nodeType": "YulAssignment",
															"src": "16585:19:20",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "16596:3:20"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "16601:2:20",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "16592:3:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "16592:12:20"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "16585:3:20"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "16378:3:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "16386:3:20",
														"type": ""
													}
												],
												"src": "16244:366:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "16787:248:20",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "16797:26:20",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "16809:9:20"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "16820:2:20",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "16805:3:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "16805:18:20"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "16797:4:20"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "16844:9:20"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "16855:1:20",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "16840:3:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "16840:17:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "16863:4:20"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "16869:9:20"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "16859:3:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "16859:20:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "16833:6:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "16833:47:20"
															},
															"nodeType": "YulExpressionStatement",
															"src": "16833:47:20"
														},
														{
															"nodeType": "YulAssignment",
															"src": "16889:139:20",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "17023:4:20"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "16897:124:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "16897:131:20"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "16889:4:20"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "16767:9:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "16782:4:20",
														"type": ""
													}
												],
												"src": "16616:419:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "17100:40:20",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "17111:22:20",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "17127:5:20"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "17121:5:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "17121:12:20"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "17111:6:20"
																}
															]
														}
													]
												},
												"name": "array_length_t_string_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "17083:5:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "17093:6:20",
														"type": ""
													}
												],
												"src": "17041:99:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "17194:54:20",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "17204:38:20",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "17222:5:20"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "17229:2:20",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "17218:3:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "17218:14:20"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "17238:2:20",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "17234:3:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "17234:7:20"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "17214:3:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "17214:28:20"
															},
															"variableNames": [
																{
																	"name": "result",
																	"nodeType": "YulIdentifier",
																	"src": "17204:6:20"
																}
															]
														}
													]
												},
												"name": "round_up_to_mul_of_32",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "17177:5:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "result",
														"nodeType": "YulTypedName",
														"src": "17187:6:20",
														"type": ""
													}
												],
												"src": "17146:102:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "17346:285:20",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "17356:53:20",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "17403:5:20"
																	}
																],
																"functionName": {
																	"name": "array_length_t_string_memory_ptr",
																	"nodeType": "YulIdentifier",
																	"src": "17370:32:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "17370:39:20"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "17360:6:20",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "17418:78:20",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "17484:3:20"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "17489:6:20"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "17425:58:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "17425:71:20"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "17418:3:20"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "17544:5:20"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "17551:4:20",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "17540:3:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "17540:16:20"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "17558:3:20"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "17563:6:20"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory_with_cleanup",
																	"nodeType": "YulIdentifier",
																	"src": "17505:34:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "17505:65:20"
															},
															"nodeType": "YulExpressionStatement",
															"src": "17505:65:20"
														},
														{
															"nodeType": "YulAssignment",
															"src": "17579:46:20",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "17590:3:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "17617:6:20"
																			}
																		],
																		"functionName": {
																			"name": "round_up_to_mul_of_32",
																			"nodeType": "YulIdentifier",
																			"src": "17595:21:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "17595:29:20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "17586:3:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "17586:39:20"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "17579:3:20"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "17327:5:20",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "17334:3:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "17342:3:20",
														"type": ""
													}
												],
												"src": "17254:377:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "17755:195:20",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "17765:26:20",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "17777:9:20"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "17788:2:20",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "17773:3:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "17773:18:20"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "17765:4:20"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "17812:9:20"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "17823:1:20",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "17808:3:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "17808:17:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "17831:4:20"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "17837:9:20"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "17827:3:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "17827:20:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "17801:6:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "17801:47:20"
															},
															"nodeType": "YulExpressionStatement",
															"src": "17801:47:20"
														},
														{
															"nodeType": "YulAssignment",
															"src": "17857:86:20",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "17929:6:20"
																	},
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "17938:4:20"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "17865:63:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "17865:78:20"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "17857:4:20"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "17727:9:20",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "17739:6:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "17750:4:20",
														"type": ""
													}
												],
												"src": "17637:313:20"
											}
										]
									},
									"contents": "{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function cleanup_t_uint128(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffff)\n    }\n\n    function validator_revert_t_uint128(value) {\n        if iszero(eq(value, cleanup_t_uint128(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint128(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint128(value)\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint128t_uint128(headStart, dataEnd) -> value0, value1, value2, value3 {\n        if slt(sub(dataEnd, headStart), 128) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint128(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 96\n\n            value3 := abi_decode_t_uint128(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_uint64(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffff)\n    }\n\n    function validator_revert_t_uint64(value) {\n        if iszero(eq(value, cleanup_t_uint64(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint64(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint64(value)\n    }\n\n    function abi_decode_tuple_t_uint64(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint64(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function cleanup_t_uint24(value) -> cleaned {\n        cleaned := and(value, 0xffffff)\n    }\n\n    function validator_revert_t_uint24(value) {\n        if iszero(eq(value, cleanup_t_uint24(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint24(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint24(value)\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint24(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint24(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_uint128t_uint128(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint128(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint128(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_uint64t_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint64(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function checked_mul_t_uint128(x, y) -> product {\n        x := cleanup_t_uint128(x)\n        y := cleanup_t_uint128(y)\n        let product_raw := mul(x, y)\n        product := cleanup_t_uint128(product_raw)\n\n        if iszero(eq(product, product_raw)) { panic_error_0x11() }\n\n    }\n\n    function increment_t_uint64(value) -> ret {\n        value := cleanup_t_uint64(value)\n        if eq(value, 0xffffffffffffffff) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n\n    function checked_sub_t_uint256(x, y) -> diff {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        diff := sub(x, y)\n\n        if gt(diff, x) { panic_error_0x11() }\n\n    }\n\n    function abi_encode_t_uint24_to_t_uint24_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint24(value))\n    }\n\n    function abi_encode_tuple_t_address_t_address_t_uint24__to_t_address_t_address_t_uint24__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint24_to_t_uint24_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function abi_decode_t_address_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function checked_mul_t_uint256(x, y) -> product {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        let product_raw := mul(x, y)\n        product := cleanup_t_uint256(product_raw)\n\n        // overflow, if x != 0 and y != product/x\n        if iszero(\n            or(\n                iszero(x),\n                eq(y, div(product, x))\n            )\n        ) { panic_error_0x11() }\n\n    }\n\n    function panic_error_0x12() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n\n    function checked_div_t_uint256(x, y) -> r {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        if iszero(y) { panic_error_0x12() }\n\n        r := div(x, y)\n    }\n\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function abi_decode_t_uint256_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function store_literal_in_memory_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25(memPtr) {\n\n        mstore(add(memPtr, 0), \"SafeERC20: approve from non-zero\")\n\n        mstore(add(memPtr, 32), \" to non-zero allowance\")\n\n    }\n\n    function abi_encode_t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 54)\n        store_literal_in_memory_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function validator_revert_t_bool(value) {\n        if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bool_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bool_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function store_literal_in_memory_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd(memPtr) {\n\n        mstore(add(memPtr, 0), \"SafeERC20: ERC20 operation did n\")\n\n        mstore(add(memPtr, 32), \"ot succeed\")\n\n    }\n\n    function abi_encode_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 42)\n        store_literal_in_memory_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c(memPtr) {\n\n        mstore(add(memPtr, 0), \"Address: insufficient balance fo\")\n\n        mstore(add(memPtr, 32), \"r call\")\n\n    }\n\n    function abi_encode_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 38)\n        store_literal_in_memory_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function array_length_t_bytes_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {\n        let length := array_length_t_bytes_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, length)\n    }\n\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value0) -> end {\n\n        pos := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        end := pos\n    }\n\n    function store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad(memPtr) {\n\n        mstore(add(memPtr, 0), \"Address: call to non-contract\")\n\n    }\n\n    function abi_encode_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 29)\n        store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n}\n",
									"id": 20,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50600436106100cf5760003560e01c806398c50fdd1161008c578063c3cf1aa611610066578063c3cf1aa614610220578063d91af4921461023c578063df0905c614610258578063fc993ea814610288576100cf565b806398c50fdd146101a4578063b8d7f980146101d4578063c0102de414610204576100cf565b80630d45431d146100d457806325ac3a73146100f05780632895cb7b1461010c57806359de2f6014610128578063696d62831461015857806377bcd8a614610188575b600080fd5b6100ee60048036038101906100e991906122c4565b6102b8565b005b61010a6004803603810190610105919061236b565b6106ea565b005b6101266004803603810190610121919061236b565b610967565b005b610142600480360381019061013d91906123ce565b610f07565b60405161014f9190612429565b60405180910390f35b610172600480360381019061016d919061247f565b610f36565b60405161017f91906124e1565b60405180910390f35b6101a2600480360381019061019d919061236b565b610fe1565b005b6101be60048036038101906101b991906124fc565b6113ba565b6040516101cb919061254b565b60405180910390f35b6101ee60048036038101906101e991906123ce565b6114d7565b6040516101fb9190612429565b60405180910390f35b61021e6004803603810190610219919061236b565b611506565b005b61023a6004803603810190610235919061236b565b6117ad565b005b61025660048036038101906102519190612566565b6117b0565b005b610272600480360381019061026d91906123ce565b611b79565b60405161027f9190612429565b60405180910390f35b6102a2600480360381019061029d91906123ce565b611ba8565b6040516102af9190612429565b60405180910390f35b600081836102c691906125d5565b6fffffffffffffffffffffffffffffffff16905060006102e986866103e8610f36565b905068056bc75e2d6310000082101561032e576040517fe008b5f900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000604051806101000160405280600160ff168152602001600060079054906101000a900467ffffffffffffffff1667ffffffffffffffff1681526020014266ffffffffffffff168152602001866fffffffffffffffffffffffffffffffff168152602001856fffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff1681526020013073ffffffffffffffffffffffffffffffffffffffff16815250905080600460008060079054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060408201518160000160096101000a81548166ffffffffffffff021916908366ffffffffffffff16021790555060608201518160000160106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060808201518160010160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060a08201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060c08201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060e08201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555090505061063c3330858a73ffffffffffffffffffffffffffffffffffffffff16611bd7909392919063ffffffff16565b61066782848973ffffffffffffffffffffffffffffffffffffffff16611c609092919063ffffffff16565b6106943083858a73ffffffffffffffffffffffffffffffffffffffff16611bd7909392919063ffffffff16565b6000600781819054906101000a900467ffffffffffffffff16809291906106ba90612612565b91906101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505050505050505050565b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008367ffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905515610793576040517f4232716900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166107b382611daf565b73ffffffffffffffffffffffffffffffffffffffff1614610800576040517fd7c498bf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600460008367ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1690506108ac333083600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611bd7909392919063ffffffff16565b6001600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008467ffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506003600460008467ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160006101000a81548160ff021916908360ff1602179055505050565b600061097282611e03565b9050600061097f83611daf565b90508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146109b957600080fd5b60001515600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008567ffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514610a3157600080fd5b60001515600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008567ffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514610aa957600080fd5b8173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610ae157600080fd5b6000600460008567ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000610bc8600460008767ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060010160009054906101000a90046fffffffffffffffffffffffffffffffff16600460008867ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160109054906101000a90046fffffffffffffffffffffffffffffffff166113ba565b90506000610bd582611e57565b9050610c0230828573ffffffffffffffffffffffffffffffffffffffff16611efe9092919063ffffffff16565b610c38858284610c129190612642565b8573ffffffffffffffffffffffffffffffffffffffff16611efe9092919063ffffffff16565b6001600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008867ffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506001600460008867ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff1660ff1603610ebb5760001515600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008867ffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514610d6557600080fd5b6000600460008867ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160109054906101000a90046fffffffffffffffffffffffffffffffff16600460008967ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060010160009054906101000a90046fffffffffffffffffffffffffffffffff16610dff91906125d5565b6fffffffffffffffffffffffffffffffff169050610e46610e1f88611e03565b828673ffffffffffffffffffffffffffffffffffffffff16611efe9092919063ffffffff16565b6001600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008967ffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550505b6005600460008867ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160006101000a81548160ff021916908360ff160217905550505050505050565b60066020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631698ee828585856040518463ffffffff1660e01b8152600401610f9793929190612685565b602060405180830381865afa158015610fb4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fd891906126d1565b90509392505050565b6000610fec82611daf565b90508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461102657600080fd5b600560008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008367ffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661109757600080fd5b60001515600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008467ffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151461110f57600080fd5b6000600460008467ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600460008567ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160109054906101000a90046fffffffffffffffffffffffffffffffff16600460008667ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060010160009054906101000a90046fffffffffffffffffffffffffffffffff166111f891906125d5565b6fffffffffffffffffffffffffffffffff16905060006112a4600460008767ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060010160009054906101000a90046fffffffffffffffffffffffffffffffff16600460008867ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160109054906101000a90046fffffffffffffffffffffffffffffffff166113ba565b905060006112b183611e57565b90506112de30828673ffffffffffffffffffffffffffffffffffffffff16611efe9092919063ffffffff16565b6113148582856112ee9190612642565b8673ffffffffffffffffffffffffffffffffffffffff16611efe9092919063ffffffff16565b61133f85838673ffffffffffffffffffffffffffffffffffffffff16611efe9092919063ffffffff16565b6001600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008867ffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550505050505050565b60008082846113c991906125d5565b6fffffffffffffffffffffffffffffffff16905068056bc75e2d6310000081101580156113fe5750683635c9adc5dea0000081105b1561142457606460328261141291906126fe565b61141c919061276f565b9150506114d1565b683635c9adc5dea000008110158015611446575069021e19e0c9bab240000081105b1561146c57606460288261145a91906126fe565b611464919061276f565b9150506114d1565b69021e19e0c9bab240000081111561149f57606460198261148d91906126fe565b611497919061276f565b9150506114d1565b6040517fe008b5f900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b92915050565b60086020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b600061151182611e03565b90508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611578576040517f472e017e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6003600460008467ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff1660ff16146115ec576040517fde4461cd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600460008467ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160109054906101000a90046fffffffffffffffffffffffffffffffff1690506000600460008567ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060010160009054906101000a90046fffffffffffffffffffffffffffffffff16905060006116aa828461169391906125d5565b6fffffffffffffffffffffffffffffffff16611e57565b90506116f93082600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611efe9092919063ffffffff16565b6117638482856fffffffffffffffffffffffffffffffff1661171b9190612642565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611efe9092919063ffffffff16565b60048060008767ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160006101000a81548160ff021916908360ff1602179055505050505050565b50565b6000600460008467ffffffffffffffff1667ffffffffffffffff168152602001908152602001600020604051806101000160405290816000820160009054906101000a900460ff1660ff1660ff1681526020016000820160019054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016000820160099054906101000a900466ffffffffffffff1666ffffffffffffff1666ffffffffffffff1681526020016000820160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505090506001816000015160ff1614611a0f57600080fd5b60008160a0015190506000611a2782856103e8610f36565b90506000611a3d846080015185606001516113ba565b9050611a6c3330838673ffffffffffffffffffffffffffffffffffffffff16611bd7909392919063ffffffff16565b611a9782828573ffffffffffffffffffffffffffffffffffffffff16611c609092919063ffffffff16565b611ac43083838673ffffffffffffffffffffffffffffffffffffffff16611bd7909392919063ffffffff16565b33600460008867ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506002600460008867ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160006101000a81548160ff021916908360ff160217905550505050505050565b60076020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b60096020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b611c5a846323b872dd60e01b858585604051602401611bf8939291906127a0565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611f84565b50505050565b6000811480611cea575060008373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30856040518363ffffffff1660e01b8152600401611ca79291906127d7565b602060405180830381865afa158015611cc4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ce89190612815565b145b611d29576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d20906128c5565b60405180910390fd5b611daa8363095ea7b360e01b8484604051602401611d489291906128e5565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611f84565b505050565b6000600460008367ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600460008367ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600068056bc75e2d631000008210158015611e7a5750683635c9adc5dea0000082105b15611e9357606482611e8c919061276f565b9050611ef9565b683635c9adc5dea000008210158015611eb5575069021e19e0c9bab240000082105b15611ece5760c882611ec7919061276f565b9050611ef9565b69021e19e0c9bab24000008210611ef45761019082611eed919061276f565b9050611ef9565b600090505b919050565b611f7f8363a9059cbb60e01b8484604051602401611f1d9291906128e5565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611f84565b505050565b6000611fe6826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff1661204c9092919063ffffffff16565b9050600081511480612008575080806020019051810190612007919061293a565b5b612047576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161203e906129d9565b60405180910390fd5b505050565b606061205b8484600085612064565b90509392505050565b6060824710156120a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120a090612a6b565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516120d29190612afc565b60006040518083038185875af1925050503d806000811461210f576040519150601f19603f3d011682016040523d82523d6000602084013e612114565b606091505b509150915061212587838387612131565b92505050949350505050565b6060831561219357600083510361218b5761214b856121a6565b61218a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161218190612b5f565b60405180910390fd5b5b82905061219e565b61219d83836121c9565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000825111156121dc5781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122109190612bd4565b60405180910390fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006122498261221e565b9050919050565b6122598161223e565b811461226457600080fd5b50565b60008135905061227681612250565b92915050565b60006fffffffffffffffffffffffffffffffff82169050919050565b6122a18161227c565b81146122ac57600080fd5b50565b6000813590506122be81612298565b92915050565b600080600080608085870312156122de576122dd612219565b5b60006122ec87828801612267565b94505060206122fd87828801612267565b935050604061230e878288016122af565b925050606061231f878288016122af565b91505092959194509250565b600067ffffffffffffffff82169050919050565b6123488161232b565b811461235357600080fd5b50565b6000813590506123658161233f565b92915050565b60006020828403121561238157612380612219565b5b600061238f84828501612356565b91505092915050565b6000819050919050565b6123ab81612398565b81146123b657600080fd5b50565b6000813590506123c8816123a2565b92915050565b600080604083850312156123e5576123e4612219565b5b60006123f385828601612267565b9250506020612404858286016123b9565b9150509250929050565b60008115159050919050565b6124238161240e565b82525050565b600060208201905061243e600083018461241a565b92915050565b600062ffffff82169050919050565b61245c81612444565b811461246757600080fd5b50565b60008135905061247981612453565b92915050565b60008060006060848603121561249857612497612219565b5b60006124a686828701612267565b93505060206124b786828701612267565b92505060406124c88682870161246a565b9150509250925092565b6124db8161223e565b82525050565b60006020820190506124f660008301846124d2565b92915050565b6000806040838503121561251357612512612219565b5b6000612521858286016122af565b9250506020612532858286016122af565b9150509250929050565b61254581612398565b82525050565b6000602082019050612560600083018461253c565b92915050565b6000806040838503121561257d5761257c612219565b5b600061258b85828601612356565b925050602061259c85828601612267565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006125e08261227c565b91506125eb8361227c565b92508282026125f98161227c565b915080821461260b5761260a6125a6565b5b5092915050565b600061261d8261232b565b915067ffffffffffffffff8203612637576126366125a6565b5b600182019050919050565b600061264d82612398565b915061265883612398565b92508282039050818111156126705761266f6125a6565b5b92915050565b61267f81612444565b82525050565b600060608201905061269a60008301866124d2565b6126a760208301856124d2565b6126b46040830184612676565b949350505050565b6000815190506126cb81612250565b92915050565b6000602082840312156126e7576126e6612219565b5b60006126f5848285016126bc565b91505092915050565b600061270982612398565b915061271483612398565b925082820261272281612398565b91508282048414831517612739576127386125a6565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061277a82612398565b915061278583612398565b92508261279557612794612740565b5b828204905092915050565b60006060820190506127b560008301866124d2565b6127c260208301856124d2565b6127cf604083018461253c565b949350505050565b60006040820190506127ec60008301856124d2565b6127f960208301846124d2565b9392505050565b60008151905061280f816123a2565b92915050565b60006020828403121561282b5761282a612219565b5b600061283984828501612800565b91505092915050565b600082825260208201905092915050565b7f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60008201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000602082015250565b60006128af603683612842565b91506128ba82612853565b604082019050919050565b600060208201905081810360008301526128de816128a2565b9050919050565b60006040820190506128fa60008301856124d2565b612907602083018461253c565b9392505050565b6129178161240e565b811461292257600080fd5b50565b6000815190506129348161290e565b92915050565b6000602082840312156129505761294f612219565b5b600061295e84828501612925565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b60006129c3602a83612842565b91506129ce82612967565b604082019050919050565b600060208201905081810360008301526129f2816129b6565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000612a55602683612842565b9150612a60826129f9565b604082019050919050565b60006020820190508181036000830152612a8481612a48565b9050919050565b600081519050919050565b600081905092915050565b60005b83811015612abf578082015181840152602081019050612aa4565b60008484015250505050565b6000612ad682612a8b565b612ae08185612a96565b9350612af0818560208601612aa1565b80840191505092915050565b6000612b088284612acb565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000612b49601d83612842565b9150612b5482612b13565b602082019050919050565b60006020820190508181036000830152612b7881612b3c565b9050919050565b600081519050919050565b6000601f19601f8301169050919050565b6000612ba682612b7f565b612bb08185612842565b9350612bc0818560208601612aa1565b612bc981612b8a565b840191505092915050565b60006020820190508181036000830152612bee8184612b9b565b90509291505056fea26469706673582212205bee183ca04199921b2222961c958043d10d422c901cae9895ae3815e3cd613064736f6c63430008130033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xCF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x98C50FDD GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xC3CF1AA6 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xC3CF1AA6 EQ PUSH2 0x220 JUMPI DUP1 PUSH4 0xD91AF492 EQ PUSH2 0x23C JUMPI DUP1 PUSH4 0xDF0905C6 EQ PUSH2 0x258 JUMPI DUP1 PUSH4 0xFC993EA8 EQ PUSH2 0x288 JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0x98C50FDD EQ PUSH2 0x1A4 JUMPI DUP1 PUSH4 0xB8D7F980 EQ PUSH2 0x1D4 JUMPI DUP1 PUSH4 0xC0102DE4 EQ PUSH2 0x204 JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0xD45431D EQ PUSH2 0xD4 JUMPI DUP1 PUSH4 0x25AC3A73 EQ PUSH2 0xF0 JUMPI DUP1 PUSH4 0x2895CB7B EQ PUSH2 0x10C JUMPI DUP1 PUSH4 0x59DE2F60 EQ PUSH2 0x128 JUMPI DUP1 PUSH4 0x696D6283 EQ PUSH2 0x158 JUMPI DUP1 PUSH4 0x77BCD8A6 EQ PUSH2 0x188 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xEE PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xE9 SWAP2 SWAP1 PUSH2 0x22C4 JUMP JUMPDEST PUSH2 0x2B8 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x10A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x105 SWAP2 SWAP1 PUSH2 0x236B JUMP JUMPDEST PUSH2 0x6EA JUMP JUMPDEST STOP JUMPDEST PUSH2 0x126 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x121 SWAP2 SWAP1 PUSH2 0x236B JUMP JUMPDEST PUSH2 0x967 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x142 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x13D SWAP2 SWAP1 PUSH2 0x23CE JUMP JUMPDEST PUSH2 0xF07 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x14F SWAP2 SWAP1 PUSH2 0x2429 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x172 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x16D SWAP2 SWAP1 PUSH2 0x247F JUMP JUMPDEST PUSH2 0xF36 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x17F SWAP2 SWAP1 PUSH2 0x24E1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1A2 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x19D SWAP2 SWAP1 PUSH2 0x236B JUMP JUMPDEST PUSH2 0xFE1 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1BE PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1B9 SWAP2 SWAP1 PUSH2 0x24FC JUMP JUMPDEST PUSH2 0x13BA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1CB SWAP2 SWAP1 PUSH2 0x254B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1EE PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1E9 SWAP2 SWAP1 PUSH2 0x23CE JUMP JUMPDEST PUSH2 0x14D7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1FB SWAP2 SWAP1 PUSH2 0x2429 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x21E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x219 SWAP2 SWAP1 PUSH2 0x236B JUMP JUMPDEST PUSH2 0x1506 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x23A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x235 SWAP2 SWAP1 PUSH2 0x236B JUMP JUMPDEST PUSH2 0x17AD JUMP JUMPDEST STOP JUMPDEST PUSH2 0x256 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x251 SWAP2 SWAP1 PUSH2 0x2566 JUMP JUMPDEST PUSH2 0x17B0 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x272 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x26D SWAP2 SWAP1 PUSH2 0x23CE JUMP JUMPDEST PUSH2 0x1B79 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x27F SWAP2 SWAP1 PUSH2 0x2429 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2A2 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x29D SWAP2 SWAP1 PUSH2 0x23CE JUMP JUMPDEST PUSH2 0x1BA8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2AF SWAP2 SWAP1 PUSH2 0x2429 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP2 DUP4 PUSH2 0x2C6 SWAP2 SWAP1 PUSH2 0x25D5 JUMP JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 PUSH2 0x2E9 DUP7 DUP7 PUSH2 0x3E8 PUSH2 0xF36 JUMP JUMPDEST SWAP1 POP PUSH9 0x56BC75E2D63100000 DUP3 LT ISZERO PUSH2 0x32E JUMPI PUSH1 0x40 MLOAD PUSH32 0xE008B5F900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH2 0x100 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1 PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x7 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD TIMESTAMP PUSH7 0xFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP SWAP1 POP DUP1 PUSH1 0x4 PUSH1 0x0 DUP1 PUSH1 0x7 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0xFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH8 0xFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x9 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH7 0xFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH7 0xFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x60 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x10 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x80 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0xA0 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0xC0 DUP3 ADD MLOAD DUP2 PUSH1 0x3 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0xE0 DUP3 ADD MLOAD DUP2 PUSH1 0x4 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP SWAP1 POP POP PUSH2 0x63C CALLER ADDRESS DUP6 DUP11 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1BD7 SWAP1 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x667 DUP3 DUP5 DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1C60 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x694 ADDRESS DUP4 DUP6 DUP11 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1BD7 SWAP1 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 PUSH1 0x7 DUP2 DUP2 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND DUP1 SWAP3 SWAP2 SWAP1 PUSH2 0x6BA SWAP1 PUSH2 0x2612 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH8 0xFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE ISZERO PUSH2 0x793 JUMPI PUSH1 0x40 MLOAD PUSH32 0x4232716900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x7B3 DUP3 PUSH2 0x1DAF JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x800 JUMPI PUSH1 0x40 MLOAD PUSH32 0xD7C498BF00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x4 PUSH1 0x0 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x10 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH2 0x8AC CALLER ADDRESS DUP4 PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1BD7 SWAP1 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0x5 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x3 PUSH1 0x4 PUSH1 0x0 DUP5 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0xFF AND MUL OR SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x972 DUP3 PUSH2 0x1E03 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x97F DUP4 PUSH2 0x1DAF JUMP JUMPDEST SWAP1 POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x9B9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 ISZERO ISZERO PUSH1 0x5 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP6 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO EQ PUSH2 0xA31 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 ISZERO ISZERO PUSH1 0x8 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP6 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO EQ PUSH2 0xAA9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xAE1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x4 PUSH1 0x0 DUP6 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 PUSH2 0xBC8 PUSH1 0x4 PUSH1 0x0 DUP8 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x4 PUSH1 0x0 DUP9 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x10 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x13BA JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xBD5 DUP3 PUSH2 0x1E57 JUMP JUMPDEST SWAP1 POP PUSH2 0xC02 ADDRESS DUP3 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1EFE SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0xC38 DUP6 DUP3 DUP5 PUSH2 0xC12 SWAP2 SWAP1 PUSH2 0x2642 JUMP JUMPDEST DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1EFE SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0x8 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP9 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x4 PUSH1 0x0 DUP9 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND SUB PUSH2 0xEBB JUMPI PUSH1 0x0 ISZERO ISZERO PUSH1 0x9 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP9 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO EQ PUSH2 0xD65 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x4 PUSH1 0x0 DUP9 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x10 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x4 PUSH1 0x0 DUP10 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xDFF SWAP2 SWAP1 PUSH2 0x25D5 JUMP JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH2 0xE46 PUSH2 0xE1F DUP9 PUSH2 0x1E03 JUMP JUMPDEST DUP3 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1EFE SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0x9 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP10 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP POP JUMPDEST PUSH1 0x5 PUSH1 0x4 PUSH1 0x0 DUP9 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0xFF AND MUL OR SWAP1 SSTORE POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x6 PUSH1 0x20 MSTORE DUP2 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP2 POP SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x1698EE82 DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF97 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2685 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xFB4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xFD8 SWAP2 SWAP1 PUSH2 0x26D1 JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFEC DUP3 PUSH2 0x1DAF JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1026 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x5 PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1097 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 ISZERO ISZERO PUSH1 0x7 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO EQ PUSH2 0x110F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x4 PUSH1 0x0 DUP5 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 PUSH1 0x4 PUSH1 0x0 DUP6 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x10 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x4 PUSH1 0x0 DUP7 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x11F8 SWAP2 SWAP1 PUSH2 0x25D5 JUMP JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 PUSH2 0x12A4 PUSH1 0x4 PUSH1 0x0 DUP8 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x4 PUSH1 0x0 DUP9 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x10 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x13BA JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x12B1 DUP4 PUSH2 0x1E57 JUMP JUMPDEST SWAP1 POP PUSH2 0x12DE ADDRESS DUP3 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1EFE SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x1314 DUP6 DUP3 DUP6 PUSH2 0x12EE SWAP2 SWAP1 PUSH2 0x2642 JUMP JUMPDEST DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1EFE SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x133F DUP6 DUP4 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1EFE SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0x7 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP9 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 PUSH2 0x13C9 SWAP2 SWAP1 PUSH2 0x25D5 JUMP JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH9 0x56BC75E2D63100000 DUP2 LT ISZERO DUP1 ISZERO PUSH2 0x13FE JUMPI POP PUSH9 0x3635C9ADC5DEA00000 DUP2 LT JUMPDEST ISZERO PUSH2 0x1424 JUMPI PUSH1 0x64 PUSH1 0x32 DUP3 PUSH2 0x1412 SWAP2 SWAP1 PUSH2 0x26FE JUMP JUMPDEST PUSH2 0x141C SWAP2 SWAP1 PUSH2 0x276F JUMP JUMPDEST SWAP2 POP POP PUSH2 0x14D1 JUMP JUMPDEST PUSH9 0x3635C9ADC5DEA00000 DUP2 LT ISZERO DUP1 ISZERO PUSH2 0x1446 JUMPI POP PUSH10 0x21E19E0C9BAB2400000 DUP2 LT JUMPDEST ISZERO PUSH2 0x146C JUMPI PUSH1 0x64 PUSH1 0x28 DUP3 PUSH2 0x145A SWAP2 SWAP1 PUSH2 0x26FE JUMP JUMPDEST PUSH2 0x1464 SWAP2 SWAP1 PUSH2 0x276F JUMP JUMPDEST SWAP2 POP POP PUSH2 0x14D1 JUMP JUMPDEST PUSH10 0x21E19E0C9BAB2400000 DUP2 GT ISZERO PUSH2 0x149F JUMPI PUSH1 0x64 PUSH1 0x19 DUP3 PUSH2 0x148D SWAP2 SWAP1 PUSH2 0x26FE JUMP JUMPDEST PUSH2 0x1497 SWAP2 SWAP1 PUSH2 0x276F JUMP JUMPDEST SWAP2 POP POP PUSH2 0x14D1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xE008B5F900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x8 PUSH1 0x20 MSTORE DUP2 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP2 POP SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1511 DUP3 PUSH2 0x1E03 JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1578 JUMPI PUSH1 0x40 MLOAD PUSH32 0x472E017E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x4 PUSH1 0x0 DUP5 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND EQ PUSH2 0x15EC JUMPI PUSH1 0x40 MLOAD PUSH32 0xDE4461CD00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x4 PUSH1 0x0 DUP5 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x10 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 PUSH1 0x4 PUSH1 0x0 DUP6 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 PUSH2 0x16AA DUP3 DUP5 PUSH2 0x1693 SWAP2 SWAP1 PUSH2 0x25D5 JUMP JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1E57 JUMP JUMPDEST SWAP1 POP PUSH2 0x16F9 ADDRESS DUP3 PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1EFE SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x1763 DUP5 DUP3 DUP6 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x171B SWAP2 SWAP1 PUSH2 0x2642 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1EFE SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x4 DUP1 PUSH1 0x0 DUP8 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0xFF AND MUL OR SWAP1 SSTORE POP POP POP POP POP POP JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 PUSH1 0x0 DUP5 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH2 0x100 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP3 ADD PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP3 ADD PUSH1 0x9 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH7 0xFFFFFFFFFFFFFF AND PUSH7 0xFFFFFFFFFFFFFF AND PUSH7 0xFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP3 ADD PUSH1 0x10 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x4 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP POP SWAP1 POP PUSH1 0x1 DUP2 PUSH1 0x0 ADD MLOAD PUSH1 0xFF AND EQ PUSH2 0x1A0F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP2 PUSH1 0xA0 ADD MLOAD SWAP1 POP PUSH1 0x0 PUSH2 0x1A27 DUP3 DUP6 PUSH2 0x3E8 PUSH2 0xF36 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1A3D DUP5 PUSH1 0x80 ADD MLOAD DUP6 PUSH1 0x60 ADD MLOAD PUSH2 0x13BA JUMP JUMPDEST SWAP1 POP PUSH2 0x1A6C CALLER ADDRESS DUP4 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1BD7 SWAP1 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x1A97 DUP3 DUP3 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1C60 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x1AC4 ADDRESS DUP4 DUP4 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1BD7 SWAP1 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST CALLER PUSH1 0x4 PUSH1 0x0 DUP9 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x4 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x2 PUSH1 0x4 PUSH1 0x0 DUP9 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0xFF AND MUL OR SWAP1 SSTORE POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x7 PUSH1 0x20 MSTORE DUP2 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP2 POP SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x9 PUSH1 0x20 MSTORE DUP2 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP2 POP SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x1C5A DUP5 PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1BF8 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x27A0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0x1F84 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 EQ DUP1 PUSH2 0x1CEA JUMPI POP PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xDD62ED3E ADDRESS DUP6 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1CA7 SWAP3 SWAP2 SWAP1 PUSH2 0x27D7 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1CC4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1CE8 SWAP2 SWAP1 PUSH2 0x2815 JUMP JUMPDEST EQ JUMPDEST PUSH2 0x1D29 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1D20 SWAP1 PUSH2 0x28C5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1DAA DUP4 PUSH4 0x95EA7B3 PUSH1 0xE0 SHL DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1D48 SWAP3 SWAP2 SWAP1 PUSH2 0x28E5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0x1F84 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 PUSH1 0x0 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x4 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 PUSH1 0x0 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH9 0x56BC75E2D63100000 DUP3 LT ISZERO DUP1 ISZERO PUSH2 0x1E7A JUMPI POP PUSH9 0x3635C9ADC5DEA00000 DUP3 LT JUMPDEST ISZERO PUSH2 0x1E93 JUMPI PUSH1 0x64 DUP3 PUSH2 0x1E8C SWAP2 SWAP1 PUSH2 0x276F JUMP JUMPDEST SWAP1 POP PUSH2 0x1EF9 JUMP JUMPDEST PUSH9 0x3635C9ADC5DEA00000 DUP3 LT ISZERO DUP1 ISZERO PUSH2 0x1EB5 JUMPI POP PUSH10 0x21E19E0C9BAB2400000 DUP3 LT JUMPDEST ISZERO PUSH2 0x1ECE JUMPI PUSH1 0xC8 DUP3 PUSH2 0x1EC7 SWAP2 SWAP1 PUSH2 0x276F JUMP JUMPDEST SWAP1 POP PUSH2 0x1EF9 JUMP JUMPDEST PUSH10 0x21E19E0C9BAB2400000 DUP3 LT PUSH2 0x1EF4 JUMPI PUSH2 0x190 DUP3 PUSH2 0x1EED SWAP2 SWAP1 PUSH2 0x276F JUMP JUMPDEST SWAP1 POP PUSH2 0x1EF9 JUMP JUMPDEST PUSH1 0x0 SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1F7F DUP4 PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1F1D SWAP3 SWAP2 SWAP1 PUSH2 0x28E5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0x1F84 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1FE6 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x204C SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD EQ DUP1 PUSH2 0x2008 JUMPI POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x2007 SWAP2 SWAP1 PUSH2 0x293A JUMP JUMPDEST JUMPDEST PUSH2 0x2047 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x203E SWAP1 PUSH2 0x29D9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x205B DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x2064 JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x20A9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x20A0 SWAP1 PUSH2 0x2A6B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x20D2 SWAP2 SWAP1 PUSH2 0x2AFC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x210F JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2114 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x2125 DUP8 DUP4 DUP4 DUP8 PUSH2 0x2131 JUMP JUMPDEST SWAP3 POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x2193 JUMPI PUSH1 0x0 DUP4 MLOAD SUB PUSH2 0x218B JUMPI PUSH2 0x214B DUP6 PUSH2 0x21A6 JUMP JUMPDEST PUSH2 0x218A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2181 SWAP1 PUSH2 0x2B5F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST DUP3 SWAP1 POP PUSH2 0x219E JUMP JUMPDEST PUSH2 0x219D DUP4 DUP4 PUSH2 0x21C9 JUMP JUMPDEST JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD GT ISZERO PUSH2 0x21DC JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2210 SWAP2 SWAP1 PUSH2 0x2BD4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2249 DUP3 PUSH2 0x221E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2259 DUP2 PUSH2 0x223E JUMP JUMPDEST DUP2 EQ PUSH2 0x2264 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2276 DUP2 PUSH2 0x2250 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x22A1 DUP2 PUSH2 0x227C JUMP JUMPDEST DUP2 EQ PUSH2 0x22AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x22BE DUP2 PUSH2 0x2298 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x22DE JUMPI PUSH2 0x22DD PUSH2 0x2219 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x22EC DUP8 DUP3 DUP9 ADD PUSH2 0x2267 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x22FD DUP8 DUP3 DUP9 ADD PUSH2 0x2267 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x230E DUP8 DUP3 DUP9 ADD PUSH2 0x22AF JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 PUSH2 0x231F DUP8 DUP3 DUP9 ADD PUSH2 0x22AF JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2348 DUP2 PUSH2 0x232B JUMP JUMPDEST DUP2 EQ PUSH2 0x2353 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2365 DUP2 PUSH2 0x233F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2381 JUMPI PUSH2 0x2380 PUSH2 0x2219 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x238F DUP5 DUP3 DUP6 ADD PUSH2 0x2356 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x23AB DUP2 PUSH2 0x2398 JUMP JUMPDEST DUP2 EQ PUSH2 0x23B6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x23C8 DUP2 PUSH2 0x23A2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x23E5 JUMPI PUSH2 0x23E4 PUSH2 0x2219 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x23F3 DUP6 DUP3 DUP7 ADD PUSH2 0x2267 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x2404 DUP6 DUP3 DUP7 ADD PUSH2 0x23B9 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2423 DUP2 PUSH2 0x240E JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x243E PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x241A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0xFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x245C DUP2 PUSH2 0x2444 JUMP JUMPDEST DUP2 EQ PUSH2 0x2467 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2479 DUP2 PUSH2 0x2453 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2498 JUMPI PUSH2 0x2497 PUSH2 0x2219 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x24A6 DUP7 DUP3 DUP8 ADD PUSH2 0x2267 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x24B7 DUP7 DUP3 DUP8 ADD PUSH2 0x2267 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x24C8 DUP7 DUP3 DUP8 ADD PUSH2 0x246A JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH2 0x24DB DUP2 PUSH2 0x223E JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x24F6 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x24D2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2513 JUMPI PUSH2 0x2512 PUSH2 0x2219 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2521 DUP6 DUP3 DUP7 ADD PUSH2 0x22AF JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x2532 DUP6 DUP3 DUP7 ADD PUSH2 0x22AF JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x2545 DUP2 PUSH2 0x2398 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2560 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x253C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x257D JUMPI PUSH2 0x257C PUSH2 0x2219 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x258B DUP6 DUP3 DUP7 ADD PUSH2 0x2356 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x259C DUP6 DUP3 DUP7 ADD PUSH2 0x2267 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x25E0 DUP3 PUSH2 0x227C JUMP JUMPDEST SWAP2 POP PUSH2 0x25EB DUP4 PUSH2 0x227C JUMP JUMPDEST SWAP3 POP DUP3 DUP3 MUL PUSH2 0x25F9 DUP2 PUSH2 0x227C JUMP JUMPDEST SWAP2 POP DUP1 DUP3 EQ PUSH2 0x260B JUMPI PUSH2 0x260A PUSH2 0x25A6 JUMP JUMPDEST JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x261D DUP3 PUSH2 0x232B JUMP JUMPDEST SWAP2 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x2637 JUMPI PUSH2 0x2636 PUSH2 0x25A6 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x264D DUP3 PUSH2 0x2398 JUMP JUMPDEST SWAP2 POP PUSH2 0x2658 DUP4 PUSH2 0x2398 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0x2670 JUMPI PUSH2 0x266F PUSH2 0x25A6 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x267F DUP2 PUSH2 0x2444 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x269A PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x24D2 JUMP JUMPDEST PUSH2 0x26A7 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x24D2 JUMP JUMPDEST PUSH2 0x26B4 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x2676 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x26CB DUP2 PUSH2 0x2250 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x26E7 JUMPI PUSH2 0x26E6 PUSH2 0x2219 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x26F5 DUP5 DUP3 DUP6 ADD PUSH2 0x26BC JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2709 DUP3 PUSH2 0x2398 JUMP JUMPDEST SWAP2 POP PUSH2 0x2714 DUP4 PUSH2 0x2398 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 MUL PUSH2 0x2722 DUP2 PUSH2 0x2398 JUMP JUMPDEST SWAP2 POP DUP3 DUP3 DIV DUP5 EQ DUP4 ISZERO OR PUSH2 0x2739 JUMPI PUSH2 0x2738 PUSH2 0x25A6 JUMP JUMPDEST JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x277A DUP3 PUSH2 0x2398 JUMP JUMPDEST SWAP2 POP PUSH2 0x2785 DUP4 PUSH2 0x2398 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x2795 JUMPI PUSH2 0x2794 PUSH2 0x2740 JUMP JUMPDEST JUMPDEST DUP3 DUP3 DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x27B5 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x24D2 JUMP JUMPDEST PUSH2 0x27C2 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x24D2 JUMP JUMPDEST PUSH2 0x27CF PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x253C JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x27EC PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x24D2 JUMP JUMPDEST PUSH2 0x27F9 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x24D2 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x280F DUP2 PUSH2 0x23A2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x282B JUMPI PUSH2 0x282A PUSH2 0x2219 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2839 DUP5 DUP3 DUP6 ADD PUSH2 0x2800 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x5361666545524332303A20617070726F76652066726F6D206E6F6E2D7A65726F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x20746F206E6F6E2D7A65726F20616C6C6F77616E636500000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x28AF PUSH1 0x36 DUP4 PUSH2 0x2842 JUMP JUMPDEST SWAP2 POP PUSH2 0x28BA DUP3 PUSH2 0x2853 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x28DE DUP2 PUSH2 0x28A2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x28FA PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x24D2 JUMP JUMPDEST PUSH2 0x2907 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x253C JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x2917 DUP2 PUSH2 0x240E JUMP JUMPDEST DUP2 EQ PUSH2 0x2922 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x2934 DUP2 PUSH2 0x290E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2950 JUMPI PUSH2 0x294F PUSH2 0x2219 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x295E DUP5 DUP3 DUP6 ADD PUSH2 0x2925 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F74207375636365656400000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x29C3 PUSH1 0x2A DUP4 PUSH2 0x2842 JUMP JUMPDEST SWAP2 POP PUSH2 0x29CE DUP3 PUSH2 0x2967 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x29F2 DUP2 PUSH2 0x29B6 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x722063616C6C0000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A55 PUSH1 0x26 DUP4 PUSH2 0x2842 JUMP JUMPDEST SWAP2 POP PUSH2 0x2A60 DUP3 PUSH2 0x29F9 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2A84 DUP2 PUSH2 0x2A48 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2ABF JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x2AA4 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2AD6 DUP3 PUSH2 0x2A8B JUMP JUMPDEST PUSH2 0x2AE0 DUP2 DUP6 PUSH2 0x2A96 JUMP JUMPDEST SWAP4 POP PUSH2 0x2AF0 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x2AA1 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B08 DUP3 DUP5 PUSH2 0x2ACB JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B49 PUSH1 0x1D DUP4 PUSH2 0x2842 JUMP JUMPDEST SWAP2 POP PUSH2 0x2B54 DUP3 PUSH2 0x2B13 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2B78 DUP2 PUSH2 0x2B3C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2BA6 DUP3 PUSH2 0x2B7F JUMP JUMPDEST PUSH2 0x2BB0 DUP2 DUP6 PUSH2 0x2842 JUMP JUMPDEST SWAP4 POP PUSH2 0x2BC0 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x2AA1 JUMP JUMPDEST PUSH2 0x2BC9 DUP2 PUSH2 0x2B8A JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2BEE DUP2 DUP5 PUSH2 0x2B9B JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 JUMPDEST 0xEE XOR EXTCODECOPY LOG0 COINBASE SWAP10 SWAP3 SHL 0x22 0x22 SWAP7 SHR SWAP6 DUP1 NUMBER 0xD1 0xD TIMESTAMP 0x2C SWAP1 SHR 0xAE SWAP9 SWAP6 0xAE CODESIZE ISZERO 0xE3 0xCD PUSH2 0x3064 PUSH20 0x6F6C634300081300330000000000000000000000 ",
							"sourceMap": "419:8952:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1624:1093;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;3890:607;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;6542:1433;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1178:64;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;8162:270;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5318:1137;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;8823:543;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1426:64;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4505:760;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;8038:49;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2746:1015;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1302:64;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1537;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1624:1093;1730:10;1752:9;1741:10;:20;;;;:::i;:::-;1730:31;;;;1848:16;1865:41;1880:13;1894:6;1901:4;1865:14;:41::i;:::-;1848:58;;1926:9;1920:5;:15;1917:70;;;1958:17;;;;;;;;;;;;;;1917:70;1997:27;2025:313;;;;;;;;2060:1;2025:313;;;;;;2084:2;;;;;;;;;;;2025:313;;;;;;2116:15;2025:313;;;;;;2162:10;2025:313;;;;;;2196:9;2025:313;;;;;;2233:13;2025:313;;;;;;2274:10;2025:313;;;;;;2321:4;2025:313;;;;;1997:341;;2363:11;2349:9;:13;2359:2;;;;;;;;;;;2349:13;;;;;;;;;;;;;;;:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2421:70;2460:10;2479:4;2485:5;2428:13;2421:38;;;;:70;;;;;;:::i;:::-;2566:49;2600:8;2609:5;2573:13;2566:33;;;;:49;;;;;:::i;:::-;2626:68;2673:4;2679:8;2688:5;2633:13;2626:38;;;;:68;;;;;;:::i;:::-;2705:2;;:4;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;1719:998;;;1624:1093;;;;:::o;3890:607::-;4030:5;4004:8;:20;4013:10;4004:20;;;;;;;;;;;;;;;:25;4025:3;4004:25;;;;;;;;;;;;;;:31;;;;;;;;;;;;;;;;;4001:65;;;4044:20;;;;;;;;;;;;;;4001:65;4174:10;4158:26;;:14;4168:3;4158:9;:14::i;:::-;:26;;;4155:51;;4193:11;;;;;;;;;;;;;;4155:51;4263:25;4289:9;:14;4299:3;4289:14;;;;;;;;;;;;;;;:29;;;;;;;;;;;;4263:55;;;;4329:81;4367:10;4386:4;4392:17;4336:12;;;;;;;;;;;4329:37;;;;:81;;;;;;:::i;:::-;4447:4;4421:8;:20;4430:10;4421:20;;;;;;;;;;;;;;;:25;4442:3;4421:25;;;;;;;;;;;;;;:30;;;;;;;;;;;;;;;;;;4488:1;4462:9;:14;4472:3;4462:14;;;;;;;;;;;;;;;:25;;;:27;;;;;;;;;;;;;;;;;;3936:561;3890:607;:::o;6542:1433::-;6601:13;6615;6624:3;6615:8;:13::i;:::-;6601:27;;6639:14;6654;6664:3;6654:9;:14::i;:::-;6639:29;;6732:5;6720:17;;:10;:17;;;6712:26;;;;;;6843:5;6820:28;;:8;:16;6829:6;6820:16;;;;;;;;;;;;;;;:21;6837:3;6820:21;;;;;;;;;;;;;;;;;;;;;;;:28;;;6812:37;;;;;;6902:5;6868:39;;:15;:27;6884:10;6868:27;;;;;;;;;;;;;;;:32;6896:3;6868:32;;;;;;;;;;;;;;;;;;;;;;;:39;;;6860:48;;;;;;6972:5;6960:17;;:10;:17;;;6952:26;;;;;;6991;7018:9;:14;7028:3;7018:14;;;;;;;;;;;;;;;:27;;;;;;;;;;;;6991:54;;7056:22;7079:63;7088:9;:14;7098:3;7088:14;;;;;;;;;;;;;;;:23;;;;;;;;;;;;7112:9;:14;7122:3;7112:14;;;;;;;;;;;;;;;:29;;;;;;;;;;;;7079:8;:63::i;:::-;7056:86;;7153:11;7165:27;7177:14;7165:11;:27::i;:::-;7153:39;;7221:96;7283:4;7303:3;7228:18;7221:39;;;;:96;;;;;:::i;:::-;7373:103;7427:5;7462:3;7447:14;:18;;;;:::i;:::-;7380;7373:39;;;;:103;;;;;:::i;:::-;7520:4;7487:15;:27;7503:10;7487:27;;;;;;;;;;;;;;;:32;7515:3;7487:32;;;;;;;;;;;;;;:37;;;;;;;;;;;;;;;;;;7567:1;7540:9;:14;7550:3;7540:14;;;;;;;;;;;;;;;:25;;;;;;;;;;;;:28;;;7537:393;;7626:5;7592:39;;:15;:27;7608:10;7592:27;;;;;;;;;;;;;;;:32;7620:3;7592:32;;;;;;;;;;;;;;;;;;;;;;;:39;;;7584:48;;;;;;7647:13;7685:9;:14;7695:3;7685:14;;;;;;;;;;;;;;;:29;;;;;;;;;;;;7661:9;:14;7671:3;7661:14;;;;;;;;;;;;;;;:23;;;;;;;;;;;;:53;;;;:::i;:::-;7647:67;;;;7756:110;7814:13;7823:3;7814:8;:13::i;:::-;7846:5;7763:18;7756:39;;;;:110;;;;;:::i;:::-;7914:4;7881:15;:27;7897:10;7881:27;;;;;;;;;;;;;;;:32;7909:3;7881:32;;;;;;;;;;;;;;:37;;;;;;;;;;;;;;;;;;7569:361;7537:393;7966:1;7940:9;:14;7950:3;7940:14;;;;;;;;;;;;;;;:25;;;:27;;;;;;;;;;;;;;;;;;6590:1385;;;;;6542:1433;:::o;1178:64::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;8162:270::-;8248:16;8305:12;;;;;;;;;;;8287:39;;;8341:6;8362;8383:4;8287:111;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;8276:122;;8162:270;;;;;:::o;5318:1137::-;5378:14;5393;5403:3;5393:9;:14::i;:::-;5378:29;;5471:6;5459:18;;:10;:18;;;5451:27;;;;;;5560:8;:16;5569:6;5560:16;;;;;;;;;;;;;;;:21;5577:3;5560:21;;;;;;;;;;;;;;;;;;;;;;;5552:30;;;;;;5668:5;5634:39;;:15;:27;5650:10;5634:27;;;;;;;;;;;;;;;:32;5662:3;5634:32;;;;;;;;;;;;;;;;;;;;;;;:39;;;5626:48;;;;;;5685:26;5712:9;:14;5722:3;5712:14;;;;;;;;;;;;;;;:27;;;;;;;;;;;;5685:54;;5750:13;5788:9;:14;5798:3;5788:14;;;;;;;;;;;;;;;:29;;;;;;;;;;;;5764:9;:14;5774:3;5764:14;;;;;;;;;;;;;;;:23;;;;;;;;;;;;:53;;;;:::i;:::-;5750:67;;;;5828:22;5851:63;5860:9;:14;5870:3;5860:14;;;;;;;;;;;;;;;:23;;;;;;;;;;;;5884:9;:14;5894:3;5884:14;;;;;;;;;;;;;;;:29;;;;;;;;;;;;5851:8;:63::i;:::-;5828:86;;5925:11;5937:18;5949:5;5937:11;:18::i;:::-;5925:30;;6008:58;6056:4;6062:3;6015:18;6008:39;;;;:58;;;;;:::i;:::-;6107:95;6161:6;6188:3;6182:5;:9;;;;:::i;:::-;6114:18;6107:39;;;;:95;;;;;:::i;:::-;6261:100;6315:6;6336:14;6268:18;6261:39;;;;:100;;;;;:::i;:::-;6442:4;6409:15;:27;6425:10;6409:27;;;;;;;;;;;;;;;:32;6437:3;6409:32;;;;;;;;;;;;;;:37;;;;;;;;;;;;;;;;;;5367:1088;;;;;5318:1137;:::o;8823:543::-;8902:7;8921:18;8953:11;8942:10;:22;;;;:::i;:::-;8921:43;;;;8993:9;8979:10;:23;;:50;;;;;9019:10;9006;:23;8979:50;8975:384;;;9073:3;9067:2;9054:10;:15;;;;:::i;:::-;9053:23;;;;:::i;:::-;9046:30;;;;;8975:384;9112:10;9098;:24;;:52;;;;;9139:11;9126:10;:24;9098:52;9094:265;;;9194:3;9188:2;9175:10;:15;;;;:::i;:::-;9174:23;;;;:::i;:::-;9167:30;;;;;9094:265;9232:11;9219:10;:24;9215:144;;;9287:3;9281:2;9268:10;:15;;;;:::i;:::-;9267:23;;;;:::i;:::-;9260:30;;;;;9215:144;9330:17;;;;;;;;;;;;;;8823:543;;;;;:::o;1426:64::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;4505:760::-;4565:13;4579;4588:3;4579:8;:13::i;:::-;4565:27;;4651:5;4639:17;;:10;:17;;;4636:41;;4665:10;;;;;;;;;;;;;;4636:41;4780:1;4753:9;:14;4763:3;4753:14;;;;;;;;;;;;;;;:25;;;;;;;;;;;;:28;;;4750:58;;4790:16;;;;;;;;;;;;;;4750:58;4819:17;4837:9;:14;4847:3;4837:14;;;;;;;;;;;;;;;:29;;;;;;;;;;;;4819:47;;4877:18;4896:9;:14;4906:3;4896:14;;;;;;;;;;;;;;;:23;;;;;;;;;;;;4877:42;;4974:11;4986:33;5008:10;4998:9;:20;;;;:::i;:::-;4986:33;;:11;:33::i;:::-;4974:45;;5072:52;5114:4;5120:3;5079:12;;;;;;;;;;;5072:33;;;;:52;;;;;:::i;:::-;5165:54;5199:5;5215:3;5205:9;:13;;;;;;:::i;:::-;5172:12;;;;;;;;;;;5165:33;;;;:54;;;;;:::i;:::-;5256:1;5230:9;:14;5240:3;5230:14;;;;;;;;;;;;;;;:25;;;:27;;;;;;;;;;;;;;;;;;4554:711;;;;4505:760;:::o;8038:49::-;;:::o;2746:1015::-;2807:27;2835:9;:14;2845:3;2835:14;;;;;;;;;;;;;;;2807:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2892:1;2868:11;:22;;;:25;;;2860:34;;;;;;2933:26;2960:11;:24;;;2933:51;;3077:16;3094:46;3109:18;3128:6;3135:4;3094:14;:46::i;:::-;3077:63;;3151:16;3168:58;3177:11;:20;;;3199:11;:26;;;3168:8;:58::i;:::-;3151:75;;3264:133;3322:10;3355:4;3375:11;3271:18;3264:43;;;;:133;;;;;;:::i;:::-;3472:60;3511:8;3520:11;3479:18;3472:38;;;;:60;;;;;:::i;:::-;3543:79;3595:4;3601:8;3610:11;3550:18;3543:43;;;;:79;;;;;;:::i;:::-;3662:10;3633:9;:14;3643:3;3633:14;;;;;;;;;;;;;;;:28;;;:39;;;;;;;;;;;;;;;;;;3752:1;3726:9;:14;3736:3;3726:14;;;;;;;;;;;;;;;:25;;;:27;;;;;;;;;;;;;;;;;;2796:965;;;;2746:1015;;:::o;1302:64::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;1537:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;1447:205:18:-;1548:96;1568:5;1598:27;;;1627:4;1633:2;1637:5;1575:68;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1548:19;:96::i;:::-;1447:205;;;;:::o;1921:582::-;2260:1;2251:5;:10;2250:62;;;;2310:1;2267:5;:15;;;2291:4;2298:7;2267:39;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:44;2250:62;2228:166;;;;;;;;;;;;:::i;:::-;;;;;;;;;2405:90;2425:5;2455:22;;;2479:7;2488:5;2432:62;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2405:19;:90::i;:::-;1921:582;;;:::o;8643:114:0:-;8695:7;8721:9;:14;8731:3;8721:14;;;;;;;;;;;;;;;:28;;;;;;;;;;;;8714:35;;8643:114;;;:::o;8483:112::-;8534:7;8560:9;:14;8570:3;8560:14;;;;;;;;;;;;;;;:27;;;;;;;;;;;;8553:34;;8483:112;;;:::o;250:430:19:-;306:17;352:9;338:12;:23;;:50;;;;;378:10;365:12;:23;338:50;335:338;;;424:3;411:12;:16;;;;:::i;:::-;404:23;;;;335:338;461:10;447:12;:24;;:52;;;;;488:11;475:12;:24;447:52;444:229;;;535:3;522:12;:16;;;;:::i;:::-;515:23;;;;444:229;572:11;558:12;:25;555:118;;619:3;606:12;:16;;;;:::i;:::-;599:23;;;;555:118;660:1;653:8;;250:430;;;;:::o;1025:177:18:-;1108:86;1128:5;1158:23;;;1183:2;1187:5;1135:58;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1108:19;:86::i;:::-;1025:177;;;:::o;5371:649::-;5795:23;5821:69;5849:4;5821:69;;;;;;;;;;;;;;;;;5829:5;5821:27;;;;:69;;;;;:::i;:::-;5795:95;;5930:1;5909:10;:17;:22;:56;;;;5946:10;5935:30;;;;;;;;;;;;:::i;:::-;5909:56;5901:111;;;;;;;;;;;;:::i;:::-;;;;;;;;;5441:579;5371:649;;:::o;4207:229:16:-;4344:12;4376:52;4398:6;4406:4;4412:1;4415:12;4376:21;:52::i;:::-;4369:59;;4207:229;;;;;:::o;5293:455::-;5463:12;5521:5;5496:21;:30;;5488:81;;;;;;;;;;;;:::i;:::-;;;;;;;;;5581:12;5595:23;5622:6;:11;;5641:5;5648:4;5622:31;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5580:73;;;;5671:69;5698:6;5706:7;5715:10;5727:12;5671:26;:69::i;:::-;5664:76;;;;5293:455;;;;;;:::o;7866:644::-;8051:12;8080:7;8076:427;;;8129:1;8108:10;:17;:22;8104:290;;8326:18;8337:6;8326:10;:18::i;:::-;8318:60;;;;;;;;;;;;:::i;:::-;;;;;;;;;8104:290;8415:10;8408:17;;;;8076:427;8458:33;8466:10;8478:12;8458:7;:33::i;:::-;7866:644;;;;;;;:::o;1452:326::-;1512:4;1769:1;1747:7;:19;;;:23;1740:30;;1452:326;;;:::o;9052:552::-;9233:1;9213:10;:17;:21;9209:388;;;9445:10;9439:17;9502:15;9489:10;9485:2;9481:19;9474:44;9209:388;9572:12;9565:20;;;;;;;;;;;:::i;:::-;;;;;;;;88:117:20;197:1;194;187:12;334:126;371:7;411:42;404:5;400:54;389:65;;334:126;;;:::o;466:96::-;503:7;532:24;550:5;532:24;:::i;:::-;521:35;;466:96;;;:::o;568:122::-;641:24;659:5;641:24;:::i;:::-;634:5;631:35;621:63;;680:1;677;670:12;621:63;568:122;:::o;696:139::-;742:5;780:6;767:20;758:29;;796:33;823:5;796:33;:::i;:::-;696:139;;;;:::o;841:118::-;878:7;918:34;911:5;907:46;896:57;;841:118;;;:::o;965:122::-;1038:24;1056:5;1038:24;:::i;:::-;1031:5;1028:35;1018:63;;1077:1;1074;1067:12;1018:63;965:122;:::o;1093:139::-;1139:5;1177:6;1164:20;1155:29;;1193:33;1220:5;1193:33;:::i;:::-;1093:139;;;;:::o;1238:765::-;1324:6;1332;1340;1348;1397:3;1385:9;1376:7;1372:23;1368:33;1365:120;;;1404:79;;:::i;:::-;1365:120;1524:1;1549:53;1594:7;1585:6;1574:9;1570:22;1549:53;:::i;:::-;1539:63;;1495:117;1651:2;1677:53;1722:7;1713:6;1702:9;1698:22;1677:53;:::i;:::-;1667:63;;1622:118;1779:2;1805:53;1850:7;1841:6;1830:9;1826:22;1805:53;:::i;:::-;1795:63;;1750:118;1907:2;1933:53;1978:7;1969:6;1958:9;1954:22;1933:53;:::i;:::-;1923:63;;1878:118;1238:765;;;;;;;:::o;2009:101::-;2045:7;2085:18;2078:5;2074:30;2063:41;;2009:101;;;:::o;2116:120::-;2188:23;2205:5;2188:23;:::i;:::-;2181:5;2178:34;2168:62;;2226:1;2223;2216:12;2168:62;2116:120;:::o;2242:137::-;2287:5;2325:6;2312:20;2303:29;;2341:32;2367:5;2341:32;:::i;:::-;2242:137;;;;:::o;2385:327::-;2443:6;2492:2;2480:9;2471:7;2467:23;2463:32;2460:119;;;2498:79;;:::i;:::-;2460:119;2618:1;2643:52;2687:7;2678:6;2667:9;2663:22;2643:52;:::i;:::-;2633:62;;2589:116;2385:327;;;;:::o;2718:77::-;2755:7;2784:5;2773:16;;2718:77;;;:::o;2801:122::-;2874:24;2892:5;2874:24;:::i;:::-;2867:5;2864:35;2854:63;;2913:1;2910;2903:12;2854:63;2801:122;:::o;2929:139::-;2975:5;3013:6;3000:20;2991:29;;3029:33;3056:5;3029:33;:::i;:::-;2929:139;;;;:::o;3074:474::-;3142:6;3150;3199:2;3187:9;3178:7;3174:23;3170:32;3167:119;;;3205:79;;:::i;:::-;3167:119;3325:1;3350:53;3395:7;3386:6;3375:9;3371:22;3350:53;:::i;:::-;3340:63;;3296:117;3452:2;3478:53;3523:7;3514:6;3503:9;3499:22;3478:53;:::i;:::-;3468:63;;3423:118;3074:474;;;;;:::o;3554:90::-;3588:7;3631:5;3624:13;3617:21;3606:32;;3554:90;;;:::o;3650:109::-;3731:21;3746:5;3731:21;:::i;:::-;3726:3;3719:34;3650:109;;:::o;3765:210::-;3852:4;3890:2;3879:9;3875:18;3867:26;;3903:65;3965:1;3954:9;3950:17;3941:6;3903:65;:::i;:::-;3765:210;;;;:::o;3981:91::-;4017:7;4057:8;4050:5;4046:20;4035:31;;3981:91;;;:::o;4078:120::-;4150:23;4167:5;4150:23;:::i;:::-;4143:5;4140:34;4130:62;;4188:1;4185;4178:12;4130:62;4078:120;:::o;4204:137::-;4249:5;4287:6;4274:20;4265:29;;4303:32;4329:5;4303:32;:::i;:::-;4204:137;;;;:::o;4347:617::-;4423:6;4431;4439;4488:2;4476:9;4467:7;4463:23;4459:32;4456:119;;;4494:79;;:::i;:::-;4456:119;4614:1;4639:53;4684:7;4675:6;4664:9;4660:22;4639:53;:::i;:::-;4629:63;;4585:117;4741:2;4767:53;4812:7;4803:6;4792:9;4788:22;4767:53;:::i;:::-;4757:63;;4712:118;4869:2;4895:52;4939:7;4930:6;4919:9;4915:22;4895:52;:::i;:::-;4885:62;;4840:117;4347:617;;;;;:::o;4970:118::-;5057:24;5075:5;5057:24;:::i;:::-;5052:3;5045:37;4970:118;;:::o;5094:222::-;5187:4;5225:2;5214:9;5210:18;5202:26;;5238:71;5306:1;5295:9;5291:17;5282:6;5238:71;:::i;:::-;5094:222;;;;:::o;5322:474::-;5390:6;5398;5447:2;5435:9;5426:7;5422:23;5418:32;5415:119;;;5453:79;;:::i;:::-;5415:119;5573:1;5598:53;5643:7;5634:6;5623:9;5619:22;5598:53;:::i;:::-;5588:63;;5544:117;5700:2;5726:53;5771:7;5762:6;5751:9;5747:22;5726:53;:::i;:::-;5716:63;;5671:118;5322:474;;;;;:::o;5802:118::-;5889:24;5907:5;5889:24;:::i;:::-;5884:3;5877:37;5802:118;;:::o;5926:222::-;6019:4;6057:2;6046:9;6042:18;6034:26;;6070:71;6138:1;6127:9;6123:17;6114:6;6070:71;:::i;:::-;5926:222;;;;:::o;6154:472::-;6221:6;6229;6278:2;6266:9;6257:7;6253:23;6249:32;6246:119;;;6284:79;;:::i;:::-;6246:119;6404:1;6429:52;6473:7;6464:6;6453:9;6449:22;6429:52;:::i;:::-;6419:62;;6375:116;6530:2;6556:53;6601:7;6592:6;6581:9;6577:22;6556:53;:::i;:::-;6546:63;;6501:118;6154:472;;;;;:::o;6632:180::-;6680:77;6677:1;6670:88;6777:4;6774:1;6767:15;6801:4;6798:1;6791:15;6818:279;6858:7;6881:20;6899:1;6881:20;:::i;:::-;6876:25;;6915:20;6933:1;6915:20;:::i;:::-;6910:25;;6970:1;6967;6963:9;6992:30;7010:11;6992:30;:::i;:::-;6981:41;;7054:11;7045:7;7042:24;7032:58;;7070:18;;:::i;:::-;7032:58;6866:231;6818:279;;;;:::o;7103:183::-;7141:3;7164:23;7181:5;7164:23;:::i;:::-;7155:32;;7209:18;7202:5;7199:29;7196:55;;7231:18;;:::i;:::-;7196:55;7278:1;7271:5;7267:13;7260:20;;7103:183;;;:::o;7292:194::-;7332:4;7352:20;7370:1;7352:20;:::i;:::-;7347:25;;7386:20;7404:1;7386:20;:::i;:::-;7381:25;;7430:1;7427;7423:9;7415:17;;7454:1;7448:4;7445:11;7442:37;;;7459:18;;:::i;:::-;7442:37;7292:194;;;;:::o;7492:115::-;7577:23;7594:5;7577:23;:::i;:::-;7572:3;7565:36;7492:115;;:::o;7613:438::-;7760:4;7798:2;7787:9;7783:18;7775:26;;7811:71;7879:1;7868:9;7864:17;7855:6;7811:71;:::i;:::-;7892:72;7960:2;7949:9;7945:18;7936:6;7892:72;:::i;:::-;7974:70;8040:2;8029:9;8025:18;8016:6;7974:70;:::i;:::-;7613:438;;;;;;:::o;8057:143::-;8114:5;8145:6;8139:13;8130:22;;8161:33;8188:5;8161:33;:::i;:::-;8057:143;;;;:::o;8206:351::-;8276:6;8325:2;8313:9;8304:7;8300:23;8296:32;8293:119;;;8331:79;;:::i;:::-;8293:119;8451:1;8476:64;8532:7;8523:6;8512:9;8508:22;8476:64;:::i;:::-;8466:74;;8422:128;8206:351;;;;:::o;8563:410::-;8603:7;8626:20;8644:1;8626:20;:::i;:::-;8621:25;;8660:20;8678:1;8660:20;:::i;:::-;8655:25;;8715:1;8712;8708:9;8737:30;8755:11;8737:30;:::i;:::-;8726:41;;8916:1;8907:7;8903:15;8900:1;8897:22;8877:1;8870:9;8850:83;8827:139;;8946:18;;:::i;:::-;8827:139;8611:362;8563:410;;;;:::o;8979:180::-;9027:77;9024:1;9017:88;9124:4;9121:1;9114:15;9148:4;9145:1;9138:15;9165:185;9205:1;9222:20;9240:1;9222:20;:::i;:::-;9217:25;;9256:20;9274:1;9256:20;:::i;:::-;9251:25;;9295:1;9285:35;;9300:18;;:::i;:::-;9285:35;9342:1;9339;9335:9;9330:14;;9165:185;;;;:::o;9356:442::-;9505:4;9543:2;9532:9;9528:18;9520:26;;9556:71;9624:1;9613:9;9609:17;9600:6;9556:71;:::i;:::-;9637:72;9705:2;9694:9;9690:18;9681:6;9637:72;:::i;:::-;9719;9787:2;9776:9;9772:18;9763:6;9719:72;:::i;:::-;9356:442;;;;;;:::o;9804:332::-;9925:4;9963:2;9952:9;9948:18;9940:26;;9976:71;10044:1;10033:9;10029:17;10020:6;9976:71;:::i;:::-;10057:72;10125:2;10114:9;10110:18;10101:6;10057:72;:::i;:::-;9804:332;;;;;:::o;10142:143::-;10199:5;10230:6;10224:13;10215:22;;10246:33;10273:5;10246:33;:::i;:::-;10142:143;;;;:::o;10291:351::-;10361:6;10410:2;10398:9;10389:7;10385:23;10381:32;10378:119;;;10416:79;;:::i;:::-;10378:119;10536:1;10561:64;10617:7;10608:6;10597:9;10593:22;10561:64;:::i;:::-;10551:74;;10507:128;10291:351;;;;:::o;10648:169::-;10732:11;10766:6;10761:3;10754:19;10806:4;10801:3;10797:14;10782:29;;10648:169;;;;:::o;10823:241::-;10963:34;10959:1;10951:6;10947:14;10940:58;11032:24;11027:2;11019:6;11015:15;11008:49;10823:241;:::o;11070:366::-;11212:3;11233:67;11297:2;11292:3;11233:67;:::i;:::-;11226:74;;11309:93;11398:3;11309:93;:::i;:::-;11427:2;11422:3;11418:12;11411:19;;11070:366;;;:::o;11442:419::-;11608:4;11646:2;11635:9;11631:18;11623:26;;11695:9;11689:4;11685:20;11681:1;11670:9;11666:17;11659:47;11723:131;11849:4;11723:131;:::i;:::-;11715:139;;11442:419;;;:::o;11867:332::-;11988:4;12026:2;12015:9;12011:18;12003:26;;12039:71;12107:1;12096:9;12092:17;12083:6;12039:71;:::i;:::-;12120:72;12188:2;12177:9;12173:18;12164:6;12120:72;:::i;:::-;11867:332;;;;;:::o;12205:116::-;12275:21;12290:5;12275:21;:::i;:::-;12268:5;12265:32;12255:60;;12311:1;12308;12301:12;12255:60;12205:116;:::o;12327:137::-;12381:5;12412:6;12406:13;12397:22;;12428:30;12452:5;12428:30;:::i;:::-;12327:137;;;;:::o;12470:345::-;12537:6;12586:2;12574:9;12565:7;12561:23;12557:32;12554:119;;;12592:79;;:::i;:::-;12554:119;12712:1;12737:61;12790:7;12781:6;12770:9;12766:22;12737:61;:::i;:::-;12727:71;;12683:125;12470:345;;;;:::o;12821:229::-;12961:34;12957:1;12949:6;12945:14;12938:58;13030:12;13025:2;13017:6;13013:15;13006:37;12821:229;:::o;13056:366::-;13198:3;13219:67;13283:2;13278:3;13219:67;:::i;:::-;13212:74;;13295:93;13384:3;13295:93;:::i;:::-;13413:2;13408:3;13404:12;13397:19;;13056:366;;;:::o;13428:419::-;13594:4;13632:2;13621:9;13617:18;13609:26;;13681:9;13675:4;13671:20;13667:1;13656:9;13652:17;13645:47;13709:131;13835:4;13709:131;:::i;:::-;13701:139;;13428:419;;;:::o;13853:225::-;13993:34;13989:1;13981:6;13977:14;13970:58;14062:8;14057:2;14049:6;14045:15;14038:33;13853:225;:::o;14084:366::-;14226:3;14247:67;14311:2;14306:3;14247:67;:::i;:::-;14240:74;;14323:93;14412:3;14323:93;:::i;:::-;14441:2;14436:3;14432:12;14425:19;;14084:366;;;:::o;14456:419::-;14622:4;14660:2;14649:9;14645:18;14637:26;;14709:9;14703:4;14699:20;14695:1;14684:9;14680:17;14673:47;14737:131;14863:4;14737:131;:::i;:::-;14729:139;;14456:419;;;:::o;14881:98::-;14932:6;14966:5;14960:12;14950:22;;14881:98;;;:::o;14985:147::-;15086:11;15123:3;15108:18;;14985:147;;;;:::o;15138:246::-;15219:1;15229:113;15243:6;15240:1;15237:13;15229:113;;;15328:1;15323:3;15319:11;15313:18;15309:1;15304:3;15300:11;15293:39;15265:2;15262:1;15258:10;15253:15;;15229:113;;;15376:1;15367:6;15362:3;15358:16;15351:27;15200:184;15138:246;;;:::o;15390:386::-;15494:3;15522:38;15554:5;15522:38;:::i;:::-;15576:88;15657:6;15652:3;15576:88;:::i;:::-;15569:95;;15673:65;15731:6;15726:3;15719:4;15712:5;15708:16;15673:65;:::i;:::-;15763:6;15758:3;15754:16;15747:23;;15498:278;15390:386;;;;:::o;15782:271::-;15912:3;15934:93;16023:3;16014:6;15934:93;:::i;:::-;15927:100;;16044:3;16037:10;;15782:271;;;;:::o;16059:179::-;16199:31;16195:1;16187:6;16183:14;16176:55;16059:179;:::o;16244:366::-;16386:3;16407:67;16471:2;16466:3;16407:67;:::i;:::-;16400:74;;16483:93;16572:3;16483:93;:::i;:::-;16601:2;16596:3;16592:12;16585:19;;16244:366;;;:::o;16616:419::-;16782:4;16820:2;16809:9;16805:18;16797:26;;16869:9;16863:4;16859:20;16855:1;16844:9;16840:17;16833:47;16897:131;17023:4;16897:131;:::i;:::-;16889:139;;16616:419;;;:::o;17041:99::-;17093:6;17127:5;17121:12;17111:22;;17041:99;;;:::o;17146:102::-;17187:6;17238:2;17234:7;17229:2;17222:5;17218:14;17214:28;17204:38;;17146:102;;;:::o;17254:377::-;17342:3;17370:39;17403:5;17370:39;:::i;:::-;17425:71;17489:6;17484:3;17425:71;:::i;:::-;17418:78;;17505:65;17563:6;17558:3;17551:4;17544:5;17540:16;17505:65;:::i;:::-;17595:29;17617:6;17595:29;:::i;:::-;17590:3;17586:39;17579:46;;17346:285;17254:377;;;;:::o;17637:313::-;17750:4;17788:2;17777:9;17773:18;17765:26;;17837:9;17831:4;17827:20;17823:1;17812:9;17808:17;17801:47;17865:78;17938:4;17929:6;17865:78;:::i;:::-;17857:86;;17637:313;;;;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "2261600",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"Sale(uint64,address)": "infinite",
								"buy(address,address,uint128,uint128)": "infinite",
								"buyerWithdrawAirdorp(uint64)": "infinite",
								"buyerWithdrawRefund(uint64)": "infinite",
								"getPenal(uint128,uint128)": "infinite",
								"getPoolAddress(address,address,uint24)": "infinite",
								"injectFutureToken(uint64)": "infinite",
								"profileEarn(uint64)": "434",
								"solderWithdrawStable(uint64)": "infinite",
								"userIfWithdraw1(address,uint256)": "3154",
								"userIfWithdraw2(address,uint256)": "3153",
								"userIfWithdraw3(address,uint256)": "3132",
								"userIfWithdraw4(address,uint256)": "3175"
							},
							"internal": {
								"getBuyer(uint64)": "2266",
								"getSolder(uint64)": "2266"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 419,
									"end": 9371,
									"name": "PUSH",
									"source": 0,
									"value": "80"
								},
								{
									"begin": 419,
									"end": 9371,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 419,
									"end": 9371,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 631,
									"end": 673,
									"name": "PUSH",
									"source": 0,
									"value": "1F98431C8AD98523631AE4A59F267346EA31F984"
								},
								{
									"begin": 602,
									"end": 673,
									"name": "PUSH",
									"source": 0,
									"value": "2"
								},
								{
									"begin": 602,
									"end": 673,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 602,
									"end": 673,
									"name": "PUSH",
									"source": 0,
									"value": "100"
								},
								{
									"begin": 602,
									"end": 673,
									"name": "EXP",
									"source": 0
								},
								{
									"begin": 602,
									"end": 673,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 602,
									"end": 673,
									"name": "SLOAD",
									"source": 0
								},
								{
									"begin": 602,
									"end": 673,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 602,
									"end": 673,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 602,
									"end": 673,
									"name": "MUL",
									"source": 0
								},
								{
									"begin": 602,
									"end": 673,
									"name": "NOT",
									"source": 0
								},
								{
									"begin": 602,
									"end": 673,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 602,
									"end": 673,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 602,
									"end": 673,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 602,
									"end": 673,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 602,
									"end": 673,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 602,
									"end": 673,
									"name": "MUL",
									"source": 0
								},
								{
									"begin": 602,
									"end": 673,
									"name": "OR",
									"source": 0
								},
								{
									"begin": 602,
									"end": 673,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 602,
									"end": 673,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 602,
									"end": 673,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 723,
									"end": 765,
									"name": "PUSH",
									"source": 0,
									"value": "C36442B4A4522E871399CD717ABDD847AB11FE88"
								},
								{
									"begin": 680,
									"end": 765,
									"name": "PUSH",
									"source": 0,
									"value": "3"
								},
								{
									"begin": 680,
									"end": 765,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 680,
									"end": 765,
									"name": "PUSH",
									"source": 0,
									"value": "100"
								},
								{
									"begin": 680,
									"end": 765,
									"name": "EXP",
									"source": 0
								},
								{
									"begin": 680,
									"end": 765,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 680,
									"end": 765,
									"name": "SLOAD",
									"source": 0
								},
								{
									"begin": 680,
									"end": 765,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 680,
									"end": 765,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 680,
									"end": 765,
									"name": "MUL",
									"source": 0
								},
								{
									"begin": 680,
									"end": 765,
									"name": "NOT",
									"source": 0
								},
								{
									"begin": 680,
									"end": 765,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 680,
									"end": 765,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 680,
									"end": 765,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 680,
									"end": 765,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 680,
									"end": 765,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 680,
									"end": 765,
									"name": "MUL",
									"source": 0
								},
								{
									"begin": 680,
									"end": 765,
									"name": "OR",
									"source": 0
								},
								{
									"begin": 680,
									"end": 765,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 680,
									"end": 765,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 680,
									"end": 765,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 774,
									"end": 917,
									"name": "CALLVALUE",
									"source": 0
								},
								{
									"begin": 774,
									"end": 917,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 774,
									"end": 917,
									"name": "ISZERO",
									"source": 0
								},
								{
									"begin": 774,
									"end": 917,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 774,
									"end": 917,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 774,
									"end": 917,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 774,
									"end": 917,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 774,
									"end": 917,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 774,
									"end": 917,
									"name": "tag",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 774,
									"end": 917,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 774,
									"end": 917,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 774,
									"end": 917,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 774,
									"end": 917,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 774,
									"end": 917,
									"name": "PUSHSIZE",
									"source": 0
								},
								{
									"begin": 774,
									"end": 917,
									"name": "CODESIZE",
									"source": 0
								},
								{
									"begin": 774,
									"end": 917,
									"name": "SUB",
									"source": 0
								},
								{
									"begin": 774,
									"end": 917,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 774,
									"end": 917,
									"name": "PUSHSIZE",
									"source": 0
								},
								{
									"begin": 774,
									"end": 917,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 774,
									"end": 917,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 774,
									"end": 917,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 774,
									"end": 917,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 774,
									"end": 917,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 774,
									"end": 917,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 774,
									"end": 917,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 774,
									"end": 917,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 774,
									"end": 917,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 774,
									"end": 917,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 774,
									"end": 917,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "2"
								},
								{
									"begin": 774,
									"end": 917,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 774,
									"end": 917,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 774,
									"end": 917,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "3"
								},
								{
									"begin": 774,
									"end": 917,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 774,
									"end": 917,
									"name": "tag",
									"source": 0,
									"value": "2"
								},
								{
									"begin": 774,
									"end": 917,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 851,
									"end": 864,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 838,
									"end": 850,
									"name": "PUSH",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 838,
									"end": 850,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 838,
									"end": 864,
									"name": "PUSH",
									"source": 0,
									"value": "100"
								},
								{
									"begin": 838,
									"end": 864,
									"name": "EXP",
									"source": 0
								},
								{
									"begin": 838,
									"end": 864,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 838,
									"end": 864,
									"name": "SLOAD",
									"source": 0
								},
								{
									"begin": 838,
									"end": 864,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 838,
									"end": 864,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 838,
									"end": 864,
									"name": "MUL",
									"source": 0
								},
								{
									"begin": 838,
									"end": 864,
									"name": "NOT",
									"source": 0
								},
								{
									"begin": 838,
									"end": 864,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 838,
									"end": 864,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 838,
									"end": 864,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 838,
									"end": 864,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 838,
									"end": 864,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 838,
									"end": 864,
									"name": "MUL",
									"source": 0
								},
								{
									"begin": 838,
									"end": 864,
									"name": "OR",
									"source": 0
								},
								{
									"begin": 838,
									"end": 864,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 838,
									"end": 864,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 838,
									"end": 864,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 895,
									"end": 908,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 875,
									"end": 887,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 875,
									"end": 887,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 875,
									"end": 909,
									"name": "PUSH",
									"source": 0,
									"value": "100"
								},
								{
									"begin": 875,
									"end": 909,
									"name": "EXP",
									"source": 0
								},
								{
									"begin": 875,
									"end": 909,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 875,
									"end": 909,
									"name": "SLOAD",
									"source": 0
								},
								{
									"begin": 875,
									"end": 909,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 875,
									"end": 909,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFF"
								},
								{
									"begin": 875,
									"end": 909,
									"name": "MUL",
									"source": 0
								},
								{
									"begin": 875,
									"end": 909,
									"name": "NOT",
									"source": 0
								},
								{
									"begin": 875,
									"end": 909,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 875,
									"end": 909,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 875,
									"end": 909,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 875,
									"end": 909,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFF"
								},
								{
									"begin": 875,
									"end": 909,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 875,
									"end": 909,
									"name": "MUL",
									"source": 0
								},
								{
									"begin": 875,
									"end": 909,
									"name": "OR",
									"source": 0
								},
								{
									"begin": 875,
									"end": 909,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 875,
									"end": 909,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 875,
									"end": 909,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 774,
									"end": 917,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 774,
									"end": 917,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 419,
									"end": 9371,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "6"
								},
								{
									"begin": 419,
									"end": 9371,
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 88,
									"end": 205,
									"name": "tag",
									"source": 20,
									"value": "8"
								},
								{
									"begin": 88,
									"end": 205,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 197,
									"end": 198,
									"name": "PUSH",
									"source": 20,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 195,
									"name": "DUP1",
									"source": 20
								},
								{
									"begin": 187,
									"end": 199,
									"name": "REVERT",
									"source": 20
								},
								{
									"begin": 334,
									"end": 460,
									"name": "tag",
									"source": 20,
									"value": "10"
								},
								{
									"begin": 334,
									"end": 460,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 371,
									"end": 378,
									"name": "PUSH",
									"source": 20,
									"value": "0"
								},
								{
									"begin": 411,
									"end": 453,
									"name": "PUSH",
									"source": 20,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 404,
									"end": 409,
									"name": "DUP3",
									"source": 20
								},
								{
									"begin": 400,
									"end": 454,
									"name": "AND",
									"source": 20
								},
								{
									"begin": 389,
									"end": 454,
									"name": "SWAP1",
									"source": 20
								},
								{
									"begin": 389,
									"end": 454,
									"name": "POP",
									"source": 20
								},
								{
									"begin": 334,
									"end": 460,
									"name": "SWAP2",
									"source": 20
								},
								{
									"begin": 334,
									"end": 460,
									"name": "SWAP1",
									"source": 20
								},
								{
									"begin": 334,
									"end": 460,
									"name": "POP",
									"source": 20
								},
								{
									"begin": 334,
									"end": 460,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 20
								},
								{
									"begin": 466,
									"end": 562,
									"name": "tag",
									"source": 20,
									"value": "11"
								},
								{
									"begin": 466,
									"end": 562,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 503,
									"end": 510,
									"name": "PUSH",
									"source": 20,
									"value": "0"
								},
								{
									"begin": 532,
									"end": 556,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "23"
								},
								{
									"begin": 550,
									"end": 555,
									"name": "DUP3",
									"source": 20
								},
								{
									"begin": 532,
									"end": 556,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "10"
								},
								{
									"begin": 532,
									"end": 556,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 20
								},
								{
									"begin": 532,
									"end": 556,
									"name": "tag",
									"source": 20,
									"value": "23"
								},
								{
									"begin": 532,
									"end": 556,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 521,
									"end": 556,
									"name": "SWAP1",
									"source": 20
								},
								{
									"begin": 521,
									"end": 556,
									"name": "POP",
									"source": 20
								},
								{
									"begin": 466,
									"end": 562,
									"name": "SWAP2",
									"source": 20
								},
								{
									"begin": 466,
									"end": 562,
									"name": "SWAP1",
									"source": 20
								},
								{
									"begin": 466,
									"end": 562,
									"name": "POP",
									"source": 20
								},
								{
									"begin": 466,
									"end": 562,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 20
								},
								{
									"begin": 568,
									"end": 690,
									"name": "tag",
									"source": 20,
									"value": "12"
								},
								{
									"begin": 568,
									"end": 690,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 641,
									"end": 665,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "25"
								},
								{
									"begin": 659,
									"end": 664,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 641,
									"end": 665,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "11"
								},
								{
									"begin": 641,
									"end": 665,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 20
								},
								{
									"begin": 641,
									"end": 665,
									"name": "tag",
									"source": 20,
									"value": "25"
								},
								{
									"begin": 641,
									"end": 665,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 634,
									"end": 639,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 631,
									"end": 666,
									"name": "EQ",
									"source": 20
								},
								{
									"begin": 621,
									"end": 684,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "26"
								},
								{
									"begin": 621,
									"end": 684,
									"name": "JUMPI",
									"source": 20
								},
								{
									"begin": 680,
									"end": 681,
									"name": "PUSH",
									"source": 20,
									"value": "0"
								},
								{
									"begin": 677,
									"end": 678,
									"name": "DUP1",
									"source": 20
								},
								{
									"begin": 670,
									"end": 682,
									"name": "REVERT",
									"source": 20
								},
								{
									"begin": 621,
									"end": 684,
									"name": "tag",
									"source": 20,
									"value": "26"
								},
								{
									"begin": 621,
									"end": 684,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 568,
									"end": 690,
									"name": "POP",
									"source": 20
								},
								{
									"begin": 568,
									"end": 690,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 20
								},
								{
									"begin": 696,
									"end": 839,
									"name": "tag",
									"source": 20,
									"value": "13"
								},
								{
									"begin": 696,
									"end": 839,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 753,
									"end": 758,
									"name": "PUSH",
									"source": 20,
									"value": "0"
								},
								{
									"begin": 784,
									"end": 790,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 778,
									"end": 791,
									"name": "MLOAD",
									"source": 20
								},
								{
									"begin": 769,
									"end": 791,
									"name": "SWAP1",
									"source": 20
								},
								{
									"begin": 769,
									"end": 791,
									"name": "POP",
									"source": 20
								},
								{
									"begin": 800,
									"end": 833,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "28"
								},
								{
									"begin": 827,
									"end": 832,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 800,
									"end": 833,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "12"
								},
								{
									"begin": 800,
									"end": 833,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 20
								},
								{
									"begin": 800,
									"end": 833,
									"name": "tag",
									"source": 20,
									"value": "28"
								},
								{
									"begin": 800,
									"end": 833,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 696,
									"end": 839,
									"name": "SWAP3",
									"source": 20
								},
								{
									"begin": 696,
									"end": 839,
									"name": "SWAP2",
									"source": 20
								},
								{
									"begin": 696,
									"end": 839,
									"name": "POP",
									"source": 20
								},
								{
									"begin": 696,
									"end": 839,
									"name": "POP",
									"source": 20
								},
								{
									"begin": 696,
									"end": 839,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 20
								},
								{
									"begin": 845,
									"end": 922,
									"name": "tag",
									"source": 20,
									"value": "14"
								},
								{
									"begin": 845,
									"end": 922,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 882,
									"end": 889,
									"name": "PUSH",
									"source": 20,
									"value": "0"
								},
								{
									"begin": 911,
									"end": 916,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 900,
									"end": 916,
									"name": "SWAP1",
									"source": 20
								},
								{
									"begin": 900,
									"end": 916,
									"name": "POP",
									"source": 20
								},
								{
									"begin": 845,
									"end": 922,
									"name": "SWAP2",
									"source": 20
								},
								{
									"begin": 845,
									"end": 922,
									"name": "SWAP1",
									"source": 20
								},
								{
									"begin": 845,
									"end": 922,
									"name": "POP",
									"source": 20
								},
								{
									"begin": 845,
									"end": 922,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 20
								},
								{
									"begin": 928,
									"end": 1050,
									"name": "tag",
									"source": 20,
									"value": "15"
								},
								{
									"begin": 928,
									"end": 1050,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 1001,
									"end": 1025,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "31"
								},
								{
									"begin": 1019,
									"end": 1024,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 1001,
									"end": 1025,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "14"
								},
								{
									"begin": 1001,
									"end": 1025,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 20
								},
								{
									"begin": 1001,
									"end": 1025,
									"name": "tag",
									"source": 20,
									"value": "31"
								},
								{
									"begin": 1001,
									"end": 1025,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 994,
									"end": 999,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 991,
									"end": 1026,
									"name": "EQ",
									"source": 20
								},
								{
									"begin": 981,
									"end": 1044,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "32"
								},
								{
									"begin": 981,
									"end": 1044,
									"name": "JUMPI",
									"source": 20
								},
								{
									"begin": 1040,
									"end": 1041,
									"name": "PUSH",
									"source": 20,
									"value": "0"
								},
								{
									"begin": 1037,
									"end": 1038,
									"name": "DUP1",
									"source": 20
								},
								{
									"begin": 1030,
									"end": 1042,
									"name": "REVERT",
									"source": 20
								},
								{
									"begin": 981,
									"end": 1044,
									"name": "tag",
									"source": 20,
									"value": "32"
								},
								{
									"begin": 981,
									"end": 1044,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 928,
									"end": 1050,
									"name": "POP",
									"source": 20
								},
								{
									"begin": 928,
									"end": 1050,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 20
								},
								{
									"begin": 1056,
									"end": 1199,
									"name": "tag",
									"source": 20,
									"value": "16"
								},
								{
									"begin": 1056,
									"end": 1199,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 1113,
									"end": 1118,
									"name": "PUSH",
									"source": 20,
									"value": "0"
								},
								{
									"begin": 1144,
									"end": 1150,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 1138,
									"end": 1151,
									"name": "MLOAD",
									"source": 20
								},
								{
									"begin": 1129,
									"end": 1151,
									"name": "SWAP1",
									"source": 20
								},
								{
									"begin": 1129,
									"end": 1151,
									"name": "POP",
									"source": 20
								},
								{
									"begin": 1160,
									"end": 1193,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "34"
								},
								{
									"begin": 1187,
									"end": 1192,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 1160,
									"end": 1193,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "15"
								},
								{
									"begin": 1160,
									"end": 1193,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 20
								},
								{
									"begin": 1160,
									"end": 1193,
									"name": "tag",
									"source": 20,
									"value": "34"
								},
								{
									"begin": 1160,
									"end": 1193,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 1056,
									"end": 1199,
									"name": "SWAP3",
									"source": 20
								},
								{
									"begin": 1056,
									"end": 1199,
									"name": "SWAP2",
									"source": 20
								},
								{
									"begin": 1056,
									"end": 1199,
									"name": "POP",
									"source": 20
								},
								{
									"begin": 1056,
									"end": 1199,
									"name": "POP",
									"source": 20
								},
								{
									"begin": 1056,
									"end": 1199,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 20
								},
								{
									"begin": 1205,
									"end": 1712,
									"name": "tag",
									"source": 20,
									"value": "3"
								},
								{
									"begin": 1205,
									"end": 1712,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 1284,
									"end": 1290,
									"name": "PUSH",
									"source": 20,
									"value": "0"
								},
								{
									"begin": 1292,
									"end": 1298,
									"name": "DUP1",
									"source": 20
								},
								{
									"begin": 1341,
									"end": 1343,
									"name": "PUSH",
									"source": 20,
									"value": "40"
								},
								{
									"begin": 1329,
									"end": 1338,
									"name": "DUP4",
									"source": 20
								},
								{
									"begin": 1320,
									"end": 1327,
									"name": "DUP6",
									"source": 20
								},
								{
									"begin": 1316,
									"end": 1339,
									"name": "SUB",
									"source": 20
								},
								{
									"begin": 1312,
									"end": 1344,
									"name": "SLT",
									"source": 20
								},
								{
									"begin": 1309,
									"end": 1428,
									"name": "ISZERO",
									"source": 20
								},
								{
									"begin": 1309,
									"end": 1428,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "36"
								},
								{
									"begin": 1309,
									"end": 1428,
									"name": "JUMPI",
									"source": 20
								},
								{
									"begin": 1347,
									"end": 1426,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "37"
								},
								{
									"begin": 1347,
									"end": 1426,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "8"
								},
								{
									"begin": 1347,
									"end": 1426,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 20
								},
								{
									"begin": 1347,
									"end": 1426,
									"name": "tag",
									"source": 20,
									"value": "37"
								},
								{
									"begin": 1347,
									"end": 1426,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 1309,
									"end": 1428,
									"name": "tag",
									"source": 20,
									"value": "36"
								},
								{
									"begin": 1309,
									"end": 1428,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 1467,
									"end": 1468,
									"name": "PUSH",
									"source": 20,
									"value": "0"
								},
								{
									"begin": 1492,
									"end": 1556,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "38"
								},
								{
									"begin": 1548,
									"end": 1555,
									"name": "DUP6",
									"source": 20
								},
								{
									"begin": 1539,
									"end": 1545,
									"name": "DUP3",
									"source": 20
								},
								{
									"begin": 1528,
									"end": 1537,
									"name": "DUP7",
									"source": 20
								},
								{
									"begin": 1524,
									"end": 1546,
									"name": "ADD",
									"source": 20
								},
								{
									"begin": 1492,
									"end": 1556,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "13"
								},
								{
									"begin": 1492,
									"end": 1556,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 20
								},
								{
									"begin": 1492,
									"end": 1556,
									"name": "tag",
									"source": 20,
									"value": "38"
								},
								{
									"begin": 1492,
									"end": 1556,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 1482,
									"end": 1556,
									"name": "SWAP3",
									"source": 20
								},
								{
									"begin": 1482,
									"end": 1556,
									"name": "POP",
									"source": 20
								},
								{
									"begin": 1438,
									"end": 1566,
									"name": "POP",
									"source": 20
								},
								{
									"begin": 1605,
									"end": 1607,
									"name": "PUSH",
									"source": 20,
									"value": "20"
								},
								{
									"begin": 1631,
									"end": 1695,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "39"
								},
								{
									"begin": 1687,
									"end": 1694,
									"name": "DUP6",
									"source": 20
								},
								{
									"begin": 1678,
									"end": 1684,
									"name": "DUP3",
									"source": 20
								},
								{
									"begin": 1667,
									"end": 1676,
									"name": "DUP7",
									"source": 20
								},
								{
									"begin": 1663,
									"end": 1685,
									"name": "ADD",
									"source": 20
								},
								{
									"begin": 1631,
									"end": 1695,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "16"
								},
								{
									"begin": 1631,
									"end": 1695,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 20
								},
								{
									"begin": 1631,
									"end": 1695,
									"name": "tag",
									"source": 20,
									"value": "39"
								},
								{
									"begin": 1631,
									"end": 1695,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 1621,
									"end": 1695,
									"name": "SWAP2",
									"source": 20
								},
								{
									"begin": 1621,
									"end": 1695,
									"name": "POP",
									"source": 20
								},
								{
									"begin": 1576,
									"end": 1705,
									"name": "POP",
									"source": 20
								},
								{
									"begin": 1205,
									"end": 1712,
									"name": "SWAP3",
									"source": 20
								},
								{
									"begin": 1205,
									"end": 1712,
									"name": "POP",
									"source": 20
								},
								{
									"begin": 1205,
									"end": 1712,
									"name": "SWAP3",
									"source": 20
								},
								{
									"begin": 1205,
									"end": 1712,
									"name": "SWAP1",
									"source": 20
								},
								{
									"begin": 1205,
									"end": 1712,
									"name": "POP",
									"source": 20
								},
								{
									"begin": 1205,
									"end": 1712,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 20
								},
								{
									"begin": 419,
									"end": 9371,
									"name": "tag",
									"source": 0,
									"value": "6"
								},
								{
									"begin": 419,
									"end": 9371,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 419,
									"end": 9371,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 419,
									"end": 9371,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 419,
									"end": 9371,
									"name": "PUSH [$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 419,
									"end": 9371,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 419,
									"end": 9371,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 419,
									"end": 9371,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 419,
									"end": 9371,
									"name": "RETURN",
									"source": 0
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212205bee183ca04199921b2222961c958043d10d422c901cae9895ae3815e3cd613064736f6c63430008130033",
									".code": [
										{
											"begin": 419,
											"end": 9371,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 419,
											"end": 9371,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 419,
											"end": 9371,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 419,
											"end": 9371,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 419,
											"end": 9371,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 419,
											"end": 9371,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 419,
											"end": 9371,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 419,
											"end": 9371,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 419,
											"end": 9371,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 419,
											"end": 9371,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 419,
											"end": 9371,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 419,
											"end": 9371,
											"name": "tag",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 419,
											"end": 9371,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 419,
											"end": 9371,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 419,
											"end": 9371,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 419,
											"end": 9371,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 419,
											"end": 9371,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 419,
											"end": 9371,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 419,
											"end": 9371,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 419,
											"end": 9371,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 419,
											"end": 9371,
											"name": "CALLDATALOAD",
											"source": 0
										},
										{
											"begin": 419,
											"end": 9371,
											"name": "PUSH",
											"source": 0,
											"value": "E0"
										},
										{
											"begin": 419,
											"end": 9371,
											"name": "SHR",
											"source": 0
										},
										{
											"begin": 419,
											"end": 9371,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 419,
											"end": 9371,
											"name": "PUSH",
											"source": 0,
											"value": "98C50FDD"
										},
										{
											"begin": 419,
											"end": 9371,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 419,
											"end": 9371,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "16"
										},
										{
											"begin": 419,
											"end": 9371,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 419,
											"end": 9371,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 419,
											"end": 9371,
											"name": "PUSH",
											"source": 0,
											"value": "C3CF1AA6"
										},
										{
											"begin": 419,
											"end": 9371,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 419,
											"end": 9371,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "17"
										},
										{
											"begin": 419,
											"end": 9371,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 419,
											"end": 9371,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 419,
											"end": 9371,
											"name": "PUSH",
											"source": 0,
											"value": "C3CF1AA6"
										},
										{
											"begin": 419,
											"end": 9371,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 419,
											"end": 9371,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 419,
											"end": 9371,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 419,
											"end": 9371,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 419,
											"end": 9371,
											"name": "PUSH",
											"source": 0,
											"value": "D91AF492"
										},
										{
											"begin": 419,
											"end": 9371,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 419,
											"end": 9371,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "13"
										},
										{
											"begin": 419,
											"end": 9371,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 419,
											"end": 9371,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 419,
											"end": 9371,
											"name": "PUSH",
											"source": 0,
											"value": "DF0905C6"
										},
										{
											"begin": 419,
											"end": 9371,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 419,
											"end": 9371,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "14"
										},
										{
											"begin": 419,
											"end": 9371,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 419,
											"end": 9371,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 419,
											"end": 9371,
											"name": "PUSH",
											"source": 0,
											"value": "FC993EA8"
										},
										{
											"begin": 419,
											"end": 9371,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 419,
											"end": 9371,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "15"
										},
										{
											"begin": 419,
											"end": 9371,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 419,
											"end": 9371,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 419,
											"end": 9371,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 419,
											"end": 9371,
											"name": "tag",
											"source": 0,
											"value": "17"
										},
										{
											"begin": 419,
											"end": 9371,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 419,
											"end": 9371,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 419,
											"end": 9371,
											"name": "PUSH",
											"source": 0,
											"value": "98C50FDD"
										},
										{
											"begin": 419,
											"end": 9371,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 419,
											"end": 9371,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "9"
										},
										{
											"begin": 419,
											"end": 9371,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 419,
											"end": 9371,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 419,
											"end": 9371,
											"name": "PUSH",
											"source": 0,
											"value": "B8D7F980"
										},
										{
											"begin": 419,
											"end": 9371,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 419,
											"end": 9371,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "10"
										},
										{
											"begin": 419,
											"end": 9371,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 419,
											"end": 9371,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 419,
											"end": 9371,
											"name": "PUSH",
											"source": 0,
											"value": "C0102DE4"
										},
										{
											"begin": 419,
											"end": 9371,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 419,
											"end": 9371,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "11"
										},
										{
											"begin": 419,
											"end": 9371,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 419,
											"end": 9371,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 419,
											"end": 9371,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 419,
											"end": 9371,
											"name": "tag",
											"source": 0,
											"value": "16"
										},
										{
											"begin": 419,
											"end": 9371,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 419,
											"end": 9371,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 419,
											"end": 9371,
											"name": "PUSH",
											"source": 0,
											"value": "D45431D"
										},
										{
											"begin": 419,
											"end": 9371,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 419,
											"end": 9371,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 419,
											"end": 9371,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 419,
											"end": 9371,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 419,
											"end": 9371,
											"name": "PUSH",
											"source": 0,
											"value": "25AC3A73"
										},
										{
											"begin": 419,
											"end": 9371,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 419,
											"end": 9371,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 419,
											"end": 9371,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 419,
											"end": 9371,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 419,
											"end": 9371,
											"name": "PUSH",
											"source": 0,
											"value": "2895CB7B"
										},
										{
											"begin": 419,
											"end": 9371,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 419,
											"end": 9371,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 419,
											"end": 9371,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 419,
											"end": 9371,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 419,
											"end": 9371,
											"name": "PUSH",
											"source": 0,
											"value": "59DE2F60"
										},
										{
											"begin": 419,
											"end": 9371,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 419,
											"end": 9371,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "6"
										},
										{
											"begin": 419,
											"end": 9371,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 419,
											"end": 9371,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 419,
											"end": 9371,
											"name": "PUSH",
											"source": 0,
											"value": "696D6283"
										},
										{
											"begin": 419,
											"end": 9371,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 419,
											"end": 9371,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "7"
										},
										{
											"begin": 419,
											"end": 9371,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 419,
											"end": 9371,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 419,
											"end": 9371,
											"name": "PUSH",
											"source": 0,
											"value": "77BCD8A6"
										},
										{
											"begin": 419,
											"end": 9371,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 419,
											"end": 9371,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 419,
											"end": 9371,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 419,
											"end": 9371,
											"name": "tag",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 419,
											"end": 9371,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 419,
											"end": 9371,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 419,
											"end": 9371,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 419,
											"end": 9371,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1624,
											"end": 2717,
											"name": "tag",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 1624,
											"end": 2717,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1624,
											"end": 2717,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "18"
										},
										{
											"begin": 1624,
											"end": 2717,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1624,
											"end": 2717,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1624,
											"end": 2717,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 1624,
											"end": 2717,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1624,
											"end": 2717,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1624,
											"end": 2717,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1624,
											"end": 2717,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1624,
											"end": 2717,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "19"
										},
										{
											"begin": 1624,
											"end": 2717,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1624,
											"end": 2717,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1624,
											"end": 2717,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1624,
											"end": 2717,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1624,
											"end": 2717,
											"name": "tag",
											"source": 0,
											"value": "19"
										},
										{
											"begin": 1624,
											"end": 2717,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1624,
											"end": 2717,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "21"
										},
										{
											"begin": 1624,
											"end": 2717,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1624,
											"end": 2717,
											"name": "tag",
											"source": 0,
											"value": "18"
										},
										{
											"begin": 1624,
											"end": 2717,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1624,
											"end": 2717,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 3890,
											"end": 4497,
											"name": "tag",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 3890,
											"end": 4497,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3890,
											"end": 4497,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "22"
										},
										{
											"begin": 3890,
											"end": 4497,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 3890,
											"end": 4497,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3890,
											"end": 4497,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 3890,
											"end": 4497,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 3890,
											"end": 4497,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3890,
											"end": 4497,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3890,
											"end": 4497,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3890,
											"end": 4497,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "23"
										},
										{
											"begin": 3890,
											"end": 4497,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3890,
											"end": 4497,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3890,
											"end": 4497,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 3890,
											"end": 4497,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 3890,
											"end": 4497,
											"name": "tag",
											"source": 0,
											"value": "23"
										},
										{
											"begin": 3890,
											"end": 4497,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3890,
											"end": 4497,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "25"
										},
										{
											"begin": 3890,
											"end": 4497,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 3890,
											"end": 4497,
											"name": "tag",
											"source": 0,
											"value": "22"
										},
										{
											"begin": 3890,
											"end": 4497,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3890,
											"end": 4497,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 6542,
											"end": 7975,
											"name": "tag",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 6542,
											"end": 7975,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6542,
											"end": 7975,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "26"
										},
										{
											"begin": 6542,
											"end": 7975,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 6542,
											"end": 7975,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 6542,
											"end": 7975,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 6542,
											"end": 7975,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 6542,
											"end": 7975,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 6542,
											"end": 7975,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 6542,
											"end": 7975,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 6542,
											"end": 7975,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "27"
										},
										{
											"begin": 6542,
											"end": 7975,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 6542,
											"end": 7975,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 6542,
											"end": 7975,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 6542,
											"end": 7975,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 6542,
											"end": 7975,
											"name": "tag",
											"source": 0,
											"value": "27"
										},
										{
											"begin": 6542,
											"end": 7975,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6542,
											"end": 7975,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "28"
										},
										{
											"begin": 6542,
											"end": 7975,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 6542,
											"end": 7975,
											"name": "tag",
											"source": 0,
											"value": "26"
										},
										{
											"begin": 6542,
											"end": 7975,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6542,
											"end": 7975,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 1178,
											"end": 1242,
											"name": "tag",
											"source": 0,
											"value": "6"
										},
										{
											"begin": 1178,
											"end": 1242,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1178,
											"end": 1242,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "29"
										},
										{
											"begin": 1178,
											"end": 1242,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1178,
											"end": 1242,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1178,
											"end": 1242,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 1178,
											"end": 1242,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1178,
											"end": 1242,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1178,
											"end": 1242,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1178,
											"end": 1242,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1178,
											"end": 1242,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "30"
										},
										{
											"begin": 1178,
											"end": 1242,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1178,
											"end": 1242,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1178,
											"end": 1242,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "31"
										},
										{
											"begin": 1178,
											"end": 1242,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1178,
											"end": 1242,
											"name": "tag",
											"source": 0,
											"value": "30"
										},
										{
											"begin": 1178,
											"end": 1242,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1178,
											"end": 1242,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "32"
										},
										{
											"begin": 1178,
											"end": 1242,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1178,
											"end": 1242,
											"name": "tag",
											"source": 0,
											"value": "29"
										},
										{
											"begin": 1178,
											"end": 1242,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1178,
											"end": 1242,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1178,
											"end": 1242,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1178,
											"end": 1242,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "33"
										},
										{
											"begin": 1178,
											"end": 1242,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1178,
											"end": 1242,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1178,
											"end": 1242,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "34"
										},
										{
											"begin": 1178,
											"end": 1242,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1178,
											"end": 1242,
											"name": "tag",
											"source": 0,
											"value": "33"
										},
										{
											"begin": 1178,
											"end": 1242,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1178,
											"end": 1242,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1178,
											"end": 1242,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1178,
											"end": 1242,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1178,
											"end": 1242,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1178,
											"end": 1242,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1178,
											"end": 1242,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1178,
											"end": 1242,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 8162,
											"end": 8432,
											"name": "tag",
											"source": 0,
											"value": "7"
										},
										{
											"begin": 8162,
											"end": 8432,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 8162,
											"end": 8432,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "35"
										},
										{
											"begin": 8162,
											"end": 8432,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 8162,
											"end": 8432,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 8162,
											"end": 8432,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 8162,
											"end": 8432,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 8162,
											"end": 8432,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 8162,
											"end": 8432,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 8162,
											"end": 8432,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8162,
											"end": 8432,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "36"
										},
										{
											"begin": 8162,
											"end": 8432,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 8162,
											"end": 8432,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8162,
											"end": 8432,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "37"
										},
										{
											"begin": 8162,
											"end": 8432,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 8162,
											"end": 8432,
											"name": "tag",
											"source": 0,
											"value": "36"
										},
										{
											"begin": 8162,
											"end": 8432,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 8162,
											"end": 8432,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "38"
										},
										{
											"begin": 8162,
											"end": 8432,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 8162,
											"end": 8432,
											"name": "tag",
											"source": 0,
											"value": "35"
										},
										{
											"begin": 8162,
											"end": 8432,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 8162,
											"end": 8432,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 8162,
											"end": 8432,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 8162,
											"end": 8432,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "39"
										},
										{
											"begin": 8162,
											"end": 8432,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 8162,
											"end": 8432,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8162,
											"end": 8432,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 8162,
											"end": 8432,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 8162,
											"end": 8432,
											"name": "tag",
											"source": 0,
											"value": "39"
										},
										{
											"begin": 8162,
											"end": 8432,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 8162,
											"end": 8432,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 8162,
											"end": 8432,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 8162,
											"end": 8432,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 8162,
											"end": 8432,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 8162,
											"end": 8432,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 8162,
											"end": 8432,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8162,
											"end": 8432,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 5318,
											"end": 6455,
											"name": "tag",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 5318,
											"end": 6455,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5318,
											"end": 6455,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "41"
										},
										{
											"begin": 5318,
											"end": 6455,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 5318,
											"end": 6455,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 5318,
											"end": 6455,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 5318,
											"end": 6455,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 5318,
											"end": 6455,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 5318,
											"end": 6455,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 5318,
											"end": 6455,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5318,
											"end": 6455,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "42"
										},
										{
											"begin": 5318,
											"end": 6455,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 5318,
											"end": 6455,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5318,
											"end": 6455,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 5318,
											"end": 6455,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 5318,
											"end": 6455,
											"name": "tag",
											"source": 0,
											"value": "42"
										},
										{
											"begin": 5318,
											"end": 6455,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5318,
											"end": 6455,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "43"
										},
										{
											"begin": 5318,
											"end": 6455,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 5318,
											"end": 6455,
											"name": "tag",
											"source": 0,
											"value": "41"
										},
										{
											"begin": 5318,
											"end": 6455,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5318,
											"end": 6455,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 8823,
											"end": 9366,
											"name": "tag",
											"source": 0,
											"value": "9"
										},
										{
											"begin": 8823,
											"end": 9366,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 8823,
											"end": 9366,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "44"
										},
										{
											"begin": 8823,
											"end": 9366,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 8823,
											"end": 9366,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 8823,
											"end": 9366,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 8823,
											"end": 9366,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 8823,
											"end": 9366,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 8823,
											"end": 9366,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 8823,
											"end": 9366,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8823,
											"end": 9366,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "45"
										},
										{
											"begin": 8823,
											"end": 9366,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 8823,
											"end": 9366,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8823,
											"end": 9366,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "46"
										},
										{
											"begin": 8823,
											"end": 9366,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 8823,
											"end": 9366,
											"name": "tag",
											"source": 0,
											"value": "45"
										},
										{
											"begin": 8823,
											"end": 9366,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 8823,
											"end": 9366,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "47"
										},
										{
											"begin": 8823,
											"end": 9366,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 8823,
											"end": 9366,
											"name": "tag",
											"source": 0,
											"value": "44"
										},
										{
											"begin": 8823,
											"end": 9366,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 8823,
											"end": 9366,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 8823,
											"end": 9366,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 8823,
											"end": 9366,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "48"
										},
										{
											"begin": 8823,
											"end": 9366,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 8823,
											"end": 9366,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8823,
											"end": 9366,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "49"
										},
										{
											"begin": 8823,
											"end": 9366,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 8823,
											"end": 9366,
											"name": "tag",
											"source": 0,
											"value": "48"
										},
										{
											"begin": 8823,
											"end": 9366,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 8823,
											"end": 9366,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 8823,
											"end": 9366,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 8823,
											"end": 9366,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 8823,
											"end": 9366,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 8823,
											"end": 9366,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 8823,
											"end": 9366,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8823,
											"end": 9366,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 1426,
											"end": 1490,
											"name": "tag",
											"source": 0,
											"value": "10"
										},
										{
											"begin": 1426,
											"end": 1490,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1426,
											"end": 1490,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "50"
										},
										{
											"begin": 1426,
											"end": 1490,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1426,
											"end": 1490,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1426,
											"end": 1490,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 1426,
											"end": 1490,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1426,
											"end": 1490,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1426,
											"end": 1490,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1426,
											"end": 1490,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1426,
											"end": 1490,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "51"
										},
										{
											"begin": 1426,
											"end": 1490,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1426,
											"end": 1490,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1426,
											"end": 1490,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "31"
										},
										{
											"begin": 1426,
											"end": 1490,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1426,
											"end": 1490,
											"name": "tag",
											"source": 0,
											"value": "51"
										},
										{
											"begin": 1426,
											"end": 1490,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1426,
											"end": 1490,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "52"
										},
										{
											"begin": 1426,
											"end": 1490,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1426,
											"end": 1490,
											"name": "tag",
											"source": 0,
											"value": "50"
										},
										{
											"begin": 1426,
											"end": 1490,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1426,
											"end": 1490,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1426,
											"end": 1490,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1426,
											"end": 1490,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "53"
										},
										{
											"begin": 1426,
											"end": 1490,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1426,
											"end": 1490,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1426,
											"end": 1490,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "34"
										},
										{
											"begin": 1426,
											"end": 1490,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1426,
											"end": 1490,
											"name": "tag",
											"source": 0,
											"value": "53"
										},
										{
											"begin": 1426,
											"end": 1490,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1426,
											"end": 1490,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1426,
											"end": 1490,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1426,
											"end": 1490,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1426,
											"end": 1490,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1426,
											"end": 1490,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1426,
											"end": 1490,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1426,
											"end": 1490,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 4505,
											"end": 5265,
											"name": "tag",
											"source": 0,
											"value": "11"
										},
										{
											"begin": 4505,
											"end": 5265,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4505,
											"end": 5265,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "54"
										},
										{
											"begin": 4505,
											"end": 5265,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 4505,
											"end": 5265,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4505,
											"end": 5265,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 4505,
											"end": 5265,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 4505,
											"end": 5265,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4505,
											"end": 5265,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4505,
											"end": 5265,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4505,
											"end": 5265,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "55"
										},
										{
											"begin": 4505,
											"end": 5265,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 4505,
											"end": 5265,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4505,
											"end": 5265,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 4505,
											"end": 5265,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 4505,
											"end": 5265,
											"name": "tag",
											"source": 0,
											"value": "55"
										},
										{
											"begin": 4505,
											"end": 5265,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4505,
											"end": 5265,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "56"
										},
										{
											"begin": 4505,
											"end": 5265,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 4505,
											"end": 5265,
											"name": "tag",
											"source": 0,
											"value": "54"
										},
										{
											"begin": 4505,
											"end": 5265,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4505,
											"end": 5265,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 8038,
											"end": 8087,
											"name": "tag",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 8038,
											"end": 8087,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 8038,
											"end": 8087,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "57"
										},
										{
											"begin": 8038,
											"end": 8087,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 8038,
											"end": 8087,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 8038,
											"end": 8087,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 8038,
											"end": 8087,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 8038,
											"end": 8087,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 8038,
											"end": 8087,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 8038,
											"end": 8087,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8038,
											"end": 8087,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "58"
										},
										{
											"begin": 8038,
											"end": 8087,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 8038,
											"end": 8087,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8038,
											"end": 8087,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 8038,
											"end": 8087,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 8038,
											"end": 8087,
											"name": "tag",
											"source": 0,
											"value": "58"
										},
										{
											"begin": 8038,
											"end": 8087,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 8038,
											"end": 8087,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "59"
										},
										{
											"begin": 8038,
											"end": 8087,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 8038,
											"end": 8087,
											"name": "tag",
											"source": 0,
											"value": "57"
										},
										{
											"begin": 8038,
											"end": 8087,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 8038,
											"end": 8087,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 2746,
											"end": 3761,
											"name": "tag",
											"source": 0,
											"value": "13"
										},
										{
											"begin": 2746,
											"end": 3761,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2746,
											"end": 3761,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 2746,
											"end": 3761,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2746,
											"end": 3761,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2746,
											"end": 3761,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 2746,
											"end": 3761,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2746,
											"end": 3761,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2746,
											"end": 3761,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2746,
											"end": 3761,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2746,
											"end": 3761,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "61"
										},
										{
											"begin": 2746,
											"end": 3761,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2746,
											"end": 3761,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2746,
											"end": 3761,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "62"
										},
										{
											"begin": 2746,
											"end": 3761,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2746,
											"end": 3761,
											"name": "tag",
											"source": 0,
											"value": "61"
										},
										{
											"begin": 2746,
											"end": 3761,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2746,
											"end": 3761,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "63"
										},
										{
											"begin": 2746,
											"end": 3761,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2746,
											"end": 3761,
											"name": "tag",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 2746,
											"end": 3761,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2746,
											"end": 3761,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 1302,
											"end": 1366,
											"name": "tag",
											"source": 0,
											"value": "14"
										},
										{
											"begin": 1302,
											"end": 1366,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1302,
											"end": 1366,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "64"
										},
										{
											"begin": 1302,
											"end": 1366,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1302,
											"end": 1366,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1302,
											"end": 1366,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 1302,
											"end": 1366,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1302,
											"end": 1366,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1302,
											"end": 1366,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1302,
											"end": 1366,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1302,
											"end": 1366,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "65"
										},
										{
											"begin": 1302,
											"end": 1366,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1302,
											"end": 1366,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1302,
											"end": 1366,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "31"
										},
										{
											"begin": 1302,
											"end": 1366,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1302,
											"end": 1366,
											"name": "tag",
											"source": 0,
											"value": "65"
										},
										{
											"begin": 1302,
											"end": 1366,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1302,
											"end": 1366,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "66"
										},
										{
											"begin": 1302,
											"end": 1366,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1302,
											"end": 1366,
											"name": "tag",
											"source": 0,
											"value": "64"
										},
										{
											"begin": 1302,
											"end": 1366,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1302,
											"end": 1366,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1302,
											"end": 1366,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1302,
											"end": 1366,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "67"
										},
										{
											"begin": 1302,
											"end": 1366,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1302,
											"end": 1366,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1302,
											"end": 1366,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "34"
										},
										{
											"begin": 1302,
											"end": 1366,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1302,
											"end": 1366,
											"name": "tag",
											"source": 0,
											"value": "67"
										},
										{
											"begin": 1302,
											"end": 1366,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1302,
											"end": 1366,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1302,
											"end": 1366,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1302,
											"end": 1366,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1302,
											"end": 1366,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1302,
											"end": 1366,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1302,
											"end": 1366,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1302,
											"end": 1366,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 1537,
											"end": 1601,
											"name": "tag",
											"source": 0,
											"value": "15"
										},
										{
											"begin": 1537,
											"end": 1601,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1537,
											"end": 1601,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "68"
										},
										{
											"begin": 1537,
											"end": 1601,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1537,
											"end": 1601,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1537,
											"end": 1601,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 1537,
											"end": 1601,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1537,
											"end": 1601,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1537,
											"end": 1601,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1537,
											"end": 1601,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1537,
											"end": 1601,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "69"
										},
										{
											"begin": 1537,
											"end": 1601,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1537,
											"end": 1601,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1537,
											"end": 1601,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "31"
										},
										{
											"begin": 1537,
											"end": 1601,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1537,
											"end": 1601,
											"name": "tag",
											"source": 0,
											"value": "69"
										},
										{
											"begin": 1537,
											"end": 1601,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1537,
											"end": 1601,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "70"
										},
										{
											"begin": 1537,
											"end": 1601,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1537,
											"end": 1601,
											"name": "tag",
											"source": 0,
											"value": "68"
										},
										{
											"begin": 1537,
											"end": 1601,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1537,
											"end": 1601,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1537,
											"end": 1601,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1537,
											"end": 1601,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "71"
										},
										{
											"begin": 1537,
											"end": 1601,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1537,
											"end": 1601,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1537,
											"end": 1601,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "34"
										},
										{
											"begin": 1537,
											"end": 1601,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1537,
											"end": 1601,
											"name": "tag",
											"source": 0,
											"value": "71"
										},
										{
											"begin": 1537,
											"end": 1601,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1537,
											"end": 1601,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1537,
											"end": 1601,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1537,
											"end": 1601,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1537,
											"end": 1601,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1537,
											"end": 1601,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1537,
											"end": 1601,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1537,
											"end": 1601,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 1624,
											"end": 2717,
											"name": "tag",
											"source": 0,
											"value": "21"
										},
										{
											"begin": 1624,
											"end": 2717,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1730,
											"end": 1740,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1752,
											"end": 1761,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1741,
											"end": 1751,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 1741,
											"end": 1761,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "73"
										},
										{
											"begin": 1741,
											"end": 1761,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1741,
											"end": 1761,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1741,
											"end": 1761,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "74"
										},
										{
											"begin": 1741,
											"end": 1761,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1741,
											"end": 1761,
											"name": "tag",
											"source": 0,
											"value": "73"
										},
										{
											"begin": 1741,
											"end": 1761,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1730,
											"end": 1761,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1730,
											"end": 1761,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1730,
											"end": 1761,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1730,
											"end": 1761,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1848,
											"end": 1864,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1865,
											"end": 1906,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "75"
										},
										{
											"begin": 1880,
											"end": 1893,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 1894,
											"end": 1900,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 1901,
											"end": 1905,
											"name": "PUSH",
											"source": 0,
											"value": "3E8"
										},
										{
											"begin": 1865,
											"end": 1879,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "38"
										},
										{
											"begin": 1865,
											"end": 1906,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1865,
											"end": 1906,
											"name": "tag",
											"source": 0,
											"value": "75"
										},
										{
											"begin": 1865,
											"end": 1906,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1848,
											"end": 1906,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1848,
											"end": 1906,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1926,
											"end": 1935,
											"name": "PUSH",
											"source": 0,
											"value": "56BC75E2D63100000"
										},
										{
											"begin": 1920,
											"end": 1925,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1920,
											"end": 1935,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 1917,
											"end": 1987,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 1917,
											"end": 1987,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "76"
										},
										{
											"begin": 1917,
											"end": 1987,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1958,
											"end": 1975,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1958,
											"end": 1975,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1958,
											"end": 1975,
											"name": "PUSH",
											"source": 0,
											"value": "E008B5F900000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1958,
											"end": 1975,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1958,
											"end": 1975,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1958,
											"end": 1975,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1958,
											"end": 1975,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1958,
											"end": 1975,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1958,
											"end": 1975,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1958,
											"end": 1975,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1958,
											"end": 1975,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1958,
											"end": 1975,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1958,
											"end": 1975,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1958,
											"end": 1975,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1917,
											"end": 1987,
											"name": "tag",
											"source": 0,
											"value": "76"
										},
										{
											"begin": 1917,
											"end": 1987,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1997,
											"end": 2024,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2025,
											"end": 2338,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2025,
											"end": 2338,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2025,
											"end": 2338,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2025,
											"end": 2338,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 2025,
											"end": 2338,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2025,
											"end": 2338,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2025,
											"end": 2338,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2025,
											"end": 2338,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2060,
											"end": 2061,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 2025,
											"end": 2338,
											"name": "PUSH",
											"source": 0,
											"value": "FF"
										},
										{
											"begin": 2025,
											"end": 2338,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2025,
											"end": 2338,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2025,
											"end": 2338,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2025,
											"end": 2338,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2025,
											"end": 2338,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2084,
											"end": 2086,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2084,
											"end": 2086,
											"name": "PUSH",
											"source": 0,
											"value": "7"
										},
										{
											"begin": 2084,
											"end": 2086,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2084,
											"end": 2086,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2084,
											"end": 2086,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2084,
											"end": 2086,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 2084,
											"end": 2086,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 2084,
											"end": 2086,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2084,
											"end": 2086,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 2084,
											"end": 2086,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2084,
											"end": 2086,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2025,
											"end": 2338,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2025,
											"end": 2338,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2025,
											"end": 2338,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2025,
											"end": 2338,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2025,
											"end": 2338,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2025,
											"end": 2338,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2116,
											"end": 2131,
											"name": "TIMESTAMP",
											"source": 0
										},
										{
											"begin": 2025,
											"end": 2338,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFF"
										},
										{
											"begin": 2025,
											"end": 2338,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2025,
											"end": 2338,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2025,
											"end": 2338,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2025,
											"end": 2338,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2025,
											"end": 2338,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2162,
											"end": 2172,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 2025,
											"end": 2338,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2025,
											"end": 2338,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2025,
											"end": 2338,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2025,
											"end": 2338,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2025,
											"end": 2338,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2025,
											"end": 2338,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2196,
											"end": 2205,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 2025,
											"end": 2338,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2025,
											"end": 2338,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2025,
											"end": 2338,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2025,
											"end": 2338,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2025,
											"end": 2338,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2025,
											"end": 2338,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2233,
											"end": 2246,
											"name": "DUP9",
											"source": 0
										},
										{
											"begin": 2025,
											"end": 2338,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2025,
											"end": 2338,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2025,
											"end": 2338,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2025,
											"end": 2338,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2025,
											"end": 2338,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2025,
											"end": 2338,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2274,
											"end": 2284,
											"name": "CALLER",
											"source": 0
										},
										{
											"begin": 2025,
											"end": 2338,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2025,
											"end": 2338,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2025,
											"end": 2338,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2025,
											"end": 2338,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2025,
											"end": 2338,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2025,
											"end": 2338,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2321,
											"end": 2325,
											"name": "ADDRESS",
											"source": 0
										},
										{
											"begin": 2025,
											"end": 2338,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2025,
											"end": 2338,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2025,
											"end": 2338,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2025,
											"end": 2338,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2025,
											"end": 2338,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1997,
											"end": 2338,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1997,
											"end": 2338,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2363,
											"end": 2374,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2358,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2349,
											"end": 2362,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2359,
											"end": 2361,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2359,
											"end": 2361,
											"name": "PUSH",
											"source": 0,
											"value": "7"
										},
										{
											"begin": 2359,
											"end": 2361,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2359,
											"end": 2361,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2359,
											"end": 2361,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2359,
											"end": 2361,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 2359,
											"end": 2361,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 2359,
											"end": 2361,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2359,
											"end": 2361,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 2359,
											"end": 2361,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2359,
											"end": 2361,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2362,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2349,
											"end": 2362,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2362,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2349,
											"end": 2362,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2362,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2362,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2362,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2349,
											"end": 2362,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2362,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2362,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2362,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2362,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2349,
											"end": 2362,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2362,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2349,
											"end": 2362,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "PUSH",
											"source": 0,
											"value": "FF"
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "PUSH",
											"source": 0,
											"value": "FF"
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "PUSH",
											"source": 0,
											"value": "9"
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFF"
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFF"
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "PUSH",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "PUSH",
											"source": 0,
											"value": "10"
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "PUSH",
											"source": 0,
											"value": "A0"
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "PUSH",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "PUSH",
											"source": 0,
											"value": "C0"
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "PUSH",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "PUSH",
											"source": 0,
											"value": "E0"
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2349,
											"end": 2374,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2421,
											"end": 2491,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "77"
										},
										{
											"begin": 2460,
											"end": 2470,
											"name": "CALLER",
											"source": 0
										},
										{
											"begin": 2479,
											"end": 2483,
											"name": "ADDRESS",
											"source": 0
										},
										{
											"begin": 2485,
											"end": 2490,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 2428,
											"end": 2441,
											"name": "DUP11",
											"source": 0
										},
										{
											"begin": 2421,
											"end": 2459,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2421,
											"end": 2459,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2421,
											"end": 2459,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "78"
										},
										{
											"begin": 2421,
											"end": 2459,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2421,
											"end": 2491,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 2421,
											"end": 2491,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 2421,
											"end": 2491,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2421,
											"end": 2491,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2421,
											"end": 2491,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFF"
										},
										{
											"begin": 2421,
											"end": 2491,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2421,
											"end": 2491,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2421,
											"end": 2491,
											"name": "tag",
											"source": 0,
											"value": "77"
										},
										{
											"begin": 2421,
											"end": 2491,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2566,
											"end": 2615,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "79"
										},
										{
											"begin": 2600,
											"end": 2608,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2609,
											"end": 2614,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 2573,
											"end": 2586,
											"name": "DUP10",
											"source": 0
										},
										{
											"begin": 2566,
											"end": 2599,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2566,
											"end": 2599,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2566,
											"end": 2599,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 2566,
											"end": 2599,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2566,
											"end": 2615,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 2566,
											"end": 2615,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2566,
											"end": 2615,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2566,
											"end": 2615,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFF"
										},
										{
											"begin": 2566,
											"end": 2615,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2566,
											"end": 2615,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2566,
											"end": 2615,
											"name": "tag",
											"source": 0,
											"value": "79"
										},
										{
											"begin": 2566,
											"end": 2615,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2626,
											"end": 2694,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "81"
										},
										{
											"begin": 2673,
											"end": 2677,
											"name": "ADDRESS",
											"source": 0
										},
										{
											"begin": 2679,
											"end": 2687,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2688,
											"end": 2693,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 2633,
											"end": 2646,
											"name": "DUP11",
											"source": 0
										},
										{
											"begin": 2626,
											"end": 2664,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2626,
											"end": 2664,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2626,
											"end": 2664,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "78"
										},
										{
											"begin": 2626,
											"end": 2664,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2626,
											"end": 2694,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 2626,
											"end": 2694,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 2626,
											"end": 2694,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2626,
											"end": 2694,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2626,
											"end": 2694,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFF"
										},
										{
											"begin": 2626,
											"end": 2694,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2626,
											"end": 2694,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2626,
											"end": 2694,
											"name": "tag",
											"source": 0,
											"value": "81"
										},
										{
											"begin": 2626,
											"end": 2694,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2705,
											"end": 2707,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2705,
											"end": 2707,
											"name": "PUSH",
											"source": 0,
											"value": "7"
										},
										{
											"begin": 2705,
											"end": 2709,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2705,
											"end": 2709,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2705,
											"end": 2709,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2705,
											"end": 2709,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2705,
											"end": 2709,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2705,
											"end": 2709,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 2705,
											"end": 2709,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 2705,
											"end": 2709,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2705,
											"end": 2709,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 2705,
											"end": 2709,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2705,
											"end": 2709,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2705,
											"end": 2709,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2705,
											"end": 2709,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 2705,
											"end": 2709,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2705,
											"end": 2709,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2705,
											"end": 2709,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "82"
										},
										{
											"begin": 2705,
											"end": 2709,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2705,
											"end": 2709,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "83"
										},
										{
											"begin": 2705,
											"end": 2709,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2705,
											"end": 2709,
											"name": "tag",
											"source": 0,
											"value": "82"
										},
										{
											"begin": 2705,
											"end": 2709,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2705,
											"end": 2709,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2705,
											"end": 2709,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2705,
											"end": 2709,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 2705,
											"end": 2709,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 2705,
											"end": 2709,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2705,
											"end": 2709,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2705,
											"end": 2709,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2705,
											"end": 2709,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2705,
											"end": 2709,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 2705,
											"end": 2709,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 2705,
											"end": 2709,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2705,
											"end": 2709,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2705,
											"end": 2709,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2705,
											"end": 2709,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2705,
											"end": 2709,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2705,
											"end": 2709,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 2705,
											"end": 2709,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 2705,
											"end": 2709,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2705,
											"end": 2709,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 2705,
											"end": 2709,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2705,
											"end": 2709,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1719,
											"end": 2717,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1719,
											"end": 2717,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1719,
											"end": 2717,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1624,
											"end": 2717,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1624,
											"end": 2717,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1624,
											"end": 2717,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1624,
											"end": 2717,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1624,
											"end": 2717,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 3890,
											"end": 4497,
											"name": "tag",
											"source": 0,
											"value": "25"
										},
										{
											"begin": 3890,
											"end": 4497,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4030,
											"end": 4035,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4004,
											"end": 4012,
											"name": "PUSH",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 4004,
											"end": 4024,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4013,
											"end": 4023,
											"name": "CALLER",
											"source": 0
										},
										{
											"begin": 4004,
											"end": 4024,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4004,
											"end": 4024,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 4004,
											"end": 4024,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4004,
											"end": 4024,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 4004,
											"end": 4024,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4004,
											"end": 4024,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4004,
											"end": 4024,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 4004,
											"end": 4024,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4004,
											"end": 4024,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4004,
											"end": 4024,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4004,
											"end": 4024,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4004,
											"end": 4024,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 4004,
											"end": 4024,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4004,
											"end": 4024,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4004,
											"end": 4024,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 4004,
											"end": 4029,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4025,
											"end": 4028,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 4004,
											"end": 4029,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4004,
											"end": 4029,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 4004,
											"end": 4029,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4004,
											"end": 4029,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4004,
											"end": 4029,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 4004,
											"end": 4029,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4004,
											"end": 4029,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4004,
											"end": 4029,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4004,
											"end": 4029,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4004,
											"end": 4029,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 4004,
											"end": 4029,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4004,
											"end": 4029,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4004,
											"end": 4029,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 4004,
											"end": 4029,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4004,
											"end": 4035,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 4004,
											"end": 4035,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 4004,
											"end": 4035,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4004,
											"end": 4035,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 4004,
											"end": 4035,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4004,
											"end": 4035,
											"name": "PUSH",
											"source": 0,
											"value": "FF"
										},
										{
											"begin": 4004,
											"end": 4035,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 4004,
											"end": 4035,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 4004,
											"end": 4035,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 4004,
											"end": 4035,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4004,
											"end": 4035,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 4004,
											"end": 4035,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 4004,
											"end": 4035,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 4004,
											"end": 4035,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 4004,
											"end": 4035,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 4004,
											"end": 4035,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4004,
											"end": 4035,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 4001,
											"end": 4066,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 4001,
											"end": 4066,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "85"
										},
										{
											"begin": 4001,
											"end": 4066,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 4044,
											"end": 4064,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 4044,
											"end": 4064,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 4044,
											"end": 4064,
											"name": "PUSH",
											"source": 0,
											"value": "4232716900000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 4044,
											"end": 4064,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4044,
											"end": 4064,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4044,
											"end": 4064,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 4044,
											"end": 4064,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4044,
											"end": 4064,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 4044,
											"end": 4064,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 4044,
											"end": 4064,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4044,
											"end": 4064,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 4044,
											"end": 4064,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 4044,
											"end": 4064,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4044,
											"end": 4064,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 4001,
											"end": 4066,
											"name": "tag",
											"source": 0,
											"value": "85"
										},
										{
											"begin": 4001,
											"end": 4066,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4174,
											"end": 4184,
											"name": "CALLER",
											"source": 0
										},
										{
											"begin": 4158,
											"end": 4184,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4158,
											"end": 4184,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 4158,
											"end": 4172,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "86"
										},
										{
											"begin": 4168,
											"end": 4171,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 4158,
											"end": 4167,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "87"
										},
										{
											"begin": 4158,
											"end": 4172,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 4158,
											"end": 4172,
											"name": "tag",
											"source": 0,
											"value": "86"
										},
										{
											"begin": 4158,
											"end": 4172,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4158,
											"end": 4184,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4158,
											"end": 4184,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 4158,
											"end": 4184,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 4155,
											"end": 4206,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "88"
										},
										{
											"begin": 4155,
											"end": 4206,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 4193,
											"end": 4204,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 4193,
											"end": 4204,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 4193,
											"end": 4204,
											"name": "PUSH",
											"source": 0,
											"value": "D7C498BF00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 4193,
											"end": 4204,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4193,
											"end": 4204,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4193,
											"end": 4204,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 4193,
											"end": 4204,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4193,
											"end": 4204,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 4193,
											"end": 4204,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 4193,
											"end": 4204,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4193,
											"end": 4204,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 4193,
											"end": 4204,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 4193,
											"end": 4204,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4193,
											"end": 4204,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 4155,
											"end": 4206,
											"name": "tag",
											"source": 0,
											"value": "88"
										},
										{
											"begin": 4155,
											"end": 4206,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4263,
											"end": 4288,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4289,
											"end": 4298,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 4289,
											"end": 4303,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4299,
											"end": 4302,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 4289,
											"end": 4303,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4289,
											"end": 4303,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 4289,
											"end": 4303,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4289,
											"end": 4303,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 4289,
											"end": 4303,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4289,
											"end": 4303,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4289,
											"end": 4303,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 4289,
											"end": 4303,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4289,
											"end": 4303,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4289,
											"end": 4303,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4289,
											"end": 4303,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4289,
											"end": 4303,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 4289,
											"end": 4303,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4289,
											"end": 4303,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4289,
											"end": 4303,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 4289,
											"end": 4318,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4289,
											"end": 4318,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4289,
											"end": 4318,
											"name": "PUSH",
											"source": 0,
											"value": "10"
										},
										{
											"begin": 4289,
											"end": 4318,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4289,
											"end": 4318,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 4289,
											"end": 4318,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4289,
											"end": 4318,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 4289,
											"end": 4318,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 4289,
											"end": 4318,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4289,
											"end": 4318,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 4289,
											"end": 4318,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4289,
											"end": 4318,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 4263,
											"end": 4318,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4263,
											"end": 4318,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 4263,
											"end": 4318,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4263,
											"end": 4318,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4329,
											"end": 4410,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "89"
										},
										{
											"begin": 4367,
											"end": 4377,
											"name": "CALLER",
											"source": 0
										},
										{
											"begin": 4386,
											"end": 4390,
											"name": "ADDRESS",
											"source": 0
										},
										{
											"begin": 4392,
											"end": 4409,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 4336,
											"end": 4348,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 4336,
											"end": 4348,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4336,
											"end": 4348,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4336,
											"end": 4348,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 4336,
											"end": 4348,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4336,
											"end": 4348,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 4336,
											"end": 4348,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 4336,
											"end": 4348,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4336,
											"end": 4348,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 4336,
											"end": 4348,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4336,
											"end": 4348,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 4329,
											"end": 4366,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4329,
											"end": 4366,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 4329,
											"end": 4366,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "78"
										},
										{
											"begin": 4329,
											"end": 4366,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4329,
											"end": 4410,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 4329,
											"end": 4410,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 4329,
											"end": 4410,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 4329,
											"end": 4410,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4329,
											"end": 4410,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFF"
										},
										{
											"begin": 4329,
											"end": 4410,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 4329,
											"end": 4410,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 4329,
											"end": 4410,
											"name": "tag",
											"source": 0,
											"value": "89"
										},
										{
											"begin": 4329,
											"end": 4410,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4447,
											"end": 4451,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 4421,
											"end": 4429,
											"name": "PUSH",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 4421,
											"end": 4441,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4430,
											"end": 4440,
											"name": "CALLER",
											"source": 0
										},
										{
											"begin": 4421,
											"end": 4441,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4421,
											"end": 4441,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 4421,
											"end": 4441,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4421,
											"end": 4441,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 4421,
											"end": 4441,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4421,
											"end": 4441,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4421,
											"end": 4441,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 4421,
											"end": 4441,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4421,
											"end": 4441,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4421,
											"end": 4441,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4421,
											"end": 4441,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4421,
											"end": 4441,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 4421,
											"end": 4441,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4421,
											"end": 4441,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4421,
											"end": 4441,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 4421,
											"end": 4446,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4442,
											"end": 4445,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 4421,
											"end": 4446,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4421,
											"end": 4446,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 4421,
											"end": 4446,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4421,
											"end": 4446,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4421,
											"end": 4446,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 4421,
											"end": 4446,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4421,
											"end": 4446,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4421,
											"end": 4446,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4421,
											"end": 4446,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4421,
											"end": 4446,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 4421,
											"end": 4446,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4421,
											"end": 4446,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4421,
											"end": 4446,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 4421,
											"end": 4446,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4421,
											"end": 4451,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 4421,
											"end": 4451,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 4421,
											"end": 4451,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4421,
											"end": 4451,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 4421,
											"end": 4451,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4421,
											"end": 4451,
											"name": "PUSH",
											"source": 0,
											"value": "FF"
										},
										{
											"begin": 4421,
											"end": 4451,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 4421,
											"end": 4451,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 4421,
											"end": 4451,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 4421,
											"end": 4451,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4421,
											"end": 4451,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 4421,
											"end": 4451,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 4421,
											"end": 4451,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 4421,
											"end": 4451,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 4421,
											"end": 4451,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 4421,
											"end": 4451,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4421,
											"end": 4451,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 4421,
											"end": 4451,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4488,
											"end": 4489,
											"name": "PUSH",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 4462,
											"end": 4471,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 4462,
											"end": 4476,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4472,
											"end": 4475,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 4462,
											"end": 4476,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4462,
											"end": 4476,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 4462,
											"end": 4476,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4462,
											"end": 4476,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 4462,
											"end": 4476,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4462,
											"end": 4476,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4462,
											"end": 4476,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 4462,
											"end": 4476,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4462,
											"end": 4476,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4462,
											"end": 4476,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4462,
											"end": 4476,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4462,
											"end": 4476,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 4462,
											"end": 4476,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4462,
											"end": 4476,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4462,
											"end": 4476,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 4462,
											"end": 4487,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4462,
											"end": 4487,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4462,
											"end": 4487,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4462,
											"end": 4489,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 4462,
											"end": 4489,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 4462,
											"end": 4489,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4462,
											"end": 4489,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 4462,
											"end": 4489,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4462,
											"end": 4489,
											"name": "PUSH",
											"source": 0,
											"value": "FF"
										},
										{
											"begin": 4462,
											"end": 4489,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 4462,
											"end": 4489,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 4462,
											"end": 4489,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 4462,
											"end": 4489,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4462,
											"end": 4489,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 4462,
											"end": 4489,
											"name": "PUSH",
											"source": 0,
											"value": "FF"
										},
										{
											"begin": 4462,
											"end": 4489,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 4462,
											"end": 4489,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 4462,
											"end": 4489,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 4462,
											"end": 4489,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4462,
											"end": 4489,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 4462,
											"end": 4489,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 3936,
											"end": 4497,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 3890,
											"end": 4497,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 3890,
											"end": 4497,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 6542,
											"end": 7975,
											"name": "tag",
											"source": 0,
											"value": "28"
										},
										{
											"begin": 6542,
											"end": 7975,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6601,
											"end": 6614,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 6615,
											"end": 6628,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "91"
										},
										{
											"begin": 6624,
											"end": 6627,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 6615,
											"end": 6623,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "92"
										},
										{
											"begin": 6615,
											"end": 6628,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 6615,
											"end": 6628,
											"name": "tag",
											"source": 0,
											"value": "91"
										},
										{
											"begin": 6615,
											"end": 6628,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6601,
											"end": 6628,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 6601,
											"end": 6628,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 6639,
											"end": 6653,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 6654,
											"end": 6668,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "93"
										},
										{
											"begin": 6664,
											"end": 6667,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 6654,
											"end": 6663,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "87"
										},
										{
											"begin": 6654,
											"end": 6668,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 6654,
											"end": 6668,
											"name": "tag",
											"source": 0,
											"value": "93"
										},
										{
											"begin": 6654,
											"end": 6668,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6639,
											"end": 6668,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 6639,
											"end": 6668,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 6732,
											"end": 6737,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 6720,
											"end": 6737,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6720,
											"end": 6737,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 6720,
											"end": 6730,
											"name": "CALLER",
											"source": 0
										},
										{
											"begin": 6720,
											"end": 6737,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6720,
											"end": 6737,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 6720,
											"end": 6737,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 6712,
											"end": 6738,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "94"
										},
										{
											"begin": 6712,
											"end": 6738,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 6712,
											"end": 6738,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 6712,
											"end": 6738,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 6712,
											"end": 6738,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 6712,
											"end": 6738,
											"name": "tag",
											"source": 0,
											"value": "94"
										},
										{
											"begin": 6712,
											"end": 6738,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6843,
											"end": 6848,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 6820,
											"end": 6848,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 6820,
											"end": 6848,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 6820,
											"end": 6828,
											"name": "PUSH",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 6820,
											"end": 6836,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 6829,
											"end": 6835,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 6820,
											"end": 6836,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6820,
											"end": 6836,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 6820,
											"end": 6836,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6820,
											"end": 6836,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 6820,
											"end": 6836,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 6820,
											"end": 6836,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 6820,
											"end": 6836,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 6820,
											"end": 6836,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 6820,
											"end": 6836,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 6820,
											"end": 6836,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 6820,
											"end": 6836,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 6820,
											"end": 6836,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 6820,
											"end": 6836,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 6820,
											"end": 6836,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 6820,
											"end": 6836,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 6820,
											"end": 6841,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 6837,
											"end": 6840,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 6820,
											"end": 6841,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6820,
											"end": 6841,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 6820,
											"end": 6841,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 6820,
											"end": 6841,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 6820,
											"end": 6841,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 6820,
											"end": 6841,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 6820,
											"end": 6841,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 6820,
											"end": 6841,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 6820,
											"end": 6841,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 6820,
											"end": 6841,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 6820,
											"end": 6841,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 6820,
											"end": 6841,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 6820,
											"end": 6841,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 6820,
											"end": 6841,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 6820,
											"end": 6841,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 6820,
											"end": 6841,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 6820,
											"end": 6841,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 6820,
											"end": 6841,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 6820,
											"end": 6841,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 6820,
											"end": 6841,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 6820,
											"end": 6841,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 6820,
											"end": 6841,
											"name": "PUSH",
											"source": 0,
											"value": "FF"
										},
										{
											"begin": 6820,
											"end": 6841,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 6820,
											"end": 6848,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 6820,
											"end": 6848,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 6820,
											"end": 6848,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 6812,
											"end": 6849,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "95"
										},
										{
											"begin": 6812,
											"end": 6849,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 6812,
											"end": 6849,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 6812,
											"end": 6849,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 6812,
											"end": 6849,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 6812,
											"end": 6849,
											"name": "tag",
											"source": 0,
											"value": "95"
										},
										{
											"begin": 6812,
											"end": 6849,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6902,
											"end": 6907,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 6868,
											"end": 6907,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 6868,
											"end": 6907,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 6868,
											"end": 6883,
											"name": "PUSH",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 6868,
											"end": 6895,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 6884,
											"end": 6894,
											"name": "CALLER",
											"source": 0
										},
										{
											"begin": 6868,
											"end": 6895,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6868,
											"end": 6895,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 6868,
											"end": 6895,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6868,
											"end": 6895,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 6868,
											"end": 6895,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 6868,
											"end": 6895,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 6868,
											"end": 6895,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 6868,
											"end": 6895,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 6868,
											"end": 6895,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 6868,
											"end": 6895,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 6868,
											"end": 6895,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 6868,
											"end": 6895,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 6868,
											"end": 6895,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 6868,
											"end": 6895,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 6868,
											"end": 6895,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 6868,
											"end": 6900,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 6896,
											"end": 6899,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 6868,
											"end": 6900,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6868,
											"end": 6900,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 6868,
											"end": 6900,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 6868,
											"end": 6900,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 6868,
											"end": 6900,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 6868,
											"end": 6900,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 6868,
											"end": 6900,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 6868,
											"end": 6900,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 6868,
											"end": 6900,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 6868,
											"end": 6900,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 6868,
											"end": 6900,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 6868,
											"end": 6900,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 6868,
											"end": 6900,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 6868,
											"end": 6900,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 6868,
											"end": 6900,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 6868,
											"end": 6900,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 6868,
											"end": 6900,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 6868,
											"end": 6900,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 6868,
											"end": 6900,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 6868,
											"end": 6900,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 6868,
											"end": 6900,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 6868,
											"end": 6900,
											"name": "PUSH",
											"source": 0,
											"value": "FF"
										},
										{
											"begin": 6868,
											"end": 6900,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 6868,
											"end": 6907,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 6868,
											"end": 6907,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 6868,
											"end": 6907,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 6860,
											"end": 6908,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "96"
										},
										{
											"begin": 6860,
											"end": 6908,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 6860,
											"end": 6908,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 6860,
											"end": 6908,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 6860,
											"end": 6908,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 6860,
											"end": 6908,
											"name": "tag",
											"source": 0,
											"value": "96"
										},
										{
											"begin": 6860,
											"end": 6908,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6972,
											"end": 6977,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 6960,
											"end": 6977,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6960,
											"end": 6977,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 6960,
											"end": 6970,
											"name": "CALLER",
											"source": 0
										},
										{
											"begin": 6960,
											"end": 6977,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6960,
											"end": 6977,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 6960,
											"end": 6977,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 6952,
											"end": 6978,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "97"
										},
										{
											"begin": 6952,
											"end": 6978,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 6952,
											"end": 6978,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 6952,
											"end": 6978,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 6952,
											"end": 6978,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 6952,
											"end": 6978,
											"name": "tag",
											"source": 0,
											"value": "97"
										},
										{
											"begin": 6952,
											"end": 6978,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6991,
											"end": 7017,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 7018,
											"end": 7027,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 7018,
											"end": 7032,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 7028,
											"end": 7031,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 7018,
											"end": 7032,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7018,
											"end": 7032,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 7018,
											"end": 7032,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7018,
											"end": 7032,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 7018,
											"end": 7032,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 7018,
											"end": 7032,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 7018,
											"end": 7032,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 7018,
											"end": 7032,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 7018,
											"end": 7032,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7018,
											"end": 7032,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 7018,
											"end": 7032,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 7018,
											"end": 7032,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 7018,
											"end": 7032,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 7018,
											"end": 7032,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 7018,
											"end": 7032,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 7018,
											"end": 7045,
											"name": "PUSH",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 7018,
											"end": 7045,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 7018,
											"end": 7045,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 7018,
											"end": 7045,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7018,
											"end": 7045,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 7018,
											"end": 7045,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7018,
											"end": 7045,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 7018,
											"end": 7045,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 7018,
											"end": 7045,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7018,
											"end": 7045,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 7018,
											"end": 7045,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7018,
											"end": 7045,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 6991,
											"end": 7045,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 6991,
											"end": 7045,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 7056,
											"end": 7078,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 7079,
											"end": 7142,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "98"
										},
										{
											"begin": 7088,
											"end": 7097,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 7088,
											"end": 7102,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 7098,
											"end": 7101,
											"name": "DUP8",
											"source": 0
										},
										{
											"begin": 7088,
											"end": 7102,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7088,
											"end": 7102,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 7088,
											"end": 7102,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7088,
											"end": 7102,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 7088,
											"end": 7102,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 7088,
											"end": 7102,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 7088,
											"end": 7102,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 7088,
											"end": 7102,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 7088,
											"end": 7102,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7088,
											"end": 7102,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 7088,
											"end": 7102,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 7088,
											"end": 7102,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 7088,
											"end": 7102,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 7088,
											"end": 7102,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 7088,
											"end": 7102,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 7088,
											"end": 7111,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 7088,
											"end": 7111,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 7088,
											"end": 7111,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 7088,
											"end": 7111,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7088,
											"end": 7111,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 7088,
											"end": 7111,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7088,
											"end": 7111,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 7088,
											"end": 7111,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 7088,
											"end": 7111,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7088,
											"end": 7111,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 7088,
											"end": 7111,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7088,
											"end": 7111,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 7112,
											"end": 7121,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 7112,
											"end": 7126,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 7122,
											"end": 7125,
											"name": "DUP9",
											"source": 0
										},
										{
											"begin": 7112,
											"end": 7126,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7112,
											"end": 7126,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 7112,
											"end": 7126,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7112,
											"end": 7126,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 7112,
											"end": 7126,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 7112,
											"end": 7126,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 7112,
											"end": 7126,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 7112,
											"end": 7126,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 7112,
											"end": 7126,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7112,
											"end": 7126,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 7112,
											"end": 7126,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 7112,
											"end": 7126,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 7112,
											"end": 7126,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 7112,
											"end": 7126,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 7112,
											"end": 7126,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 7112,
											"end": 7141,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 7112,
											"end": 7141,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 7112,
											"end": 7141,
											"name": "PUSH",
											"source": 0,
											"value": "10"
										},
										{
											"begin": 7112,
											"end": 7141,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7112,
											"end": 7141,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 7112,
											"end": 7141,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7112,
											"end": 7141,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 7112,
											"end": 7141,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 7112,
											"end": 7141,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7112,
											"end": 7141,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 7112,
											"end": 7141,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7112,
											"end": 7141,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 7079,
											"end": 7087,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "47"
										},
										{
											"begin": 7079,
											"end": 7142,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 7079,
											"end": 7142,
											"name": "tag",
											"source": 0,
											"value": "98"
										},
										{
											"begin": 7079,
											"end": 7142,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7056,
											"end": 7142,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7056,
											"end": 7142,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 7153,
											"end": 7164,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 7165,
											"end": 7192,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "99"
										},
										{
											"begin": 7177,
											"end": 7191,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 7165,
											"end": 7176,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 7165,
											"end": 7192,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 7165,
											"end": 7192,
											"name": "tag",
											"source": 0,
											"value": "99"
										},
										{
											"begin": 7165,
											"end": 7192,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7153,
											"end": 7192,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7153,
											"end": 7192,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 7221,
											"end": 7317,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "101"
										},
										{
											"begin": 7283,
											"end": 7287,
											"name": "ADDRESS",
											"source": 0
										},
										{
											"begin": 7303,
											"end": 7306,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 7228,
											"end": 7246,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 7221,
											"end": 7260,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7221,
											"end": 7260,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 7221,
											"end": 7260,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "102"
										},
										{
											"begin": 7221,
											"end": 7260,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7221,
											"end": 7317,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 7221,
											"end": 7317,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 7221,
											"end": 7317,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7221,
											"end": 7317,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFF"
										},
										{
											"begin": 7221,
											"end": 7317,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 7221,
											"end": 7317,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 7221,
											"end": 7317,
											"name": "tag",
											"source": 0,
											"value": "101"
										},
										{
											"begin": 7221,
											"end": 7317,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7373,
											"end": 7476,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "103"
										},
										{
											"begin": 7427,
											"end": 7432,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 7462,
											"end": 7465,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 7447,
											"end": 7461,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 7447,
											"end": 7465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "104"
										},
										{
											"begin": 7447,
											"end": 7465,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 7447,
											"end": 7465,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7447,
											"end": 7465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "105"
										},
										{
											"begin": 7447,
											"end": 7465,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 7447,
											"end": 7465,
											"name": "tag",
											"source": 0,
											"value": "104"
										},
										{
											"begin": 7447,
											"end": 7465,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7380,
											"end": 7398,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 7373,
											"end": 7412,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7373,
											"end": 7412,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 7373,
											"end": 7412,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "102"
										},
										{
											"begin": 7373,
											"end": 7412,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7373,
											"end": 7476,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 7373,
											"end": 7476,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 7373,
											"end": 7476,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7373,
											"end": 7476,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFF"
										},
										{
											"begin": 7373,
											"end": 7476,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 7373,
											"end": 7476,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 7373,
											"end": 7476,
											"name": "tag",
											"source": 0,
											"value": "103"
										},
										{
											"begin": 7373,
											"end": 7476,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7520,
											"end": 7524,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 7487,
											"end": 7502,
											"name": "PUSH",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 7487,
											"end": 7514,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 7503,
											"end": 7513,
											"name": "CALLER",
											"source": 0
										},
										{
											"begin": 7487,
											"end": 7514,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7487,
											"end": 7514,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 7487,
											"end": 7514,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7487,
											"end": 7514,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 7487,
											"end": 7514,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 7487,
											"end": 7514,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 7487,
											"end": 7514,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 7487,
											"end": 7514,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 7487,
											"end": 7514,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7487,
											"end": 7514,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 7487,
											"end": 7514,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 7487,
											"end": 7514,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 7487,
											"end": 7514,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 7487,
											"end": 7514,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 7487,
											"end": 7514,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 7487,
											"end": 7519,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 7515,
											"end": 7518,
											"name": "DUP9",
											"source": 0
										},
										{
											"begin": 7487,
											"end": 7519,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7487,
											"end": 7519,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 7487,
											"end": 7519,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 7487,
											"end": 7519,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 7487,
											"end": 7519,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 7487,
											"end": 7519,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 7487,
											"end": 7519,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7487,
											"end": 7519,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 7487,
											"end": 7519,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 7487,
											"end": 7519,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 7487,
											"end": 7519,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 7487,
											"end": 7519,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 7487,
											"end": 7519,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 7487,
											"end": 7519,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 7487,
											"end": 7524,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 7487,
											"end": 7524,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 7487,
											"end": 7524,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 7487,
											"end": 7524,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 7487,
											"end": 7524,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 7487,
											"end": 7524,
											"name": "PUSH",
											"source": 0,
											"value": "FF"
										},
										{
											"begin": 7487,
											"end": 7524,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 7487,
											"end": 7524,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 7487,
											"end": 7524,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 7487,
											"end": 7524,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7487,
											"end": 7524,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 7487,
											"end": 7524,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 7487,
											"end": 7524,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 7487,
											"end": 7524,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 7487,
											"end": 7524,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 7487,
											"end": 7524,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7487,
											"end": 7524,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 7487,
											"end": 7524,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 7567,
											"end": 7568,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 7540,
											"end": 7549,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 7540,
											"end": 7554,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 7550,
											"end": 7553,
											"name": "DUP9",
											"source": 0
										},
										{
											"begin": 7540,
											"end": 7554,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7540,
											"end": 7554,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 7540,
											"end": 7554,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7540,
											"end": 7554,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 7540,
											"end": 7554,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 7540,
											"end": 7554,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 7540,
											"end": 7554,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 7540,
											"end": 7554,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 7540,
											"end": 7554,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7540,
											"end": 7554,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 7540,
											"end": 7554,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 7540,
											"end": 7554,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 7540,
											"end": 7554,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 7540,
											"end": 7554,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 7540,
											"end": 7554,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 7540,
											"end": 7565,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 7540,
											"end": 7565,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 7540,
											"end": 7565,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 7540,
											"end": 7565,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7540,
											"end": 7565,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 7540,
											"end": 7565,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7540,
											"end": 7565,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 7540,
											"end": 7565,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 7540,
											"end": 7565,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7540,
											"end": 7565,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 7540,
											"end": 7565,
											"name": "PUSH",
											"source": 0,
											"value": "FF"
										},
										{
											"begin": 7540,
											"end": 7565,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 7540,
											"end": 7568,
											"name": "PUSH",
											"source": 0,
											"value": "FF"
										},
										{
											"begin": 7540,
											"end": 7568,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 7540,
											"end": 7568,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 7537,
											"end": 7930,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "106"
										},
										{
											"begin": 7537,
											"end": 7930,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 7626,
											"end": 7631,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 7592,
											"end": 7631,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 7592,
											"end": 7631,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 7592,
											"end": 7607,
											"name": "PUSH",
											"source": 0,
											"value": "9"
										},
										{
											"begin": 7592,
											"end": 7619,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 7608,
											"end": 7618,
											"name": "CALLER",
											"source": 0
										},
										{
											"begin": 7592,
											"end": 7619,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7592,
											"end": 7619,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 7592,
											"end": 7619,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7592,
											"end": 7619,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 7592,
											"end": 7619,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 7592,
											"end": 7619,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 7592,
											"end": 7619,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 7592,
											"end": 7619,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 7592,
											"end": 7619,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7592,
											"end": 7619,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 7592,
											"end": 7619,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 7592,
											"end": 7619,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 7592,
											"end": 7619,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 7592,
											"end": 7619,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 7592,
											"end": 7619,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 7592,
											"end": 7624,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 7620,
											"end": 7623,
											"name": "DUP9",
											"source": 0
										},
										{
											"begin": 7592,
											"end": 7624,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7592,
											"end": 7624,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 7592,
											"end": 7624,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 7592,
											"end": 7624,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 7592,
											"end": 7624,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 7592,
											"end": 7624,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 7592,
											"end": 7624,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7592,
											"end": 7624,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 7592,
											"end": 7624,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 7592,
											"end": 7624,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 7592,
											"end": 7624,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 7592,
											"end": 7624,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 7592,
											"end": 7624,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 7592,
											"end": 7624,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 7592,
											"end": 7624,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7592,
											"end": 7624,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 7592,
											"end": 7624,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7592,
											"end": 7624,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 7592,
											"end": 7624,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 7592,
											"end": 7624,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7592,
											"end": 7624,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 7592,
											"end": 7624,
											"name": "PUSH",
											"source": 0,
											"value": "FF"
										},
										{
											"begin": 7592,
											"end": 7624,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 7592,
											"end": 7631,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 7592,
											"end": 7631,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 7592,
											"end": 7631,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 7584,
											"end": 7632,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "107"
										},
										{
											"begin": 7584,
											"end": 7632,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 7584,
											"end": 7632,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 7584,
											"end": 7632,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 7584,
											"end": 7632,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 7584,
											"end": 7632,
											"name": "tag",
											"source": 0,
											"value": "107"
										},
										{
											"begin": 7584,
											"end": 7632,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7647,
											"end": 7660,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 7685,
											"end": 7694,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 7685,
											"end": 7699,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 7695,
											"end": 7698,
											"name": "DUP9",
											"source": 0
										},
										{
											"begin": 7685,
											"end": 7699,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7685,
											"end": 7699,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 7685,
											"end": 7699,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7685,
											"end": 7699,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 7685,
											"end": 7699,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 7685,
											"end": 7699,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 7685,
											"end": 7699,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 7685,
											"end": 7699,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 7685,
											"end": 7699,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7685,
											"end": 7699,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 7685,
											"end": 7699,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 7685,
											"end": 7699,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 7685,
											"end": 7699,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 7685,
											"end": 7699,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 7685,
											"end": 7699,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 7685,
											"end": 7714,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 7685,
											"end": 7714,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 7685,
											"end": 7714,
											"name": "PUSH",
											"source": 0,
											"value": "10"
										},
										{
											"begin": 7685,
											"end": 7714,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7685,
											"end": 7714,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 7685,
											"end": 7714,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7685,
											"end": 7714,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 7685,
											"end": 7714,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 7685,
											"end": 7714,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7685,
											"end": 7714,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 7685,
											"end": 7714,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7685,
											"end": 7714,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 7661,
											"end": 7670,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 7661,
											"end": 7675,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 7671,
											"end": 7674,
											"name": "DUP10",
											"source": 0
										},
										{
											"begin": 7661,
											"end": 7675,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7661,
											"end": 7675,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 7661,
											"end": 7675,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7661,
											"end": 7675,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 7661,
											"end": 7675,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 7661,
											"end": 7675,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 7661,
											"end": 7675,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 7661,
											"end": 7675,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 7661,
											"end": 7675,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7661,
											"end": 7675,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 7661,
											"end": 7675,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 7661,
											"end": 7675,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 7661,
											"end": 7675,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 7661,
											"end": 7675,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 7661,
											"end": 7675,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 7661,
											"end": 7684,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 7661,
											"end": 7684,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 7661,
											"end": 7684,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 7661,
											"end": 7684,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7661,
											"end": 7684,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 7661,
											"end": 7684,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7661,
											"end": 7684,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 7661,
											"end": 7684,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 7661,
											"end": 7684,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7661,
											"end": 7684,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 7661,
											"end": 7684,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7661,
											"end": 7684,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 7661,
											"end": 7714,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "108"
										},
										{
											"begin": 7661,
											"end": 7714,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 7661,
											"end": 7714,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7661,
											"end": 7714,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "74"
										},
										{
											"begin": 7661,
											"end": 7714,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 7661,
											"end": 7714,
											"name": "tag",
											"source": 0,
											"value": "108"
										},
										{
											"begin": 7661,
											"end": 7714,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7647,
											"end": 7714,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7647,
											"end": 7714,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 7647,
											"end": 7714,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7647,
											"end": 7714,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 7756,
											"end": 7866,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "109"
										},
										{
											"begin": 7814,
											"end": 7827,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "110"
										},
										{
											"begin": 7823,
											"end": 7826,
											"name": "DUP9",
											"source": 0
										},
										{
											"begin": 7814,
											"end": 7822,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "92"
										},
										{
											"begin": 7814,
											"end": 7827,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 7814,
											"end": 7827,
											"name": "tag",
											"source": 0,
											"value": "110"
										},
										{
											"begin": 7814,
											"end": 7827,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7846,
											"end": 7851,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 7763,
											"end": 7781,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 7756,
											"end": 7795,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7756,
											"end": 7795,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 7756,
											"end": 7795,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "102"
										},
										{
											"begin": 7756,
											"end": 7795,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7756,
											"end": 7866,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 7756,
											"end": 7866,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 7756,
											"end": 7866,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7756,
											"end": 7866,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFF"
										},
										{
											"begin": 7756,
											"end": 7866,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 7756,
											"end": 7866,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 7756,
											"end": 7866,
											"name": "tag",
											"source": 0,
											"value": "109"
										},
										{
											"begin": 7756,
											"end": 7866,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7914,
											"end": 7918,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 7881,
											"end": 7896,
											"name": "PUSH",
											"source": 0,
											"value": "9"
										},
										{
											"begin": 7881,
											"end": 7908,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 7897,
											"end": 7907,
											"name": "CALLER",
											"source": 0
										},
										{
											"begin": 7881,
											"end": 7908,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7881,
											"end": 7908,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 7881,
											"end": 7908,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7881,
											"end": 7908,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 7881,
											"end": 7908,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 7881,
											"end": 7908,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 7881,
											"end": 7908,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 7881,
											"end": 7908,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 7881,
											"end": 7908,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7881,
											"end": 7908,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 7881,
											"end": 7908,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 7881,
											"end": 7908,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 7881,
											"end": 7908,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 7881,
											"end": 7908,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 7881,
											"end": 7908,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 7881,
											"end": 7913,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 7909,
											"end": 7912,
											"name": "DUP10",
											"source": 0
										},
										{
											"begin": 7881,
											"end": 7913,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7881,
											"end": 7913,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 7881,
											"end": 7913,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 7881,
											"end": 7913,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 7881,
											"end": 7913,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 7881,
											"end": 7913,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 7881,
											"end": 7913,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7881,
											"end": 7913,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 7881,
											"end": 7913,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 7881,
											"end": 7913,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 7881,
											"end": 7913,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 7881,
											"end": 7913,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 7881,
											"end": 7913,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 7881,
											"end": 7913,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 7881,
											"end": 7918,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 7881,
											"end": 7918,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 7881,
											"end": 7918,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 7881,
											"end": 7918,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 7881,
											"end": 7918,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 7881,
											"end": 7918,
											"name": "PUSH",
											"source": 0,
											"value": "FF"
										},
										{
											"begin": 7881,
											"end": 7918,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 7881,
											"end": 7918,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 7881,
											"end": 7918,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 7881,
											"end": 7918,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7881,
											"end": 7918,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 7881,
											"end": 7918,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 7881,
											"end": 7918,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 7881,
											"end": 7918,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 7881,
											"end": 7918,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 7881,
											"end": 7918,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7881,
											"end": 7918,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 7881,
											"end": 7918,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 7569,
											"end": 7930,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 7537,
											"end": 7930,
											"name": "tag",
											"source": 0,
											"value": "106"
										},
										{
											"begin": 7537,
											"end": 7930,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7966,
											"end": 7967,
											"name": "PUSH",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 7940,
											"end": 7949,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 7940,
											"end": 7954,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 7950,
											"end": 7953,
											"name": "DUP9",
											"source": 0
										},
										{
											"begin": 7940,
											"end": 7954,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7940,
											"end": 7954,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 7940,
											"end": 7954,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7940,
											"end": 7954,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 7940,
											"end": 7954,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 7940,
											"end": 7954,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 7940,
											"end": 7954,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 7940,
											"end": 7954,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 7940,
											"end": 7954,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7940,
											"end": 7954,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 7940,
											"end": 7954,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 7940,
											"end": 7954,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 7940,
											"end": 7954,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 7940,
											"end": 7954,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 7940,
											"end": 7954,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 7940,
											"end": 7965,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 7940,
											"end": 7965,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 7940,
											"end": 7965,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 7940,
											"end": 7967,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 7940,
											"end": 7967,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 7940,
											"end": 7967,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 7940,
											"end": 7967,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 7940,
											"end": 7967,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 7940,
											"end": 7967,
											"name": "PUSH",
											"source": 0,
											"value": "FF"
										},
										{
											"begin": 7940,
											"end": 7967,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 7940,
											"end": 7967,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 7940,
											"end": 7967,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 7940,
											"end": 7967,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7940,
											"end": 7967,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 7940,
											"end": 7967,
											"name": "PUSH",
											"source": 0,
											"value": "FF"
										},
										{
											"begin": 7940,
											"end": 7967,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 7940,
											"end": 7967,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 7940,
											"end": 7967,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 7940,
											"end": 7967,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7940,
											"end": 7967,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 7940,
											"end": 7967,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 6590,
											"end": 7975,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 6590,
											"end": 7975,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 6590,
											"end": 7975,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 6590,
											"end": 7975,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 6590,
											"end": 7975,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 6542,
											"end": 7975,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 6542,
											"end": 7975,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1178,
											"end": 1242,
											"name": "tag",
											"source": 0,
											"value": "32"
										},
										{
											"begin": 1178,
											"end": 1242,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1178,
											"end": 1242,
											"name": "PUSH",
											"source": 0,
											"value": "6"
										},
										{
											"begin": 1178,
											"end": 1242,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1178,
											"end": 1242,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1178,
											"end": 1242,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1178,
											"end": 1242,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1178,
											"end": 1242,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1178,
											"end": 1242,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1178,
											"end": 1242,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1178,
											"end": 1242,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 1178,
											"end": 1242,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1178,
											"end": 1242,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1178,
											"end": 1242,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1178,
											"end": 1242,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1178,
											"end": 1242,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1178,
											"end": 1242,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1178,
											"end": 1242,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1178,
											"end": 1242,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 1178,
											"end": 1242,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1178,
											"end": 1242,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1178,
											"end": 1242,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1178,
											"end": 1242,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1178,
											"end": 1242,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1178,
											"end": 1242,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1178,
											"end": 1242,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 1178,
											"end": 1242,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1178,
											"end": 1242,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 1178,
											"end": 1242,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 1178,
											"end": 1242,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1178,
											"end": 1242,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 1178,
											"end": 1242,
											"name": "PUSH",
											"source": 0,
											"value": "FF"
										},
										{
											"begin": 1178,
											"end": 1242,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1178,
											"end": 1242,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1178,
											"end": 1242,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 8162,
											"end": 8432,
											"name": "tag",
											"source": 0,
											"value": "38"
										},
										{
											"begin": 8162,
											"end": 8432,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 8248,
											"end": 8264,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 8305,
											"end": 8317,
											"name": "PUSH",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 8305,
											"end": 8317,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 8305,
											"end": 8317,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8305,
											"end": 8317,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 8305,
											"end": 8317,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8305,
											"end": 8317,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 8305,
											"end": 8317,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 8305,
											"end": 8317,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8305,
											"end": 8317,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 8305,
											"end": 8317,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8305,
											"end": 8317,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 8287,
											"end": 8326,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8287,
											"end": 8326,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 8287,
											"end": 8326,
											"name": "PUSH",
											"source": 0,
											"value": "1698EE82"
										},
										{
											"begin": 8341,
											"end": 8347,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 8362,
											"end": 8368,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 8383,
											"end": 8387,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 8287,
											"end": 8398,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 8287,
											"end": 8398,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 8287,
											"end": 8398,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 8287,
											"end": 8398,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFF"
										},
										{
											"begin": 8287,
											"end": 8398,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 8287,
											"end": 8398,
											"name": "PUSH",
											"source": 0,
											"value": "E0"
										},
										{
											"begin": 8287,
											"end": 8398,
											"name": "SHL",
											"source": 0
										},
										{
											"begin": 8287,
											"end": 8398,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 8287,
											"end": 8398,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 8287,
											"end": 8398,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 8287,
											"end": 8398,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 8287,
											"end": 8398,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "112"
										},
										{
											"begin": 8287,
											"end": 8398,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 8287,
											"end": 8398,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 8287,
											"end": 8398,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 8287,
											"end": 8398,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8287,
											"end": 8398,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "113"
										},
										{
											"begin": 8287,
											"end": 8398,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 8287,
											"end": 8398,
											"name": "tag",
											"source": 0,
											"value": "112"
										},
										{
											"begin": 8287,
											"end": 8398,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 8287,
											"end": 8398,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 8287,
											"end": 8398,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 8287,
											"end": 8398,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 8287,
											"end": 8398,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 8287,
											"end": 8398,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 8287,
											"end": 8398,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 8287,
											"end": 8398,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 8287,
											"end": 8398,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 8287,
											"end": 8398,
											"name": "GAS",
											"source": 0
										},
										{
											"begin": 8287,
											"end": 8398,
											"name": "STATICCALL",
											"source": 0
										},
										{
											"begin": 8287,
											"end": 8398,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 8287,
											"end": 8398,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 8287,
											"end": 8398,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 8287,
											"end": 8398,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "115"
										},
										{
											"begin": 8287,
											"end": 8398,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 8287,
											"end": 8398,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 8287,
											"end": 8398,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 8287,
											"end": 8398,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 8287,
											"end": 8398,
											"name": "RETURNDATACOPY",
											"source": 0
										},
										{
											"begin": 8287,
											"end": 8398,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 8287,
											"end": 8398,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 8287,
											"end": 8398,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 8287,
											"end": 8398,
											"name": "tag",
											"source": 0,
											"value": "115"
										},
										{
											"begin": 8287,
											"end": 8398,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 8287,
											"end": 8398,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 8287,
											"end": 8398,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 8287,
											"end": 8398,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 8287,
											"end": 8398,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 8287,
											"end": 8398,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 8287,
											"end": 8398,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 8287,
											"end": 8398,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 8287,
											"end": 8398,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 8287,
											"end": 8398,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 8287,
											"end": 8398,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 8287,
											"end": 8398,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 8287,
											"end": 8398,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 8287,
											"end": 8398,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 8287,
											"end": 8398,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 8287,
											"end": 8398,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 8287,
											"end": 8398,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 8287,
											"end": 8398,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 8287,
											"end": 8398,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 8287,
											"end": 8398,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 8287,
											"end": 8398,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 8287,
											"end": 8398,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 8287,
											"end": 8398,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8287,
											"end": 8398,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "116"
										},
										{
											"begin": 8287,
											"end": 8398,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 8287,
											"end": 8398,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8287,
											"end": 8398,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "117"
										},
										{
											"begin": 8287,
											"end": 8398,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 8287,
											"end": 8398,
											"name": "tag",
											"source": 0,
											"value": "116"
										},
										{
											"begin": 8287,
											"end": 8398,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 8276,
											"end": 8398,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8276,
											"end": 8398,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 8162,
											"end": 8432,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 8162,
											"end": 8432,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 8162,
											"end": 8432,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 8162,
											"end": 8432,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 8162,
											"end": 8432,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 8162,
											"end": 8432,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 5318,
											"end": 6455,
											"name": "tag",
											"source": 0,
											"value": "43"
										},
										{
											"begin": 5318,
											"end": 6455,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5378,
											"end": 5392,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 5393,
											"end": 5407,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "119"
										},
										{
											"begin": 5403,
											"end": 5406,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 5393,
											"end": 5402,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "87"
										},
										{
											"begin": 5393,
											"end": 5407,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 5393,
											"end": 5407,
											"name": "tag",
											"source": 0,
											"value": "119"
										},
										{
											"begin": 5393,
											"end": 5407,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5378,
											"end": 5407,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5378,
											"end": 5407,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5471,
											"end": 5477,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 5459,
											"end": 5477,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5459,
											"end": 5477,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 5459,
											"end": 5469,
											"name": "CALLER",
											"source": 0
										},
										{
											"begin": 5459,
											"end": 5477,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5459,
											"end": 5477,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 5459,
											"end": 5477,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 5451,
											"end": 5478,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "120"
										},
										{
											"begin": 5451,
											"end": 5478,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 5451,
											"end": 5478,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 5451,
											"end": 5478,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 5451,
											"end": 5478,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 5451,
											"end": 5478,
											"name": "tag",
											"source": 0,
											"value": "120"
										},
										{
											"begin": 5451,
											"end": 5478,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5560,
											"end": 5568,
											"name": "PUSH",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 5560,
											"end": 5576,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 5569,
											"end": 5575,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 5560,
											"end": 5576,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5560,
											"end": 5576,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 5560,
											"end": 5576,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5560,
											"end": 5576,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 5560,
											"end": 5576,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 5560,
											"end": 5576,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 5560,
											"end": 5576,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 5560,
											"end": 5576,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 5560,
											"end": 5576,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5560,
											"end": 5576,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 5560,
											"end": 5576,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 5560,
											"end": 5576,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 5560,
											"end": 5576,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 5560,
											"end": 5576,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 5560,
											"end": 5576,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 5560,
											"end": 5581,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 5577,
											"end": 5580,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 5560,
											"end": 5581,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5560,
											"end": 5581,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 5560,
											"end": 5581,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 5560,
											"end": 5581,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 5560,
											"end": 5581,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 5560,
											"end": 5581,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 5560,
											"end": 5581,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5560,
											"end": 5581,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 5560,
											"end": 5581,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 5560,
											"end": 5581,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 5560,
											"end": 5581,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 5560,
											"end": 5581,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 5560,
											"end": 5581,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 5560,
											"end": 5581,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 5560,
											"end": 5581,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5560,
											"end": 5581,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 5560,
											"end": 5581,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5560,
											"end": 5581,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 5560,
											"end": 5581,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 5560,
											"end": 5581,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5560,
											"end": 5581,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 5560,
											"end": 5581,
											"name": "PUSH",
											"source": 0,
											"value": "FF"
										},
										{
											"begin": 5560,
											"end": 5581,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 5552,
											"end": 5582,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "121"
										},
										{
											"begin": 5552,
											"end": 5582,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 5552,
											"end": 5582,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 5552,
											"end": 5582,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 5552,
											"end": 5582,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 5552,
											"end": 5582,
											"name": "tag",
											"source": 0,
											"value": "121"
										},
										{
											"begin": 5552,
											"end": 5582,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5668,
											"end": 5673,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 5634,
											"end": 5673,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 5634,
											"end": 5673,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 5634,
											"end": 5649,
											"name": "PUSH",
											"source": 0,
											"value": "7"
										},
										{
											"begin": 5634,
											"end": 5661,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 5650,
											"end": 5660,
											"name": "CALLER",
											"source": 0
										},
										{
											"begin": 5634,
											"end": 5661,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5634,
											"end": 5661,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 5634,
											"end": 5661,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5634,
											"end": 5661,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 5634,
											"end": 5661,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 5634,
											"end": 5661,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 5634,
											"end": 5661,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 5634,
											"end": 5661,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 5634,
											"end": 5661,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5634,
											"end": 5661,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 5634,
											"end": 5661,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 5634,
											"end": 5661,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 5634,
											"end": 5661,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 5634,
											"end": 5661,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 5634,
											"end": 5661,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 5634,
											"end": 5666,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 5662,
											"end": 5665,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 5634,
											"end": 5666,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5634,
											"end": 5666,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 5634,
											"end": 5666,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 5634,
											"end": 5666,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 5634,
											"end": 5666,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 5634,
											"end": 5666,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 5634,
											"end": 5666,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5634,
											"end": 5666,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 5634,
											"end": 5666,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 5634,
											"end": 5666,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 5634,
											"end": 5666,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 5634,
											"end": 5666,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 5634,
											"end": 5666,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 5634,
											"end": 5666,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 5634,
											"end": 5666,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5634,
											"end": 5666,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 5634,
											"end": 5666,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5634,
											"end": 5666,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 5634,
											"end": 5666,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 5634,
											"end": 5666,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5634,
											"end": 5666,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 5634,
											"end": 5666,
											"name": "PUSH",
											"source": 0,
											"value": "FF"
										},
										{
											"begin": 5634,
											"end": 5666,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 5634,
											"end": 5673,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 5634,
											"end": 5673,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 5634,
											"end": 5673,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 5626,
											"end": 5674,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "122"
										},
										{
											"begin": 5626,
											"end": 5674,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 5626,
											"end": 5674,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 5626,
											"end": 5674,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 5626,
											"end": 5674,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 5626,
											"end": 5674,
											"name": "tag",
											"source": 0,
											"value": "122"
										},
										{
											"begin": 5626,
											"end": 5674,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5685,
											"end": 5711,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 5712,
											"end": 5721,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 5712,
											"end": 5726,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 5722,
											"end": 5725,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 5712,
											"end": 5726,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5712,
											"end": 5726,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 5712,
											"end": 5726,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5712,
											"end": 5726,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 5712,
											"end": 5726,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 5712,
											"end": 5726,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 5712,
											"end": 5726,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 5712,
											"end": 5726,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 5712,
											"end": 5726,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5712,
											"end": 5726,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 5712,
											"end": 5726,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 5712,
											"end": 5726,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 5712,
											"end": 5726,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 5712,
											"end": 5726,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 5712,
											"end": 5726,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 5712,
											"end": 5739,
											"name": "PUSH",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 5712,
											"end": 5739,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 5712,
											"end": 5739,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 5712,
											"end": 5739,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5712,
											"end": 5739,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 5712,
											"end": 5739,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5712,
											"end": 5739,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 5712,
											"end": 5739,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 5712,
											"end": 5739,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5712,
											"end": 5739,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 5712,
											"end": 5739,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5712,
											"end": 5739,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 5685,
											"end": 5739,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5685,
											"end": 5739,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5750,
											"end": 5763,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 5788,
											"end": 5797,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 5788,
											"end": 5802,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 5798,
											"end": 5801,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 5788,
											"end": 5802,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5788,
											"end": 5802,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 5788,
											"end": 5802,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5788,
											"end": 5802,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 5788,
											"end": 5802,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 5788,
											"end": 5802,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 5788,
											"end": 5802,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 5788,
											"end": 5802,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 5788,
											"end": 5802,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5788,
											"end": 5802,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 5788,
											"end": 5802,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 5788,
											"end": 5802,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 5788,
											"end": 5802,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 5788,
											"end": 5802,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 5788,
											"end": 5802,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 5788,
											"end": 5817,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 5788,
											"end": 5817,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 5788,
											"end": 5817,
											"name": "PUSH",
											"source": 0,
											"value": "10"
										},
										{
											"begin": 5788,
											"end": 5817,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5788,
											"end": 5817,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 5788,
											"end": 5817,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5788,
											"end": 5817,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 5788,
											"end": 5817,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 5788,
											"end": 5817,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5788,
											"end": 5817,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 5788,
											"end": 5817,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5788,
											"end": 5817,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 5764,
											"end": 5773,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 5764,
											"end": 5778,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 5774,
											"end": 5777,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 5764,
											"end": 5778,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5764,
											"end": 5778,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 5764,
											"end": 5778,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5764,
											"end": 5778,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 5764,
											"end": 5778,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 5764,
											"end": 5778,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 5764,
											"end": 5778,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 5764,
											"end": 5778,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 5764,
											"end": 5778,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5764,
											"end": 5778,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 5764,
											"end": 5778,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 5764,
											"end": 5778,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 5764,
											"end": 5778,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 5764,
											"end": 5778,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 5764,
											"end": 5778,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 5764,
											"end": 5787,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 5764,
											"end": 5787,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 5764,
											"end": 5787,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 5764,
											"end": 5787,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5764,
											"end": 5787,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 5764,
											"end": 5787,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5764,
											"end": 5787,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 5764,
											"end": 5787,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 5764,
											"end": 5787,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5764,
											"end": 5787,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 5764,
											"end": 5787,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5764,
											"end": 5787,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 5764,
											"end": 5817,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "123"
										},
										{
											"begin": 5764,
											"end": 5817,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 5764,
											"end": 5817,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5764,
											"end": 5817,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "74"
										},
										{
											"begin": 5764,
											"end": 5817,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 5764,
											"end": 5817,
											"name": "tag",
											"source": 0,
											"value": "123"
										},
										{
											"begin": 5764,
											"end": 5817,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5750,
											"end": 5817,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5750,
											"end": 5817,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 5750,
											"end": 5817,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5750,
											"end": 5817,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5828,
											"end": 5850,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 5851,
											"end": 5914,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "124"
										},
										{
											"begin": 5860,
											"end": 5869,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 5860,
											"end": 5874,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 5870,
											"end": 5873,
											"name": "DUP8",
											"source": 0
										},
										{
											"begin": 5860,
											"end": 5874,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5860,
											"end": 5874,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 5860,
											"end": 5874,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5860,
											"end": 5874,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 5860,
											"end": 5874,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 5860,
											"end": 5874,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 5860,
											"end": 5874,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 5860,
											"end": 5874,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 5860,
											"end": 5874,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5860,
											"end": 5874,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 5860,
											"end": 5874,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 5860,
											"end": 5874,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 5860,
											"end": 5874,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 5860,
											"end": 5874,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 5860,
											"end": 5874,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 5860,
											"end": 5883,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 5860,
											"end": 5883,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 5860,
											"end": 5883,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 5860,
											"end": 5883,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5860,
											"end": 5883,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 5860,
											"end": 5883,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5860,
											"end": 5883,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 5860,
											"end": 5883,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 5860,
											"end": 5883,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5860,
											"end": 5883,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 5860,
											"end": 5883,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5860,
											"end": 5883,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 5884,
											"end": 5893,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 5884,
											"end": 5898,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 5894,
											"end": 5897,
											"name": "DUP9",
											"source": 0
										},
										{
											"begin": 5884,
											"end": 5898,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5884,
											"end": 5898,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 5884,
											"end": 5898,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5884,
											"end": 5898,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 5884,
											"end": 5898,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 5884,
											"end": 5898,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 5884,
											"end": 5898,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 5884,
											"end": 5898,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 5884,
											"end": 5898,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5884,
											"end": 5898,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 5884,
											"end": 5898,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 5884,
											"end": 5898,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 5884,
											"end": 5898,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 5884,
											"end": 5898,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 5884,
											"end": 5898,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 5884,
											"end": 5913,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 5884,
											"end": 5913,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 5884,
											"end": 5913,
											"name": "PUSH",
											"source": 0,
											"value": "10"
										},
										{
											"begin": 5884,
											"end": 5913,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5884,
											"end": 5913,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 5884,
											"end": 5913,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5884,
											"end": 5913,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 5884,
											"end": 5913,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 5884,
											"end": 5913,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5884,
											"end": 5913,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 5884,
											"end": 5913,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5884,
											"end": 5913,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 5851,
											"end": 5859,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "47"
										},
										{
											"begin": 5851,
											"end": 5914,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 5851,
											"end": 5914,
											"name": "tag",
											"source": 0,
											"value": "124"
										},
										{
											"begin": 5851,
											"end": 5914,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5828,
											"end": 5914,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5828,
											"end": 5914,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5925,
											"end": 5936,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 5937,
											"end": 5955,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "125"
										},
										{
											"begin": 5949,
											"end": 5954,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 5937,
											"end": 5948,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 5937,
											"end": 5955,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 5937,
											"end": 5955,
											"name": "tag",
											"source": 0,
											"value": "125"
										},
										{
											"begin": 5937,
											"end": 5955,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5925,
											"end": 5955,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5925,
											"end": 5955,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 6008,
											"end": 6066,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "126"
										},
										{
											"begin": 6056,
											"end": 6060,
											"name": "ADDRESS",
											"source": 0
										},
										{
											"begin": 6062,
											"end": 6065,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 6015,
											"end": 6033,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 6008,
											"end": 6047,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6008,
											"end": 6047,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 6008,
											"end": 6047,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "102"
										},
										{
											"begin": 6008,
											"end": 6047,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 6008,
											"end": 6066,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 6008,
											"end": 6066,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 6008,
											"end": 6066,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 6008,
											"end": 6066,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFF"
										},
										{
											"begin": 6008,
											"end": 6066,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 6008,
											"end": 6066,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 6008,
											"end": 6066,
											"name": "tag",
											"source": 0,
											"value": "126"
										},
										{
											"begin": 6008,
											"end": 6066,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6107,
											"end": 6202,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "127"
										},
										{
											"begin": 6161,
											"end": 6167,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 6188,
											"end": 6191,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 6182,
											"end": 6187,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 6182,
											"end": 6191,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "128"
										},
										{
											"begin": 6182,
											"end": 6191,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 6182,
											"end": 6191,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 6182,
											"end": 6191,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "105"
										},
										{
											"begin": 6182,
											"end": 6191,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 6182,
											"end": 6191,
											"name": "tag",
											"source": 0,
											"value": "128"
										},
										{
											"begin": 6182,
											"end": 6191,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6114,
											"end": 6132,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 6107,
											"end": 6146,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6107,
											"end": 6146,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 6107,
											"end": 6146,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "102"
										},
										{
											"begin": 6107,
											"end": 6146,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 6107,
											"end": 6202,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 6107,
											"end": 6202,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 6107,
											"end": 6202,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 6107,
											"end": 6202,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFF"
										},
										{
											"begin": 6107,
											"end": 6202,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 6107,
											"end": 6202,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 6107,
											"end": 6202,
											"name": "tag",
											"source": 0,
											"value": "127"
										},
										{
											"begin": 6107,
											"end": 6202,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6261,
											"end": 6361,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "129"
										},
										{
											"begin": 6315,
											"end": 6321,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 6336,
											"end": 6350,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 6268,
											"end": 6286,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 6261,
											"end": 6300,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6261,
											"end": 6300,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 6261,
											"end": 6300,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "102"
										},
										{
											"begin": 6261,
											"end": 6300,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 6261,
											"end": 6361,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 6261,
											"end": 6361,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 6261,
											"end": 6361,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 6261,
											"end": 6361,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFF"
										},
										{
											"begin": 6261,
											"end": 6361,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 6261,
											"end": 6361,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 6261,
											"end": 6361,
											"name": "tag",
											"source": 0,
											"value": "129"
										},
										{
											"begin": 6261,
											"end": 6361,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6442,
											"end": 6446,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 6409,
											"end": 6424,
											"name": "PUSH",
											"source": 0,
											"value": "7"
										},
										{
											"begin": 6409,
											"end": 6436,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 6425,
											"end": 6435,
											"name": "CALLER",
											"source": 0
										},
										{
											"begin": 6409,
											"end": 6436,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6409,
											"end": 6436,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 6409,
											"end": 6436,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6409,
											"end": 6436,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 6409,
											"end": 6436,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 6409,
											"end": 6436,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 6409,
											"end": 6436,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 6409,
											"end": 6436,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 6409,
											"end": 6436,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 6409,
											"end": 6436,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 6409,
											"end": 6436,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 6409,
											"end": 6436,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 6409,
											"end": 6436,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 6409,
											"end": 6436,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 6409,
											"end": 6436,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 6409,
											"end": 6441,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 6437,
											"end": 6440,
											"name": "DUP9",
											"source": 0
										},
										{
											"begin": 6409,
											"end": 6441,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6409,
											"end": 6441,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 6409,
											"end": 6441,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 6409,
											"end": 6441,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 6409,
											"end": 6441,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 6409,
											"end": 6441,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 6409,
											"end": 6441,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 6409,
											"end": 6441,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 6409,
											"end": 6441,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 6409,
											"end": 6441,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 6409,
											"end": 6441,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 6409,
											"end": 6441,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 6409,
											"end": 6441,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 6409,
											"end": 6441,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 6409,
											"end": 6446,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 6409,
											"end": 6446,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 6409,
											"end": 6446,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 6409,
											"end": 6446,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 6409,
											"end": 6446,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 6409,
											"end": 6446,
											"name": "PUSH",
											"source": 0,
											"value": "FF"
										},
										{
											"begin": 6409,
											"end": 6446,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 6409,
											"end": 6446,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 6409,
											"end": 6446,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 6409,
											"end": 6446,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 6409,
											"end": 6446,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 6409,
											"end": 6446,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 6409,
											"end": 6446,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 6409,
											"end": 6446,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 6409,
											"end": 6446,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 6409,
											"end": 6446,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 6409,
											"end": 6446,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 6409,
											"end": 6446,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5367,
											"end": 6455,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5367,
											"end": 6455,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5367,
											"end": 6455,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5367,
											"end": 6455,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5367,
											"end": 6455,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5318,
											"end": 6455,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5318,
											"end": 6455,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 8823,
											"end": 9366,
											"name": "tag",
											"source": 0,
											"value": "47"
										},
										{
											"begin": 8823,
											"end": 9366,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 8902,
											"end": 8909,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 8921,
											"end": 8939,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 8953,
											"end": 8964,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 8942,
											"end": 8952,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 8942,
											"end": 8964,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "131"
										},
										{
											"begin": 8942,
											"end": 8964,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 8942,
											"end": 8964,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8942,
											"end": 8964,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "74"
										},
										{
											"begin": 8942,
											"end": 8964,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 8942,
											"end": 8964,
											"name": "tag",
											"source": 0,
											"value": "131"
										},
										{
											"begin": 8942,
											"end": 8964,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 8921,
											"end": 8964,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8921,
											"end": 8964,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 8921,
											"end": 8964,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8921,
											"end": 8964,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 8993,
											"end": 9002,
											"name": "PUSH",
											"source": 0,
											"value": "56BC75E2D63100000"
										},
										{
											"begin": 8979,
											"end": 8989,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 8979,
											"end": 9002,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 8979,
											"end": 9002,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 8979,
											"end": 9029,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 8979,
											"end": 9029,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 8979,
											"end": 9029,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "132"
										},
										{
											"begin": 8979,
											"end": 9029,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 8979,
											"end": 9029,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 9019,
											"end": 9029,
											"name": "PUSH",
											"source": 0,
											"value": "3635C9ADC5DEA00000"
										},
										{
											"begin": 9006,
											"end": 9016,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 9006,
											"end": 9029,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 8979,
											"end": 9029,
											"name": "tag",
											"source": 0,
											"value": "132"
										},
										{
											"begin": 8979,
											"end": 9029,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 8975,
											"end": 9359,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 8975,
											"end": 9359,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "133"
										},
										{
											"begin": 8975,
											"end": 9359,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 9073,
											"end": 9076,
											"name": "PUSH",
											"source": 0,
											"value": "64"
										},
										{
											"begin": 9067,
											"end": 9069,
											"name": "PUSH",
											"source": 0,
											"value": "32"
										},
										{
											"begin": 9054,
											"end": 9064,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 9054,
											"end": 9069,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "134"
										},
										{
											"begin": 9054,
											"end": 9069,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 9054,
											"end": 9069,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 9054,
											"end": 9069,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "135"
										},
										{
											"begin": 9054,
											"end": 9069,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 9054,
											"end": 9069,
											"name": "tag",
											"source": 0,
											"value": "134"
										},
										{
											"begin": 9054,
											"end": 9069,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 9053,
											"end": 9076,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "136"
										},
										{
											"begin": 9053,
											"end": 9076,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 9053,
											"end": 9076,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 9053,
											"end": 9076,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "137"
										},
										{
											"begin": 9053,
											"end": 9076,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 9053,
											"end": 9076,
											"name": "tag",
											"source": 0,
											"value": "136"
										},
										{
											"begin": 9053,
											"end": 9076,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 9046,
											"end": 9076,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 9046,
											"end": 9076,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 9046,
											"end": 9076,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 9046,
											"end": 9076,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "130"
										},
										{
											"begin": 9046,
											"end": 9076,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 8975,
											"end": 9359,
											"name": "tag",
											"source": 0,
											"value": "133"
										},
										{
											"begin": 8975,
											"end": 9359,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 9112,
											"end": 9122,
											"name": "PUSH",
											"source": 0,
											"value": "3635C9ADC5DEA00000"
										},
										{
											"begin": 9098,
											"end": 9108,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 9098,
											"end": 9122,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 9098,
											"end": 9122,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 9098,
											"end": 9150,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 9098,
											"end": 9150,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 9098,
											"end": 9150,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "139"
										},
										{
											"begin": 9098,
											"end": 9150,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 9098,
											"end": 9150,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 9139,
											"end": 9150,
											"name": "PUSH",
											"source": 0,
											"value": "21E19E0C9BAB2400000"
										},
										{
											"begin": 9126,
											"end": 9136,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 9126,
											"end": 9150,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 9098,
											"end": 9150,
											"name": "tag",
											"source": 0,
											"value": "139"
										},
										{
											"begin": 9098,
											"end": 9150,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 9094,
											"end": 9359,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 9094,
											"end": 9359,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "140"
										},
										{
											"begin": 9094,
											"end": 9359,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 9194,
											"end": 9197,
											"name": "PUSH",
											"source": 0,
											"value": "64"
										},
										{
											"begin": 9188,
											"end": 9190,
											"name": "PUSH",
											"source": 0,
											"value": "28"
										},
										{
											"begin": 9175,
											"end": 9185,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 9175,
											"end": 9190,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "141"
										},
										{
											"begin": 9175,
											"end": 9190,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 9175,
											"end": 9190,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 9175,
											"end": 9190,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "135"
										},
										{
											"begin": 9175,
											"end": 9190,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 9175,
											"end": 9190,
											"name": "tag",
											"source": 0,
											"value": "141"
										},
										{
											"begin": 9175,
											"end": 9190,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 9174,
											"end": 9197,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "142"
										},
										{
											"begin": 9174,
											"end": 9197,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 9174,
											"end": 9197,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 9174,
											"end": 9197,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "137"
										},
										{
											"begin": 9174,
											"end": 9197,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 9174,
											"end": 9197,
											"name": "tag",
											"source": 0,
											"value": "142"
										},
										{
											"begin": 9174,
											"end": 9197,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 9167,
											"end": 9197,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 9167,
											"end": 9197,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 9167,
											"end": 9197,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 9167,
											"end": 9197,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "130"
										},
										{
											"begin": 9167,
											"end": 9197,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 9094,
											"end": 9359,
											"name": "tag",
											"source": 0,
											"value": "140"
										},
										{
											"begin": 9094,
											"end": 9359,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 9232,
											"end": 9243,
											"name": "PUSH",
											"source": 0,
											"value": "21E19E0C9BAB2400000"
										},
										{
											"begin": 9219,
											"end": 9229,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 9219,
											"end": 9243,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 9215,
											"end": 9359,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 9215,
											"end": 9359,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "144"
										},
										{
											"begin": 9215,
											"end": 9359,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 9287,
											"end": 9290,
											"name": "PUSH",
											"source": 0,
											"value": "64"
										},
										{
											"begin": 9281,
											"end": 9283,
											"name": "PUSH",
											"source": 0,
											"value": "19"
										},
										{
											"begin": 9268,
											"end": 9278,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 9268,
											"end": 9283,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "145"
										},
										{
											"begin": 9268,
											"end": 9283,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 9268,
											"end": 9283,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 9268,
											"end": 9283,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "135"
										},
										{
											"begin": 9268,
											"end": 9283,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 9268,
											"end": 9283,
											"name": "tag",
											"source": 0,
											"value": "145"
										},
										{
											"begin": 9268,
											"end": 9283,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 9267,
											"end": 9290,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "146"
										},
										{
											"begin": 9267,
											"end": 9290,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 9267,
											"end": 9290,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 9267,
											"end": 9290,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "137"
										},
										{
											"begin": 9267,
											"end": 9290,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 9267,
											"end": 9290,
											"name": "tag",
											"source": 0,
											"value": "146"
										},
										{
											"begin": 9267,
											"end": 9290,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 9260,
											"end": 9290,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 9260,
											"end": 9290,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 9260,
											"end": 9290,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 9260,
											"end": 9290,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "130"
										},
										{
											"begin": 9260,
											"end": 9290,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 9215,
											"end": 9359,
											"name": "tag",
											"source": 0,
											"value": "144"
										},
										{
											"begin": 9215,
											"end": 9359,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 9330,
											"end": 9347,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 9330,
											"end": 9347,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 9330,
											"end": 9347,
											"name": "PUSH",
											"source": 0,
											"value": "E008B5F900000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 9330,
											"end": 9347,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 9330,
											"end": 9347,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 9330,
											"end": 9347,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 9330,
											"end": 9347,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 9330,
											"end": 9347,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 9330,
											"end": 9347,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 9330,
											"end": 9347,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 9330,
											"end": 9347,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 9330,
											"end": 9347,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 9330,
											"end": 9347,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 9330,
											"end": 9347,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 8823,
											"end": 9366,
											"name": "tag",
											"source": 0,
											"value": "130"
										},
										{
											"begin": 8823,
											"end": 9366,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 8823,
											"end": 9366,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 8823,
											"end": 9366,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 8823,
											"end": 9366,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 8823,
											"end": 9366,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 8823,
											"end": 9366,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1426,
											"end": 1490,
											"name": "tag",
											"source": 0,
											"value": "52"
										},
										{
											"begin": 1426,
											"end": 1490,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1426,
											"end": 1490,
											"name": "PUSH",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 1426,
											"end": 1490,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1426,
											"end": 1490,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1426,
											"end": 1490,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1426,
											"end": 1490,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1426,
											"end": 1490,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1426,
											"end": 1490,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1426,
											"end": 1490,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1426,
											"end": 1490,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 1426,
											"end": 1490,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1426,
											"end": 1490,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1426,
											"end": 1490,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1426,
											"end": 1490,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1426,
											"end": 1490,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1426,
											"end": 1490,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1426,
											"end": 1490,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1426,
											"end": 1490,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 1426,
											"end": 1490,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1426,
											"end": 1490,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1426,
											"end": 1490,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1426,
											"end": 1490,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1426,
											"end": 1490,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1426,
											"end": 1490,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1426,
											"end": 1490,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 1426,
											"end": 1490,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1426,
											"end": 1490,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 1426,
											"end": 1490,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 1426,
											"end": 1490,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1426,
											"end": 1490,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 1426,
											"end": 1490,
											"name": "PUSH",
											"source": 0,
											"value": "FF"
										},
										{
											"begin": 1426,
											"end": 1490,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1426,
											"end": 1490,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1426,
											"end": 1490,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 4505,
											"end": 5265,
											"name": "tag",
											"source": 0,
											"value": "56"
										},
										{
											"begin": 4505,
											"end": 5265,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4565,
											"end": 4578,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4579,
											"end": 4592,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "149"
										},
										{
											"begin": 4588,
											"end": 4591,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 4579,
											"end": 4587,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "92"
										},
										{
											"begin": 4579,
											"end": 4592,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 4579,
											"end": 4592,
											"name": "tag",
											"source": 0,
											"value": "149"
										},
										{
											"begin": 4579,
											"end": 4592,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4565,
											"end": 4592,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4565,
											"end": 4592,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4651,
											"end": 4656,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4639,
											"end": 4656,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4639,
											"end": 4656,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 4639,
											"end": 4649,
											"name": "CALLER",
											"source": 0
										},
										{
											"begin": 4639,
											"end": 4656,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4639,
											"end": 4656,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 4639,
											"end": 4656,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 4636,
											"end": 4677,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "150"
										},
										{
											"begin": 4636,
											"end": 4677,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 4665,
											"end": 4675,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 4665,
											"end": 4675,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 4665,
											"end": 4675,
											"name": "PUSH",
											"source": 0,
											"value": "472E017E00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 4665,
											"end": 4675,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4665,
											"end": 4675,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4665,
											"end": 4675,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 4665,
											"end": 4675,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4665,
											"end": 4675,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 4665,
											"end": 4675,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 4665,
											"end": 4675,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4665,
											"end": 4675,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 4665,
											"end": 4675,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 4665,
											"end": 4675,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4665,
											"end": 4675,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 4636,
											"end": 4677,
											"name": "tag",
											"source": 0,
											"value": "150"
										},
										{
											"begin": 4636,
											"end": 4677,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4780,
											"end": 4781,
											"name": "PUSH",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 4753,
											"end": 4762,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 4753,
											"end": 4767,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4763,
											"end": 4766,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 4753,
											"end": 4767,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4753,
											"end": 4767,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 4753,
											"end": 4767,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4753,
											"end": 4767,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 4753,
											"end": 4767,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4753,
											"end": 4767,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4753,
											"end": 4767,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 4753,
											"end": 4767,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4753,
											"end": 4767,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4753,
											"end": 4767,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4753,
											"end": 4767,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4753,
											"end": 4767,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 4753,
											"end": 4767,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4753,
											"end": 4767,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4753,
											"end": 4767,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 4753,
											"end": 4778,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4753,
											"end": 4778,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4753,
											"end": 4778,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4753,
											"end": 4778,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4753,
											"end": 4778,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 4753,
											"end": 4778,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4753,
											"end": 4778,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 4753,
											"end": 4778,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 4753,
											"end": 4778,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4753,
											"end": 4778,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 4753,
											"end": 4778,
											"name": "PUSH",
											"source": 0,
											"value": "FF"
										},
										{
											"begin": 4753,
											"end": 4778,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 4753,
											"end": 4781,
											"name": "PUSH",
											"source": 0,
											"value": "FF"
										},
										{
											"begin": 4753,
											"end": 4781,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 4753,
											"end": 4781,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 4750,
											"end": 4808,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "151"
										},
										{
											"begin": 4750,
											"end": 4808,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 4790,
											"end": 4806,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 4790,
											"end": 4806,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 4790,
											"end": 4806,
											"name": "PUSH",
											"source": 0,
											"value": "DE4461CD00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 4790,
											"end": 4806,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4790,
											"end": 4806,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4790,
											"end": 4806,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 4790,
											"end": 4806,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4790,
											"end": 4806,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 4790,
											"end": 4806,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 4790,
											"end": 4806,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4790,
											"end": 4806,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 4790,
											"end": 4806,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 4790,
											"end": 4806,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4790,
											"end": 4806,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 4750,
											"end": 4808,
											"name": "tag",
											"source": 0,
											"value": "151"
										},
										{
											"begin": 4750,
											"end": 4808,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4819,
											"end": 4836,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4837,
											"end": 4846,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 4837,
											"end": 4851,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4847,
											"end": 4850,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 4837,
											"end": 4851,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4837,
											"end": 4851,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 4837,
											"end": 4851,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4837,
											"end": 4851,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 4837,
											"end": 4851,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4837,
											"end": 4851,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4837,
											"end": 4851,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 4837,
											"end": 4851,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4837,
											"end": 4851,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4837,
											"end": 4851,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4837,
											"end": 4851,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4837,
											"end": 4851,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 4837,
											"end": 4851,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4837,
											"end": 4851,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4837,
											"end": 4851,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 4837,
											"end": 4866,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4837,
											"end": 4866,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4837,
											"end": 4866,
											"name": "PUSH",
											"source": 0,
											"value": "10"
										},
										{
											"begin": 4837,
											"end": 4866,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4837,
											"end": 4866,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 4837,
											"end": 4866,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4837,
											"end": 4866,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 4837,
											"end": 4866,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 4837,
											"end": 4866,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4837,
											"end": 4866,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 4837,
											"end": 4866,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4837,
											"end": 4866,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 4819,
											"end": 4866,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4819,
											"end": 4866,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4877,
											"end": 4895,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4896,
											"end": 4905,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 4896,
											"end": 4910,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4906,
											"end": 4909,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 4896,
											"end": 4910,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4896,
											"end": 4910,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 4896,
											"end": 4910,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4896,
											"end": 4910,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 4896,
											"end": 4910,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4896,
											"end": 4910,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4896,
											"end": 4910,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 4896,
											"end": 4910,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4896,
											"end": 4910,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4896,
											"end": 4910,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4896,
											"end": 4910,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4896,
											"end": 4910,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 4896,
											"end": 4910,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4896,
											"end": 4910,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4896,
											"end": 4910,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 4896,
											"end": 4919,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 4896,
											"end": 4919,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4896,
											"end": 4919,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4896,
											"end": 4919,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4896,
											"end": 4919,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 4896,
											"end": 4919,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4896,
											"end": 4919,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 4896,
											"end": 4919,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 4896,
											"end": 4919,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4896,
											"end": 4919,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 4896,
											"end": 4919,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4896,
											"end": 4919,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 4877,
											"end": 4919,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4877,
											"end": 4919,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4974,
											"end": 4985,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4986,
											"end": 5019,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "152"
										},
										{
											"begin": 5008,
											"end": 5018,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 4998,
											"end": 5007,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 4998,
											"end": 5018,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "153"
										},
										{
											"begin": 4998,
											"end": 5018,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 4998,
											"end": 5018,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4998,
											"end": 5018,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "74"
										},
										{
											"begin": 4998,
											"end": 5018,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 4998,
											"end": 5018,
											"name": "tag",
											"source": 0,
											"value": "153"
										},
										{
											"begin": 4998,
											"end": 5018,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4986,
											"end": 5019,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4986,
											"end": 5019,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 4986,
											"end": 4997,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 4986,
											"end": 5019,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 4986,
											"end": 5019,
											"name": "tag",
											"source": 0,
											"value": "152"
										},
										{
											"begin": 4986,
											"end": 5019,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4974,
											"end": 5019,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4974,
											"end": 5019,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5072,
											"end": 5124,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "154"
										},
										{
											"begin": 5114,
											"end": 5118,
											"name": "ADDRESS",
											"source": 0
										},
										{
											"begin": 5120,
											"end": 5123,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 5079,
											"end": 5091,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 5079,
											"end": 5091,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 5079,
											"end": 5091,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5079,
											"end": 5091,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 5079,
											"end": 5091,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5079,
											"end": 5091,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 5079,
											"end": 5091,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 5079,
											"end": 5091,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5079,
											"end": 5091,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 5079,
											"end": 5091,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5079,
											"end": 5091,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 5072,
											"end": 5105,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5072,
											"end": 5105,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 5072,
											"end": 5105,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "102"
										},
										{
											"begin": 5072,
											"end": 5105,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5072,
											"end": 5124,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 5072,
											"end": 5124,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 5072,
											"end": 5124,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5072,
											"end": 5124,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFF"
										},
										{
											"begin": 5072,
											"end": 5124,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 5072,
											"end": 5124,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 5072,
											"end": 5124,
											"name": "tag",
											"source": 0,
											"value": "154"
										},
										{
											"begin": 5072,
											"end": 5124,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5165,
											"end": 5219,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "155"
										},
										{
											"begin": 5199,
											"end": 5204,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 5215,
											"end": 5218,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 5205,
											"end": 5214,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 5205,
											"end": 5218,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5205,
											"end": 5218,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 5205,
											"end": 5218,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "156"
										},
										{
											"begin": 5205,
											"end": 5218,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 5205,
											"end": 5218,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5205,
											"end": 5218,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "105"
										},
										{
											"begin": 5205,
											"end": 5218,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 5205,
											"end": 5218,
											"name": "tag",
											"source": 0,
											"value": "156"
										},
										{
											"begin": 5205,
											"end": 5218,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5172,
											"end": 5184,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 5172,
											"end": 5184,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 5172,
											"end": 5184,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5172,
											"end": 5184,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 5172,
											"end": 5184,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5172,
											"end": 5184,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 5172,
											"end": 5184,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 5172,
											"end": 5184,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5172,
											"end": 5184,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 5172,
											"end": 5184,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5172,
											"end": 5184,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 5165,
											"end": 5198,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5165,
											"end": 5198,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 5165,
											"end": 5198,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "102"
										},
										{
											"begin": 5165,
											"end": 5198,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5165,
											"end": 5219,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 5165,
											"end": 5219,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 5165,
											"end": 5219,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5165,
											"end": 5219,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFF"
										},
										{
											"begin": 5165,
											"end": 5219,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 5165,
											"end": 5219,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 5165,
											"end": 5219,
											"name": "tag",
											"source": 0,
											"value": "155"
										},
										{
											"begin": 5165,
											"end": 5219,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5256,
											"end": 5257,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 5230,
											"end": 5239,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 5230,
											"end": 5244,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 5240,
											"end": 5243,
											"name": "DUP8",
											"source": 0
										},
										{
											"begin": 5230,
											"end": 5244,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5230,
											"end": 5244,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 5230,
											"end": 5244,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5230,
											"end": 5244,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 5230,
											"end": 5244,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 5230,
											"end": 5244,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 5230,
											"end": 5244,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 5230,
											"end": 5244,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 5230,
											"end": 5244,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5230,
											"end": 5244,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 5230,
											"end": 5244,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 5230,
											"end": 5244,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 5230,
											"end": 5244,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 5230,
											"end": 5244,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 5230,
											"end": 5244,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 5230,
											"end": 5255,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 5230,
											"end": 5255,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 5230,
											"end": 5255,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 5230,
											"end": 5257,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 5230,
											"end": 5257,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 5230,
											"end": 5257,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 5230,
											"end": 5257,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 5230,
											"end": 5257,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 5230,
											"end": 5257,
											"name": "PUSH",
											"source": 0,
											"value": "FF"
										},
										{
											"begin": 5230,
											"end": 5257,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 5230,
											"end": 5257,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 5230,
											"end": 5257,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 5230,
											"end": 5257,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5230,
											"end": 5257,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 5230,
											"end": 5257,
											"name": "PUSH",
											"source": 0,
											"value": "FF"
										},
										{
											"begin": 5230,
											"end": 5257,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 5230,
											"end": 5257,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 5230,
											"end": 5257,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 5230,
											"end": 5257,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5230,
											"end": 5257,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 5230,
											"end": 5257,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4554,
											"end": 5265,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4554,
											"end": 5265,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4554,
											"end": 5265,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4554,
											"end": 5265,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4505,
											"end": 5265,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4505,
											"end": 5265,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 8038,
											"end": 8087,
											"name": "tag",
											"source": 0,
											"value": "59"
										},
										{
											"begin": 8038,
											"end": 8087,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 8038,
											"end": 8087,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 8038,
											"end": 8087,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2746,
											"end": 3761,
											"name": "tag",
											"source": 0,
											"value": "63"
										},
										{
											"begin": 2746,
											"end": 3761,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2834,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2835,
											"end": 2844,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2835,
											"end": 2849,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2845,
											"end": 2848,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 2835,
											"end": 2849,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2835,
											"end": 2849,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2835,
											"end": 2849,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2835,
											"end": 2849,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2835,
											"end": 2849,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2835,
											"end": 2849,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2835,
											"end": 2849,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2835,
											"end": 2849,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2835,
											"end": 2849,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2835,
											"end": 2849,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2835,
											"end": 2849,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2835,
											"end": 2849,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2835,
											"end": 2849,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2835,
											"end": 2849,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2835,
											"end": 2849,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "PUSH",
											"source": 0,
											"value": "FF"
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "PUSH",
											"source": 0,
											"value": "FF"
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "PUSH",
											"source": 0,
											"value": "FF"
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "PUSH",
											"source": 0,
											"value": "9"
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFF"
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFF"
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFF"
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "PUSH",
											"source": 0,
											"value": "10"
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "PUSH",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "PUSH",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2849,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2892,
											"end": 2893,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 2868,
											"end": 2879,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2868,
											"end": 2890,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2868,
											"end": 2890,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2868,
											"end": 2890,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2868,
											"end": 2893,
											"name": "PUSH",
											"source": 0,
											"value": "FF"
										},
										{
											"begin": 2868,
											"end": 2893,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2868,
											"end": 2893,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 2860,
											"end": 2894,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "159"
										},
										{
											"begin": 2860,
											"end": 2894,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2860,
											"end": 2894,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2860,
											"end": 2894,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2860,
											"end": 2894,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 2860,
											"end": 2894,
											"name": "tag",
											"source": 0,
											"value": "159"
										},
										{
											"begin": 2860,
											"end": 2894,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2933,
											"end": 2959,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2960,
											"end": 2971,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2960,
											"end": 2984,
											"name": "PUSH",
											"source": 0,
											"value": "A0"
										},
										{
											"begin": 2960,
											"end": 2984,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2960,
											"end": 2984,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2933,
											"end": 2984,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2933,
											"end": 2984,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 3077,
											"end": 3093,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 3094,
											"end": 3140,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "160"
										},
										{
											"begin": 3109,
											"end": 3127,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 3128,
											"end": 3134,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 3135,
											"end": 3139,
											"name": "PUSH",
											"source": 0,
											"value": "3E8"
										},
										{
											"begin": 3094,
											"end": 3108,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "38"
										},
										{
											"begin": 3094,
											"end": 3140,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 3094,
											"end": 3140,
											"name": "tag",
											"source": 0,
											"value": "160"
										},
										{
											"begin": 3094,
											"end": 3140,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3077,
											"end": 3140,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3077,
											"end": 3140,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 3151,
											"end": 3167,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 3168,
											"end": 3226,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "161"
										},
										{
											"begin": 3177,
											"end": 3188,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 3177,
											"end": 3197,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 3177,
											"end": 3197,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3177,
											"end": 3197,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 3199,
											"end": 3210,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 3199,
											"end": 3225,
											"name": "PUSH",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 3199,
											"end": 3225,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3199,
											"end": 3225,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 3168,
											"end": 3176,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "47"
										},
										{
											"begin": 3168,
											"end": 3226,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 3168,
											"end": 3226,
											"name": "tag",
											"source": 0,
											"value": "161"
										},
										{
											"begin": 3168,
											"end": 3226,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3151,
											"end": 3226,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3151,
											"end": 3226,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 3264,
											"end": 3397,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "162"
										},
										{
											"begin": 3322,
											"end": 3332,
											"name": "CALLER",
											"source": 0
										},
										{
											"begin": 3355,
											"end": 3359,
											"name": "ADDRESS",
											"source": 0
										},
										{
											"begin": 3375,
											"end": 3386,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 3271,
											"end": 3289,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 3264,
											"end": 3307,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3264,
											"end": 3307,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3264,
											"end": 3307,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "78"
										},
										{
											"begin": 3264,
											"end": 3307,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3264,
											"end": 3397,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 3264,
											"end": 3397,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 3264,
											"end": 3397,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3264,
											"end": 3397,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3264,
											"end": 3397,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFF"
										},
										{
											"begin": 3264,
											"end": 3397,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3264,
											"end": 3397,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 3264,
											"end": 3397,
											"name": "tag",
											"source": 0,
											"value": "162"
										},
										{
											"begin": 3264,
											"end": 3397,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3472,
											"end": 3532,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "163"
										},
										{
											"begin": 3511,
											"end": 3519,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 3520,
											"end": 3531,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 3479,
											"end": 3497,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 3472,
											"end": 3510,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3472,
											"end": 3510,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3472,
											"end": 3510,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 3472,
											"end": 3510,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3472,
											"end": 3532,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 3472,
											"end": 3532,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3472,
											"end": 3532,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3472,
											"end": 3532,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFF"
										},
										{
											"begin": 3472,
											"end": 3532,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3472,
											"end": 3532,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 3472,
											"end": 3532,
											"name": "tag",
											"source": 0,
											"value": "163"
										},
										{
											"begin": 3472,
											"end": 3532,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3543,
											"end": 3622,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "164"
										},
										{
											"begin": 3595,
											"end": 3599,
											"name": "ADDRESS",
											"source": 0
										},
										{
											"begin": 3601,
											"end": 3609,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 3610,
											"end": 3621,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 3550,
											"end": 3568,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 3543,
											"end": 3586,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3543,
											"end": 3586,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3543,
											"end": 3586,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "78"
										},
										{
											"begin": 3543,
											"end": 3586,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3543,
											"end": 3622,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 3543,
											"end": 3622,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 3543,
											"end": 3622,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3543,
											"end": 3622,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3543,
											"end": 3622,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFF"
										},
										{
											"begin": 3543,
											"end": 3622,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3543,
											"end": 3622,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 3543,
											"end": 3622,
											"name": "tag",
											"source": 0,
											"value": "164"
										},
										{
											"begin": 3543,
											"end": 3622,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3662,
											"end": 3672,
											"name": "CALLER",
											"source": 0
										},
										{
											"begin": 3633,
											"end": 3642,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 3633,
											"end": 3647,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 3643,
											"end": 3646,
											"name": "DUP9",
											"source": 0
										},
										{
											"begin": 3633,
											"end": 3647,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3633,
											"end": 3647,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3633,
											"end": 3647,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3633,
											"end": 3647,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3633,
											"end": 3647,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3633,
											"end": 3647,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3633,
											"end": 3647,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 3633,
											"end": 3647,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3633,
											"end": 3647,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3633,
											"end": 3647,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3633,
											"end": 3647,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3633,
											"end": 3647,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 3633,
											"end": 3647,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3633,
											"end": 3647,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 3633,
											"end": 3647,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 3633,
											"end": 3661,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 3633,
											"end": 3661,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3633,
											"end": 3661,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 3633,
											"end": 3672,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 3633,
											"end": 3672,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 3633,
											"end": 3672,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3633,
											"end": 3672,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 3633,
											"end": 3672,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3633,
											"end": 3672,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3633,
											"end": 3672,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 3633,
											"end": 3672,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 3633,
											"end": 3672,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3633,
											"end": 3672,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3633,
											"end": 3672,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 3633,
											"end": 3672,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3633,
											"end": 3672,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3633,
											"end": 3672,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 3633,
											"end": 3672,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 3633,
											"end": 3672,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3633,
											"end": 3672,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 3633,
											"end": 3672,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 3752,
											"end": 3753,
											"name": "PUSH",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 3726,
											"end": 3735,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 3726,
											"end": 3740,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 3736,
											"end": 3739,
											"name": "DUP9",
											"source": 0
										},
										{
											"begin": 3726,
											"end": 3740,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3726,
											"end": 3740,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3726,
											"end": 3740,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3726,
											"end": 3740,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3726,
											"end": 3740,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3726,
											"end": 3740,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3726,
											"end": 3740,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 3726,
											"end": 3740,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3726,
											"end": 3740,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3726,
											"end": 3740,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3726,
											"end": 3740,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3726,
											"end": 3740,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 3726,
											"end": 3740,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3726,
											"end": 3740,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 3726,
											"end": 3740,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 3726,
											"end": 3751,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 3726,
											"end": 3751,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3726,
											"end": 3751,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 3726,
											"end": 3753,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 3726,
											"end": 3753,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 3726,
											"end": 3753,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3726,
											"end": 3753,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 3726,
											"end": 3753,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3726,
											"end": 3753,
											"name": "PUSH",
											"source": 0,
											"value": "FF"
										},
										{
											"begin": 3726,
											"end": 3753,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 3726,
											"end": 3753,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 3726,
											"end": 3753,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3726,
											"end": 3753,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3726,
											"end": 3753,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 3726,
											"end": 3753,
											"name": "PUSH",
											"source": 0,
											"value": "FF"
										},
										{
											"begin": 3726,
											"end": 3753,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3726,
											"end": 3753,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 3726,
											"end": 3753,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 3726,
											"end": 3753,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3726,
											"end": 3753,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 3726,
											"end": 3753,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2796,
											"end": 3761,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2796,
											"end": 3761,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2796,
											"end": 3761,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2796,
											"end": 3761,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2746,
											"end": 3761,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2746,
											"end": 3761,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2746,
											"end": 3761,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1302,
											"end": 1366,
											"name": "tag",
											"source": 0,
											"value": "66"
										},
										{
											"begin": 1302,
											"end": 1366,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1302,
											"end": 1366,
											"name": "PUSH",
											"source": 0,
											"value": "7"
										},
										{
											"begin": 1302,
											"end": 1366,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1302,
											"end": 1366,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1302,
											"end": 1366,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1302,
											"end": 1366,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1302,
											"end": 1366,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1302,
											"end": 1366,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1302,
											"end": 1366,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1302,
											"end": 1366,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 1302,
											"end": 1366,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1302,
											"end": 1366,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1302,
											"end": 1366,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1302,
											"end": 1366,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1302,
											"end": 1366,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1302,
											"end": 1366,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1302,
											"end": 1366,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1302,
											"end": 1366,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 1302,
											"end": 1366,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1302,
											"end": 1366,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1302,
											"end": 1366,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1302,
											"end": 1366,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1302,
											"end": 1366,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1302,
											"end": 1366,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1302,
											"end": 1366,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 1302,
											"end": 1366,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1302,
											"end": 1366,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 1302,
											"end": 1366,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 1302,
											"end": 1366,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1302,
											"end": 1366,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 1302,
											"end": 1366,
											"name": "PUSH",
											"source": 0,
											"value": "FF"
										},
										{
											"begin": 1302,
											"end": 1366,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1302,
											"end": 1366,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1302,
											"end": 1366,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1537,
											"end": 1601,
											"name": "tag",
											"source": 0,
											"value": "70"
										},
										{
											"begin": 1537,
											"end": 1601,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1537,
											"end": 1601,
											"name": "PUSH",
											"source": 0,
											"value": "9"
										},
										{
											"begin": 1537,
											"end": 1601,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1537,
											"end": 1601,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1537,
											"end": 1601,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1537,
											"end": 1601,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1537,
											"end": 1601,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1537,
											"end": 1601,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1537,
											"end": 1601,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1537,
											"end": 1601,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 1537,
											"end": 1601,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1537,
											"end": 1601,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1537,
											"end": 1601,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1537,
											"end": 1601,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1537,
											"end": 1601,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1537,
											"end": 1601,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1537,
											"end": 1601,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1537,
											"end": 1601,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 1537,
											"end": 1601,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1537,
											"end": 1601,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1537,
											"end": 1601,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1537,
											"end": 1601,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1537,
											"end": 1601,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1537,
											"end": 1601,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1537,
											"end": 1601,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 1537,
											"end": 1601,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1537,
											"end": 1601,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 1537,
											"end": 1601,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 1537,
											"end": 1601,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1537,
											"end": 1601,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 1537,
											"end": 1601,
											"name": "PUSH",
											"source": 0,
											"value": "FF"
										},
										{
											"begin": 1537,
											"end": 1601,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1537,
											"end": 1601,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1537,
											"end": 1601,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1447,
											"end": 1652,
											"name": "tag",
											"source": 18,
											"value": "78"
										},
										{
											"begin": 1447,
											"end": 1652,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1548,
											"end": 1644,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "166"
										},
										{
											"begin": 1568,
											"end": 1573,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 1598,
											"end": 1625,
											"name": "PUSH",
											"source": 18,
											"value": "23B872DD"
										},
										{
											"begin": 1598,
											"end": 1625,
											"name": "PUSH",
											"source": 18,
											"value": "E0"
										},
										{
											"begin": 1598,
											"end": 1625,
											"name": "SHL",
											"source": 18
										},
										{
											"begin": 1627,
											"end": 1631,
											"name": "DUP6",
											"source": 18
										},
										{
											"begin": 1633,
											"end": 1635,
											"name": "DUP6",
											"source": 18
										},
										{
											"begin": 1637,
											"end": 1642,
											"name": "DUP6",
											"source": 18
										},
										{
											"begin": 1575,
											"end": 1643,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 1575,
											"end": 1643,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 1575,
											"end": 1643,
											"name": "PUSH",
											"source": 18,
											"value": "24"
										},
										{
											"begin": 1575,
											"end": 1643,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 1575,
											"end": 1643,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "167"
										},
										{
											"begin": 1575,
											"end": 1643,
											"name": "SWAP4",
											"source": 18
										},
										{
											"begin": 1575,
											"end": 1643,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 1575,
											"end": 1643,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 1575,
											"end": 1643,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 1575,
											"end": 1643,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "168"
										},
										{
											"begin": 1575,
											"end": 1643,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 1575,
											"end": 1643,
											"name": "tag",
											"source": 18,
											"value": "167"
										},
										{
											"begin": 1575,
											"end": 1643,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1575,
											"end": 1643,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 1575,
											"end": 1643,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 1575,
											"end": 1643,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 1575,
											"end": 1643,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 1575,
											"end": 1643,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 1575,
											"end": 1643,
											"name": "SUB",
											"source": 18
										},
										{
											"begin": 1575,
											"end": 1643,
											"name": "SUB",
											"source": 18
										},
										{
											"begin": 1575,
											"end": 1643,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 1575,
											"end": 1643,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 1575,
											"end": 1643,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 1575,
											"end": 1643,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 1575,
											"end": 1643,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 1575,
											"end": 1643,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 1575,
											"end": 1643,
											"name": "PUSH",
											"source": 18,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1575,
											"end": 1643,
											"name": "NOT",
											"source": 18
										},
										{
											"begin": 1575,
											"end": 1643,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 1575,
											"end": 1643,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 1575,
											"end": 1643,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 1575,
											"end": 1643,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 1575,
											"end": 1643,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1575,
											"end": 1643,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 1575,
											"end": 1643,
											"name": "PUSH",
											"source": 18,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1575,
											"end": 1643,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 1575,
											"end": 1643,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 1575,
											"end": 1643,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 1575,
											"end": 1643,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 1575,
											"end": 1643,
											"name": "OR",
											"source": 18
										},
										{
											"begin": 1575,
											"end": 1643,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 1575,
											"end": 1643,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 1575,
											"end": 1643,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1575,
											"end": 1643,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1575,
											"end": 1643,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1575,
											"end": 1643,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1548,
											"end": 1567,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "169"
										},
										{
											"begin": 1548,
											"end": 1644,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 1548,
											"end": 1644,
											"name": "tag",
											"source": 18,
											"value": "166"
										},
										{
											"begin": 1548,
											"end": 1644,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1447,
											"end": 1652,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1447,
											"end": 1652,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1447,
											"end": 1652,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1447,
											"end": 1652,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1447,
											"end": 1652,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 1921,
											"end": 2503,
											"name": "tag",
											"source": 18,
											"value": "80"
										},
										{
											"begin": 1921,
											"end": 2503,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 2260,
											"end": 2261,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 2251,
											"end": 2256,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 2251,
											"end": 2261,
											"name": "EQ",
											"source": 18
										},
										{
											"begin": 2250,
											"end": 2312,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 2250,
											"end": 2312,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "171"
										},
										{
											"begin": 2250,
											"end": 2312,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 2250,
											"end": 2312,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 2310,
											"end": 2311,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 2267,
											"end": 2272,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 2267,
											"end": 2282,
											"name": "PUSH",
											"source": 18,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2267,
											"end": 2282,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 2267,
											"end": 2282,
											"name": "PUSH",
											"source": 18,
											"value": "DD62ED3E"
										},
										{
											"begin": 2291,
											"end": 2295,
											"name": "ADDRESS",
											"source": 18
										},
										{
											"begin": 2298,
											"end": 2305,
											"name": "DUP6",
											"source": 18
										},
										{
											"begin": 2267,
											"end": 2306,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 2267,
											"end": 2306,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 2267,
											"end": 2306,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 2267,
											"end": 2306,
											"name": "PUSH",
											"source": 18,
											"value": "FFFFFFFF"
										},
										{
											"begin": 2267,
											"end": 2306,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 2267,
											"end": 2306,
											"name": "PUSH",
											"source": 18,
											"value": "E0"
										},
										{
											"begin": 2267,
											"end": 2306,
											"name": "SHL",
											"source": 18
										},
										{
											"begin": 2267,
											"end": 2306,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 2267,
											"end": 2306,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 2267,
											"end": 2306,
											"name": "PUSH",
											"source": 18,
											"value": "4"
										},
										{
											"begin": 2267,
											"end": 2306,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 2267,
											"end": 2306,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "172"
										},
										{
											"begin": 2267,
											"end": 2306,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 2267,
											"end": 2306,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 2267,
											"end": 2306,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 2267,
											"end": 2306,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "173"
										},
										{
											"begin": 2267,
											"end": 2306,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 2267,
											"end": 2306,
											"name": "tag",
											"source": 18,
											"value": "172"
										},
										{
											"begin": 2267,
											"end": 2306,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 2267,
											"end": 2306,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 2267,
											"end": 2306,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 2267,
											"end": 2306,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 2267,
											"end": 2306,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 2267,
											"end": 2306,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 2267,
											"end": 2306,
											"name": "SUB",
											"source": 18
										},
										{
											"begin": 2267,
											"end": 2306,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 2267,
											"end": 2306,
											"name": "DUP7",
											"source": 18
										},
										{
											"begin": 2267,
											"end": 2306,
											"name": "GAS",
											"source": 18
										},
										{
											"begin": 2267,
											"end": 2306,
											"name": "STATICCALL",
											"source": 18
										},
										{
											"begin": 2267,
											"end": 2306,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 2267,
											"end": 2306,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 2267,
											"end": 2306,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 2267,
											"end": 2306,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "175"
										},
										{
											"begin": 2267,
											"end": 2306,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 2267,
											"end": 2306,
											"name": "RETURNDATASIZE",
											"source": 18
										},
										{
											"begin": 2267,
											"end": 2306,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 2267,
											"end": 2306,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 2267,
											"end": 2306,
											"name": "RETURNDATACOPY",
											"source": 18
										},
										{
											"begin": 2267,
											"end": 2306,
											"name": "RETURNDATASIZE",
											"source": 18
										},
										{
											"begin": 2267,
											"end": 2306,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 2267,
											"end": 2306,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 2267,
											"end": 2306,
											"name": "tag",
											"source": 18,
											"value": "175"
										},
										{
											"begin": 2267,
											"end": 2306,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 2267,
											"end": 2306,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 2267,
											"end": 2306,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 2267,
											"end": 2306,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 2267,
											"end": 2306,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 2267,
											"end": 2306,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 2267,
											"end": 2306,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 2267,
											"end": 2306,
											"name": "RETURNDATASIZE",
											"source": 18
										},
										{
											"begin": 2267,
											"end": 2306,
											"name": "PUSH",
											"source": 18,
											"value": "1F"
										},
										{
											"begin": 2267,
											"end": 2306,
											"name": "NOT",
											"source": 18
										},
										{
											"begin": 2267,
											"end": 2306,
											"name": "PUSH",
											"source": 18,
											"value": "1F"
										},
										{
											"begin": 2267,
											"end": 2306,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 2267,
											"end": 2306,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 2267,
											"end": 2306,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 2267,
											"end": 2306,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 2267,
											"end": 2306,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 2267,
											"end": 2306,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 2267,
											"end": 2306,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 2267,
											"end": 2306,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 2267,
											"end": 2306,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 2267,
											"end": 2306,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 2267,
											"end": 2306,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 2267,
											"end": 2306,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 2267,
											"end": 2306,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "176"
										},
										{
											"begin": 2267,
											"end": 2306,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 2267,
											"end": 2306,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 2267,
											"end": 2306,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "177"
										},
										{
											"begin": 2267,
											"end": 2306,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 2267,
											"end": 2306,
											"name": "tag",
											"source": 18,
											"value": "176"
										},
										{
											"begin": 2267,
											"end": 2306,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 2267,
											"end": 2311,
											"name": "EQ",
											"source": 18
										},
										{
											"begin": 2250,
											"end": 2312,
											"name": "tag",
											"source": 18,
											"value": "171"
										},
										{
											"begin": 2250,
											"end": 2312,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 2228,
											"end": 2394,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "178"
										},
										{
											"begin": 2228,
											"end": 2394,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 2228,
											"end": 2394,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 2228,
											"end": 2394,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 2228,
											"end": 2394,
											"name": "PUSH",
											"source": 18,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2228,
											"end": 2394,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 2228,
											"end": 2394,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 2228,
											"end": 2394,
											"name": "PUSH",
											"source": 18,
											"value": "4"
										},
										{
											"begin": 2228,
											"end": 2394,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 2228,
											"end": 2394,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "179"
										},
										{
											"begin": 2228,
											"end": 2394,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 2228,
											"end": 2394,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "180"
										},
										{
											"begin": 2228,
											"end": 2394,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 2228,
											"end": 2394,
											"name": "tag",
											"source": 18,
											"value": "179"
										},
										{
											"begin": 2228,
											"end": 2394,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 2228,
											"end": 2394,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 2228,
											"end": 2394,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 2228,
											"end": 2394,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 2228,
											"end": 2394,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 2228,
											"end": 2394,
											"name": "SUB",
											"source": 18
										},
										{
											"begin": 2228,
											"end": 2394,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 2228,
											"end": 2394,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 2228,
											"end": 2394,
											"name": "tag",
											"source": 18,
											"value": "178"
										},
										{
											"begin": 2228,
											"end": 2394,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 2405,
											"end": 2495,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "181"
										},
										{
											"begin": 2425,
											"end": 2430,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 2455,
											"end": 2477,
											"name": "PUSH",
											"source": 18,
											"value": "95EA7B3"
										},
										{
											"begin": 2455,
											"end": 2477,
											"name": "PUSH",
											"source": 18,
											"value": "E0"
										},
										{
											"begin": 2455,
											"end": 2477,
											"name": "SHL",
											"source": 18
										},
										{
											"begin": 2479,
											"end": 2486,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 2488,
											"end": 2493,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 2432,
											"end": 2494,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 2432,
											"end": 2494,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 2432,
											"end": 2494,
											"name": "PUSH",
											"source": 18,
											"value": "24"
										},
										{
											"begin": 2432,
											"end": 2494,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 2432,
											"end": 2494,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "182"
										},
										{
											"begin": 2432,
											"end": 2494,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 2432,
											"end": 2494,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 2432,
											"end": 2494,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 2432,
											"end": 2494,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "183"
										},
										{
											"begin": 2432,
											"end": 2494,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 2432,
											"end": 2494,
											"name": "tag",
											"source": 18,
											"value": "182"
										},
										{
											"begin": 2432,
											"end": 2494,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 2432,
											"end": 2494,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 2432,
											"end": 2494,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 2432,
											"end": 2494,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 2432,
											"end": 2494,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 2432,
											"end": 2494,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 2432,
											"end": 2494,
											"name": "SUB",
											"source": 18
										},
										{
											"begin": 2432,
											"end": 2494,
											"name": "SUB",
											"source": 18
										},
										{
											"begin": 2432,
											"end": 2494,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 2432,
											"end": 2494,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 2432,
											"end": 2494,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 2432,
											"end": 2494,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 2432,
											"end": 2494,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 2432,
											"end": 2494,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 2432,
											"end": 2494,
											"name": "PUSH",
											"source": 18,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2432,
											"end": 2494,
											"name": "NOT",
											"source": 18
										},
										{
											"begin": 2432,
											"end": 2494,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 2432,
											"end": 2494,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 2432,
											"end": 2494,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 2432,
											"end": 2494,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 2432,
											"end": 2494,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 2432,
											"end": 2494,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 2432,
											"end": 2494,
											"name": "PUSH",
											"source": 18,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2432,
											"end": 2494,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 2432,
											"end": 2494,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 2432,
											"end": 2494,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 2432,
											"end": 2494,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 2432,
											"end": 2494,
											"name": "OR",
											"source": 18
										},
										{
											"begin": 2432,
											"end": 2494,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 2432,
											"end": 2494,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 2432,
											"end": 2494,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 2432,
											"end": 2494,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 2432,
											"end": 2494,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 2432,
											"end": 2494,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 2405,
											"end": 2424,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "169"
										},
										{
											"begin": 2405,
											"end": 2495,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 2405,
											"end": 2495,
											"name": "tag",
											"source": 18,
											"value": "181"
										},
										{
											"begin": 2405,
											"end": 2495,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1921,
											"end": 2503,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1921,
											"end": 2503,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1921,
											"end": 2503,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1921,
											"end": 2503,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 8643,
											"end": 8757,
											"name": "tag",
											"source": 0,
											"value": "87"
										},
										{
											"begin": 8643,
											"end": 8757,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 8695,
											"end": 8702,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 8721,
											"end": 8730,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 8721,
											"end": 8735,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 8731,
											"end": 8734,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 8721,
											"end": 8735,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8721,
											"end": 8735,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 8721,
											"end": 8735,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8721,
											"end": 8735,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 8721,
											"end": 8735,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 8721,
											"end": 8735,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 8721,
											"end": 8735,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 8721,
											"end": 8735,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 8721,
											"end": 8735,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8721,
											"end": 8735,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 8721,
											"end": 8735,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 8721,
											"end": 8735,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 8721,
											"end": 8735,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 8721,
											"end": 8735,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 8721,
											"end": 8735,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 8721,
											"end": 8749,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 8721,
											"end": 8749,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 8721,
											"end": 8749,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 8721,
											"end": 8749,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8721,
											"end": 8749,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 8721,
											"end": 8749,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8721,
											"end": 8749,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 8721,
											"end": 8749,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 8721,
											"end": 8749,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8721,
											"end": 8749,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 8721,
											"end": 8749,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8721,
											"end": 8749,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 8714,
											"end": 8749,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8714,
											"end": 8749,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 8643,
											"end": 8757,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 8643,
											"end": 8757,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8643,
											"end": 8757,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 8643,
											"end": 8757,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 8483,
											"end": 8595,
											"name": "tag",
											"source": 0,
											"value": "92"
										},
										{
											"begin": 8483,
											"end": 8595,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 8534,
											"end": 8541,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 8560,
											"end": 8569,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 8560,
											"end": 8574,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 8570,
											"end": 8573,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 8560,
											"end": 8574,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8560,
											"end": 8574,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 8560,
											"end": 8574,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8560,
											"end": 8574,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 8560,
											"end": 8574,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 8560,
											"end": 8574,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 8560,
											"end": 8574,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 8560,
											"end": 8574,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 8560,
											"end": 8574,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8560,
											"end": 8574,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 8560,
											"end": 8574,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 8560,
											"end": 8574,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 8560,
											"end": 8574,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 8560,
											"end": 8574,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 8560,
											"end": 8574,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 8560,
											"end": 8587,
											"name": "PUSH",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 8560,
											"end": 8587,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 8560,
											"end": 8587,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 8560,
											"end": 8587,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8560,
											"end": 8587,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 8560,
											"end": 8587,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8560,
											"end": 8587,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 8560,
											"end": 8587,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 8560,
											"end": 8587,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8560,
											"end": 8587,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 8560,
											"end": 8587,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8560,
											"end": 8587,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 8553,
											"end": 8587,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8553,
											"end": 8587,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 8483,
											"end": 8595,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 8483,
											"end": 8595,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8483,
											"end": 8595,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 8483,
											"end": 8595,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 250,
											"end": 680,
											"name": "tag",
											"source": 19,
											"value": "100"
										},
										{
											"begin": 250,
											"end": 680,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 306,
											"end": 323,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 352,
											"end": 361,
											"name": "PUSH",
											"source": 19,
											"value": "56BC75E2D63100000"
										},
										{
											"begin": 338,
											"end": 350,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 338,
											"end": 361,
											"name": "LT",
											"source": 19
										},
										{
											"begin": 338,
											"end": 361,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 338,
											"end": 388,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 338,
											"end": 388,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 338,
											"end": 388,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "187"
										},
										{
											"begin": 338,
											"end": 388,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 338,
											"end": 388,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 378,
											"end": 388,
											"name": "PUSH",
											"source": 19,
											"value": "3635C9ADC5DEA00000"
										},
										{
											"begin": 365,
											"end": 377,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 365,
											"end": 388,
											"name": "LT",
											"source": 19
										},
										{
											"begin": 338,
											"end": 388,
											"name": "tag",
											"source": 19,
											"value": "187"
										},
										{
											"begin": 338,
											"end": 388,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 335,
											"end": 673,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 335,
											"end": 673,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "188"
										},
										{
											"begin": 335,
											"end": 673,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 424,
											"end": 427,
											"name": "PUSH",
											"source": 19,
											"value": "64"
										},
										{
											"begin": 411,
											"end": 423,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 411,
											"end": 427,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "189"
										},
										{
											"begin": 411,
											"end": 427,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 411,
											"end": 427,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 411,
											"end": 427,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "137"
										},
										{
											"begin": 411,
											"end": 427,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 411,
											"end": 427,
											"name": "tag",
											"source": 19,
											"value": "189"
										},
										{
											"begin": 411,
											"end": 427,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 404,
											"end": 427,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 404,
											"end": 427,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 404,
											"end": 427,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "186"
										},
										{
											"begin": 404,
											"end": 427,
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 335,
											"end": 673,
											"name": "tag",
											"source": 19,
											"value": "188"
										},
										{
											"begin": 335,
											"end": 673,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 461,
											"end": 471,
											"name": "PUSH",
											"source": 19,
											"value": "3635C9ADC5DEA00000"
										},
										{
											"begin": 447,
											"end": 459,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 447,
											"end": 471,
											"name": "LT",
											"source": 19
										},
										{
											"begin": 447,
											"end": 471,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 447,
											"end": 499,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 447,
											"end": 499,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 447,
											"end": 499,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "191"
										},
										{
											"begin": 447,
											"end": 499,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 447,
											"end": 499,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 488,
											"end": 499,
											"name": "PUSH",
											"source": 19,
											"value": "21E19E0C9BAB2400000"
										},
										{
											"begin": 475,
											"end": 487,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 475,
											"end": 499,
											"name": "LT",
											"source": 19
										},
										{
											"begin": 447,
											"end": 499,
											"name": "tag",
											"source": 19,
											"value": "191"
										},
										{
											"begin": 447,
											"end": 499,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 444,
											"end": 673,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 444,
											"end": 673,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "192"
										},
										{
											"begin": 444,
											"end": 673,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 535,
											"end": 538,
											"name": "PUSH",
											"source": 19,
											"value": "C8"
										},
										{
											"begin": 522,
											"end": 534,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 522,
											"end": 538,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "193"
										},
										{
											"begin": 522,
											"end": 538,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 522,
											"end": 538,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 522,
											"end": 538,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "137"
										},
										{
											"begin": 522,
											"end": 538,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 522,
											"end": 538,
											"name": "tag",
											"source": 19,
											"value": "193"
										},
										{
											"begin": 522,
											"end": 538,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 515,
											"end": 538,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 515,
											"end": 538,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 515,
											"end": 538,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "186"
										},
										{
											"begin": 515,
											"end": 538,
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 444,
											"end": 673,
											"name": "tag",
											"source": 19,
											"value": "192"
										},
										{
											"begin": 444,
											"end": 673,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 572,
											"end": 583,
											"name": "PUSH",
											"source": 19,
											"value": "21E19E0C9BAB2400000"
										},
										{
											"begin": 558,
											"end": 570,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 558,
											"end": 583,
											"name": "LT",
											"source": 19
										},
										{
											"begin": 555,
											"end": 673,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "195"
										},
										{
											"begin": 555,
											"end": 673,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 619,
											"end": 622,
											"name": "PUSH",
											"source": 19,
											"value": "190"
										},
										{
											"begin": 606,
											"end": 618,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 606,
											"end": 622,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "196"
										},
										{
											"begin": 606,
											"end": 622,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 606,
											"end": 622,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 606,
											"end": 622,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "137"
										},
										{
											"begin": 606,
											"end": 622,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 606,
											"end": 622,
											"name": "tag",
											"source": 19,
											"value": "196"
										},
										{
											"begin": 606,
											"end": 622,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 599,
											"end": 622,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 599,
											"end": 622,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 599,
											"end": 622,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "186"
										},
										{
											"begin": 599,
											"end": 622,
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 555,
											"end": 673,
											"name": "tag",
											"source": 19,
											"value": "195"
										},
										{
											"begin": 555,
											"end": 673,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 660,
											"end": 661,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 653,
											"end": 661,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 653,
											"end": 661,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 250,
											"end": 680,
											"name": "tag",
											"source": 19,
											"value": "186"
										},
										{
											"begin": 250,
											"end": 680,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 250,
											"end": 680,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 250,
											"end": 680,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 250,
											"end": 680,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 250,
											"end": 680,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 1025,
											"end": 1202,
											"name": "tag",
											"source": 18,
											"value": "102"
										},
										{
											"begin": 1025,
											"end": 1202,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1108,
											"end": 1194,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "199"
										},
										{
											"begin": 1128,
											"end": 1133,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 1158,
											"end": 1181,
											"name": "PUSH",
											"source": 18,
											"value": "A9059CBB"
										},
										{
											"begin": 1158,
											"end": 1181,
											"name": "PUSH",
											"source": 18,
											"value": "E0"
										},
										{
											"begin": 1158,
											"end": 1181,
											"name": "SHL",
											"source": 18
										},
										{
											"begin": 1183,
											"end": 1185,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 1187,
											"end": 1192,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "PUSH",
											"source": 18,
											"value": "24"
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "200"
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "183"
										},
										{
											"begin": 1135,
											"end": 1193,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "tag",
											"source": 18,
											"value": "200"
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "SUB",
											"source": 18
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "SUB",
											"source": 18
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "PUSH",
											"source": 18,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "NOT",
											"source": 18
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "PUSH",
											"source": 18,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "OR",
											"source": 18
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1108,
											"end": 1127,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "169"
										},
										{
											"begin": 1108,
											"end": 1194,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 1108,
											"end": 1194,
											"name": "tag",
											"source": 18,
											"value": "199"
										},
										{
											"begin": 1108,
											"end": 1194,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1025,
											"end": 1202,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1025,
											"end": 1202,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1025,
											"end": 1202,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1025,
											"end": 1202,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 5371,
											"end": 6020,
											"name": "tag",
											"source": 18,
											"value": "169"
										},
										{
											"begin": 5371,
											"end": 6020,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 5795,
											"end": 5818,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 5821,
											"end": 5890,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "202"
										},
										{
											"begin": 5849,
											"end": 5853,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 5821,
											"end": 5890,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 5821,
											"end": 5890,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 5821,
											"end": 5890,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 5821,
											"end": 5890,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 5821,
											"end": 5890,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 5821,
											"end": 5890,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 5821,
											"end": 5890,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 5821,
											"end": 5890,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 5821,
											"end": 5890,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 5821,
											"end": 5890,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 5821,
											"end": 5890,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 5821,
											"end": 5890,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 5821,
											"end": 5890,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 5821,
											"end": 5890,
											"name": "PUSH",
											"source": 18,
											"value": "5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564"
										},
										{
											"begin": 5821,
											"end": 5890,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 5821,
											"end": 5890,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 5821,
											"end": 5890,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 5829,
											"end": 5834,
											"name": "DUP6",
											"source": 18
										},
										{
											"begin": 5821,
											"end": 5848,
											"name": "PUSH",
											"source": 18,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5821,
											"end": 5848,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 5821,
											"end": 5848,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "203"
										},
										{
											"begin": 5821,
											"end": 5848,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 5821,
											"end": 5890,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 5821,
											"end": 5890,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 5821,
											"end": 5890,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 5821,
											"end": 5890,
											"name": "PUSH",
											"source": 18,
											"value": "FFFFFFFF"
										},
										{
											"begin": 5821,
											"end": 5890,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 5821,
											"end": 5890,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 5821,
											"end": 5890,
											"name": "tag",
											"source": 18,
											"value": "202"
										},
										{
											"begin": 5821,
											"end": 5890,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 5795,
											"end": 5890,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 5795,
											"end": 5890,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 5930,
											"end": 5931,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 5909,
											"end": 5919,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 5909,
											"end": 5926,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 5909,
											"end": 5931,
											"name": "EQ",
											"source": 18
										},
										{
											"begin": 5909,
											"end": 5965,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 5909,
											"end": 5965,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "204"
										},
										{
											"begin": 5909,
											"end": 5965,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 5909,
											"end": 5965,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 5946,
											"end": 5956,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 5935,
											"end": 5965,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 5935,
											"end": 5965,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 5935,
											"end": 5965,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 5935,
											"end": 5965,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 5935,
											"end": 5965,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 5935,
											"end": 5965,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 5935,
											"end": 5965,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 5935,
											"end": 5965,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 5935,
											"end": 5965,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "205"
										},
										{
											"begin": 5935,
											"end": 5965,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 5935,
											"end": 5965,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 5935,
											"end": 5965,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "206"
										},
										{
											"begin": 5935,
											"end": 5965,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 5935,
											"end": 5965,
											"name": "tag",
											"source": 18,
											"value": "205"
										},
										{
											"begin": 5935,
											"end": 5965,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 5909,
											"end": 5965,
											"name": "tag",
											"source": 18,
											"value": "204"
										},
										{
											"begin": 5909,
											"end": 5965,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 5901,
											"end": 6012,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "207"
										},
										{
											"begin": 5901,
											"end": 6012,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 5901,
											"end": 6012,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 5901,
											"end": 6012,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 5901,
											"end": 6012,
											"name": "PUSH",
											"source": 18,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 5901,
											"end": 6012,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 5901,
											"end": 6012,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 5901,
											"end": 6012,
											"name": "PUSH",
											"source": 18,
											"value": "4"
										},
										{
											"begin": 5901,
											"end": 6012,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 5901,
											"end": 6012,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "208"
										},
										{
											"begin": 5901,
											"end": 6012,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 5901,
											"end": 6012,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "209"
										},
										{
											"begin": 5901,
											"end": 6012,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 5901,
											"end": 6012,
											"name": "tag",
											"source": 18,
											"value": "208"
										},
										{
											"begin": 5901,
											"end": 6012,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 5901,
											"end": 6012,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 5901,
											"end": 6012,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 5901,
											"end": 6012,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 5901,
											"end": 6012,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 5901,
											"end": 6012,
											"name": "SUB",
											"source": 18
										},
										{
											"begin": 5901,
											"end": 6012,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 5901,
											"end": 6012,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 5901,
											"end": 6012,
											"name": "tag",
											"source": 18,
											"value": "207"
										},
										{
											"begin": 5901,
											"end": 6012,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 5441,
											"end": 6020,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 5371,
											"end": 6020,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 5371,
											"end": 6020,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 5371,
											"end": 6020,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 4207,
											"end": 4436,
											"name": "tag",
											"source": 16,
											"value": "203"
										},
										{
											"begin": 4207,
											"end": 4436,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 4344,
											"end": 4356,
											"name": "PUSH",
											"source": 16,
											"value": "60"
										},
										{
											"begin": 4376,
											"end": 4428,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "211"
										},
										{
											"begin": 4398,
											"end": 4404,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 4406,
											"end": 4410,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 4412,
											"end": 4413,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 4415,
											"end": 4427,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 4376,
											"end": 4397,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "212"
										},
										{
											"begin": 4376,
											"end": 4428,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 4376,
											"end": 4428,
											"name": "tag",
											"source": 16,
											"value": "211"
										},
										{
											"begin": 4376,
											"end": 4428,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 4369,
											"end": 4428,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 4369,
											"end": 4428,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 4207,
											"end": 4436,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": 4207,
											"end": 4436,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 4207,
											"end": 4436,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 4207,
											"end": 4436,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 4207,
											"end": 4436,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 4207,
											"end": 4436,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 5293,
											"end": 5748,
											"name": "tag",
											"source": 16,
											"value": "212"
										},
										{
											"begin": 5293,
											"end": 5748,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 5463,
											"end": 5475,
											"name": "PUSH",
											"source": 16,
											"value": "60"
										},
										{
											"begin": 5521,
											"end": 5526,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 5496,
											"end": 5517,
											"name": "SELFBALANCE",
											"source": 16
										},
										{
											"begin": 5496,
											"end": 5526,
											"name": "LT",
											"source": 16
										},
										{
											"begin": 5496,
											"end": 5526,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 5488,
											"end": 5569,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "214"
										},
										{
											"begin": 5488,
											"end": 5569,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 5488,
											"end": 5569,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 5488,
											"end": 5569,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 5488,
											"end": 5569,
											"name": "PUSH",
											"source": 16,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 5488,
											"end": 5569,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 5488,
											"end": 5569,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 5488,
											"end": 5569,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 5488,
											"end": 5569,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 5488,
											"end": 5569,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "215"
										},
										{
											"begin": 5488,
											"end": 5569,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 5488,
											"end": 5569,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "216"
										},
										{
											"begin": 5488,
											"end": 5569,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 5488,
											"end": 5569,
											"name": "tag",
											"source": 16,
											"value": "215"
										},
										{
											"begin": 5488,
											"end": 5569,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 5488,
											"end": 5569,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 5488,
											"end": 5569,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 5488,
											"end": 5569,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 5488,
											"end": 5569,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 5488,
											"end": 5569,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 5488,
											"end": 5569,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 5488,
											"end": 5569,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 5488,
											"end": 5569,
											"name": "tag",
											"source": 16,
											"value": "214"
										},
										{
											"begin": 5488,
											"end": 5569,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 5581,
											"end": 5593,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 5595,
											"end": 5618,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 5622,
											"end": 5628,
											"name": "DUP7",
											"source": 16
										},
										{
											"begin": 5622,
											"end": 5633,
											"name": "PUSH",
											"source": 16,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5622,
											"end": 5633,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 5641,
											"end": 5646,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 5648,
											"end": 5652,
											"name": "DUP8",
											"source": 16
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "217"
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "218"
										},
										{
											"begin": 5622,
											"end": 5653,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "tag",
											"source": 16,
											"value": "217"
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "DUP8",
											"source": 16
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "GAS",
											"source": 16
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "CALL",
											"source": 16
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "RETURNDATASIZE",
											"source": 16
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "221"
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "PUSH",
											"source": 16,
											"value": "1F"
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "NOT",
											"source": 16
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "PUSH",
											"source": 16,
											"value": "3F"
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "RETURNDATASIZE",
											"source": 16
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "RETURNDATASIZE",
											"source": 16
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "RETURNDATASIZE",
											"source": 16
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "RETURNDATACOPY",
											"source": 16
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "220"
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "tag",
											"source": 16,
											"value": "221"
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "PUSH",
											"source": 16,
											"value": "60"
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "tag",
											"source": 16,
											"value": "220"
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 5580,
											"end": 5653,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 5580,
											"end": 5653,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 5580,
											"end": 5653,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 5580,
											"end": 5653,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 5671,
											"end": 5740,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "222"
										},
										{
											"begin": 5698,
											"end": 5704,
											"name": "DUP8",
											"source": 16
										},
										{
											"begin": 5706,
											"end": 5713,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 5715,
											"end": 5725,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 5727,
											"end": 5739,
											"name": "DUP8",
											"source": 16
										},
										{
											"begin": 5671,
											"end": 5697,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "223"
										},
										{
											"begin": 5671,
											"end": 5740,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 5671,
											"end": 5740,
											"name": "tag",
											"source": 16,
											"value": "222"
										},
										{
											"begin": 5671,
											"end": 5740,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 5664,
											"end": 5740,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 5664,
											"end": 5740,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 5664,
											"end": 5740,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 5664,
											"end": 5740,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 5293,
											"end": 5748,
											"name": "SWAP5",
											"source": 16
										},
										{
											"begin": 5293,
											"end": 5748,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": 5293,
											"end": 5748,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 5293,
											"end": 5748,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 5293,
											"end": 5748,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 5293,
											"end": 5748,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 5293,
											"end": 5748,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 7866,
											"end": 8510,
											"name": "tag",
											"source": 16,
											"value": "223"
										},
										{
											"begin": 7866,
											"end": 8510,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 8051,
											"end": 8063,
											"name": "PUSH",
											"source": 16,
											"value": "60"
										},
										{
											"begin": 8080,
											"end": 8087,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 8076,
											"end": 8503,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 8076,
											"end": 8503,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "225"
										},
										{
											"begin": 8076,
											"end": 8503,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 8129,
											"end": 8130,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 8108,
											"end": 8118,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 8108,
											"end": 8125,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 8108,
											"end": 8130,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 8104,
											"end": 8394,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "226"
										},
										{
											"begin": 8104,
											"end": 8394,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 8326,
											"end": 8344,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "227"
										},
										{
											"begin": 8337,
											"end": 8343,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 8326,
											"end": 8336,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "228"
										},
										{
											"begin": 8326,
											"end": 8344,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 8326,
											"end": 8344,
											"name": "tag",
											"source": 16,
											"value": "227"
										},
										{
											"begin": 8326,
											"end": 8344,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 8318,
											"end": 8378,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "229"
										},
										{
											"begin": 8318,
											"end": 8378,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 8318,
											"end": 8378,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 8318,
											"end": 8378,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 8318,
											"end": 8378,
											"name": "PUSH",
											"source": 16,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 8318,
											"end": 8378,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 8318,
											"end": 8378,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 8318,
											"end": 8378,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 8318,
											"end": 8378,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 8318,
											"end": 8378,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "230"
										},
										{
											"begin": 8318,
											"end": 8378,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 8318,
											"end": 8378,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "231"
										},
										{
											"begin": 8318,
											"end": 8378,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 8318,
											"end": 8378,
											"name": "tag",
											"source": 16,
											"value": "230"
										},
										{
											"begin": 8318,
											"end": 8378,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 8318,
											"end": 8378,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 8318,
											"end": 8378,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 8318,
											"end": 8378,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 8318,
											"end": 8378,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 8318,
											"end": 8378,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 8318,
											"end": 8378,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 8318,
											"end": 8378,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 8318,
											"end": 8378,
											"name": "tag",
											"source": 16,
											"value": "229"
										},
										{
											"begin": 8318,
											"end": 8378,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 8104,
											"end": 8394,
											"name": "tag",
											"source": 16,
											"value": "226"
										},
										{
											"begin": 8104,
											"end": 8394,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 8415,
											"end": 8425,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 8408,
											"end": 8425,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 8408,
											"end": 8425,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 8408,
											"end": 8425,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "224"
										},
										{
											"begin": 8408,
											"end": 8425,
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 8076,
											"end": 8503,
											"name": "tag",
											"source": 16,
											"value": "225"
										},
										{
											"begin": 8076,
											"end": 8503,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 8458,
											"end": 8491,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "233"
										},
										{
											"begin": 8466,
											"end": 8476,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 8478,
											"end": 8490,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 8458,
											"end": 8465,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "234"
										},
										{
											"begin": 8458,
											"end": 8491,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 8458,
											"end": 8491,
											"name": "tag",
											"source": 16,
											"value": "233"
										},
										{
											"begin": 8458,
											"end": 8491,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 7866,
											"end": 8510,
											"name": "tag",
											"source": 16,
											"value": "224"
										},
										{
											"begin": 7866,
											"end": 8510,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 7866,
											"end": 8510,
											"name": "SWAP5",
											"source": 16
										},
										{
											"begin": 7866,
											"end": 8510,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": 7866,
											"end": 8510,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 7866,
											"end": 8510,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 7866,
											"end": 8510,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 7866,
											"end": 8510,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 7866,
											"end": 8510,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 1452,
											"end": 1778,
											"name": "tag",
											"source": 16,
											"value": "228"
										},
										{
											"begin": 1452,
											"end": 1778,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 1512,
											"end": 1516,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 1769,
											"end": 1770,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 1747,
											"end": 1754,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 1747,
											"end": 1766,
											"name": "PUSH",
											"source": 16,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1747,
											"end": 1766,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 1747,
											"end": 1766,
											"name": "EXTCODESIZE",
											"source": 16
										},
										{
											"begin": 1747,
											"end": 1770,
											"name": "GT",
											"source": 16
										},
										{
											"begin": 1740,
											"end": 1770,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 1740,
											"end": 1770,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 1452,
											"end": 1778,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 1452,
											"end": 1778,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 1452,
											"end": 1778,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 1452,
											"end": 1778,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 9052,
											"end": 9604,
											"name": "tag",
											"source": 16,
											"value": "234"
										},
										{
											"begin": 9052,
											"end": 9604,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 9233,
											"end": 9234,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 9213,
											"end": 9223,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 9213,
											"end": 9230,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 9213,
											"end": 9234,
											"name": "GT",
											"source": 16
										},
										{
											"begin": 9209,
											"end": 9597,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 9209,
											"end": 9597,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "237"
										},
										{
											"begin": 9209,
											"end": 9597,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 9445,
											"end": 9455,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 9439,
											"end": 9456,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 9502,
											"end": 9517,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 9489,
											"end": 9499,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 9485,
											"end": 9487,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 9481,
											"end": 9500,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 9474,
											"end": 9518,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 9209,
											"end": 9597,
											"name": "tag",
											"source": 16,
											"value": "237"
										},
										{
											"begin": 9209,
											"end": 9597,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 9572,
											"end": 9584,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 9565,
											"end": 9585,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 9565,
											"end": 9585,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 9565,
											"end": 9585,
											"name": "PUSH",
											"source": 16,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 9565,
											"end": 9585,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 9565,
											"end": 9585,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 9565,
											"end": 9585,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 9565,
											"end": 9585,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 9565,
											"end": 9585,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "239"
										},
										{
											"begin": 9565,
											"end": 9585,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 9565,
											"end": 9585,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 9565,
											"end": 9585,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "240"
										},
										{
											"begin": 9565,
											"end": 9585,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 9565,
											"end": 9585,
											"name": "tag",
											"source": 16,
											"value": "239"
										},
										{
											"begin": 9565,
											"end": 9585,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 9565,
											"end": 9585,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 9565,
											"end": 9585,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 9565,
											"end": 9585,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 9565,
											"end": 9585,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 9565,
											"end": 9585,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 9565,
											"end": 9585,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 9565,
											"end": 9585,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 88,
											"end": 205,
											"name": "tag",
											"source": 20,
											"value": "242"
										},
										{
											"begin": 88,
											"end": 205,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 197,
											"end": 198,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 194,
											"end": 195,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 187,
											"end": 199,
											"name": "REVERT",
											"source": 20
										},
										{
											"begin": 334,
											"end": 460,
											"name": "tag",
											"source": 20,
											"value": "244"
										},
										{
											"begin": 334,
											"end": 460,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 371,
											"end": 378,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 411,
											"end": 453,
											"name": "PUSH",
											"source": 20,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 404,
											"end": 409,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 400,
											"end": 454,
											"name": "AND",
											"source": 20
										},
										{
											"begin": 389,
											"end": 454,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 389,
											"end": 454,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 334,
											"end": 460,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 334,
											"end": 460,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 334,
											"end": 460,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 334,
											"end": 460,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 466,
											"end": 562,
											"name": "tag",
											"source": 20,
											"value": "245"
										},
										{
											"begin": 466,
											"end": 562,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 503,
											"end": 510,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 532,
											"end": 556,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "293"
										},
										{
											"begin": 550,
											"end": 555,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 532,
											"end": 556,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "244"
										},
										{
											"begin": 532,
											"end": 556,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 532,
											"end": 556,
											"name": "tag",
											"source": 20,
											"value": "293"
										},
										{
											"begin": 532,
											"end": 556,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 521,
											"end": 556,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 521,
											"end": 556,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 466,
											"end": 562,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 466,
											"end": 562,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 466,
											"end": 562,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 466,
											"end": 562,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 568,
											"end": 690,
											"name": "tag",
											"source": 20,
											"value": "246"
										},
										{
											"begin": 568,
											"end": 690,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 641,
											"end": 665,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "295"
										},
										{
											"begin": 659,
											"end": 664,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 641,
											"end": 665,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "245"
										},
										{
											"begin": 641,
											"end": 665,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 641,
											"end": 665,
											"name": "tag",
											"source": 20,
											"value": "295"
										},
										{
											"begin": 641,
											"end": 665,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 634,
											"end": 639,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 631,
											"end": 666,
											"name": "EQ",
											"source": 20
										},
										{
											"begin": 621,
											"end": 684,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "296"
										},
										{
											"begin": 621,
											"end": 684,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 680,
											"end": 681,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 677,
											"end": 678,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 670,
											"end": 682,
											"name": "REVERT",
											"source": 20
										},
										{
											"begin": 621,
											"end": 684,
											"name": "tag",
											"source": 20,
											"value": "296"
										},
										{
											"begin": 621,
											"end": 684,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 568,
											"end": 690,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 568,
											"end": 690,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 696,
											"end": 835,
											"name": "tag",
											"source": 20,
											"value": "247"
										},
										{
											"begin": 696,
											"end": 835,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 742,
											"end": 747,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 780,
											"end": 786,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 767,
											"end": 787,
											"name": "CALLDATALOAD",
											"source": 20
										},
										{
											"begin": 758,
											"end": 787,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 758,
											"end": 787,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 796,
											"end": 829,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "298"
										},
										{
											"begin": 823,
											"end": 828,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 796,
											"end": 829,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "246"
										},
										{
											"begin": 796,
											"end": 829,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 796,
											"end": 829,
											"name": "tag",
											"source": 20,
											"value": "298"
										},
										{
											"begin": 796,
											"end": 829,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 696,
											"end": 835,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 696,
											"end": 835,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 696,
											"end": 835,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 696,
											"end": 835,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 696,
											"end": 835,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 841,
											"end": 959,
											"name": "tag",
											"source": 20,
											"value": "248"
										},
										{
											"begin": 841,
											"end": 959,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 878,
											"end": 885,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 918,
											"end": 952,
											"name": "PUSH",
											"source": 20,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 911,
											"end": 916,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 907,
											"end": 953,
											"name": "AND",
											"source": 20
										},
										{
											"begin": 896,
											"end": 953,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 896,
											"end": 953,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 841,
											"end": 959,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 841,
											"end": 959,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 841,
											"end": 959,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 841,
											"end": 959,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 965,
											"end": 1087,
											"name": "tag",
											"source": 20,
											"value": "249"
										},
										{
											"begin": 965,
											"end": 1087,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 1038,
											"end": 1062,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "301"
										},
										{
											"begin": 1056,
											"end": 1061,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 1038,
											"end": 1062,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "248"
										},
										{
											"begin": 1038,
											"end": 1062,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 1038,
											"end": 1062,
											"name": "tag",
											"source": 20,
											"value": "301"
										},
										{
											"begin": 1038,
											"end": 1062,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 1031,
											"end": 1036,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 1028,
											"end": 1063,
											"name": "EQ",
											"source": 20
										},
										{
											"begin": 1018,
											"end": 1081,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "302"
										},
										{
											"begin": 1018,
											"end": 1081,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 1077,
											"end": 1078,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 1074,
											"end": 1075,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 1067,
											"end": 1079,
											"name": "REVERT",
											"source": 20
										},
										{
											"begin": 1018,
											"end": 1081,
											"name": "tag",
											"source": 20,
											"value": "302"
										},
										{
											"begin": 1018,
											"end": 1081,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 965,
											"end": 1087,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 965,
											"end": 1087,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 1093,
											"end": 1232,
											"name": "tag",
											"source": 20,
											"value": "250"
										},
										{
											"begin": 1093,
											"end": 1232,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 1139,
											"end": 1144,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 1177,
											"end": 1183,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 1164,
											"end": 1184,
											"name": "CALLDATALOAD",
											"source": 20
										},
										{
											"begin": 1155,
											"end": 1184,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 1155,
											"end": 1184,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 1193,
											"end": 1226,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "304"
										},
										{
											"begin": 1220,
											"end": 1225,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 1193,
											"end": 1226,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "249"
										},
										{
											"begin": 1193,
											"end": 1226,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 1193,
											"end": 1226,
											"name": "tag",
											"source": 20,
											"value": "304"
										},
										{
											"begin": 1193,
											"end": 1226,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 1093,
											"end": 1232,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 1093,
											"end": 1232,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 1093,
											"end": 1232,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 1093,
											"end": 1232,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 1093,
											"end": 1232,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 1238,
											"end": 2003,
											"name": "tag",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 1238,
											"end": 2003,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 1324,
											"end": 1330,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 1332,
											"end": 1338,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 1340,
											"end": 1346,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 1348,
											"end": 1354,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 1397,
											"end": 1400,
											"name": "PUSH",
											"source": 20,
											"value": "80"
										},
										{
											"begin": 1385,
											"end": 1394,
											"name": "DUP6",
											"source": 20
										},
										{
											"begin": 1376,
											"end": 1383,
											"name": "DUP8",
											"source": 20
										},
										{
											"begin": 1372,
											"end": 1395,
											"name": "SUB",
											"source": 20
										},
										{
											"begin": 1368,
											"end": 1401,
											"name": "SLT",
											"source": 20
										},
										{
											"begin": 1365,
											"end": 1485,
											"name": "ISZERO",
											"source": 20
										},
										{
											"begin": 1365,
											"end": 1485,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "306"
										},
										{
											"begin": 1365,
											"end": 1485,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 1404,
											"end": 1483,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "307"
										},
										{
											"begin": 1404,
											"end": 1483,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "242"
										},
										{
											"begin": 1404,
											"end": 1483,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 1404,
											"end": 1483,
											"name": "tag",
											"source": 20,
											"value": "307"
										},
										{
											"begin": 1404,
											"end": 1483,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 1365,
											"end": 1485,
											"name": "tag",
											"source": 20,
											"value": "306"
										},
										{
											"begin": 1365,
											"end": 1485,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 1524,
											"end": 1525,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 1549,
											"end": 1602,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "308"
										},
										{
											"begin": 1594,
											"end": 1601,
											"name": "DUP8",
											"source": 20
										},
										{
											"begin": 1585,
											"end": 1591,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 1574,
											"end": 1583,
											"name": "DUP9",
											"source": 20
										},
										{
											"begin": 1570,
											"end": 1592,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 1549,
											"end": 1602,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "247"
										},
										{
											"begin": 1549,
											"end": 1602,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 1549,
											"end": 1602,
											"name": "tag",
											"source": 20,
											"value": "308"
										},
										{
											"begin": 1549,
											"end": 1602,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 1539,
											"end": 1602,
											"name": "SWAP5",
											"source": 20
										},
										{
											"begin": 1539,
											"end": 1602,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 1495,
											"end": 1612,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 1651,
											"end": 1653,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 1677,
											"end": 1730,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "309"
										},
										{
											"begin": 1722,
											"end": 1729,
											"name": "DUP8",
											"source": 20
										},
										{
											"begin": 1713,
											"end": 1719,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 1702,
											"end": 1711,
											"name": "DUP9",
											"source": 20
										},
										{
											"begin": 1698,
											"end": 1720,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 1677,
											"end": 1730,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "247"
										},
										{
											"begin": 1677,
											"end": 1730,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 1677,
											"end": 1730,
											"name": "tag",
											"source": 20,
											"value": "309"
										},
										{
											"begin": 1677,
											"end": 1730,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 1667,
											"end": 1730,
											"name": "SWAP4",
											"source": 20
										},
										{
											"begin": 1667,
											"end": 1730,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 1622,
											"end": 1740,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 1779,
											"end": 1781,
											"name": "PUSH",
											"source": 20,
											"value": "40"
										},
										{
											"begin": 1805,
											"end": 1858,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "310"
										},
										{
											"begin": 1850,
											"end": 1857,
											"name": "DUP8",
											"source": 20
										},
										{
											"begin": 1841,
											"end": 1847,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 1830,
											"end": 1839,
											"name": "DUP9",
											"source": 20
										},
										{
											"begin": 1826,
											"end": 1848,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 1805,
											"end": 1858,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "250"
										},
										{
											"begin": 1805,
											"end": 1858,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 1805,
											"end": 1858,
											"name": "tag",
											"source": 20,
											"value": "310"
										},
										{
											"begin": 1805,
											"end": 1858,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 1795,
											"end": 1858,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 1795,
											"end": 1858,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 1750,
											"end": 1868,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 1907,
											"end": 1909,
											"name": "PUSH",
											"source": 20,
											"value": "60"
										},
										{
											"begin": 1933,
											"end": 1986,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "311"
										},
										{
											"begin": 1978,
											"end": 1985,
											"name": "DUP8",
											"source": 20
										},
										{
											"begin": 1969,
											"end": 1975,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 1958,
											"end": 1967,
											"name": "DUP9",
											"source": 20
										},
										{
											"begin": 1954,
											"end": 1976,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 1933,
											"end": 1986,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "250"
										},
										{
											"begin": 1933,
											"end": 1986,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 1933,
											"end": 1986,
											"name": "tag",
											"source": 20,
											"value": "311"
										},
										{
											"begin": 1933,
											"end": 1986,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 1923,
											"end": 1986,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 1923,
											"end": 1986,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 1878,
											"end": 1996,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 1238,
											"end": 2003,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 1238,
											"end": 2003,
											"name": "SWAP6",
											"source": 20
										},
										{
											"begin": 1238,
											"end": 2003,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 1238,
											"end": 2003,
											"name": "SWAP5",
											"source": 20
										},
										{
											"begin": 1238,
											"end": 2003,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 1238,
											"end": 2003,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 1238,
											"end": 2003,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 1238,
											"end": 2003,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 2009,
											"end": 2110,
											"name": "tag",
											"source": 20,
											"value": "251"
										},
										{
											"begin": 2009,
											"end": 2110,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 2045,
											"end": 2052,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 2085,
											"end": 2103,
											"name": "PUSH",
											"source": 20,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2078,
											"end": 2083,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 2074,
											"end": 2104,
											"name": "AND",
											"source": 20
										},
										{
											"begin": 2063,
											"end": 2104,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 2063,
											"end": 2104,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 2009,
											"end": 2110,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 2009,
											"end": 2110,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 2009,
											"end": 2110,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 2009,
											"end": 2110,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 2116,
											"end": 2236,
											"name": "tag",
											"source": 20,
											"value": "252"
										},
										{
											"begin": 2116,
											"end": 2236,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 2188,
											"end": 2211,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "314"
										},
										{
											"begin": 2205,
											"end": 2210,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 2188,
											"end": 2211,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "251"
										},
										{
											"begin": 2188,
											"end": 2211,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 2188,
											"end": 2211,
											"name": "tag",
											"source": 20,
											"value": "314"
										},
										{
											"begin": 2188,
											"end": 2211,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 2181,
											"end": 2186,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 2178,
											"end": 2212,
											"name": "EQ",
											"source": 20
										},
										{
											"begin": 2168,
											"end": 2230,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "315"
										},
										{
											"begin": 2168,
											"end": 2230,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 2226,
											"end": 2227,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 2223,
											"end": 2224,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 2216,
											"end": 2228,
											"name": "REVERT",
											"source": 20
										},
										{
											"begin": 2168,
											"end": 2230,
											"name": "tag",
											"source": 20,
											"value": "315"
										},
										{
											"begin": 2168,
											"end": 2230,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 2116,
											"end": 2236,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 2116,
											"end": 2236,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 2242,
											"end": 2379,
											"name": "tag",
											"source": 20,
											"value": "253"
										},
										{
											"begin": 2242,
											"end": 2379,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 2287,
											"end": 2292,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 2325,
											"end": 2331,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 2312,
											"end": 2332,
											"name": "CALLDATALOAD",
											"source": 20
										},
										{
											"begin": 2303,
											"end": 2332,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 2303,
											"end": 2332,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 2341,
											"end": 2373,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "317"
										},
										{
											"begin": 2367,
											"end": 2372,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 2341,
											"end": 2373,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "252"
										},
										{
											"begin": 2341,
											"end": 2373,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 2341,
											"end": 2373,
											"name": "tag",
											"source": 20,
											"value": "317"
										},
										{
											"begin": 2341,
											"end": 2373,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 2242,
											"end": 2379,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 2242,
											"end": 2379,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 2242,
											"end": 2379,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 2242,
											"end": 2379,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 2242,
											"end": 2379,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 2385,
											"end": 2712,
											"name": "tag",
											"source": 20,
											"value": "24"
										},
										{
											"begin": 2385,
											"end": 2712,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 2443,
											"end": 2449,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 2492,
											"end": 2494,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 2480,
											"end": 2489,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 2471,
											"end": 2478,
											"name": "DUP5",
											"source": 20
										},
										{
											"begin": 2467,
											"end": 2490,
											"name": "SUB",
											"source": 20
										},
										{
											"begin": 2463,
											"end": 2495,
											"name": "SLT",
											"source": 20
										},
										{
											"begin": 2460,
											"end": 2579,
											"name": "ISZERO",
											"source": 20
										},
										{
											"begin": 2460,
											"end": 2579,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "319"
										},
										{
											"begin": 2460,
											"end": 2579,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 2498,
											"end": 2577,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "320"
										},
										{
											"begin": 2498,
											"end": 2577,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "242"
										},
										{
											"begin": 2498,
											"end": 2577,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 2498,
											"end": 2577,
											"name": "tag",
											"source": 20,
											"value": "320"
										},
										{
											"begin": 2498,
											"end": 2577,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 2460,
											"end": 2579,
											"name": "tag",
											"source": 20,
											"value": "319"
										},
										{
											"begin": 2460,
											"end": 2579,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 2618,
											"end": 2619,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 2643,
											"end": 2695,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "321"
										},
										{
											"begin": 2687,
											"end": 2694,
											"name": "DUP5",
											"source": 20
										},
										{
											"begin": 2678,
											"end": 2684,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 2667,
											"end": 2676,
											"name": "DUP6",
											"source": 20
										},
										{
											"begin": 2663,
											"end": 2685,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 2643,
											"end": 2695,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "253"
										},
										{
											"begin": 2643,
											"end": 2695,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 2643,
											"end": 2695,
											"name": "tag",
											"source": 20,
											"value": "321"
										},
										{
											"begin": 2643,
											"end": 2695,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 2633,
											"end": 2695,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 2633,
											"end": 2695,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 2589,
											"end": 2705,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 2385,
											"end": 2712,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 2385,
											"end": 2712,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 2385,
											"end": 2712,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 2385,
											"end": 2712,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 2385,
											"end": 2712,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 2718,
											"end": 2795,
											"name": "tag",
											"source": 20,
											"value": "254"
										},
										{
											"begin": 2718,
											"end": 2795,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 2755,
											"end": 2762,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 2784,
											"end": 2789,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 2773,
											"end": 2789,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 2773,
											"end": 2789,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 2718,
											"end": 2795,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 2718,
											"end": 2795,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 2718,
											"end": 2795,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 2718,
											"end": 2795,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 2801,
											"end": 2923,
											"name": "tag",
											"source": 20,
											"value": "255"
										},
										{
											"begin": 2801,
											"end": 2923,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 2874,
											"end": 2898,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "324"
										},
										{
											"begin": 2892,
											"end": 2897,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 2874,
											"end": 2898,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "254"
										},
										{
											"begin": 2874,
											"end": 2898,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 2874,
											"end": 2898,
											"name": "tag",
											"source": 20,
											"value": "324"
										},
										{
											"begin": 2874,
											"end": 2898,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 2867,
											"end": 2872,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 2864,
											"end": 2899,
											"name": "EQ",
											"source": 20
										},
										{
											"begin": 2854,
											"end": 2917,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "325"
										},
										{
											"begin": 2854,
											"end": 2917,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 2913,
											"end": 2914,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 2910,
											"end": 2911,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 2903,
											"end": 2915,
											"name": "REVERT",
											"source": 20
										},
										{
											"begin": 2854,
											"end": 2917,
											"name": "tag",
											"source": 20,
											"value": "325"
										},
										{
											"begin": 2854,
											"end": 2917,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 2801,
											"end": 2923,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 2801,
											"end": 2923,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 2929,
											"end": 3068,
											"name": "tag",
											"source": 20,
											"value": "256"
										},
										{
											"begin": 2929,
											"end": 3068,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 2975,
											"end": 2980,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 3013,
											"end": 3019,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 3000,
											"end": 3020,
											"name": "CALLDATALOAD",
											"source": 20
										},
										{
											"begin": 2991,
											"end": 3020,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 2991,
											"end": 3020,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 3029,
											"end": 3062,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "327"
										},
										{
											"begin": 3056,
											"end": 3061,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 3029,
											"end": 3062,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "255"
										},
										{
											"begin": 3029,
											"end": 3062,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 3029,
											"end": 3062,
											"name": "tag",
											"source": 20,
											"value": "327"
										},
										{
											"begin": 3029,
											"end": 3062,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 2929,
											"end": 3068,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 2929,
											"end": 3068,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 2929,
											"end": 3068,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 2929,
											"end": 3068,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 2929,
											"end": 3068,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 3074,
											"end": 3548,
											"name": "tag",
											"source": 20,
											"value": "31"
										},
										{
											"begin": 3074,
											"end": 3548,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 3142,
											"end": 3148,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 3150,
											"end": 3156,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 3199,
											"end": 3201,
											"name": "PUSH",
											"source": 20,
											"value": "40"
										},
										{
											"begin": 3187,
											"end": 3196,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 3178,
											"end": 3185,
											"name": "DUP6",
											"source": 20
										},
										{
											"begin": 3174,
											"end": 3197,
											"name": "SUB",
											"source": 20
										},
										{
											"begin": 3170,
											"end": 3202,
											"name": "SLT",
											"source": 20
										},
										{
											"begin": 3167,
											"end": 3286,
											"name": "ISZERO",
											"source": 20
										},
										{
											"begin": 3167,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "329"
										},
										{
											"begin": 3167,
											"end": 3286,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 3205,
											"end": 3284,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "330"
										},
										{
											"begin": 3205,
											"end": 3284,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "242"
										},
										{
											"begin": 3205,
											"end": 3284,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 3205,
											"end": 3284,
											"name": "tag",
											"source": 20,
											"value": "330"
										},
										{
											"begin": 3205,
											"end": 3284,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 3167,
											"end": 3286,
											"name": "tag",
											"source": 20,
											"value": "329"
										},
										{
											"begin": 3167,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 3325,
											"end": 3326,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 3350,
											"end": 3403,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "331"
										},
										{
											"begin": 3395,
											"end": 3402,
											"name": "DUP6",
											"source": 20
										},
										{
											"begin": 3386,
											"end": 3392,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 3375,
											"end": 3384,
											"name": "DUP7",
											"source": 20
										},
										{
											"begin": 3371,
											"end": 3393,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 3350,
											"end": 3403,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "247"
										},
										{
											"begin": 3350,
											"end": 3403,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 3350,
											"end": 3403,
											"name": "tag",
											"source": 20,
											"value": "331"
										},
										{
											"begin": 3350,
											"end": 3403,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 3340,
											"end": 3403,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 3340,
											"end": 3403,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 3296,
											"end": 3413,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 3452,
											"end": 3454,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 3478,
											"end": 3531,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "332"
										},
										{
											"begin": 3523,
											"end": 3530,
											"name": "DUP6",
											"source": 20
										},
										{
											"begin": 3514,
											"end": 3520,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 3503,
											"end": 3512,
											"name": "DUP7",
											"source": 20
										},
										{
											"begin": 3499,
											"end": 3521,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 3478,
											"end": 3531,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "256"
										},
										{
											"begin": 3478,
											"end": 3531,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 3478,
											"end": 3531,
											"name": "tag",
											"source": 20,
											"value": "332"
										},
										{
											"begin": 3478,
											"end": 3531,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 3468,
											"end": 3531,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 3468,
											"end": 3531,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 3423,
											"end": 3541,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 3074,
											"end": 3548,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 3074,
											"end": 3548,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 3074,
											"end": 3548,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 3074,
											"end": 3548,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 3074,
											"end": 3548,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 3074,
											"end": 3548,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 3554,
											"end": 3644,
											"name": "tag",
											"source": 20,
											"value": "257"
										},
										{
											"begin": 3554,
											"end": 3644,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 3588,
											"end": 3595,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 3631,
											"end": 3636,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 3624,
											"end": 3637,
											"name": "ISZERO",
											"source": 20
										},
										{
											"begin": 3617,
											"end": 3638,
											"name": "ISZERO",
											"source": 20
										},
										{
											"begin": 3606,
											"end": 3638,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 3606,
											"end": 3638,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 3554,
											"end": 3644,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 3554,
											"end": 3644,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 3554,
											"end": 3644,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 3554,
											"end": 3644,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 3650,
											"end": 3759,
											"name": "tag",
											"source": 20,
											"value": "258"
										},
										{
											"begin": 3650,
											"end": 3759,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 3731,
											"end": 3752,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "335"
										},
										{
											"begin": 3746,
											"end": 3751,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 3731,
											"end": 3752,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "257"
										},
										{
											"begin": 3731,
											"end": 3752,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 3731,
											"end": 3752,
											"name": "tag",
											"source": 20,
											"value": "335"
										},
										{
											"begin": 3731,
											"end": 3752,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 3726,
											"end": 3729,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 3719,
											"end": 3753,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 3650,
											"end": 3759,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 3650,
											"end": 3759,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 3650,
											"end": 3759,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 3765,
											"end": 3975,
											"name": "tag",
											"source": 20,
											"value": "34"
										},
										{
											"begin": 3765,
											"end": 3975,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 3852,
											"end": 3856,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 3890,
											"end": 3892,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 3879,
											"end": 3888,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 3875,
											"end": 3893,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 3867,
											"end": 3893,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 3867,
											"end": 3893,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 3903,
											"end": 3968,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "337"
										},
										{
											"begin": 3965,
											"end": 3966,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 3954,
											"end": 3963,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 3950,
											"end": 3967,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 3941,
											"end": 3947,
											"name": "DUP5",
											"source": 20
										},
										{
											"begin": 3903,
											"end": 3968,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "258"
										},
										{
											"begin": 3903,
											"end": 3968,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 3903,
											"end": 3968,
											"name": "tag",
											"source": 20,
											"value": "337"
										},
										{
											"begin": 3903,
											"end": 3968,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 3765,
											"end": 3975,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 3765,
											"end": 3975,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 3765,
											"end": 3975,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 3765,
											"end": 3975,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 3765,
											"end": 3975,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 3981,
											"end": 4072,
											"name": "tag",
											"source": 20,
											"value": "259"
										},
										{
											"begin": 3981,
											"end": 4072,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 4017,
											"end": 4024,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 4057,
											"end": 4065,
											"name": "PUSH",
											"source": 20,
											"value": "FFFFFF"
										},
										{
											"begin": 4050,
											"end": 4055,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 4046,
											"end": 4066,
											"name": "AND",
											"source": 20
										},
										{
											"begin": 4035,
											"end": 4066,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 4035,
											"end": 4066,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 3981,
											"end": 4072,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 3981,
											"end": 4072,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 3981,
											"end": 4072,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 3981,
											"end": 4072,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 4078,
											"end": 4198,
											"name": "tag",
											"source": 20,
											"value": "260"
										},
										{
											"begin": 4078,
											"end": 4198,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 4150,
											"end": 4173,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "340"
										},
										{
											"begin": 4167,
											"end": 4172,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 4150,
											"end": 4173,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "259"
										},
										{
											"begin": 4150,
											"end": 4173,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 4150,
											"end": 4173,
											"name": "tag",
											"source": 20,
											"value": "340"
										},
										{
											"begin": 4150,
											"end": 4173,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 4143,
											"end": 4148,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 4140,
											"end": 4174,
											"name": "EQ",
											"source": 20
										},
										{
											"begin": 4130,
											"end": 4192,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "341"
										},
										{
											"begin": 4130,
											"end": 4192,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 4188,
											"end": 4189,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 4185,
											"end": 4186,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 4178,
											"end": 4190,
											"name": "REVERT",
											"source": 20
										},
										{
											"begin": 4130,
											"end": 4192,
											"name": "tag",
											"source": 20,
											"value": "341"
										},
										{
											"begin": 4130,
											"end": 4192,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 4078,
											"end": 4198,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 4078,
											"end": 4198,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 4204,
											"end": 4341,
											"name": "tag",
											"source": 20,
											"value": "261"
										},
										{
											"begin": 4204,
											"end": 4341,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 4249,
											"end": 4254,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 4287,
											"end": 4293,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 4274,
											"end": 4294,
											"name": "CALLDATALOAD",
											"source": 20
										},
										{
											"begin": 4265,
											"end": 4294,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 4265,
											"end": 4294,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 4303,
											"end": 4335,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "343"
										},
										{
											"begin": 4329,
											"end": 4334,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 4303,
											"end": 4335,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "260"
										},
										{
											"begin": 4303,
											"end": 4335,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 4303,
											"end": 4335,
											"name": "tag",
											"source": 20,
											"value": "343"
										},
										{
											"begin": 4303,
											"end": 4335,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 4204,
											"end": 4341,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 4204,
											"end": 4341,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 4204,
											"end": 4341,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 4204,
											"end": 4341,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 4204,
											"end": 4341,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 4347,
											"end": 4964,
											"name": "tag",
											"source": 20,
											"value": "37"
										},
										{
											"begin": 4347,
											"end": 4964,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 4423,
											"end": 4429,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 4431,
											"end": 4437,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 4439,
											"end": 4445,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 4488,
											"end": 4490,
											"name": "PUSH",
											"source": 20,
											"value": "60"
										},
										{
											"begin": 4476,
											"end": 4485,
											"name": "DUP5",
											"source": 20
										},
										{
											"begin": 4467,
											"end": 4474,
											"name": "DUP7",
											"source": 20
										},
										{
											"begin": 4463,
											"end": 4486,
											"name": "SUB",
											"source": 20
										},
										{
											"begin": 4459,
											"end": 4491,
											"name": "SLT",
											"source": 20
										},
										{
											"begin": 4456,
											"end": 4575,
											"name": "ISZERO",
											"source": 20
										},
										{
											"begin": 4456,
											"end": 4575,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "345"
										},
										{
											"begin": 4456,
											"end": 4575,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 4494,
											"end": 4573,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "346"
										},
										{
											"begin": 4494,
											"end": 4573,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "242"
										},
										{
											"begin": 4494,
											"end": 4573,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 4494,
											"end": 4573,
											"name": "tag",
											"source": 20,
											"value": "346"
										},
										{
											"begin": 4494,
											"end": 4573,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 4456,
											"end": 4575,
											"name": "tag",
											"source": 20,
											"value": "345"
										},
										{
											"begin": 4456,
											"end": 4575,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 4614,
											"end": 4615,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 4639,
											"end": 4692,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "347"
										},
										{
											"begin": 4684,
											"end": 4691,
											"name": "DUP7",
											"source": 20
										},
										{
											"begin": 4675,
											"end": 4681,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 4664,
											"end": 4673,
											"name": "DUP8",
											"source": 20
										},
										{
											"begin": 4660,
											"end": 4682,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 4639,
											"end": 4692,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "247"
										},
										{
											"begin": 4639,
											"end": 4692,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 4639,
											"end": 4692,
											"name": "tag",
											"source": 20,
											"value": "347"
										},
										{
											"begin": 4639,
											"end": 4692,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 4629,
											"end": 4692,
											"name": "SWAP4",
											"source": 20
										},
										{
											"begin": 4629,
											"end": 4692,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 4585,
											"end": 4702,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 4741,
											"end": 4743,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 4767,
											"end": 4820,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "348"
										},
										{
											"begin": 4812,
											"end": 4819,
											"name": "DUP7",
											"source": 20
										},
										{
											"begin": 4803,
											"end": 4809,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 4792,
											"end": 4801,
											"name": "DUP8",
											"source": 20
										},
										{
											"begin": 4788,
											"end": 4810,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 4767,
											"end": 4820,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "247"
										},
										{
											"begin": 4767,
											"end": 4820,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 4767,
											"end": 4820,
											"name": "tag",
											"source": 20,
											"value": "348"
										},
										{
											"begin": 4767,
											"end": 4820,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 4757,
											"end": 4820,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 4757,
											"end": 4820,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 4712,
											"end": 4830,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 4869,
											"end": 4871,
											"name": "PUSH",
											"source": 20,
											"value": "40"
										},
										{
											"begin": 4895,
											"end": 4947,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "349"
										},
										{
											"begin": 4939,
											"end": 4946,
											"name": "DUP7",
											"source": 20
										},
										{
											"begin": 4930,
											"end": 4936,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 4919,
											"end": 4928,
											"name": "DUP8",
											"source": 20
										},
										{
											"begin": 4915,
											"end": 4937,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 4895,
											"end": 4947,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "261"
										},
										{
											"begin": 4895,
											"end": 4947,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 4895,
											"end": 4947,
											"name": "tag",
											"source": 20,
											"value": "349"
										},
										{
											"begin": 4895,
											"end": 4947,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 4885,
											"end": 4947,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 4885,
											"end": 4947,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 4840,
											"end": 4957,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 4347,
											"end": 4964,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 4347,
											"end": 4964,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 4347,
											"end": 4964,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 4347,
											"end": 4964,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 4347,
											"end": 4964,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 4347,
											"end": 4964,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 4970,
											"end": 5088,
											"name": "tag",
											"source": 20,
											"value": "262"
										},
										{
											"begin": 4970,
											"end": 5088,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 5057,
											"end": 5081,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "351"
										},
										{
											"begin": 5075,
											"end": 5080,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 5057,
											"end": 5081,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "245"
										},
										{
											"begin": 5057,
											"end": 5081,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 5057,
											"end": 5081,
											"name": "tag",
											"source": 20,
											"value": "351"
										},
										{
											"begin": 5057,
											"end": 5081,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 5052,
											"end": 5055,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 5045,
											"end": 5082,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 4970,
											"end": 5088,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 4970,
											"end": 5088,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 4970,
											"end": 5088,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 5094,
											"end": 5316,
											"name": "tag",
											"source": 20,
											"value": "40"
										},
										{
											"begin": 5094,
											"end": 5316,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 5187,
											"end": 5191,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 5225,
											"end": 5227,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 5214,
											"end": 5223,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 5210,
											"end": 5228,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 5202,
											"end": 5228,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 5202,
											"end": 5228,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 5238,
											"end": 5309,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "353"
										},
										{
											"begin": 5306,
											"end": 5307,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 5295,
											"end": 5304,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 5291,
											"end": 5308,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 5282,
											"end": 5288,
											"name": "DUP5",
											"source": 20
										},
										{
											"begin": 5238,
											"end": 5309,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "262"
										},
										{
											"begin": 5238,
											"end": 5309,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 5238,
											"end": 5309,
											"name": "tag",
											"source": 20,
											"value": "353"
										},
										{
											"begin": 5238,
											"end": 5309,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 5094,
											"end": 5316,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 5094,
											"end": 5316,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 5094,
											"end": 5316,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 5094,
											"end": 5316,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 5094,
											"end": 5316,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 5322,
											"end": 5796,
											"name": "tag",
											"source": 20,
											"value": "46"
										},
										{
											"begin": 5322,
											"end": 5796,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 5390,
											"end": 5396,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 5398,
											"end": 5404,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 5447,
											"end": 5449,
											"name": "PUSH",
											"source": 20,
											"value": "40"
										},
										{
											"begin": 5435,
											"end": 5444,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 5426,
											"end": 5433,
											"name": "DUP6",
											"source": 20
										},
										{
											"begin": 5422,
											"end": 5445,
											"name": "SUB",
											"source": 20
										},
										{
											"begin": 5418,
											"end": 5450,
											"name": "SLT",
											"source": 20
										},
										{
											"begin": 5415,
											"end": 5534,
											"name": "ISZERO",
											"source": 20
										},
										{
											"begin": 5415,
											"end": 5534,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "355"
										},
										{
											"begin": 5415,
											"end": 5534,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 5453,
											"end": 5532,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "356"
										},
										{
											"begin": 5453,
											"end": 5532,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "242"
										},
										{
											"begin": 5453,
											"end": 5532,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 5453,
											"end": 5532,
											"name": "tag",
											"source": 20,
											"value": "356"
										},
										{
											"begin": 5453,
											"end": 5532,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 5415,
											"end": 5534,
											"name": "tag",
											"source": 20,
											"value": "355"
										},
										{
											"begin": 5415,
											"end": 5534,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 5573,
											"end": 5574,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 5598,
											"end": 5651,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "357"
										},
										{
											"begin": 5643,
											"end": 5650,
											"name": "DUP6",
											"source": 20
										},
										{
											"begin": 5634,
											"end": 5640,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 5623,
											"end": 5632,
											"name": "DUP7",
											"source": 20
										},
										{
											"begin": 5619,
											"end": 5641,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 5598,
											"end": 5651,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "250"
										},
										{
											"begin": 5598,
											"end": 5651,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 5598,
											"end": 5651,
											"name": "tag",
											"source": 20,
											"value": "357"
										},
										{
											"begin": 5598,
											"end": 5651,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 5588,
											"end": 5651,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 5588,
											"end": 5651,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 5544,
											"end": 5661,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 5700,
											"end": 5702,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 5726,
											"end": 5779,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "358"
										},
										{
											"begin": 5771,
											"end": 5778,
											"name": "DUP6",
											"source": 20
										},
										{
											"begin": 5762,
											"end": 5768,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 5751,
											"end": 5760,
											"name": "DUP7",
											"source": 20
										},
										{
											"begin": 5747,
											"end": 5769,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 5726,
											"end": 5779,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "250"
										},
										{
											"begin": 5726,
											"end": 5779,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 5726,
											"end": 5779,
											"name": "tag",
											"source": 20,
											"value": "358"
										},
										{
											"begin": 5726,
											"end": 5779,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 5716,
											"end": 5779,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 5716,
											"end": 5779,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 5671,
											"end": 5789,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 5322,
											"end": 5796,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 5322,
											"end": 5796,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 5322,
											"end": 5796,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 5322,
											"end": 5796,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 5322,
											"end": 5796,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 5322,
											"end": 5796,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 5802,
											"end": 5920,
											"name": "tag",
											"source": 20,
											"value": "263"
										},
										{
											"begin": 5802,
											"end": 5920,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 5889,
											"end": 5913,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "360"
										},
										{
											"begin": 5907,
											"end": 5912,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 5889,
											"end": 5913,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "254"
										},
										{
											"begin": 5889,
											"end": 5913,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 5889,
											"end": 5913,
											"name": "tag",
											"source": 20,
											"value": "360"
										},
										{
											"begin": 5889,
											"end": 5913,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 5884,
											"end": 5887,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 5877,
											"end": 5914,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 5802,
											"end": 5920,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 5802,
											"end": 5920,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 5802,
											"end": 5920,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 5926,
											"end": 6148,
											"name": "tag",
											"source": 20,
											"value": "49"
										},
										{
											"begin": 5926,
											"end": 6148,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 6019,
											"end": 6023,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 6057,
											"end": 6059,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 6046,
											"end": 6055,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 6042,
											"end": 6060,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 6034,
											"end": 6060,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 6034,
											"end": 6060,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 6070,
											"end": 6141,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "362"
										},
										{
											"begin": 6138,
											"end": 6139,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 6127,
											"end": 6136,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 6123,
											"end": 6140,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 6114,
											"end": 6120,
											"name": "DUP5",
											"source": 20
										},
										{
											"begin": 6070,
											"end": 6141,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "263"
										},
										{
											"begin": 6070,
											"end": 6141,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 6070,
											"end": 6141,
											"name": "tag",
											"source": 20,
											"value": "362"
										},
										{
											"begin": 6070,
											"end": 6141,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 5926,
											"end": 6148,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 5926,
											"end": 6148,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 5926,
											"end": 6148,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 5926,
											"end": 6148,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 5926,
											"end": 6148,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 6154,
											"end": 6626,
											"name": "tag",
											"source": 20,
											"value": "62"
										},
										{
											"begin": 6154,
											"end": 6626,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 6221,
											"end": 6227,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 6229,
											"end": 6235,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 6278,
											"end": 6280,
											"name": "PUSH",
											"source": 20,
											"value": "40"
										},
										{
											"begin": 6266,
											"end": 6275,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 6257,
											"end": 6264,
											"name": "DUP6",
											"source": 20
										},
										{
											"begin": 6253,
											"end": 6276,
											"name": "SUB",
											"source": 20
										},
										{
											"begin": 6249,
											"end": 6281,
											"name": "SLT",
											"source": 20
										},
										{
											"begin": 6246,
											"end": 6365,
											"name": "ISZERO",
											"source": 20
										},
										{
											"begin": 6246,
											"end": 6365,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "364"
										},
										{
											"begin": 6246,
											"end": 6365,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 6284,
											"end": 6363,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "365"
										},
										{
											"begin": 6284,
											"end": 6363,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "242"
										},
										{
											"begin": 6284,
											"end": 6363,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 6284,
											"end": 6363,
											"name": "tag",
											"source": 20,
											"value": "365"
										},
										{
											"begin": 6284,
											"end": 6363,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 6246,
											"end": 6365,
											"name": "tag",
											"source": 20,
											"value": "364"
										},
										{
											"begin": 6246,
											"end": 6365,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 6404,
											"end": 6405,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 6429,
											"end": 6481,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "366"
										},
										{
											"begin": 6473,
											"end": 6480,
											"name": "DUP6",
											"source": 20
										},
										{
											"begin": 6464,
											"end": 6470,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 6453,
											"end": 6462,
											"name": "DUP7",
											"source": 20
										},
										{
											"begin": 6449,
											"end": 6471,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 6429,
											"end": 6481,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "253"
										},
										{
											"begin": 6429,
											"end": 6481,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 6429,
											"end": 6481,
											"name": "tag",
											"source": 20,
											"value": "366"
										},
										{
											"begin": 6429,
											"end": 6481,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 6419,
											"end": 6481,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 6419,
											"end": 6481,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 6375,
											"end": 6491,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 6530,
											"end": 6532,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 6556,
											"end": 6609,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "367"
										},
										{
											"begin": 6601,
											"end": 6608,
											"name": "DUP6",
											"source": 20
										},
										{
											"begin": 6592,
											"end": 6598,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 6581,
											"end": 6590,
											"name": "DUP7",
											"source": 20
										},
										{
											"begin": 6577,
											"end": 6599,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 6556,
											"end": 6609,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "247"
										},
										{
											"begin": 6556,
											"end": 6609,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 6556,
											"end": 6609,
											"name": "tag",
											"source": 20,
											"value": "367"
										},
										{
											"begin": 6556,
											"end": 6609,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 6546,
											"end": 6609,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 6546,
											"end": 6609,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 6501,
											"end": 6619,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 6154,
											"end": 6626,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 6154,
											"end": 6626,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 6154,
											"end": 6626,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 6154,
											"end": 6626,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 6154,
											"end": 6626,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 6154,
											"end": 6626,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 6632,
											"end": 6812,
											"name": "tag",
											"source": 20,
											"value": "264"
										},
										{
											"begin": 6632,
											"end": 6812,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 6680,
											"end": 6757,
											"name": "PUSH",
											"source": 20,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 6677,
											"end": 6678,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 6670,
											"end": 6758,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 6777,
											"end": 6781,
											"name": "PUSH",
											"source": 20,
											"value": "11"
										},
										{
											"begin": 6774,
											"end": 6775,
											"name": "PUSH",
											"source": 20,
											"value": "4"
										},
										{
											"begin": 6767,
											"end": 6782,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 6801,
											"end": 6805,
											"name": "PUSH",
											"source": 20,
											"value": "24"
										},
										{
											"begin": 6798,
											"end": 6799,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 6791,
											"end": 6806,
											"name": "REVERT",
											"source": 20
										},
										{
											"begin": 6818,
											"end": 7097,
											"name": "tag",
											"source": 20,
											"value": "74"
										},
										{
											"begin": 6818,
											"end": 7097,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 6858,
											"end": 6865,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 6881,
											"end": 6901,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "370"
										},
										{
											"begin": 6899,
											"end": 6900,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 6881,
											"end": 6901,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "248"
										},
										{
											"begin": 6881,
											"end": 6901,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 6881,
											"end": 6901,
											"name": "tag",
											"source": 20,
											"value": "370"
										},
										{
											"begin": 6881,
											"end": 6901,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 6876,
											"end": 6901,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 6876,
											"end": 6901,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 6915,
											"end": 6935,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "371"
										},
										{
											"begin": 6933,
											"end": 6934,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 6915,
											"end": 6935,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "248"
										},
										{
											"begin": 6915,
											"end": 6935,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 6915,
											"end": 6935,
											"name": "tag",
											"source": 20,
											"value": "371"
										},
										{
											"begin": 6915,
											"end": 6935,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 6910,
											"end": 6935,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 6910,
											"end": 6935,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 6970,
											"end": 6971,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 6967,
											"end": 6968,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 6963,
											"end": 6972,
											"name": "MUL",
											"source": 20
										},
										{
											"begin": 6992,
											"end": 7022,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "372"
										},
										{
											"begin": 7010,
											"end": 7021,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 6992,
											"end": 7022,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "248"
										},
										{
											"begin": 6992,
											"end": 7022,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 6992,
											"end": 7022,
											"name": "tag",
											"source": 20,
											"value": "372"
										},
										{
											"begin": 6992,
											"end": 7022,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 6981,
											"end": 7022,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 6981,
											"end": 7022,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 7054,
											"end": 7065,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 7045,
											"end": 7052,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 7042,
											"end": 7066,
											"name": "EQ",
											"source": 20
										},
										{
											"begin": 7032,
											"end": 7090,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "373"
										},
										{
											"begin": 7032,
											"end": 7090,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 7070,
											"end": 7088,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "374"
										},
										{
											"begin": 7070,
											"end": 7088,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "264"
										},
										{
											"begin": 7070,
											"end": 7088,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 7070,
											"end": 7088,
											"name": "tag",
											"source": 20,
											"value": "374"
										},
										{
											"begin": 7070,
											"end": 7088,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 7032,
											"end": 7090,
											"name": "tag",
											"source": 20,
											"value": "373"
										},
										{
											"begin": 7032,
											"end": 7090,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 6866,
											"end": 7097,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 6818,
											"end": 7097,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 6818,
											"end": 7097,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 6818,
											"end": 7097,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 6818,
											"end": 7097,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 6818,
											"end": 7097,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 7103,
											"end": 7286,
											"name": "tag",
											"source": 20,
											"value": "83"
										},
										{
											"begin": 7103,
											"end": 7286,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 7141,
											"end": 7144,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 7164,
											"end": 7187,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "376"
										},
										{
											"begin": 7181,
											"end": 7186,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 7164,
											"end": 7187,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "251"
										},
										{
											"begin": 7164,
											"end": 7187,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 7164,
											"end": 7187,
											"name": "tag",
											"source": 20,
											"value": "376"
										},
										{
											"begin": 7164,
											"end": 7187,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 7155,
											"end": 7187,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 7155,
											"end": 7187,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 7209,
											"end": 7227,
											"name": "PUSH",
											"source": 20,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7202,
											"end": 7207,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 7199,
											"end": 7228,
											"name": "SUB",
											"source": 20
										},
										{
											"begin": 7196,
											"end": 7251,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "377"
										},
										{
											"begin": 7196,
											"end": 7251,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 7231,
											"end": 7249,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "378"
										},
										{
											"begin": 7231,
											"end": 7249,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "264"
										},
										{
											"begin": 7231,
											"end": 7249,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 7231,
											"end": 7249,
											"name": "tag",
											"source": 20,
											"value": "378"
										},
										{
											"begin": 7231,
											"end": 7249,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 7196,
											"end": 7251,
											"name": "tag",
											"source": 20,
											"value": "377"
										},
										{
											"begin": 7196,
											"end": 7251,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 7278,
											"end": 7279,
											"name": "PUSH",
											"source": 20,
											"value": "1"
										},
										{
											"begin": 7271,
											"end": 7276,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 7267,
											"end": 7280,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 7260,
											"end": 7280,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 7260,
											"end": 7280,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 7103,
											"end": 7286,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 7103,
											"end": 7286,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 7103,
											"end": 7286,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 7103,
											"end": 7286,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 7292,
											"end": 7486,
											"name": "tag",
											"source": 20,
											"value": "105"
										},
										{
											"begin": 7292,
											"end": 7486,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 7332,
											"end": 7336,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 7352,
											"end": 7372,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "380"
										},
										{
											"begin": 7370,
											"end": 7371,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 7352,
											"end": 7372,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "254"
										},
										{
											"begin": 7352,
											"end": 7372,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 7352,
											"end": 7372,
											"name": "tag",
											"source": 20,
											"value": "380"
										},
										{
											"begin": 7352,
											"end": 7372,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 7347,
											"end": 7372,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 7347,
											"end": 7372,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 7386,
											"end": 7406,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "381"
										},
										{
											"begin": 7404,
											"end": 7405,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 7386,
											"end": 7406,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "254"
										},
										{
											"begin": 7386,
											"end": 7406,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 7386,
											"end": 7406,
											"name": "tag",
											"source": 20,
											"value": "381"
										},
										{
											"begin": 7386,
											"end": 7406,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 7381,
											"end": 7406,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 7381,
											"end": 7406,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 7430,
											"end": 7431,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 7427,
											"end": 7428,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 7423,
											"end": 7432,
											"name": "SUB",
											"source": 20
										},
										{
											"begin": 7415,
											"end": 7432,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 7415,
											"end": 7432,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 7454,
											"end": 7455,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 7448,
											"end": 7452,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 7445,
											"end": 7456,
											"name": "GT",
											"source": 20
										},
										{
											"begin": 7442,
											"end": 7479,
											"name": "ISZERO",
											"source": 20
										},
										{
											"begin": 7442,
											"end": 7479,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "382"
										},
										{
											"begin": 7442,
											"end": 7479,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 7459,
											"end": 7477,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "383"
										},
										{
											"begin": 7459,
											"end": 7477,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "264"
										},
										{
											"begin": 7459,
											"end": 7477,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 7459,
											"end": 7477,
											"name": "tag",
											"source": 20,
											"value": "383"
										},
										{
											"begin": 7459,
											"end": 7477,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 7442,
											"end": 7479,
											"name": "tag",
											"source": 20,
											"value": "382"
										},
										{
											"begin": 7442,
											"end": 7479,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 7292,
											"end": 7486,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 7292,
											"end": 7486,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 7292,
											"end": 7486,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 7292,
											"end": 7486,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 7292,
											"end": 7486,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 7492,
											"end": 7607,
											"name": "tag",
											"source": 20,
											"value": "265"
										},
										{
											"begin": 7492,
											"end": 7607,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 7577,
											"end": 7600,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "385"
										},
										{
											"begin": 7594,
											"end": 7599,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 7577,
											"end": 7600,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "259"
										},
										{
											"begin": 7577,
											"end": 7600,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 7577,
											"end": 7600,
											"name": "tag",
											"source": 20,
											"value": "385"
										},
										{
											"begin": 7577,
											"end": 7600,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 7572,
											"end": 7575,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 7565,
											"end": 7601,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 7492,
											"end": 7607,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 7492,
											"end": 7607,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 7492,
											"end": 7607,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 7613,
											"end": 8051,
											"name": "tag",
											"source": 20,
											"value": "113"
										},
										{
											"begin": 7613,
											"end": 8051,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 7760,
											"end": 7764,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 7798,
											"end": 7800,
											"name": "PUSH",
											"source": 20,
											"value": "60"
										},
										{
											"begin": 7787,
											"end": 7796,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 7783,
											"end": 7801,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 7775,
											"end": 7801,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 7775,
											"end": 7801,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 7811,
											"end": 7882,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "387"
										},
										{
											"begin": 7879,
											"end": 7880,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 7868,
											"end": 7877,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 7864,
											"end": 7881,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 7855,
											"end": 7861,
											"name": "DUP7",
											"source": 20
										},
										{
											"begin": 7811,
											"end": 7882,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "262"
										},
										{
											"begin": 7811,
											"end": 7882,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 7811,
											"end": 7882,
											"name": "tag",
											"source": 20,
											"value": "387"
										},
										{
											"begin": 7811,
											"end": 7882,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 7892,
											"end": 7964,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "388"
										},
										{
											"begin": 7960,
											"end": 7962,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 7949,
											"end": 7958,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 7945,
											"end": 7963,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 7936,
											"end": 7942,
											"name": "DUP6",
											"source": 20
										},
										{
											"begin": 7892,
											"end": 7964,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "262"
										},
										{
											"begin": 7892,
											"end": 7964,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 7892,
											"end": 7964,
											"name": "tag",
											"source": 20,
											"value": "388"
										},
										{
											"begin": 7892,
											"end": 7964,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 7974,
											"end": 8044,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "389"
										},
										{
											"begin": 8040,
											"end": 8042,
											"name": "PUSH",
											"source": 20,
											"value": "40"
										},
										{
											"begin": 8029,
											"end": 8038,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 8025,
											"end": 8043,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 8016,
											"end": 8022,
											"name": "DUP5",
											"source": 20
										},
										{
											"begin": 7974,
											"end": 8044,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "265"
										},
										{
											"begin": 7974,
											"end": 8044,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 7974,
											"end": 8044,
											"name": "tag",
											"source": 20,
											"value": "389"
										},
										{
											"begin": 7974,
											"end": 8044,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 7613,
											"end": 8051,
											"name": "SWAP5",
											"source": 20
										},
										{
											"begin": 7613,
											"end": 8051,
											"name": "SWAP4",
											"source": 20
										},
										{
											"begin": 7613,
											"end": 8051,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 7613,
											"end": 8051,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 7613,
											"end": 8051,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 7613,
											"end": 8051,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 7613,
											"end": 8051,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 8057,
											"end": 8200,
											"name": "tag",
											"source": 20,
											"value": "266"
										},
										{
											"begin": 8057,
											"end": 8200,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 8114,
											"end": 8119,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 8145,
											"end": 8151,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 8139,
											"end": 8152,
											"name": "MLOAD",
											"source": 20
										},
										{
											"begin": 8130,
											"end": 8152,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 8130,
											"end": 8152,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 8161,
											"end": 8194,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "391"
										},
										{
											"begin": 8188,
											"end": 8193,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 8161,
											"end": 8194,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "246"
										},
										{
											"begin": 8161,
											"end": 8194,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 8161,
											"end": 8194,
											"name": "tag",
											"source": 20,
											"value": "391"
										},
										{
											"begin": 8161,
											"end": 8194,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 8057,
											"end": 8200,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 8057,
											"end": 8200,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 8057,
											"end": 8200,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 8057,
											"end": 8200,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 8057,
											"end": 8200,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 8206,
											"end": 8557,
											"name": "tag",
											"source": 20,
											"value": "117"
										},
										{
											"begin": 8206,
											"end": 8557,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 8276,
											"end": 8282,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 8325,
											"end": 8327,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 8313,
											"end": 8322,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 8304,
											"end": 8311,
											"name": "DUP5",
											"source": 20
										},
										{
											"begin": 8300,
											"end": 8323,
											"name": "SUB",
											"source": 20
										},
										{
											"begin": 8296,
											"end": 8328,
											"name": "SLT",
											"source": 20
										},
										{
											"begin": 8293,
											"end": 8412,
											"name": "ISZERO",
											"source": 20
										},
										{
											"begin": 8293,
											"end": 8412,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "393"
										},
										{
											"begin": 8293,
											"end": 8412,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 8331,
											"end": 8410,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "394"
										},
										{
											"begin": 8331,
											"end": 8410,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "242"
										},
										{
											"begin": 8331,
											"end": 8410,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 8331,
											"end": 8410,
											"name": "tag",
											"source": 20,
											"value": "394"
										},
										{
											"begin": 8331,
											"end": 8410,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 8293,
											"end": 8412,
											"name": "tag",
											"source": 20,
											"value": "393"
										},
										{
											"begin": 8293,
											"end": 8412,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 8451,
											"end": 8452,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 8476,
											"end": 8540,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "395"
										},
										{
											"begin": 8532,
											"end": 8539,
											"name": "DUP5",
											"source": 20
										},
										{
											"begin": 8523,
											"end": 8529,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 8512,
											"end": 8521,
											"name": "DUP6",
											"source": 20
										},
										{
											"begin": 8508,
											"end": 8530,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 8476,
											"end": 8540,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "266"
										},
										{
											"begin": 8476,
											"end": 8540,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 8476,
											"end": 8540,
											"name": "tag",
											"source": 20,
											"value": "395"
										},
										{
											"begin": 8476,
											"end": 8540,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 8466,
											"end": 8540,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 8466,
											"end": 8540,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 8422,
											"end": 8550,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 8206,
											"end": 8557,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 8206,
											"end": 8557,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 8206,
											"end": 8557,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 8206,
											"end": 8557,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 8206,
											"end": 8557,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 8563,
											"end": 8973,
											"name": "tag",
											"source": 20,
											"value": "135"
										},
										{
											"begin": 8563,
											"end": 8973,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 8603,
											"end": 8610,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 8626,
											"end": 8646,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "397"
										},
										{
											"begin": 8644,
											"end": 8645,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 8626,
											"end": 8646,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "254"
										},
										{
											"begin": 8626,
											"end": 8646,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 8626,
											"end": 8646,
											"name": "tag",
											"source": 20,
											"value": "397"
										},
										{
											"begin": 8626,
											"end": 8646,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 8621,
											"end": 8646,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 8621,
											"end": 8646,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 8660,
											"end": 8680,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "398"
										},
										{
											"begin": 8678,
											"end": 8679,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 8660,
											"end": 8680,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "254"
										},
										{
											"begin": 8660,
											"end": 8680,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 8660,
											"end": 8680,
											"name": "tag",
											"source": 20,
											"value": "398"
										},
										{
											"begin": 8660,
											"end": 8680,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 8655,
											"end": 8680,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 8655,
											"end": 8680,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 8715,
											"end": 8716,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 8712,
											"end": 8713,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 8708,
											"end": 8717,
											"name": "MUL",
											"source": 20
										},
										{
											"begin": 8737,
											"end": 8767,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "399"
										},
										{
											"begin": 8755,
											"end": 8766,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 8737,
											"end": 8767,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "254"
										},
										{
											"begin": 8737,
											"end": 8767,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 8737,
											"end": 8767,
											"name": "tag",
											"source": 20,
											"value": "399"
										},
										{
											"begin": 8737,
											"end": 8767,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 8726,
											"end": 8767,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 8726,
											"end": 8767,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 8916,
											"end": 8917,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 8907,
											"end": 8914,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 8903,
											"end": 8918,
											"name": "DIV",
											"source": 20
										},
										{
											"begin": 8900,
											"end": 8901,
											"name": "DUP5",
											"source": 20
										},
										{
											"begin": 8897,
											"end": 8919,
											"name": "EQ",
											"source": 20
										},
										{
											"begin": 8877,
											"end": 8878,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 8870,
											"end": 8879,
											"name": "ISZERO",
											"source": 20
										},
										{
											"begin": 8850,
											"end": 8933,
											"name": "OR",
											"source": 20
										},
										{
											"begin": 8827,
											"end": 8966,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "400"
										},
										{
											"begin": 8827,
											"end": 8966,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 8946,
											"end": 8964,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "401"
										},
										{
											"begin": 8946,
											"end": 8964,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "264"
										},
										{
											"begin": 8946,
											"end": 8964,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 8946,
											"end": 8964,
											"name": "tag",
											"source": 20,
											"value": "401"
										},
										{
											"begin": 8946,
											"end": 8964,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 8827,
											"end": 8966,
											"name": "tag",
											"source": 20,
											"value": "400"
										},
										{
											"begin": 8827,
											"end": 8966,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 8611,
											"end": 8973,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 8563,
											"end": 8973,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 8563,
											"end": 8973,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 8563,
											"end": 8973,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 8563,
											"end": 8973,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 8563,
											"end": 8973,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 8979,
											"end": 9159,
											"name": "tag",
											"source": 20,
											"value": "267"
										},
										{
											"begin": 8979,
											"end": 9159,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 9027,
											"end": 9104,
											"name": "PUSH",
											"source": 20,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 9024,
											"end": 9025,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 9017,
											"end": 9105,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 9124,
											"end": 9128,
											"name": "PUSH",
											"source": 20,
											"value": "12"
										},
										{
											"begin": 9121,
											"end": 9122,
											"name": "PUSH",
											"source": 20,
											"value": "4"
										},
										{
											"begin": 9114,
											"end": 9129,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 9148,
											"end": 9152,
											"name": "PUSH",
											"source": 20,
											"value": "24"
										},
										{
											"begin": 9145,
											"end": 9146,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 9138,
											"end": 9153,
											"name": "REVERT",
											"source": 20
										},
										{
											"begin": 9165,
											"end": 9350,
											"name": "tag",
											"source": 20,
											"value": "137"
										},
										{
											"begin": 9165,
											"end": 9350,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 9205,
											"end": 9206,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 9222,
											"end": 9242,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "404"
										},
										{
											"begin": 9240,
											"end": 9241,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 9222,
											"end": 9242,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "254"
										},
										{
											"begin": 9222,
											"end": 9242,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 9222,
											"end": 9242,
											"name": "tag",
											"source": 20,
											"value": "404"
										},
										{
											"begin": 9222,
											"end": 9242,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 9217,
											"end": 9242,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 9217,
											"end": 9242,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 9256,
											"end": 9276,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "405"
										},
										{
											"begin": 9274,
											"end": 9275,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 9256,
											"end": 9276,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "254"
										},
										{
											"begin": 9256,
											"end": 9276,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 9256,
											"end": 9276,
											"name": "tag",
											"source": 20,
											"value": "405"
										},
										{
											"begin": 9256,
											"end": 9276,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 9251,
											"end": 9276,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 9251,
											"end": 9276,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 9295,
											"end": 9296,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 9285,
											"end": 9320,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "406"
										},
										{
											"begin": 9285,
											"end": 9320,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 9300,
											"end": 9318,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "407"
										},
										{
											"begin": 9300,
											"end": 9318,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "267"
										},
										{
											"begin": 9300,
											"end": 9318,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 9300,
											"end": 9318,
											"name": "tag",
											"source": 20,
											"value": "407"
										},
										{
											"begin": 9300,
											"end": 9318,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 9285,
											"end": 9320,
											"name": "tag",
											"source": 20,
											"value": "406"
										},
										{
											"begin": 9285,
											"end": 9320,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 9342,
											"end": 9343,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 9339,
											"end": 9340,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 9335,
											"end": 9344,
											"name": "DIV",
											"source": 20
										},
										{
											"begin": 9330,
											"end": 9344,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 9330,
											"end": 9344,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 9165,
											"end": 9350,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 9165,
											"end": 9350,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 9165,
											"end": 9350,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 9165,
											"end": 9350,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 9165,
											"end": 9350,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 9356,
											"end": 9798,
											"name": "tag",
											"source": 20,
											"value": "168"
										},
										{
											"begin": 9356,
											"end": 9798,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 9505,
											"end": 9509,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 9543,
											"end": 9545,
											"name": "PUSH",
											"source": 20,
											"value": "60"
										},
										{
											"begin": 9532,
											"end": 9541,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 9528,
											"end": 9546,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 9520,
											"end": 9546,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 9520,
											"end": 9546,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 9556,
											"end": 9627,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "409"
										},
										{
											"begin": 9624,
											"end": 9625,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 9613,
											"end": 9622,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 9609,
											"end": 9626,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 9600,
											"end": 9606,
											"name": "DUP7",
											"source": 20
										},
										{
											"begin": 9556,
											"end": 9627,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "262"
										},
										{
											"begin": 9556,
											"end": 9627,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 9556,
											"end": 9627,
											"name": "tag",
											"source": 20,
											"value": "409"
										},
										{
											"begin": 9556,
											"end": 9627,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 9637,
											"end": 9709,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "410"
										},
										{
											"begin": 9705,
											"end": 9707,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 9694,
											"end": 9703,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 9690,
											"end": 9708,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 9681,
											"end": 9687,
											"name": "DUP6",
											"source": 20
										},
										{
											"begin": 9637,
											"end": 9709,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "262"
										},
										{
											"begin": 9637,
											"end": 9709,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 9637,
											"end": 9709,
											"name": "tag",
											"source": 20,
											"value": "410"
										},
										{
											"begin": 9637,
											"end": 9709,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 9719,
											"end": 9791,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "411"
										},
										{
											"begin": 9787,
											"end": 9789,
											"name": "PUSH",
											"source": 20,
											"value": "40"
										},
										{
											"begin": 9776,
											"end": 9785,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 9772,
											"end": 9790,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 9763,
											"end": 9769,
											"name": "DUP5",
											"source": 20
										},
										{
											"begin": 9719,
											"end": 9791,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "263"
										},
										{
											"begin": 9719,
											"end": 9791,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 9719,
											"end": 9791,
											"name": "tag",
											"source": 20,
											"value": "411"
										},
										{
											"begin": 9719,
											"end": 9791,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 9356,
											"end": 9798,
											"name": "SWAP5",
											"source": 20
										},
										{
											"begin": 9356,
											"end": 9798,
											"name": "SWAP4",
											"source": 20
										},
										{
											"begin": 9356,
											"end": 9798,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 9356,
											"end": 9798,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 9356,
											"end": 9798,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 9356,
											"end": 9798,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 9356,
											"end": 9798,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 9804,
											"end": 10136,
											"name": "tag",
											"source": 20,
											"value": "173"
										},
										{
											"begin": 9804,
											"end": 10136,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 9925,
											"end": 9929,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 9963,
											"end": 9965,
											"name": "PUSH",
											"source": 20,
											"value": "40"
										},
										{
											"begin": 9952,
											"end": 9961,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 9948,
											"end": 9966,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 9940,
											"end": 9966,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 9940,
											"end": 9966,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 9976,
											"end": 10047,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "413"
										},
										{
											"begin": 10044,
											"end": 10045,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 10033,
											"end": 10042,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 10029,
											"end": 10046,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 10020,
											"end": 10026,
											"name": "DUP6",
											"source": 20
										},
										{
											"begin": 9976,
											"end": 10047,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "262"
										},
										{
											"begin": 9976,
											"end": 10047,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 9976,
											"end": 10047,
											"name": "tag",
											"source": 20,
											"value": "413"
										},
										{
											"begin": 9976,
											"end": 10047,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 10057,
											"end": 10129,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "414"
										},
										{
											"begin": 10125,
											"end": 10127,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 10114,
											"end": 10123,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 10110,
											"end": 10128,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 10101,
											"end": 10107,
											"name": "DUP5",
											"source": 20
										},
										{
											"begin": 10057,
											"end": 10129,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "262"
										},
										{
											"begin": 10057,
											"end": 10129,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 10057,
											"end": 10129,
											"name": "tag",
											"source": 20,
											"value": "414"
										},
										{
											"begin": 10057,
											"end": 10129,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 9804,
											"end": 10136,
											"name": "SWAP4",
											"source": 20
										},
										{
											"begin": 9804,
											"end": 10136,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 9804,
											"end": 10136,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 9804,
											"end": 10136,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 9804,
											"end": 10136,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 9804,
											"end": 10136,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 10142,
											"end": 10285,
											"name": "tag",
											"source": 20,
											"value": "268"
										},
										{
											"begin": 10142,
											"end": 10285,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 10199,
											"end": 10204,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 10230,
											"end": 10236,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 10224,
											"end": 10237,
											"name": "MLOAD",
											"source": 20
										},
										{
											"begin": 10215,
											"end": 10237,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 10215,
											"end": 10237,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 10246,
											"end": 10279,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "416"
										},
										{
											"begin": 10273,
											"end": 10278,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 10246,
											"end": 10279,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "255"
										},
										{
											"begin": 10246,
											"end": 10279,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 10246,
											"end": 10279,
											"name": "tag",
											"source": 20,
											"value": "416"
										},
										{
											"begin": 10246,
											"end": 10279,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 10142,
											"end": 10285,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 10142,
											"end": 10285,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 10142,
											"end": 10285,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 10142,
											"end": 10285,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 10142,
											"end": 10285,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 10291,
											"end": 10642,
											"name": "tag",
											"source": 20,
											"value": "177"
										},
										{
											"begin": 10291,
											"end": 10642,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 10361,
											"end": 10367,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 10410,
											"end": 10412,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 10398,
											"end": 10407,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 10389,
											"end": 10396,
											"name": "DUP5",
											"source": 20
										},
										{
											"begin": 10385,
											"end": 10408,
											"name": "SUB",
											"source": 20
										},
										{
											"begin": 10381,
											"end": 10413,
											"name": "SLT",
											"source": 20
										},
										{
											"begin": 10378,
											"end": 10497,
											"name": "ISZERO",
											"source": 20
										},
										{
											"begin": 10378,
											"end": 10497,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "418"
										},
										{
											"begin": 10378,
											"end": 10497,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 10416,
											"end": 10495,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "419"
										},
										{
											"begin": 10416,
											"end": 10495,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "242"
										},
										{
											"begin": 10416,
											"end": 10495,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 10416,
											"end": 10495,
											"name": "tag",
											"source": 20,
											"value": "419"
										},
										{
											"begin": 10416,
											"end": 10495,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 10378,
											"end": 10497,
											"name": "tag",
											"source": 20,
											"value": "418"
										},
										{
											"begin": 10378,
											"end": 10497,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 10536,
											"end": 10537,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 10561,
											"end": 10625,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "420"
										},
										{
											"begin": 10617,
											"end": 10624,
											"name": "DUP5",
											"source": 20
										},
										{
											"begin": 10608,
											"end": 10614,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 10597,
											"end": 10606,
											"name": "DUP6",
											"source": 20
										},
										{
											"begin": 10593,
											"end": 10615,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 10561,
											"end": 10625,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "268"
										},
										{
											"begin": 10561,
											"end": 10625,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 10561,
											"end": 10625,
											"name": "tag",
											"source": 20,
											"value": "420"
										},
										{
											"begin": 10561,
											"end": 10625,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 10551,
											"end": 10625,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 10551,
											"end": 10625,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 10507,
											"end": 10635,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 10291,
											"end": 10642,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 10291,
											"end": 10642,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 10291,
											"end": 10642,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 10291,
											"end": 10642,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 10291,
											"end": 10642,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 10648,
											"end": 10817,
											"name": "tag",
											"source": 20,
											"value": "269"
										},
										{
											"begin": 10648,
											"end": 10817,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 10732,
											"end": 10743,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 10766,
											"end": 10772,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 10761,
											"end": 10764,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 10754,
											"end": 10773,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 10806,
											"end": 10810,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 10801,
											"end": 10804,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 10797,
											"end": 10811,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 10782,
											"end": 10811,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 10782,
											"end": 10811,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 10648,
											"end": 10817,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 10648,
											"end": 10817,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 10648,
											"end": 10817,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 10648,
											"end": 10817,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 10648,
											"end": 10817,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 10823,
											"end": 11064,
											"name": "tag",
											"source": 20,
											"value": "270"
										},
										{
											"begin": 10823,
											"end": 11064,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 10963,
											"end": 10997,
											"name": "PUSH",
											"source": 20,
											"value": "5361666545524332303A20617070726F76652066726F6D206E6F6E2D7A65726F"
										},
										{
											"begin": 10959,
											"end": 10960,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 10951,
											"end": 10957,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 10947,
											"end": 10961,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 10940,
											"end": 10998,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 11032,
											"end": 11056,
											"name": "PUSH",
											"source": 20,
											"value": "20746F206E6F6E2D7A65726F20616C6C6F77616E636500000000000000000000"
										},
										{
											"begin": 11027,
											"end": 11029,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 11019,
											"end": 11025,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 11015,
											"end": 11030,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 11008,
											"end": 11057,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 10823,
											"end": 11064,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 10823,
											"end": 11064,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 11070,
											"end": 11436,
											"name": "tag",
											"source": 20,
											"value": "271"
										},
										{
											"begin": 11070,
											"end": 11436,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 11212,
											"end": 11215,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 11233,
											"end": 11300,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "424"
										},
										{
											"begin": 11297,
											"end": 11299,
											"name": "PUSH",
											"source": 20,
											"value": "36"
										},
										{
											"begin": 11292,
											"end": 11295,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 11233,
											"end": 11300,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "269"
										},
										{
											"begin": 11233,
											"end": 11300,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 11233,
											"end": 11300,
											"name": "tag",
											"source": 20,
											"value": "424"
										},
										{
											"begin": 11233,
											"end": 11300,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 11226,
											"end": 11300,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 11226,
											"end": 11300,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 11309,
											"end": 11402,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "425"
										},
										{
											"begin": 11398,
											"end": 11401,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 11309,
											"end": 11402,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "270"
										},
										{
											"begin": 11309,
											"end": 11402,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 11309,
											"end": 11402,
											"name": "tag",
											"source": 20,
											"value": "425"
										},
										{
											"begin": 11309,
											"end": 11402,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 11427,
											"end": 11429,
											"name": "PUSH",
											"source": 20,
											"value": "40"
										},
										{
											"begin": 11422,
											"end": 11425,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 11418,
											"end": 11430,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 11411,
											"end": 11430,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 11411,
											"end": 11430,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 11070,
											"end": 11436,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 11070,
											"end": 11436,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 11070,
											"end": 11436,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 11070,
											"end": 11436,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 11442,
											"end": 11861,
											"name": "tag",
											"source": 20,
											"value": "180"
										},
										{
											"begin": 11442,
											"end": 11861,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 11608,
											"end": 11612,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 11646,
											"end": 11648,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 11635,
											"end": 11644,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 11631,
											"end": 11649,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 11623,
											"end": 11649,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 11623,
											"end": 11649,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 11695,
											"end": 11704,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 11689,
											"end": 11693,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 11685,
											"end": 11705,
											"name": "SUB",
											"source": 20
										},
										{
											"begin": 11681,
											"end": 11682,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 11670,
											"end": 11679,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 11666,
											"end": 11683,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 11659,
											"end": 11706,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 11723,
											"end": 11854,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "427"
										},
										{
											"begin": 11849,
											"end": 11853,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 11723,
											"end": 11854,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "271"
										},
										{
											"begin": 11723,
											"end": 11854,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 11723,
											"end": 11854,
											"name": "tag",
											"source": 20,
											"value": "427"
										},
										{
											"begin": 11723,
											"end": 11854,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 11715,
											"end": 11854,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 11715,
											"end": 11854,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 11442,
											"end": 11861,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 11442,
											"end": 11861,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 11442,
											"end": 11861,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 11442,
											"end": 11861,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 11867,
											"end": 12199,
											"name": "tag",
											"source": 20,
											"value": "183"
										},
										{
											"begin": 11867,
											"end": 12199,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 11988,
											"end": 11992,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 12026,
											"end": 12028,
											"name": "PUSH",
											"source": 20,
											"value": "40"
										},
										{
											"begin": 12015,
											"end": 12024,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 12011,
											"end": 12029,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 12003,
											"end": 12029,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 12003,
											"end": 12029,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 12039,
											"end": 12110,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "429"
										},
										{
											"begin": 12107,
											"end": 12108,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 12096,
											"end": 12105,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 12092,
											"end": 12109,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 12083,
											"end": 12089,
											"name": "DUP6",
											"source": 20
										},
										{
											"begin": 12039,
											"end": 12110,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "262"
										},
										{
											"begin": 12039,
											"end": 12110,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 12039,
											"end": 12110,
											"name": "tag",
											"source": 20,
											"value": "429"
										},
										{
											"begin": 12039,
											"end": 12110,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 12120,
											"end": 12192,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "430"
										},
										{
											"begin": 12188,
											"end": 12190,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 12177,
											"end": 12186,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 12173,
											"end": 12191,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 12164,
											"end": 12170,
											"name": "DUP5",
											"source": 20
										},
										{
											"begin": 12120,
											"end": 12192,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "263"
										},
										{
											"begin": 12120,
											"end": 12192,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 12120,
											"end": 12192,
											"name": "tag",
											"source": 20,
											"value": "430"
										},
										{
											"begin": 12120,
											"end": 12192,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 11867,
											"end": 12199,
											"name": "SWAP4",
											"source": 20
										},
										{
											"begin": 11867,
											"end": 12199,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 11867,
											"end": 12199,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 11867,
											"end": 12199,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 11867,
											"end": 12199,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 11867,
											"end": 12199,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 12205,
											"end": 12321,
											"name": "tag",
											"source": 20,
											"value": "272"
										},
										{
											"begin": 12205,
											"end": 12321,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 12275,
											"end": 12296,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "432"
										},
										{
											"begin": 12290,
											"end": 12295,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 12275,
											"end": 12296,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "257"
										},
										{
											"begin": 12275,
											"end": 12296,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 12275,
											"end": 12296,
											"name": "tag",
											"source": 20,
											"value": "432"
										},
										{
											"begin": 12275,
											"end": 12296,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 12268,
											"end": 12273,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 12265,
											"end": 12297,
											"name": "EQ",
											"source": 20
										},
										{
											"begin": 12255,
											"end": 12315,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "433"
										},
										{
											"begin": 12255,
											"end": 12315,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 12311,
											"end": 12312,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 12308,
											"end": 12309,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 12301,
											"end": 12313,
											"name": "REVERT",
											"source": 20
										},
										{
											"begin": 12255,
											"end": 12315,
											"name": "tag",
											"source": 20,
											"value": "433"
										},
										{
											"begin": 12255,
											"end": 12315,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 12205,
											"end": 12321,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 12205,
											"end": 12321,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 12327,
											"end": 12464,
											"name": "tag",
											"source": 20,
											"value": "273"
										},
										{
											"begin": 12327,
											"end": 12464,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 12381,
											"end": 12386,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 12412,
											"end": 12418,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 12406,
											"end": 12419,
											"name": "MLOAD",
											"source": 20
										},
										{
											"begin": 12397,
											"end": 12419,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 12397,
											"end": 12419,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 12428,
											"end": 12458,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "435"
										},
										{
											"begin": 12452,
											"end": 12457,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 12428,
											"end": 12458,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "272"
										},
										{
											"begin": 12428,
											"end": 12458,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 12428,
											"end": 12458,
											"name": "tag",
											"source": 20,
											"value": "435"
										},
										{
											"begin": 12428,
											"end": 12458,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 12327,
											"end": 12464,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 12327,
											"end": 12464,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 12327,
											"end": 12464,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 12327,
											"end": 12464,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 12327,
											"end": 12464,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 12470,
											"end": 12815,
											"name": "tag",
											"source": 20,
											"value": "206"
										},
										{
											"begin": 12470,
											"end": 12815,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 12537,
											"end": 12543,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 12586,
											"end": 12588,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 12574,
											"end": 12583,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 12565,
											"end": 12572,
											"name": "DUP5",
											"source": 20
										},
										{
											"begin": 12561,
											"end": 12584,
											"name": "SUB",
											"source": 20
										},
										{
											"begin": 12557,
											"end": 12589,
											"name": "SLT",
											"source": 20
										},
										{
											"begin": 12554,
											"end": 12673,
											"name": "ISZERO",
											"source": 20
										},
										{
											"begin": 12554,
											"end": 12673,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "437"
										},
										{
											"begin": 12554,
											"end": 12673,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 12592,
											"end": 12671,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "438"
										},
										{
											"begin": 12592,
											"end": 12671,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "242"
										},
										{
											"begin": 12592,
											"end": 12671,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 12592,
											"end": 12671,
											"name": "tag",
											"source": 20,
											"value": "438"
										},
										{
											"begin": 12592,
											"end": 12671,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 12554,
											"end": 12673,
											"name": "tag",
											"source": 20,
											"value": "437"
										},
										{
											"begin": 12554,
											"end": 12673,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 12712,
											"end": 12713,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 12737,
											"end": 12798,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "439"
										},
										{
											"begin": 12790,
											"end": 12797,
											"name": "DUP5",
											"source": 20
										},
										{
											"begin": 12781,
											"end": 12787,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 12770,
											"end": 12779,
											"name": "DUP6",
											"source": 20
										},
										{
											"begin": 12766,
											"end": 12788,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 12737,
											"end": 12798,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "273"
										},
										{
											"begin": 12737,
											"end": 12798,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 12737,
											"end": 12798,
											"name": "tag",
											"source": 20,
											"value": "439"
										},
										{
											"begin": 12737,
											"end": 12798,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 12727,
											"end": 12798,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 12727,
											"end": 12798,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 12683,
											"end": 12808,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 12470,
											"end": 12815,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 12470,
											"end": 12815,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 12470,
											"end": 12815,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 12470,
											"end": 12815,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 12470,
											"end": 12815,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 12821,
											"end": 13050,
											"name": "tag",
											"source": 20,
											"value": "274"
										},
										{
											"begin": 12821,
											"end": 13050,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 12961,
											"end": 12995,
											"name": "PUSH",
											"source": 20,
											"value": "5361666545524332303A204552433230206F7065726174696F6E20646964206E"
										},
										{
											"begin": 12957,
											"end": 12958,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 12949,
											"end": 12955,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 12945,
											"end": 12959,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 12938,
											"end": 12996,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 13030,
											"end": 13042,
											"name": "PUSH",
											"source": 20,
											"value": "6F74207375636365656400000000000000000000000000000000000000000000"
										},
										{
											"begin": 13025,
											"end": 13027,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 13017,
											"end": 13023,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 13013,
											"end": 13028,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 13006,
											"end": 13043,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 12821,
											"end": 13050,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 12821,
											"end": 13050,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 13056,
											"end": 13422,
											"name": "tag",
											"source": 20,
											"value": "275"
										},
										{
											"begin": 13056,
											"end": 13422,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 13198,
											"end": 13201,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 13219,
											"end": 13286,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "442"
										},
										{
											"begin": 13283,
											"end": 13285,
											"name": "PUSH",
											"source": 20,
											"value": "2A"
										},
										{
											"begin": 13278,
											"end": 13281,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 13219,
											"end": 13286,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "269"
										},
										{
											"begin": 13219,
											"end": 13286,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 13219,
											"end": 13286,
											"name": "tag",
											"source": 20,
											"value": "442"
										},
										{
											"begin": 13219,
											"end": 13286,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 13212,
											"end": 13286,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 13212,
											"end": 13286,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 13295,
											"end": 13388,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "443"
										},
										{
											"begin": 13384,
											"end": 13387,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 13295,
											"end": 13388,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "274"
										},
										{
											"begin": 13295,
											"end": 13388,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 13295,
											"end": 13388,
											"name": "tag",
											"source": 20,
											"value": "443"
										},
										{
											"begin": 13295,
											"end": 13388,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 13413,
											"end": 13415,
											"name": "PUSH",
											"source": 20,
											"value": "40"
										},
										{
											"begin": 13408,
											"end": 13411,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 13404,
											"end": 13416,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 13397,
											"end": 13416,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 13397,
											"end": 13416,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 13056,
											"end": 13422,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 13056,
											"end": 13422,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 13056,
											"end": 13422,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 13056,
											"end": 13422,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 13428,
											"end": 13847,
											"name": "tag",
											"source": 20,
											"value": "209"
										},
										{
											"begin": 13428,
											"end": 13847,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 13594,
											"end": 13598,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 13632,
											"end": 13634,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 13621,
											"end": 13630,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 13617,
											"end": 13635,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 13609,
											"end": 13635,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 13609,
											"end": 13635,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 13681,
											"end": 13690,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 13675,
											"end": 13679,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 13671,
											"end": 13691,
											"name": "SUB",
											"source": 20
										},
										{
											"begin": 13667,
											"end": 13668,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 13656,
											"end": 13665,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 13652,
											"end": 13669,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 13645,
											"end": 13692,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 13709,
											"end": 13840,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "445"
										},
										{
											"begin": 13835,
											"end": 13839,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 13709,
											"end": 13840,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "275"
										},
										{
											"begin": 13709,
											"end": 13840,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 13709,
											"end": 13840,
											"name": "tag",
											"source": 20,
											"value": "445"
										},
										{
											"begin": 13709,
											"end": 13840,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 13701,
											"end": 13840,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 13701,
											"end": 13840,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 13428,
											"end": 13847,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 13428,
											"end": 13847,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 13428,
											"end": 13847,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 13428,
											"end": 13847,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 13853,
											"end": 14078,
											"name": "tag",
											"source": 20,
											"value": "276"
										},
										{
											"begin": 13853,
											"end": 14078,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 13993,
											"end": 14027,
											"name": "PUSH",
											"source": 20,
											"value": "416464726573733A20696E73756666696369656E742062616C616E636520666F"
										},
										{
											"begin": 13989,
											"end": 13990,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 13981,
											"end": 13987,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 13977,
											"end": 13991,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 13970,
											"end": 14028,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 14062,
											"end": 14070,
											"name": "PUSH",
											"source": 20,
											"value": "722063616C6C0000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 14057,
											"end": 14059,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 14049,
											"end": 14055,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 14045,
											"end": 14060,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 14038,
											"end": 14071,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 13853,
											"end": 14078,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 13853,
											"end": 14078,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 14084,
											"end": 14450,
											"name": "tag",
											"source": 20,
											"value": "277"
										},
										{
											"begin": 14084,
											"end": 14450,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 14226,
											"end": 14229,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 14247,
											"end": 14314,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "448"
										},
										{
											"begin": 14311,
											"end": 14313,
											"name": "PUSH",
											"source": 20,
											"value": "26"
										},
										{
											"begin": 14306,
											"end": 14309,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 14247,
											"end": 14314,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "269"
										},
										{
											"begin": 14247,
											"end": 14314,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 14247,
											"end": 14314,
											"name": "tag",
											"source": 20,
											"value": "448"
										},
										{
											"begin": 14247,
											"end": 14314,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 14240,
											"end": 14314,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 14240,
											"end": 14314,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 14323,
											"end": 14416,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "449"
										},
										{
											"begin": 14412,
											"end": 14415,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 14323,
											"end": 14416,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "276"
										},
										{
											"begin": 14323,
											"end": 14416,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 14323,
											"end": 14416,
											"name": "tag",
											"source": 20,
											"value": "449"
										},
										{
											"begin": 14323,
											"end": 14416,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 14441,
											"end": 14443,
											"name": "PUSH",
											"source": 20,
											"value": "40"
										},
										{
											"begin": 14436,
											"end": 14439,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 14432,
											"end": 14444,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 14425,
											"end": 14444,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 14425,
											"end": 14444,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 14084,
											"end": 14450,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 14084,
											"end": 14450,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 14084,
											"end": 14450,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 14084,
											"end": 14450,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 14456,
											"end": 14875,
											"name": "tag",
											"source": 20,
											"value": "216"
										},
										{
											"begin": 14456,
											"end": 14875,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 14622,
											"end": 14626,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 14660,
											"end": 14662,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 14649,
											"end": 14658,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 14645,
											"end": 14663,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 14637,
											"end": 14663,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 14637,
											"end": 14663,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 14709,
											"end": 14718,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 14703,
											"end": 14707,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 14699,
											"end": 14719,
											"name": "SUB",
											"source": 20
										},
										{
											"begin": 14695,
											"end": 14696,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 14684,
											"end": 14693,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 14680,
											"end": 14697,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 14673,
											"end": 14720,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 14737,
											"end": 14868,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "451"
										},
										{
											"begin": 14863,
											"end": 14867,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 14737,
											"end": 14868,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "277"
										},
										{
											"begin": 14737,
											"end": 14868,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 14737,
											"end": 14868,
											"name": "tag",
											"source": 20,
											"value": "451"
										},
										{
											"begin": 14737,
											"end": 14868,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 14729,
											"end": 14868,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 14729,
											"end": 14868,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 14456,
											"end": 14875,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 14456,
											"end": 14875,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 14456,
											"end": 14875,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 14456,
											"end": 14875,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 14881,
											"end": 14979,
											"name": "tag",
											"source": 20,
											"value": "278"
										},
										{
											"begin": 14881,
											"end": 14979,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 14932,
											"end": 14938,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 14966,
											"end": 14971,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 14960,
											"end": 14972,
											"name": "MLOAD",
											"source": 20
										},
										{
											"begin": 14950,
											"end": 14972,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 14950,
											"end": 14972,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 14881,
											"end": 14979,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 14881,
											"end": 14979,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 14881,
											"end": 14979,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 14881,
											"end": 14979,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 14985,
											"end": 15132,
											"name": "tag",
											"source": 20,
											"value": "279"
										},
										{
											"begin": 14985,
											"end": 15132,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 15086,
											"end": 15097,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 15123,
											"end": 15126,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 15108,
											"end": 15126,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 15108,
											"end": 15126,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 14985,
											"end": 15132,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 14985,
											"end": 15132,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 14985,
											"end": 15132,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 14985,
											"end": 15132,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 14985,
											"end": 15132,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 15138,
											"end": 15384,
											"name": "tag",
											"source": 20,
											"value": "280"
										},
										{
											"begin": 15138,
											"end": 15384,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 15219,
											"end": 15220,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 15229,
											"end": 15342,
											"name": "tag",
											"source": 20,
											"value": "455"
										},
										{
											"begin": 15229,
											"end": 15342,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 15243,
											"end": 15249,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 15240,
											"end": 15241,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 15237,
											"end": 15250,
											"name": "LT",
											"source": 20
										},
										{
											"begin": 15229,
											"end": 15342,
											"name": "ISZERO",
											"source": 20
										},
										{
											"begin": 15229,
											"end": 15342,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "457"
										},
										{
											"begin": 15229,
											"end": 15342,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 15328,
											"end": 15329,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 15323,
											"end": 15326,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 15319,
											"end": 15330,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 15313,
											"end": 15331,
											"name": "MLOAD",
											"source": 20
										},
										{
											"begin": 15309,
											"end": 15310,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 15304,
											"end": 15307,
											"name": "DUP5",
											"source": 20
										},
										{
											"begin": 15300,
											"end": 15311,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 15293,
											"end": 15332,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 15265,
											"end": 15267,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 15262,
											"end": 15263,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 15258,
											"end": 15268,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 15253,
											"end": 15268,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 15253,
											"end": 15268,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 15229,
											"end": 15342,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "455"
										},
										{
											"begin": 15229,
											"end": 15342,
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 15229,
											"end": 15342,
											"name": "tag",
											"source": 20,
											"value": "457"
										},
										{
											"begin": 15229,
											"end": 15342,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 15376,
											"end": 15377,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 15367,
											"end": 15373,
											"name": "DUP5",
											"source": 20
										},
										{
											"begin": 15362,
											"end": 15365,
											"name": "DUP5",
											"source": 20
										},
										{
											"begin": 15358,
											"end": 15374,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 15351,
											"end": 15378,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 15200,
											"end": 15384,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 15138,
											"end": 15384,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 15138,
											"end": 15384,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 15138,
											"end": 15384,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 15138,
											"end": 15384,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 15390,
											"end": 15776,
											"name": "tag",
											"source": 20,
											"value": "281"
										},
										{
											"begin": 15390,
											"end": 15776,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 15494,
											"end": 15497,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 15522,
											"end": 15560,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "459"
										},
										{
											"begin": 15554,
											"end": 15559,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 15522,
											"end": 15560,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "278"
										},
										{
											"begin": 15522,
											"end": 15560,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 15522,
											"end": 15560,
											"name": "tag",
											"source": 20,
											"value": "459"
										},
										{
											"begin": 15522,
											"end": 15560,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 15576,
											"end": 15664,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "460"
										},
										{
											"begin": 15657,
											"end": 15663,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 15652,
											"end": 15655,
											"name": "DUP6",
											"source": 20
										},
										{
											"begin": 15576,
											"end": 15664,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "279"
										},
										{
											"begin": 15576,
											"end": 15664,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 15576,
											"end": 15664,
											"name": "tag",
											"source": 20,
											"value": "460"
										},
										{
											"begin": 15576,
											"end": 15664,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 15569,
											"end": 15664,
											"name": "SWAP4",
											"source": 20
										},
										{
											"begin": 15569,
											"end": 15664,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 15673,
											"end": 15738,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "461"
										},
										{
											"begin": 15731,
											"end": 15737,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 15726,
											"end": 15729,
											"name": "DUP6",
											"source": 20
										},
										{
											"begin": 15719,
											"end": 15723,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 15712,
											"end": 15717,
											"name": "DUP7",
											"source": 20
										},
										{
											"begin": 15708,
											"end": 15724,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 15673,
											"end": 15738,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "280"
										},
										{
											"begin": 15673,
											"end": 15738,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 15673,
											"end": 15738,
											"name": "tag",
											"source": 20,
											"value": "461"
										},
										{
											"begin": 15673,
											"end": 15738,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 15763,
											"end": 15769,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 15758,
											"end": 15761,
											"name": "DUP5",
											"source": 20
										},
										{
											"begin": 15754,
											"end": 15770,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 15747,
											"end": 15770,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 15747,
											"end": 15770,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 15498,
											"end": 15776,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 15390,
											"end": 15776,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 15390,
											"end": 15776,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 15390,
											"end": 15776,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 15390,
											"end": 15776,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 15390,
											"end": 15776,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 15782,
											"end": 16053,
											"name": "tag",
											"source": 20,
											"value": "218"
										},
										{
											"begin": 15782,
											"end": 16053,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 15912,
											"end": 15915,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 15934,
											"end": 16027,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "463"
										},
										{
											"begin": 16023,
											"end": 16026,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 16014,
											"end": 16020,
											"name": "DUP5",
											"source": 20
										},
										{
											"begin": 15934,
											"end": 16027,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "281"
										},
										{
											"begin": 15934,
											"end": 16027,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 15934,
											"end": 16027,
											"name": "tag",
											"source": 20,
											"value": "463"
										},
										{
											"begin": 15934,
											"end": 16027,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 15927,
											"end": 16027,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 15927,
											"end": 16027,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 16044,
											"end": 16047,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 16037,
											"end": 16047,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 16037,
											"end": 16047,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 15782,
											"end": 16053,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 15782,
											"end": 16053,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 15782,
											"end": 16053,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 15782,
											"end": 16053,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 15782,
											"end": 16053,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 16059,
											"end": 16238,
											"name": "tag",
											"source": 20,
											"value": "282"
										},
										{
											"begin": 16059,
											"end": 16238,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 16199,
											"end": 16230,
											"name": "PUSH",
											"source": 20,
											"value": "416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000"
										},
										{
											"begin": 16195,
											"end": 16196,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 16187,
											"end": 16193,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 16183,
											"end": 16197,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 16176,
											"end": 16231,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 16059,
											"end": 16238,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 16059,
											"end": 16238,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 16244,
											"end": 16610,
											"name": "tag",
											"source": 20,
											"value": "283"
										},
										{
											"begin": 16244,
											"end": 16610,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 16386,
											"end": 16389,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 16407,
											"end": 16474,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "466"
										},
										{
											"begin": 16471,
											"end": 16473,
											"name": "PUSH",
											"source": 20,
											"value": "1D"
										},
										{
											"begin": 16466,
											"end": 16469,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 16407,
											"end": 16474,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "269"
										},
										{
											"begin": 16407,
											"end": 16474,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 16407,
											"end": 16474,
											"name": "tag",
											"source": 20,
											"value": "466"
										},
										{
											"begin": 16407,
											"end": 16474,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 16400,
											"end": 16474,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 16400,
											"end": 16474,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 16483,
											"end": 16576,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "467"
										},
										{
											"begin": 16572,
											"end": 16575,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 16483,
											"end": 16576,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "282"
										},
										{
											"begin": 16483,
											"end": 16576,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 16483,
											"end": 16576,
											"name": "tag",
											"source": 20,
											"value": "467"
										},
										{
											"begin": 16483,
											"end": 16576,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 16601,
											"end": 16603,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 16596,
											"end": 16599,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 16592,
											"end": 16604,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 16585,
											"end": 16604,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 16585,
											"end": 16604,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 16244,
											"end": 16610,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 16244,
											"end": 16610,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 16244,
											"end": 16610,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 16244,
											"end": 16610,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 16616,
											"end": 17035,
											"name": "tag",
											"source": 20,
											"value": "231"
										},
										{
											"begin": 16616,
											"end": 17035,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 16782,
											"end": 16786,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 16820,
											"end": 16822,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 16809,
											"end": 16818,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 16805,
											"end": 16823,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 16797,
											"end": 16823,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 16797,
											"end": 16823,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 16869,
											"end": 16878,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 16863,
											"end": 16867,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 16859,
											"end": 16879,
											"name": "SUB",
											"source": 20
										},
										{
											"begin": 16855,
											"end": 16856,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 16844,
											"end": 16853,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 16840,
											"end": 16857,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 16833,
											"end": 16880,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 16897,
											"end": 17028,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "469"
										},
										{
											"begin": 17023,
											"end": 17027,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 16897,
											"end": 17028,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "283"
										},
										{
											"begin": 16897,
											"end": 17028,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 16897,
											"end": 17028,
											"name": "tag",
											"source": 20,
											"value": "469"
										},
										{
											"begin": 16897,
											"end": 17028,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 16889,
											"end": 17028,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 16889,
											"end": 17028,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 16616,
											"end": 17035,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 16616,
											"end": 17035,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 16616,
											"end": 17035,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 16616,
											"end": 17035,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 17041,
											"end": 17140,
											"name": "tag",
											"source": 20,
											"value": "284"
										},
										{
											"begin": 17041,
											"end": 17140,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 17093,
											"end": 17099,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 17127,
											"end": 17132,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 17121,
											"end": 17133,
											"name": "MLOAD",
											"source": 20
										},
										{
											"begin": 17111,
											"end": 17133,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 17111,
											"end": 17133,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 17041,
											"end": 17140,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 17041,
											"end": 17140,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 17041,
											"end": 17140,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 17041,
											"end": 17140,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 17146,
											"end": 17248,
											"name": "tag",
											"source": 20,
											"value": "285"
										},
										{
											"begin": 17146,
											"end": 17248,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 17187,
											"end": 17193,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 17238,
											"end": 17240,
											"name": "PUSH",
											"source": 20,
											"value": "1F"
										},
										{
											"begin": 17234,
											"end": 17241,
											"name": "NOT",
											"source": 20
										},
										{
											"begin": 17229,
											"end": 17231,
											"name": "PUSH",
											"source": 20,
											"value": "1F"
										},
										{
											"begin": 17222,
											"end": 17227,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 17218,
											"end": 17232,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 17214,
											"end": 17242,
											"name": "AND",
											"source": 20
										},
										{
											"begin": 17204,
											"end": 17242,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 17204,
											"end": 17242,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 17146,
											"end": 17248,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 17146,
											"end": 17248,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 17146,
											"end": 17248,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 17146,
											"end": 17248,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 17254,
											"end": 17631,
											"name": "tag",
											"source": 20,
											"value": "286"
										},
										{
											"begin": 17254,
											"end": 17631,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 17342,
											"end": 17345,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 17370,
											"end": 17409,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "473"
										},
										{
											"begin": 17403,
											"end": 17408,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 17370,
											"end": 17409,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "284"
										},
										{
											"begin": 17370,
											"end": 17409,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 17370,
											"end": 17409,
											"name": "tag",
											"source": 20,
											"value": "473"
										},
										{
											"begin": 17370,
											"end": 17409,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 17425,
											"end": 17496,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "474"
										},
										{
											"begin": 17489,
											"end": 17495,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 17484,
											"end": 17487,
											"name": "DUP6",
											"source": 20
										},
										{
											"begin": 17425,
											"end": 17496,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "269"
										},
										{
											"begin": 17425,
											"end": 17496,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 17425,
											"end": 17496,
											"name": "tag",
											"source": 20,
											"value": "474"
										},
										{
											"begin": 17425,
											"end": 17496,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 17418,
											"end": 17496,
											"name": "SWAP4",
											"source": 20
										},
										{
											"begin": 17418,
											"end": 17496,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 17505,
											"end": 17570,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "475"
										},
										{
											"begin": 17563,
											"end": 17569,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 17558,
											"end": 17561,
											"name": "DUP6",
											"source": 20
										},
										{
											"begin": 17551,
											"end": 17555,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 17544,
											"end": 17549,
											"name": "DUP7",
											"source": 20
										},
										{
											"begin": 17540,
											"end": 17556,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 17505,
											"end": 17570,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "280"
										},
										{
											"begin": 17505,
											"end": 17570,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 17505,
											"end": 17570,
											"name": "tag",
											"source": 20,
											"value": "475"
										},
										{
											"begin": 17505,
											"end": 17570,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 17595,
											"end": 17624,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "476"
										},
										{
											"begin": 17617,
											"end": 17623,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 17595,
											"end": 17624,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "285"
										},
										{
											"begin": 17595,
											"end": 17624,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 17595,
											"end": 17624,
											"name": "tag",
											"source": 20,
											"value": "476"
										},
										{
											"begin": 17595,
											"end": 17624,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 17590,
											"end": 17593,
											"name": "DUP5",
											"source": 20
										},
										{
											"begin": 17586,
											"end": 17625,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 17579,
											"end": 17625,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 17579,
											"end": 17625,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 17346,
											"end": 17631,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 17254,
											"end": 17631,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 17254,
											"end": 17631,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 17254,
											"end": 17631,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 17254,
											"end": 17631,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 17254,
											"end": 17631,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 17637,
											"end": 17950,
											"name": "tag",
											"source": 20,
											"value": "240"
										},
										{
											"begin": 17637,
											"end": 17950,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 17750,
											"end": 17754,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 17788,
											"end": 17790,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 17777,
											"end": 17786,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 17773,
											"end": 17791,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 17765,
											"end": 17791,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 17765,
											"end": 17791,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 17837,
											"end": 17846,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 17831,
											"end": 17835,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 17827,
											"end": 17847,
											"name": "SUB",
											"source": 20
										},
										{
											"begin": 17823,
											"end": 17824,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 17812,
											"end": 17821,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 17808,
											"end": 17825,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 17801,
											"end": 17848,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 17865,
											"end": 17943,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "478"
										},
										{
											"begin": 17938,
											"end": 17942,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 17929,
											"end": 17935,
											"name": "DUP5",
											"source": 20
										},
										{
											"begin": 17865,
											"end": 17943,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "286"
										},
										{
											"begin": 17865,
											"end": 17943,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 17865,
											"end": 17943,
											"name": "tag",
											"source": 20,
											"value": "478"
										},
										{
											"begin": 17865,
											"end": 17943,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 17857,
											"end": 17943,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 17857,
											"end": 17943,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 17637,
											"end": 17950,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 17637,
											"end": 17950,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 17637,
											"end": 17950,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 17637,
											"end": 17950,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 17637,
											"end": 17950,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 20
										}
									]
								}
							},
							"sourceList": [
								"contracts/TimeMarket.sol",
								"interfaces/IERC165.sol",
								"interfaces/IERC20.sol",
								"interfaces/IERC20Permit.sol",
								"interfaces/IERC721.sol",
								"interfaces/IERC721Enumerable.sol",
								"interfaces/IERC721Metadata.sol",
								"interfaces/IERC721Receiver.sol",
								"interfaces/IError.sol",
								"interfaces/ITimeStruct.sol",
								"interfaces/IUniswapV3Factory.sol",
								"interfaces/UniswapV3/IERC721Permit.sol",
								"interfaces/UniswapV3/INonfungiblePositionManager.sol",
								"interfaces/UniswapV3/IPeripheryImmutableState.sol",
								"interfaces/UniswapV3/IPeripheryPayments.sol",
								"interfaces/UniswapV3/IPoolInitializer.sol",
								"libraries/Address.sol",
								"libraries/PoolAddress.sol",
								"libraries/SafeERC20.sol",
								"libraries/TimeFee.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {
							"Sale(uint64,address)": "d91af492",
							"buy(address,address,uint128,uint128)": "0d45431d",
							"buyerWithdrawAirdorp(uint64)": "c0102de4",
							"buyerWithdrawRefund(uint64)": "2895cb7b",
							"getPenal(uint128,uint128)": "98c50fdd",
							"getPoolAddress(address,address,uint24)": "696d6283",
							"injectFutureToken(uint64)": "25ac3a73",
							"profileEarn(uint64)": "c3cf1aa6",
							"solderWithdrawStable(uint64)": "77bcd8a6",
							"userIfWithdraw1(address,uint256)": "59de2f60",
							"userIfWithdraw2(address,uint256)": "df0905c6",
							"userIfWithdraw3(address,uint256)": "b8d7f980",
							"userIfWithdraw4(address,uint256)": "fc993ea8"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_airdropToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_clearingTime\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyInjectToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NorSolder\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotBuyer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInjectToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_id\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"}],\"name\":\"Sale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_buyAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_buyPrice\",\"type\":\"uint128\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_id\",\"type\":\"uint64\"}],\"name\":\"buyerWithdrawAirdorp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_id\",\"type\":\"uint64\"}],\"name\":\"buyerWithdrawRefund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_soldPrice\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_soldAmount\",\"type\":\"uint128\"}],\"name\":\"getPenal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"_fee\",\"type\":\"uint24\"}],\"name\":\"getPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"thisPool\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_id\",\"type\":\"uint64\"}],\"name\":\"injectFutureToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_id\",\"type\":\"uint64\"}],\"name\":\"profileEarn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_id\",\"type\":\"uint64\"}],\"name\":\"solderWithdrawStable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userIfWithdraw1\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userIfWithdraw2\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userIfWithdraw3\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userIfWithdraw4\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TimeMarket.sol\":\"TimeMarket\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/TimeMarket.sol\":{\"keccak256\":\"0x6790ca8fda6948d3f98b912a7589c32e7cdd3f849c8113a63d0b7a17ea2b4550\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c73365de7a9912a6c5fba4fb2d519996c9c5ea5c526d047aed6825deb419319f\",\"dweb:/ipfs/QmbupM8sv2pYtpB7S5j89o6niF9dQ5D78qnWmqxn692wBT\"]},\"interfaces/IERC165.sol\":{\"keccak256\":\"0x7d622aae953af8cc0c42b642ea6bfefc4851d9da99ebf0c11c8a99e1b97dc7ff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ef936c54bf126d59024eaf04e4a15aa3527c52a27e160d5f93185cf2e47db5e8\",\"dweb:/ipfs/QmQS5yZTHRPGXyJbj1RX9JajLueqN3MTQ6SSvAG9iJQ4cV\"]},\"interfaces/IERC20.sol\":{\"keccak256\":\"0xa426add89e9b4785ddeeb07b4d9352b57de8b4cb314c8cb8f0d5898938bd8de9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://09852a830ad29d33cfdf74e7035853c68e43e1a8c242b25db9d656a074a54e6d\",\"dweb:/ipfs/QmeRSfQwWr3vyP2uJxnjybtPYLMiD17E51d4eMhXQh93R1\"]},\"interfaces/IERC20Permit.sol\":{\"keccak256\":\"0xc51a927b9d9ff62cf4c237f7f197827b90c460786c855c527007c02a94f23154\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d1107bf21355e8518d9fdcf1aa7052de7e5fc6d867d86d87b61b43667813cc1d\",\"dweb:/ipfs/QmZG3AQa61MLFWmovNyuzv3iCBPnFHGV7E7CimxLwpAwKt\"]},\"interfaces/IERC721.sol\":{\"keccak256\":\"0x49d5ef5ec866b921e61b9fd74a17160dc7f7396e2a58c3812fa4936ae7655899\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5675c27037dbd9a9d90cf650930c5ed95ee6c62bb8dfcacdc3872eab62ecf50d\",\"dweb:/ipfs/QmYmdBCaUZNiQjc4qnx4avKAWx7QXYiid1nwo76Zq7PdHn\"]},\"interfaces/IERC721Enumerable.sol\":{\"keccak256\":\"0x2928336d6b9bbc64be3a0969fadfc1e4d4b319497651d54851dcb919c1c50590\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://cf5a9f178df915738ce28563818060b15c62249653fa417d9cfde1b04516c31b\",\"dweb:/ipfs/QmfLqHXScsK1t8D2NCAVZa4j7niAqXHjxEHuG77HDUrSdt\"]},\"interfaces/IERC721Metadata.sol\":{\"keccak256\":\"0xd32870e2a6e19ded14c88a471733a51504aaec5e51b61be8f57469cc67440f2b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fe79f6298aa790c064e9aec4ded31cdb32d5de372b3fcda66035a9c6b3780331\",\"dweb:/ipfs/QmWvVNwdFao6264NR63yHgKH4LcYqYjJDq9SZ7GqKVRJFx\"]},\"interfaces/IERC721Receiver.sol\":{\"keccak256\":\"0xd669818e4d77be24bc391f00146315479826edff54e6791b92508bf7f4147791\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2ab4b52e2db524224473b3e62999634b2adf7d6e6fe00c34a6f57d562619a251\",\"dweb:/ipfs/QmaHFCwJtUDXoyLfV1KyDoFAAti1UgSqS8pQWZMFYZv2wu\"]},\"interfaces/IError.sol\":{\"keccak256\":\"0xeba0280837886bc9f46fea9c1a96b9a687e3f3e2d4646c5416a925d48d07b54c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://de9649f76e3bbf2896049207657ad98a181962e0ee8ca6dcaeb9317a002d5420\",\"dweb:/ipfs/QmdAadR7iwRtUgATLc3a3bgsqefxDWdadm9zQD7eP7GiiQ\"]},\"interfaces/ITimeStruct.sol\":{\"keccak256\":\"0x0afe849cb20e95bbad7d16aa2ea4d9b3b9cec028c3efeefa5fe8b34cc24f7e4b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://cf85a5b15f40309babd9526c684bf3c160716e1ed3a465da6c18dd57de883a07\",\"dweb:/ipfs/QmNYMhZPWaALPTvJbo21uyngnc2sP3JnfVRqLNCNXwGUAK\"]},\"interfaces/IUniswapV3Factory.sol\":{\"keccak256\":\"0x84f35bef9c458c47c57378010c38d79459a5310971ffe8b21fa8083310ed610c\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://66cfe71f9676baa349f4e8908eaab79b407b4976a4c3cdf766bf8d42217ef58b\",\"dweb:/ipfs/QmXaScgxoHZ7WorzMwRSV84dpC63ykUY2GB7Z2miZ2Tk5L\"]},\"interfaces/UniswapV3/IERC721Permit.sol\":{\"keccak256\":\"0xf64ceb2b37307fe3b391256ee5745ca4877adc339b56fe71ae9531d7f19be9aa\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://f2ab4e22a3cc4a36cf359f0eb37543a66849d864fa27eabc602f32aeae34667a\",\"dweb:/ipfs/QmU9xKeEre66suCJYxchbivZkGbGygw3jKP9daHKUaYMuN\"]},\"interfaces/UniswapV3/INonfungiblePositionManager.sol\":{\"keccak256\":\"0xf223d560260129efd7a8a794c2193ac1e645a49621ebbe3358a31b551aef8dea\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9aa85f6c28aca3fc982b4b93a753865913f435e8aa9d1d04bd51a8a9e052c1d2\",\"dweb:/ipfs/QmWmyTdJUsHH6VxwL9gooFQAeEMkE396cNgmDG3s6HJYdB\"]},\"interfaces/UniswapV3/IPeripheryImmutableState.sol\":{\"keccak256\":\"0x9d4a239b1324e9cb7ffa202088a2784a3d7c56ea7b47d3a12febec032305e245\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://726ee46aabe0655e684d9b344dcf0844bef491879bdc35499c9ba4c1d9fb75b1\",\"dweb:/ipfs/QmV96KM5eoC73ZdsQkLjw2WjNHk3cqnLtNRSWxAsebKusX\"]},\"interfaces/UniswapV3/IPeripheryPayments.sol\":{\"keccak256\":\"0xedc15d14a5be9ed30744f3f8c0a3e53c3d5478464091330ba9c8acc1ddf9fcb4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2b20d91bc3db69de801f8c8e6dd5b05aa42ebc73690fd9f13316e7bf71405641\",\"dweb:/ipfs/QmQX65rHNiJptDzxXX8bctavSHpYCYuPLoSriJaL2GYyDp\"]},\"interfaces/UniswapV3/IPoolInitializer.sol\":{\"keccak256\":\"0xa54fe96a33c55207b9cf3e4c4d727dc7e0212e645b2c767281b9a9026c2edaf3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d082f8a8e48919d6c920d91351fddc3fd509d0446b1f45f541fdcfa0942a9196\",\"dweb:/ipfs/QmRVaquMHr4mbGBADKii6F9K9mLTtDx7omn7pPaEXJTLMw\"]},\"libraries/Address.sol\":{\"keccak256\":\"0x0f4169fea1817f1228f6a2db5e764e2a86f357a9f42f83de1f157449bca0f1ad\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://244a3f17ec48680bfaadacf724e5b12030636dc8b3e59f01de1cf206f0802ad7\",\"dweb:/ipfs/QmZXNxyUx2vm7LjcwtNhwYyKgqVxmbMAM3cG5bricBmL1K\"]},\"libraries/PoolAddress.sol\":{\"keccak256\":\"0xda7193f15e5262d61ba1995c1523dda0c00fa89b6b930dee4178849fa7ff8506\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://02924be40064529f8cd7ea8e7f40ffeb8fb1e074d82be0603cf9ec2896f9310e\",\"dweb:/ipfs/QmTj3DLXF3ePVr4DcqhnqYj9vAJ9Ng98Pf3EFkG9LzTFuK\"]},\"libraries/SafeERC20.sol\":{\"keccak256\":\"0xe74183ce288c892718941897cf193167013ef062470ea7fc7f0e74c23521cdd1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://75be313f96388535ff46fc29a55ed358e24e887c5706ea595ef2ed95c1d58e03\",\"dweb:/ipfs/QmReMXbvdgk5wZtn3mrjsDGLKFzfbBxG6HJBELLsaAKXkS\"]},\"libraries/TimeFee.sol\":{\"keccak256\":\"0x263efba43eaec339f5385a6c25158219d00edce75157d7cd759f3032725fcc79\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bcb2fee6d1fa020c5a58f9de9dace4b0c09339c784b1b7888ef78ffd52faa7c0\",\"dweb:/ipfs/QmVjYwXXg8QyvTh1dyTWp41qjyrajaqyXuATtMJqN4SRF7\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 19,
								"contract": "contracts/TimeMarket.sol:TimeMarket",
								"label": "clearingTime",
								"offset": 0,
								"slot": "0",
								"type": "t_uint56"
							},
							{
								"astId": 21,
								"contract": "contracts/TimeMarket.sol:TimeMarket",
								"label": "id",
								"offset": 7,
								"slot": "0",
								"type": "t_uint64"
							},
							{
								"astId": 23,
								"contract": "contracts/TimeMarket.sol:TimeMarket",
								"label": "airdropToken",
								"offset": 0,
								"slot": "1",
								"type": "t_address"
							},
							{
								"astId": 26,
								"contract": "contracts/TimeMarket.sol:TimeMarket",
								"label": "univ3Factory",
								"offset": 0,
								"slot": "2",
								"type": "t_address"
							},
							{
								"astId": 29,
								"contract": "contracts/TimeMarket.sol:TimeMarket",
								"label": "NonfungiblePositionManager",
								"offset": 0,
								"slot": "3",
								"type": "t_address"
							},
							{
								"astId": 53,
								"contract": "contracts/TimeMarket.sol:TimeMarket",
								"label": "_tradeMes",
								"offset": 0,
								"slot": "4",
								"type": "t_mapping(t_uint64,t_struct(tradeMes)1177_storage)"
							},
							{
								"astId": 59,
								"contract": "contracts/TimeMarket.sol:TimeMarket",
								"label": "ifInject",
								"offset": 0,
								"slot": "5",
								"type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
							},
							{
								"astId": 65,
								"contract": "contracts/TimeMarket.sol:TimeMarket",
								"label": "userIfWithdraw1",
								"offset": 0,
								"slot": "6",
								"type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
							},
							{
								"astId": 71,
								"contract": "contracts/TimeMarket.sol:TimeMarket",
								"label": "userIfWithdraw2",
								"offset": 0,
								"slot": "7",
								"type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
							},
							{
								"astId": 77,
								"contract": "contracts/TimeMarket.sol:TimeMarket",
								"label": "userIfWithdraw3",
								"offset": 0,
								"slot": "8",
								"type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
							},
							{
								"astId": 83,
								"contract": "contracts/TimeMarket.sol:TimeMarket",
								"label": "userIfWithdraw4",
								"offset": 0,
								"slot": "9",
								"type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(uint256 => bool))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_uint256,t_bool)"
							},
							"t_mapping(t_uint256,t_bool)": {
								"encoding": "mapping",
								"key": "t_uint256",
								"label": "mapping(uint256 => bool)",
								"numberOfBytes": "32",
								"value": "t_bool"
							},
							"t_mapping(t_uint64,t_struct(tradeMes)1177_storage)": {
								"encoding": "mapping",
								"key": "t_uint64",
								"label": "mapping(uint64 => struct ITimeStruct.tradeMes)",
								"numberOfBytes": "32",
								"value": "t_struct(tradeMes)1177_storage"
							},
							"t_struct(tradeMes)1177_storage": {
								"encoding": "inplace",
								"label": "struct ITimeStruct.tradeMes",
								"members": [
									{
										"astId": 1162,
										"contract": "contracts/TimeMarket.sol:TimeMarket",
										"label": "tradeState",
										"offset": 0,
										"slot": "0",
										"type": "t_uint8"
									},
									{
										"astId": 1164,
										"contract": "contracts/TimeMarket.sol:TimeMarket",
										"label": "tradeId",
										"offset": 1,
										"slot": "0",
										"type": "t_uint64"
									},
									{
										"astId": 1166,
										"contract": "contracts/TimeMarket.sol:TimeMarket",
										"label": "buyTime",
										"offset": 9,
										"slot": "0",
										"type": "t_uint56"
									},
									{
										"astId": 1168,
										"contract": "contracts/TimeMarket.sol:TimeMarket",
										"label": "buyTotalAmount",
										"offset": 16,
										"slot": "0",
										"type": "t_uint128"
									},
									{
										"astId": 1170,
										"contract": "contracts/TimeMarket.sol:TimeMarket",
										"label": "buyPrice",
										"offset": 0,
										"slot": "1",
										"type": "t_uint128"
									},
									{
										"astId": 1172,
										"contract": "contracts/TimeMarket.sol:TimeMarket",
										"label": "tokenAddress",
										"offset": 0,
										"slot": "2",
										"type": "t_address"
									},
									{
										"astId": 1174,
										"contract": "contracts/TimeMarket.sol:TimeMarket",
										"label": "buyerAddress",
										"offset": 0,
										"slot": "3",
										"type": "t_address"
									},
									{
										"astId": 1176,
										"contract": "contracts/TimeMarket.sol:TimeMarket",
										"label": "solderAddress",
										"offset": 0,
										"slot": "4",
										"type": "t_address"
									}
								],
								"numberOfBytes": "160"
							},
							"t_uint128": {
								"encoding": "inplace",
								"label": "uint128",
								"numberOfBytes": "16"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							},
							"t_uint56": {
								"encoding": "inplace",
								"label": "uint56",
								"numberOfBytes": "7"
							},
							"t_uint64": {
								"encoding": "inplace",
								"label": "uint64",
								"numberOfBytes": "8"
							},
							"t_uint8": {
								"encoding": "inplace",
								"label": "uint8",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"interfaces/IERC165.sol": {
				"IERC165": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.",
						"kind": "dev",
						"methods": {
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"supportsInterface(bytes4)": "01ffc9a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"interfaces/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"interfaces/IERC165.sol\":{\"keccak256\":\"0x7d622aae953af8cc0c42b642ea6bfefc4851d9da99ebf0c11c8a99e1b97dc7ff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ef936c54bf126d59024eaf04e4a15aa3527c52a27e160d5f93185cf2e47db5e8\",\"dweb:/ipfs/QmQS5yZTHRPGXyJbj1RX9JajLueqN3MTQ6SSvAG9iJQ4cV\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"interfaces/IERC20.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 standard as defined in the EIP.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"interfaces/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"interfaces/IERC20.sol\":{\"keccak256\":\"0xa426add89e9b4785ddeeb07b4d9352b57de8b4cb314c8cb8f0d5898938bd8de9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://09852a830ad29d33cfdf74e7035853c68e43e1a8c242b25db9d656a074a54e6d\",\"dweb:/ipfs/QmeRSfQwWr3vyP2uJxnjybtPYLMiD17E51d4eMhXQh93R1\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"interfaces/IERC20Permit.sol": {
				"IERC20Permit": {
					"abi": [
						{
							"inputs": [],
							"name": "DOMAIN_SEPARATOR",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "nonces",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "permit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all. ==== Security Considerations There are two important considerations concerning the use of `permit`. The first is that a valid permit signature expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be considered as an intention to spend the allowance in any specific way. The second is that because permits have built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be generally recommended is: ```solidity function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}     doThing(..., value); } function doThing(..., uint256 value) public {     token.safeTransferFrom(msg.sender, address(this), value);     ... } ``` Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also {SafeERC20-safeTransferFrom}). Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so contracts should have entry points that don't rely on permit.",
						"kind": "dev",
						"methods": {
							"DOMAIN_SEPARATOR()": {
								"details": "Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
							},
							"nonces(address)": {
								"details": "Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."
							},
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"DOMAIN_SEPARATOR()": "3644e515",
							"nonces(address)": "7ecebe00",
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "d505accf"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all. ==== Security Considerations There are two important considerations concerning the use of `permit`. The first is that a valid permit signature expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be considered as an intention to spend the allowance in any specific way. The second is that because permits have built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be generally recommended is: ```solidity function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}     doThing(..., value); } function doThing(..., uint256 value) public {     token.safeTransferFrom(msg.sender, address(this), value);     ... } ``` Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also {SafeERC20-safeTransferFrom}). Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so contracts should have entry points that don't rely on permit.\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"interfaces/IERC20Permit.sol\":\"IERC20Permit\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"interfaces/IERC20Permit.sol\":{\"keccak256\":\"0xc51a927b9d9ff62cf4c237f7f197827b90c460786c855c527007c02a94f23154\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d1107bf21355e8518d9fdcf1aa7052de7e5fc6d867d86d87b61b43667813cc1d\",\"dweb:/ipfs/QmZG3AQa61MLFWmovNyuzv3iCBPnFHGV7E7CimxLwpAwKt\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"interfaces/IERC721.sol": {
				"IERC721": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Required interface of an ERC721 compliant contract.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
							},
							"ApprovalForAll(address,address,bool)": {
								"details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `tokenId` token is transferred from `from` to `to`."
							}
						},
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Required interface of an ERC721 compliant contract.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"interfaces/IERC721.sol\":\"IERC721\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"interfaces/IERC165.sol\":{\"keccak256\":\"0x7d622aae953af8cc0c42b642ea6bfefc4851d9da99ebf0c11c8a99e1b97dc7ff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ef936c54bf126d59024eaf04e4a15aa3527c52a27e160d5f93185cf2e47db5e8\",\"dweb:/ipfs/QmQS5yZTHRPGXyJbj1RX9JajLueqN3MTQ6SSvAG9iJQ4cV\"]},\"interfaces/IERC721.sol\":{\"keccak256\":\"0x49d5ef5ec866b921e61b9fd74a17160dc7f7396e2a58c3812fa4936ae7655899\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5675c27037dbd9a9d90cf650930c5ed95ee6c62bb8dfcacdc3872eab62ecf50d\",\"dweb:/ipfs/QmYmdBCaUZNiQjc4qnx4avKAWx7QXYiid1nwo76Zq7PdHn\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"interfaces/IERC721Enumerable.sol": {
				"IERC721Enumerable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "index",
									"type": "uint256"
								}
							],
							"name": "tokenByIndex",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "index",
									"type": "uint256"
								}
							],
							"name": "tokenOfOwnerByIndex",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "See https://eips.ethereum.org/EIPS/eip-721",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
							},
							"ApprovalForAll(address,address,bool)": {
								"details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `tokenId` token is transferred from `from` to `to`."
							}
						},
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"tokenByIndex(uint256)": {
								"details": "Returns a token ID at a given `index` of all the tokens stored by the contract. Use along with {totalSupply} to enumerate all tokens."
							},
							"tokenOfOwnerByIndex(address,uint256)": {
								"details": "Returns a token ID owned by `owner` at a given `index` of its token list. Use along with {balanceOf} to enumerate all of ``owner``'s tokens."
							},
							"totalSupply()": {
								"details": "Returns the total amount of tokens stored by the contract."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"title": "ERC-721 Non-Fungible Token Standard, optional enumeration extension",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"tokenByIndex(uint256)": "4f6ccce7",
							"tokenOfOwnerByIndex(address,uint256)": "2f745c59",
							"totalSupply()": "18160ddd",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"tokenByIndex(uint256)\":{\"details\":\"Returns a token ID at a given `index` of all the tokens stored by the contract. Use along with {totalSupply} to enumerate all tokens.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"Returns a token ID owned by `owner` at a given `index` of its token list. Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\"},\"totalSupply()\":{\"details\":\"Returns the total amount of tokens stored by the contract.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"title\":\"ERC-721 Non-Fungible Token Standard, optional enumeration extension\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"interfaces/IERC721Enumerable.sol\":\"IERC721Enumerable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"interfaces/IERC165.sol\":{\"keccak256\":\"0x7d622aae953af8cc0c42b642ea6bfefc4851d9da99ebf0c11c8a99e1b97dc7ff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ef936c54bf126d59024eaf04e4a15aa3527c52a27e160d5f93185cf2e47db5e8\",\"dweb:/ipfs/QmQS5yZTHRPGXyJbj1RX9JajLueqN3MTQ6SSvAG9iJQ4cV\"]},\"interfaces/IERC721.sol\":{\"keccak256\":\"0x49d5ef5ec866b921e61b9fd74a17160dc7f7396e2a58c3812fa4936ae7655899\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5675c27037dbd9a9d90cf650930c5ed95ee6c62bb8dfcacdc3872eab62ecf50d\",\"dweb:/ipfs/QmYmdBCaUZNiQjc4qnx4avKAWx7QXYiid1nwo76Zq7PdHn\"]},\"interfaces/IERC721Enumerable.sol\":{\"keccak256\":\"0x2928336d6b9bbc64be3a0969fadfc1e4d4b319497651d54851dcb919c1c50590\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://cf5a9f178df915738ce28563818060b15c62249653fa417d9cfde1b04516c31b\",\"dweb:/ipfs/QmfLqHXScsK1t8D2NCAVZa4j7niAqXHjxEHuG77HDUrSdt\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"interfaces/IERC721Metadata.sol": {
				"IERC721Metadata": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "tokenURI",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "See https://eips.ethereum.org/EIPS/eip-721",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
							},
							"ApprovalForAll(address,address,bool)": {
								"details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `tokenId` token is transferred from `from` to `to`."
							}
						},
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"name()": {
								"details": "Returns the token collection name."
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"symbol()": {
								"details": "Returns the token collection symbol."
							},
							"tokenURI(uint256)": {
								"details": "Returns the Uniform Resource Identifier (URI) for `tokenId` token."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"title": "ERC-721 Non-Fungible Token Standard, optional metadata extension",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"name()": "06fdde03",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"symbol()": "95d89b41",
							"tokenURI(uint256)": "c87b56dd",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"title\":\"ERC-721 Non-Fungible Token Standard, optional metadata extension\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"interfaces/IERC721Metadata.sol\":\"IERC721Metadata\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"interfaces/IERC165.sol\":{\"keccak256\":\"0x7d622aae953af8cc0c42b642ea6bfefc4851d9da99ebf0c11c8a99e1b97dc7ff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ef936c54bf126d59024eaf04e4a15aa3527c52a27e160d5f93185cf2e47db5e8\",\"dweb:/ipfs/QmQS5yZTHRPGXyJbj1RX9JajLueqN3MTQ6SSvAG9iJQ4cV\"]},\"interfaces/IERC721.sol\":{\"keccak256\":\"0x49d5ef5ec866b921e61b9fd74a17160dc7f7396e2a58c3812fa4936ae7655899\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5675c27037dbd9a9d90cf650930c5ed95ee6c62bb8dfcacdc3872eab62ecf50d\",\"dweb:/ipfs/QmYmdBCaUZNiQjc4qnx4avKAWx7QXYiid1nwo76Zq7PdHn\"]},\"interfaces/IERC721Metadata.sol\":{\"keccak256\":\"0xd32870e2a6e19ded14c88a471733a51504aaec5e51b61be8f57469cc67440f2b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fe79f6298aa790c064e9aec4ded31cdb32d5de372b3fcda66035a9c6b3780331\",\"dweb:/ipfs/QmWvVNwdFao6264NR63yHgKH4LcYqYjJDq9SZ7GqKVRJFx\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"interfaces/IERC721Receiver.sol": {
				"IERC721Receiver": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "onERC721Received",
							"outputs": [
								{
									"internalType": "bytes4",
									"name": "",
									"type": "bytes4"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.",
						"kind": "dev",
						"methods": {
							"onERC721Received(address,address,uint256,bytes)": {
								"details": "Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`."
							}
						},
						"title": "ERC721 token receiver interface",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"onERC721Received(address,address,uint256,bytes)": "150b7a02"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.\",\"kind\":\"dev\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\"}},\"title\":\"ERC721 token receiver interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"interfaces/IERC721Receiver.sol\":\"IERC721Receiver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"interfaces/IERC721Receiver.sol\":{\"keccak256\":\"0xd669818e4d77be24bc391f00146315479826edff54e6791b92508bf7f4147791\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2ab4b52e2db524224473b3e62999634b2adf7d6e6fe00c34a6f57d562619a251\",\"dweb:/ipfs/QmaHFCwJtUDXoyLfV1KyDoFAAti1UgSqS8pQWZMFYZv2wu\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"interfaces/IError.sol": {
				"IError": {
					"abi": [
						{
							"inputs": [],
							"name": "AlreadyInjectToken",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "NorSolder",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "NotBuyer",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "NotEnoughAmount",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "NotInjectToken",
							"type": "error"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AlreadyInjectToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NorSolder\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotBuyer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInjectToken\",\"type\":\"error\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"interfaces/IError.sol\":\"IError\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"interfaces/IError.sol\":{\"keccak256\":\"0xeba0280837886bc9f46fea9c1a96b9a687e3f3e2d4646c5416a925d48d07b54c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://de9649f76e3bbf2896049207657ad98a181962e0ee8ca6dcaeb9317a002d5420\",\"dweb:/ipfs/QmdAadR7iwRtUgATLc3a3bgsqefxDWdadm9zQD7eP7GiiQ\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"interfaces/ITimeStruct.sol": {
				"ITimeStruct": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"interfaces/ITimeStruct.sol\":\"ITimeStruct\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"interfaces/ITimeStruct.sol\":{\"keccak256\":\"0x0afe849cb20e95bbad7d16aa2ea4d9b3b9cec028c3efeefa5fe8b34cc24f7e4b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://cf85a5b15f40309babd9526c684bf3c160716e1ed3a465da6c18dd57de883a07\",\"dweb:/ipfs/QmNYMhZPWaALPTvJbo21uyngnc2sP3JnfVRqLNCNXwGUAK\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"interfaces/IUniswapV3Factory.sol": {
				"IUniswapV3Factory": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint24",
									"name": "fee",
									"type": "uint24"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickSpacing",
									"type": "int24"
								}
							],
							"name": "FeeAmountEnabled",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "oldOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnerChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "token0",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "token1",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint24",
									"name": "fee",
									"type": "uint24"
								},
								{
									"indexed": false,
									"internalType": "int24",
									"name": "tickSpacing",
									"type": "int24"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "pool",
									"type": "address"
								}
							],
							"name": "PoolCreated",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "tokenA",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "tokenB",
									"type": "address"
								},
								{
									"internalType": "uint24",
									"name": "fee",
									"type": "uint24"
								}
							],
							"name": "createPool",
							"outputs": [
								{
									"internalType": "address",
									"name": "pool",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint24",
									"name": "fee",
									"type": "uint24"
								},
								{
									"internalType": "int24",
									"name": "tickSpacing",
									"type": "int24"
								}
							],
							"name": "enableFeeAmount",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint24",
									"name": "fee",
									"type": "uint24"
								}
							],
							"name": "feeAmountTickSpacing",
							"outputs": [
								{
									"internalType": "int24",
									"name": "",
									"type": "int24"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "tokenA",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "tokenB",
									"type": "address"
								},
								{
									"internalType": "uint24",
									"name": "fee",
									"type": "uint24"
								}
							],
							"name": "getPool",
							"outputs": [
								{
									"internalType": "address",
									"name": "pool",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_owner",
									"type": "address"
								}
							],
							"name": "setOwner",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"events": {
							"FeeAmountEnabled(uint24,int24)": {
								"params": {
									"fee": "The enabled fee, denominated in hundredths of a bip",
									"tickSpacing": "The minimum number of ticks between initialized ticks for pools created with the given fee"
								}
							},
							"OwnerChanged(address,address)": {
								"params": {
									"newOwner": "The owner after the owner was changed",
									"oldOwner": "The owner before the owner was changed"
								}
							},
							"PoolCreated(address,address,uint24,int24,address)": {
								"params": {
									"fee": "The fee collected upon every swap in the pool, denominated in hundredths of a bip",
									"pool": "The address of the created pool",
									"tickSpacing": "The minimum number of ticks between initialized ticks",
									"token0": "The first token of the pool by address sort order",
									"token1": "The second token of the pool by address sort order"
								}
							}
						},
						"kind": "dev",
						"methods": {
							"createPool(address,address,uint24)": {
								"details": "tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments are invalid.",
								"params": {
									"fee": "The desired fee for the pool",
									"tokenA": "One of the two tokens in the desired pool",
									"tokenB": "The other of the two tokens in the desired pool"
								},
								"returns": {
									"pool": "The address of the newly created pool"
								}
							},
							"enableFeeAmount(uint24,int24)": {
								"details": "Fee amounts may never be removed once enabled",
								"params": {
									"fee": "The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)",
									"tickSpacing": "The spacing between ticks to be enforced for all pools created with the given fee amount"
								}
							},
							"feeAmountTickSpacing(uint24)": {
								"details": "A fee amount can never be removed, so this value should be hard coded or cached in the calling context",
								"params": {
									"fee": "The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee"
								},
								"returns": {
									"_0": "The tick spacing"
								}
							},
							"getPool(address,address,uint24)": {
								"details": "tokenA and tokenB may be passed in either token0/token1 or token1/token0 order",
								"params": {
									"fee": "The fee collected upon every swap in the pool, denominated in hundredths of a bip",
									"tokenA": "The contract address of either token0 or token1",
									"tokenB": "The contract address of the other token"
								},
								"returns": {
									"pool": "The pool address"
								}
							},
							"owner()": {
								"details": "Can be changed by the current owner via setOwner",
								"returns": {
									"_0": "The address of the factory owner"
								}
							},
							"setOwner(address)": {
								"details": "Must be called by the current owner",
								"params": {
									"_owner": "The new owner of the factory"
								}
							}
						},
						"title": "The interface for the Uniswap V3 Factory",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"createPool(address,address,uint24)": "a1671295",
							"enableFeeAmount(uint24,int24)": "8a7c195f",
							"feeAmountTickSpacing(uint24)": "22afcccb",
							"getPool(address,address,uint24)": "1698ee82",
							"owner()": "8da5cb5b",
							"setOwner(address)": "13af4035"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"}],\"name\":\"FeeAmountEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"}],\"name\":\"createPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"}],\"name\":\"enableFeeAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"}],\"name\":\"feeAmountTickSpacing\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"}],\"name\":\"getPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"FeeAmountEnabled(uint24,int24)\":{\"params\":{\"fee\":\"The enabled fee, denominated in hundredths of a bip\",\"tickSpacing\":\"The minimum number of ticks between initialized ticks for pools created with the given fee\"}},\"OwnerChanged(address,address)\":{\"params\":{\"newOwner\":\"The owner after the owner was changed\",\"oldOwner\":\"The owner before the owner was changed\"}},\"PoolCreated(address,address,uint24,int24,address)\":{\"params\":{\"fee\":\"The fee collected upon every swap in the pool, denominated in hundredths of a bip\",\"pool\":\"The address of the created pool\",\"tickSpacing\":\"The minimum number of ticks between initialized ticks\",\"token0\":\"The first token of the pool by address sort order\",\"token1\":\"The second token of the pool by address sort order\"}}},\"kind\":\"dev\",\"methods\":{\"createPool(address,address,uint24)\":{\"details\":\"tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments are invalid.\",\"params\":{\"fee\":\"The desired fee for the pool\",\"tokenA\":\"One of the two tokens in the desired pool\",\"tokenB\":\"The other of the two tokens in the desired pool\"},\"returns\":{\"pool\":\"The address of the newly created pool\"}},\"enableFeeAmount(uint24,int24)\":{\"details\":\"Fee amounts may never be removed once enabled\",\"params\":{\"fee\":\"The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\",\"tickSpacing\":\"The spacing between ticks to be enforced for all pools created with the given fee amount\"}},\"feeAmountTickSpacing(uint24)\":{\"details\":\"A fee amount can never be removed, so this value should be hard coded or cached in the calling context\",\"params\":{\"fee\":\"The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\"},\"returns\":{\"_0\":\"The tick spacing\"}},\"getPool(address,address,uint24)\":{\"details\":\"tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\",\"params\":{\"fee\":\"The fee collected upon every swap in the pool, denominated in hundredths of a bip\",\"tokenA\":\"The contract address of either token0 or token1\",\"tokenB\":\"The contract address of the other token\"},\"returns\":{\"pool\":\"The pool address\"}},\"owner()\":{\"details\":\"Can be changed by the current owner via setOwner\",\"returns\":{\"_0\":\"The address of the factory owner\"}},\"setOwner(address)\":{\"details\":\"Must be called by the current owner\",\"params\":{\"_owner\":\"The new owner of the factory\"}}},\"title\":\"The interface for the Uniswap V3 Factory\",\"version\":1},\"userdoc\":{\"events\":{\"FeeAmountEnabled(uint24,int24)\":{\"notice\":\"Emitted when a new fee amount is enabled for pool creation via the factory\"},\"OwnerChanged(address,address)\":{\"notice\":\"Emitted when the owner of the factory is changed\"},\"PoolCreated(address,address,uint24,int24,address)\":{\"notice\":\"Emitted when a pool is created\"}},\"kind\":\"user\",\"methods\":{\"createPool(address,address,uint24)\":{\"notice\":\"Creates a pool for the given two tokens and fee\"},\"enableFeeAmount(uint24,int24)\":{\"notice\":\"Enables a fee amount with the given tickSpacing\"},\"feeAmountTickSpacing(uint24)\":{\"notice\":\"Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\"},\"getPool(address,address,uint24)\":{\"notice\":\"Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\"},\"owner()\":{\"notice\":\"Returns the current owner of the factory\"},\"setOwner(address)\":{\"notice\":\"Updates the owner of the factory\"}},\"notice\":\"The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"interfaces/IUniswapV3Factory.sol\":\"IUniswapV3Factory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"interfaces/IUniswapV3Factory.sol\":{\"keccak256\":\"0x84f35bef9c458c47c57378010c38d79459a5310971ffe8b21fa8083310ed610c\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://66cfe71f9676baa349f4e8908eaab79b407b4976a4c3cdf766bf8d42217ef58b\",\"dweb:/ipfs/QmXaScgxoHZ7WorzMwRSV84dpC63ykUY2GB7Z2miZ2Tk5L\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"events": {
							"FeeAmountEnabled(uint24,int24)": {
								"notice": "Emitted when a new fee amount is enabled for pool creation via the factory"
							},
							"OwnerChanged(address,address)": {
								"notice": "Emitted when the owner of the factory is changed"
							},
							"PoolCreated(address,address,uint24,int24,address)": {
								"notice": "Emitted when a pool is created"
							}
						},
						"kind": "user",
						"methods": {
							"createPool(address,address,uint24)": {
								"notice": "Creates a pool for the given two tokens and fee"
							},
							"enableFeeAmount(uint24,int24)": {
								"notice": "Enables a fee amount with the given tickSpacing"
							},
							"feeAmountTickSpacing(uint24)": {
								"notice": "Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled"
							},
							"getPool(address,address,uint24)": {
								"notice": "Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist"
							},
							"owner()": {
								"notice": "Returns the current owner of the factory"
							},
							"setOwner(address)": {
								"notice": "Updates the owner of the factory"
							}
						},
						"notice": "The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees",
						"version": 1
					}
				}
			},
			"interfaces/UniswapV3/IERC721Permit.sol": {
				"IERC721Permit": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "DOMAIN_SEPARATOR",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "PERMIT_TYPEHASH",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "permit",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
							},
							"ApprovalForAll(address,address,bool)": {
								"details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `tokenId` token is transferred from `from` to `to`."
							}
						},
						"kind": "dev",
						"methods": {
							"DOMAIN_SEPARATOR()": {
								"returns": {
									"_0": "The domain seperator used in encoding of permit signature"
								}
							},
							"PERMIT_TYPEHASH()": {
								"returns": {
									"_0": "The typehash for the permit"
								}
							},
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"permit(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"params": {
									"deadline": "The deadline timestamp by which the call must be mined for the approve to work",
									"r": "Must produce valid secp256k1 signature from the holder along with `v` and `s`",
									"s": "Must produce valid secp256k1 signature from the holder along with `r` and `v`",
									"spender": "The account that is being approved",
									"tokenId": "The ID of the token that is being approved for spending",
									"v": "Must produce valid secp256k1 signature from the holder along with `r` and `s`"
								}
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"title": "ERC721 with permit",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"DOMAIN_SEPARATOR()": "3644e515",
							"PERMIT_TYPEHASH()": "30adf81f",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"ownerOf(uint256)": "6352211e",
							"permit(address,uint256,uint256,uint8,bytes32,bytes32)": "7ac2ff7b",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"returns\":{\"_0\":\"The domain seperator used in encoding of permit signature\"}},\"PERMIT_TYPEHASH()\":{\"returns\":{\"_0\":\"The typehash for the permit\"}},\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"permit(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"deadline\":\"The deadline timestamp by which the call must be mined for the approve to work\",\"r\":\"Must produce valid secp256k1 signature from the holder along with `v` and `s`\",\"s\":\"Must produce valid secp256k1 signature from the holder along with `r` and `v`\",\"spender\":\"The account that is being approved\",\"tokenId\":\"The ID of the token that is being approved for spending\",\"v\":\"Must produce valid secp256k1 signature from the holder along with `r` and `s`\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"title\":\"ERC721 with permit\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"notice\":\"The domain separator used in the permit signature\"},\"PERMIT_TYPEHASH()\":{\"notice\":\"The permit typehash used in the permit signature\"},\"permit(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Approve of a specific token ID for spending by spender via signature\"}},\"notice\":\"Extension to ERC721 that includes a permit function for signature based approvals\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"interfaces/UniswapV3/IERC721Permit.sol\":\"IERC721Permit\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"interfaces/IERC165.sol\":{\"keccak256\":\"0x7d622aae953af8cc0c42b642ea6bfefc4851d9da99ebf0c11c8a99e1b97dc7ff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ef936c54bf126d59024eaf04e4a15aa3527c52a27e160d5f93185cf2e47db5e8\",\"dweb:/ipfs/QmQS5yZTHRPGXyJbj1RX9JajLueqN3MTQ6SSvAG9iJQ4cV\"]},\"interfaces/IERC721.sol\":{\"keccak256\":\"0x49d5ef5ec866b921e61b9fd74a17160dc7f7396e2a58c3812fa4936ae7655899\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5675c27037dbd9a9d90cf650930c5ed95ee6c62bb8dfcacdc3872eab62ecf50d\",\"dweb:/ipfs/QmYmdBCaUZNiQjc4qnx4avKAWx7QXYiid1nwo76Zq7PdHn\"]},\"interfaces/UniswapV3/IERC721Permit.sol\":{\"keccak256\":\"0xf64ceb2b37307fe3b391256ee5745ca4877adc339b56fe71ae9531d7f19be9aa\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://f2ab4e22a3cc4a36cf359f0eb37543a66849d864fa27eabc602f32aeae34667a\",\"dweb:/ipfs/QmU9xKeEre66suCJYxchbivZkGbGygw3jKP9daHKUaYMuN\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"DOMAIN_SEPARATOR()": {
								"notice": "The domain separator used in the permit signature"
							},
							"PERMIT_TYPEHASH()": {
								"notice": "The permit typehash used in the permit signature"
							},
							"permit(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"notice": "Approve of a specific token ID for spending by spender via signature"
							}
						},
						"notice": "Extension to ERC721 that includes a permit function for signature based approvals",
						"version": 1
					}
				}
			},
			"interfaces/UniswapV3/INonfungiblePositionManager.sol": {
				"INonfungiblePositionManager": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"name": "Collect",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "liquidity",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"name": "DecreaseLiquidity",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "liquidity",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"name": "IncreaseLiquidity",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "DOMAIN_SEPARATOR",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "PERMIT_TYPEHASH",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "WETH9",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "burn",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "tokenId",
											"type": "uint256"
										},
										{
											"internalType": "address",
											"name": "recipient",
											"type": "address"
										},
										{
											"internalType": "uint128",
											"name": "amount0Max",
											"type": "uint128"
										},
										{
											"internalType": "uint128",
											"name": "amount1Max",
											"type": "uint128"
										}
									],
									"internalType": "struct INonfungiblePositionManager.CollectParams",
									"name": "params",
									"type": "tuple"
								}
							],
							"name": "collect",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token0",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "token1",
									"type": "address"
								},
								{
									"internalType": "uint24",
									"name": "fee",
									"type": "uint24"
								},
								{
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								}
							],
							"name": "createAndInitializePoolIfNecessary",
							"outputs": [
								{
									"internalType": "address",
									"name": "pool",
									"type": "address"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "tokenId",
											"type": "uint256"
										},
										{
											"internalType": "uint128",
											"name": "liquidity",
											"type": "uint128"
										},
										{
											"internalType": "uint256",
											"name": "amount0Min",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amount1Min",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "deadline",
											"type": "uint256"
										}
									],
									"internalType": "struct INonfungiblePositionManager.DecreaseLiquidityParams",
									"name": "params",
									"type": "tuple"
								}
							],
							"name": "decreaseLiquidity",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "factory",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "tokenId",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amount0Desired",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amount1Desired",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amount0Min",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amount1Min",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "deadline",
											"type": "uint256"
										}
									],
									"internalType": "struct INonfungiblePositionManager.IncreaseLiquidityParams",
									"name": "params",
									"type": "tuple"
								}
							],
							"name": "increaseLiquidity",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "liquidity",
									"type": "uint128"
								},
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "token0",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "token1",
											"type": "address"
										},
										{
											"internalType": "uint24",
											"name": "fee",
											"type": "uint24"
										},
										{
											"internalType": "int24",
											"name": "tickLower",
											"type": "int24"
										},
										{
											"internalType": "int24",
											"name": "tickUpper",
											"type": "int24"
										},
										{
											"internalType": "uint256",
											"name": "amount0Desired",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amount1Desired",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amount0Min",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amount1Min",
											"type": "uint256"
										},
										{
											"internalType": "address",
											"name": "recipient",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "deadline",
											"type": "uint256"
										}
									],
									"internalType": "struct INonfungiblePositionManager.MintParams",
									"name": "params",
									"type": "tuple"
								}
							],
							"name": "mint",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "uint128",
									"name": "liquidity",
									"type": "uint128"
								},
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "permit",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "positions",
							"outputs": [
								{
									"internalType": "uint96",
									"name": "nonce",
									"type": "uint96"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "token0",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "token1",
									"type": "address"
								},
								{
									"internalType": "uint24",
									"name": "fee",
									"type": "uint24"
								},
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "liquidity",
									"type": "uint128"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthInside0LastX128",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthInside1LastX128",
									"type": "uint256"
								},
								{
									"internalType": "uint128",
									"name": "tokensOwed0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "tokensOwed1",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "refundETH",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amountMinimum",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								}
							],
							"name": "sweepToken",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "index",
									"type": "uint256"
								}
							],
							"name": "tokenByIndex",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "index",
									"type": "uint256"
								}
							],
							"name": "tokenOfOwnerByIndex",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "tokenURI",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amountMinimum",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								}
							],
							"name": "unwrapWETH9",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						}
					],
					"devdoc": {
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
							},
							"ApprovalForAll(address,address,bool)": {
								"details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
							},
							"Collect(uint256,address,uint256,uint256)": {
								"details": "The amounts reported may not be exactly equivalent to the amounts transferred, due to rounding behavior",
								"params": {
									"amount0": "The amount of token0 owed to the position that was collected",
									"amount1": "The amount of token1 owed to the position that was collected",
									"recipient": "The address of the account that received the collected tokens",
									"tokenId": "The ID of the token for which underlying tokens were collected"
								}
							},
							"DecreaseLiquidity(uint256,uint128,uint256,uint256)": {
								"params": {
									"amount0": "The amount of token0 that was accounted for the decrease in liquidity",
									"amount1": "The amount of token1 that was accounted for the decrease in liquidity",
									"liquidity": "The amount by which liquidity for the NFT position was decreased",
									"tokenId": "The ID of the token for which liquidity was decreased"
								}
							},
							"IncreaseLiquidity(uint256,uint128,uint256,uint256)": {
								"details": "Also emitted when a token is minted",
								"params": {
									"amount0": "The amount of token0 that was paid for the increase in liquidity",
									"amount1": "The amount of token1 that was paid for the increase in liquidity",
									"liquidity": "The amount by which liquidity for the NFT position was increased",
									"tokenId": "The ID of the token for which liquidity was increased"
								}
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `tokenId` token is transferred from `from` to `to`."
							}
						},
						"kind": "dev",
						"methods": {
							"DOMAIN_SEPARATOR()": {
								"returns": {
									"_0": "The domain seperator used in encoding of permit signature"
								}
							},
							"PERMIT_TYPEHASH()": {
								"returns": {
									"_0": "The typehash for the permit"
								}
							},
							"WETH9()": {
								"returns": {
									"_0": "Returns the address of WETH9"
								}
							},
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"burn(uint256)": {
								"params": {
									"tokenId": "The ID of the token that is being burned"
								}
							},
							"collect((uint256,address,uint128,uint128))": {
								"params": {
									"params": "tokenId The ID of the NFT for which tokens are being collected, recipient The account that should receive the tokens, amount0Max The maximum amount of token0 to collect, amount1Max The maximum amount of token1 to collect"
								},
								"returns": {
									"amount0": "The amount of fees collected in token0",
									"amount1": "The amount of fees collected in token1"
								}
							},
							"createAndInitializePoolIfNecessary(address,address,uint24,uint160)": {
								"details": "This method can be bundled with others via IMulticall for the first action (e.g. mint) performed against a pool",
								"params": {
									"fee": "The fee amount of the v3 pool for the specified token pair",
									"sqrtPriceX96": "The initial square root price of the pool as a Q64.96 value",
									"token0": "The contract address of token0 of the pool",
									"token1": "The contract address of token1 of the pool"
								},
								"returns": {
									"pool": "Returns the pool address based on the pair of tokens and fee, will return the newly created pool address if necessary"
								}
							},
							"decreaseLiquidity((uint256,uint128,uint256,uint256,uint256))": {
								"params": {
									"params": "tokenId The ID of the token for which liquidity is being decreased, amount The amount by which liquidity will be decreased, amount0Min The minimum amount of token0 that should be accounted for the burned liquidity, amount1Min The minimum amount of token1 that should be accounted for the burned liquidity, deadline The time by which the transaction must be included to effect the change"
								},
								"returns": {
									"amount0": "The amount of token0 accounted to the position's tokens owed",
									"amount1": "The amount of token1 accounted to the position's tokens owed"
								}
							},
							"factory()": {
								"returns": {
									"_0": "Returns the address of the Uniswap V3 factory"
								}
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"increaseLiquidity((uint256,uint256,uint256,uint256,uint256,uint256))": {
								"params": {
									"params": "tokenId The ID of the token for which liquidity is being increased, amount0Desired The desired amount of token0 to be spent, amount1Desired The desired amount of token1 to be spent, amount0Min The minimum amount of token0 to spend, which serves as a slippage check, amount1Min The minimum amount of token1 to spend, which serves as a slippage check, deadline The time by which the transaction must be included to effect the change"
								},
								"returns": {
									"amount0": "The amount of token0 to acheive resulting liquidity",
									"amount1": "The amount of token1 to acheive resulting liquidity",
									"liquidity": "The new liquidity amount as a result of the increase"
								}
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"mint((address,address,uint24,int24,int24,uint256,uint256,uint256,uint256,address,uint256))": {
								"details": "Call this when the pool does exist and is initialized. Note that if the pool is created but not initialized a method does not exist, i.e. the pool is assumed to be initialized.",
								"params": {
									"params": "The params necessary to mint a position, encoded as `MintParams` in calldata"
								},
								"returns": {
									"amount0": "The amount of token0",
									"amount1": "The amount of token1",
									"liquidity": "The amount of liquidity for this position",
									"tokenId": "The ID of the token that represents the minted position"
								}
							},
							"name()": {
								"details": "Returns the token collection name."
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"permit(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"params": {
									"deadline": "The deadline timestamp by which the call must be mined for the approve to work",
									"r": "Must produce valid secp256k1 signature from the holder along with `v` and `s`",
									"s": "Must produce valid secp256k1 signature from the holder along with `r` and `v`",
									"spender": "The account that is being approved",
									"tokenId": "The ID of the token that is being approved for spending",
									"v": "Must produce valid secp256k1 signature from the holder along with `r` and `s`"
								}
							},
							"positions(uint256)": {
								"details": "Throws if the token ID is not valid.",
								"params": {
									"tokenId": "The ID of the token that represents the position"
								},
								"returns": {
									"fee": "The fee associated with the pool",
									"feeGrowthInside0LastX128": "The fee growth of token0 as of the last action on the individual position",
									"feeGrowthInside1LastX128": "The fee growth of token1 as of the last action on the individual position",
									"liquidity": "The liquidity of the position",
									"nonce": "The nonce for permits",
									"operator": "The address that is approved for spending",
									"tickLower": "The lower end of the tick range for the position",
									"tickUpper": "The higher end of the tick range for the position",
									"token0": "The address of the token0 for a specific pool",
									"token1": "The address of the token1 for a specific pool",
									"tokensOwed0": "The uncollected amount of token0 owed to the position as of the last computation",
									"tokensOwed1": "The uncollected amount of token1 owed to the position as of the last computation"
								}
							},
							"refundETH()": {
								"details": "Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps that use ether for the input amount"
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"sweepToken(address,uint256,address)": {
								"details": "The amountMinimum parameter prevents malicious contracts from stealing the token from users",
								"params": {
									"amountMinimum": "The minimum amount of token required for a transfer",
									"recipient": "The destination address of the token",
									"token": "The contract address of the token which will be transferred to `recipient`"
								}
							},
							"symbol()": {
								"details": "Returns the token collection symbol."
							},
							"tokenByIndex(uint256)": {
								"details": "Returns a token ID at a given `index` of all the tokens stored by the contract. Use along with {totalSupply} to enumerate all tokens."
							},
							"tokenOfOwnerByIndex(address,uint256)": {
								"details": "Returns a token ID owned by `owner` at a given `index` of its token list. Use along with {balanceOf} to enumerate all of ``owner``'s tokens."
							},
							"tokenURI(uint256)": {
								"details": "Returns the Uniform Resource Identifier (URI) for `tokenId` token."
							},
							"totalSupply()": {
								"details": "Returns the total amount of tokens stored by the contract."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							},
							"unwrapWETH9(uint256,address)": {
								"details": "The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.",
								"params": {
									"amountMinimum": "The minimum amount of WETH9 to unwrap",
									"recipient": "The address receiving ETH"
								}
							}
						},
						"title": "Non-fungible token for positions",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"DOMAIN_SEPARATOR()": "3644e515",
							"PERMIT_TYPEHASH()": "30adf81f",
							"WETH9()": "4aa4a4fc",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"burn(uint256)": "42966c68",
							"collect((uint256,address,uint128,uint128))": "fc6f7865",
							"createAndInitializePoolIfNecessary(address,address,uint24,uint160)": "13ead562",
							"decreaseLiquidity((uint256,uint128,uint256,uint256,uint256))": "0c49ccbe",
							"factory()": "c45a0155",
							"getApproved(uint256)": "081812fc",
							"increaseLiquidity((uint256,uint256,uint256,uint256,uint256,uint256))": "219f5d17",
							"isApprovedForAll(address,address)": "e985e9c5",
							"mint((address,address,uint24,int24,int24,uint256,uint256,uint256,uint256,address,uint256))": "88316456",
							"name()": "06fdde03",
							"ownerOf(uint256)": "6352211e",
							"permit(address,uint256,uint256,uint8,bytes32,bytes32)": "7ac2ff7b",
							"positions(uint256)": "99fbab88",
							"refundETH()": "12210e8a",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"sweepToken(address,uint256,address)": "df2ab5bb",
							"symbol()": "95d89b41",
							"tokenByIndex(uint256)": "4f6ccce7",
							"tokenOfOwnerByIndex(address,uint256)": "2f745c59",
							"tokenURI(uint256)": "c87b56dd",
							"totalSupply()": "18160ddd",
							"transferFrom(address,address,uint256)": "23b872dd",
							"unwrapWETH9(uint256,address)": "49404b7c"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Collect\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"DecreaseLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"IncreaseLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH9\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amount0Max\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1Max\",\"type\":\"uint128\"}],\"internalType\":\"struct INonfungiblePositionManager.CollectParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"collect\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"}],\"name\":\"createAndInitializePoolIfNecessary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"amount0Min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct INonfungiblePositionManager.DecreaseLiquidityParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"decreaseLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount0Desired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Desired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount0Min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct INonfungiblePositionManager.IncreaseLiquidityParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"increaseLiquidity\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint256\",\"name\":\"amount0Desired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Desired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount0Min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Min\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct INonfungiblePositionManager.MintParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"positions\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"nonce\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside0LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside1LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed1\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refundETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountMinimum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"sweepToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountMinimum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"unwrapWETH9\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Collect(uint256,address,uint256,uint256)\":{\"details\":\"The amounts reported may not be exactly equivalent to the amounts transferred, due to rounding behavior\",\"params\":{\"amount0\":\"The amount of token0 owed to the position that was collected\",\"amount1\":\"The amount of token1 owed to the position that was collected\",\"recipient\":\"The address of the account that received the collected tokens\",\"tokenId\":\"The ID of the token for which underlying tokens were collected\"}},\"DecreaseLiquidity(uint256,uint128,uint256,uint256)\":{\"params\":{\"amount0\":\"The amount of token0 that was accounted for the decrease in liquidity\",\"amount1\":\"The amount of token1 that was accounted for the decrease in liquidity\",\"liquidity\":\"The amount by which liquidity for the NFT position was decreased\",\"tokenId\":\"The ID of the token for which liquidity was decreased\"}},\"IncreaseLiquidity(uint256,uint128,uint256,uint256)\":{\"details\":\"Also emitted when a token is minted\",\"params\":{\"amount0\":\"The amount of token0 that was paid for the increase in liquidity\",\"amount1\":\"The amount of token1 that was paid for the increase in liquidity\",\"liquidity\":\"The amount by which liquidity for the NFT position was increased\",\"tokenId\":\"The ID of the token for which liquidity was increased\"}},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"returns\":{\"_0\":\"The domain seperator used in encoding of permit signature\"}},\"PERMIT_TYPEHASH()\":{\"returns\":{\"_0\":\"The typehash for the permit\"}},\"WETH9()\":{\"returns\":{\"_0\":\"Returns the address of WETH9\"}},\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"burn(uint256)\":{\"params\":{\"tokenId\":\"The ID of the token that is being burned\"}},\"collect((uint256,address,uint128,uint128))\":{\"params\":{\"params\":\"tokenId The ID of the NFT for which tokens are being collected, recipient The account that should receive the tokens, amount0Max The maximum amount of token0 to collect, amount1Max The maximum amount of token1 to collect\"},\"returns\":{\"amount0\":\"The amount of fees collected in token0\",\"amount1\":\"The amount of fees collected in token1\"}},\"createAndInitializePoolIfNecessary(address,address,uint24,uint160)\":{\"details\":\"This method can be bundled with others via IMulticall for the first action (e.g. mint) performed against a pool\",\"params\":{\"fee\":\"The fee amount of the v3 pool for the specified token pair\",\"sqrtPriceX96\":\"The initial square root price of the pool as a Q64.96 value\",\"token0\":\"The contract address of token0 of the pool\",\"token1\":\"The contract address of token1 of the pool\"},\"returns\":{\"pool\":\"Returns the pool address based on the pair of tokens and fee, will return the newly created pool address if necessary\"}},\"decreaseLiquidity((uint256,uint128,uint256,uint256,uint256))\":{\"params\":{\"params\":\"tokenId The ID of the token for which liquidity is being decreased, amount The amount by which liquidity will be decreased, amount0Min The minimum amount of token0 that should be accounted for the burned liquidity, amount1Min The minimum amount of token1 that should be accounted for the burned liquidity, deadline The time by which the transaction must be included to effect the change\"},\"returns\":{\"amount0\":\"The amount of token0 accounted to the position's tokens owed\",\"amount1\":\"The amount of token1 accounted to the position's tokens owed\"}},\"factory()\":{\"returns\":{\"_0\":\"Returns the address of the Uniswap V3 factory\"}},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"increaseLiquidity((uint256,uint256,uint256,uint256,uint256,uint256))\":{\"params\":{\"params\":\"tokenId The ID of the token for which liquidity is being increased, amount0Desired The desired amount of token0 to be spent, amount1Desired The desired amount of token1 to be spent, amount0Min The minimum amount of token0 to spend, which serves as a slippage check, amount1Min The minimum amount of token1 to spend, which serves as a slippage check, deadline The time by which the transaction must be included to effect the change\"},\"returns\":{\"amount0\":\"The amount of token0 to acheive resulting liquidity\",\"amount1\":\"The amount of token1 to acheive resulting liquidity\",\"liquidity\":\"The new liquidity amount as a result of the increase\"}},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"mint((address,address,uint24,int24,int24,uint256,uint256,uint256,uint256,address,uint256))\":{\"details\":\"Call this when the pool does exist and is initialized. Note that if the pool is created but not initialized a method does not exist, i.e. the pool is assumed to be initialized.\",\"params\":{\"params\":\"The params necessary to mint a position, encoded as `MintParams` in calldata\"},\"returns\":{\"amount0\":\"The amount of token0\",\"amount1\":\"The amount of token1\",\"liquidity\":\"The amount of liquidity for this position\",\"tokenId\":\"The ID of the token that represents the minted position\"}},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"permit(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"deadline\":\"The deadline timestamp by which the call must be mined for the approve to work\",\"r\":\"Must produce valid secp256k1 signature from the holder along with `v` and `s`\",\"s\":\"Must produce valid secp256k1 signature from the holder along with `r` and `v`\",\"spender\":\"The account that is being approved\",\"tokenId\":\"The ID of the token that is being approved for spending\",\"v\":\"Must produce valid secp256k1 signature from the holder along with `r` and `s`\"}},\"positions(uint256)\":{\"details\":\"Throws if the token ID is not valid.\",\"params\":{\"tokenId\":\"The ID of the token that represents the position\"},\"returns\":{\"fee\":\"The fee associated with the pool\",\"feeGrowthInside0LastX128\":\"The fee growth of token0 as of the last action on the individual position\",\"feeGrowthInside1LastX128\":\"The fee growth of token1 as of the last action on the individual position\",\"liquidity\":\"The liquidity of the position\",\"nonce\":\"The nonce for permits\",\"operator\":\"The address that is approved for spending\",\"tickLower\":\"The lower end of the tick range for the position\",\"tickUpper\":\"The higher end of the tick range for the position\",\"token0\":\"The address of the token0 for a specific pool\",\"token1\":\"The address of the token1 for a specific pool\",\"tokensOwed0\":\"The uncollected amount of token0 owed to the position as of the last computation\",\"tokensOwed1\":\"The uncollected amount of token1 owed to the position as of the last computation\"}},\"refundETH()\":{\"details\":\"Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps that use ether for the input amount\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"sweepToken(address,uint256,address)\":{\"details\":\"The amountMinimum parameter prevents malicious contracts from stealing the token from users\",\"params\":{\"amountMinimum\":\"The minimum amount of token required for a transfer\",\"recipient\":\"The destination address of the token\",\"token\":\"The contract address of the token which will be transferred to `recipient`\"}},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenByIndex(uint256)\":{\"details\":\"Returns a token ID at a given `index` of all the tokens stored by the contract. Use along with {totalSupply} to enumerate all tokens.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"Returns a token ID owned by `owner` at a given `index` of its token list. Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"totalSupply()\":{\"details\":\"Returns the total amount of tokens stored by the contract.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"},\"unwrapWETH9(uint256,address)\":{\"details\":\"The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\",\"params\":{\"amountMinimum\":\"The minimum amount of WETH9 to unwrap\",\"recipient\":\"The address receiving ETH\"}}},\"title\":\"Non-fungible token for positions\",\"version\":1},\"userdoc\":{\"events\":{\"Collect(uint256,address,uint256,uint256)\":{\"notice\":\"Emitted when tokens are collected for a position NFT\"},\"DecreaseLiquidity(uint256,uint128,uint256,uint256)\":{\"notice\":\"Emitted when liquidity is decreased for a position NFT\"},\"IncreaseLiquidity(uint256,uint128,uint256,uint256)\":{\"notice\":\"Emitted when liquidity is increased for a position NFT\"}},\"kind\":\"user\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"notice\":\"The domain separator used in the permit signature\"},\"PERMIT_TYPEHASH()\":{\"notice\":\"The permit typehash used in the permit signature\"},\"burn(uint256)\":{\"notice\":\"Burns a token ID, which deletes it from the NFT contract. The token must have 0 liquidity and all tokens must be collected first.\"},\"collect((uint256,address,uint128,uint128))\":{\"notice\":\"Collects up to a maximum amount of fees owed to a specific position to the recipient\"},\"createAndInitializePoolIfNecessary(address,address,uint24,uint160)\":{\"notice\":\"Creates a new pool if it does not exist, then initializes if not initialized\"},\"decreaseLiquidity((uint256,uint128,uint256,uint256,uint256))\":{\"notice\":\"Decreases the amount of liquidity in a position and accounts it to the position\"},\"increaseLiquidity((uint256,uint256,uint256,uint256,uint256,uint256))\":{\"notice\":\"Increases the amount of liquidity in a position, with tokens paid by the `msg.sender`\"},\"mint((address,address,uint24,int24,int24,uint256,uint256,uint256,uint256,address,uint256))\":{\"notice\":\"Creates a new position wrapped in a NFT\"},\"permit(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Approve of a specific token ID for spending by spender via signature\"},\"positions(uint256)\":{\"notice\":\"Returns the position information associated with a given token ID.\"},\"refundETH()\":{\"notice\":\"Refunds any ETH balance held by this contract to the `msg.sender`\"},\"sweepToken(address,uint256,address)\":{\"notice\":\"Transfers the full amount of a token held by this contract to recipient\"},\"unwrapWETH9(uint256,address)\":{\"notice\":\"Unwraps the contract's WETH9 balance and sends it to recipient as ETH.\"}},\"notice\":\"Wraps Uniswap V3 positions in a non-fungible token interface which allows for them to be transferred and authorized.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"interfaces/UniswapV3/INonfungiblePositionManager.sol\":\"INonfungiblePositionManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"interfaces/IERC165.sol\":{\"keccak256\":\"0x7d622aae953af8cc0c42b642ea6bfefc4851d9da99ebf0c11c8a99e1b97dc7ff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ef936c54bf126d59024eaf04e4a15aa3527c52a27e160d5f93185cf2e47db5e8\",\"dweb:/ipfs/QmQS5yZTHRPGXyJbj1RX9JajLueqN3MTQ6SSvAG9iJQ4cV\"]},\"interfaces/IERC721.sol\":{\"keccak256\":\"0x49d5ef5ec866b921e61b9fd74a17160dc7f7396e2a58c3812fa4936ae7655899\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5675c27037dbd9a9d90cf650930c5ed95ee6c62bb8dfcacdc3872eab62ecf50d\",\"dweb:/ipfs/QmYmdBCaUZNiQjc4qnx4avKAWx7QXYiid1nwo76Zq7PdHn\"]},\"interfaces/IERC721Enumerable.sol\":{\"keccak256\":\"0x2928336d6b9bbc64be3a0969fadfc1e4d4b319497651d54851dcb919c1c50590\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://cf5a9f178df915738ce28563818060b15c62249653fa417d9cfde1b04516c31b\",\"dweb:/ipfs/QmfLqHXScsK1t8D2NCAVZa4j7niAqXHjxEHuG77HDUrSdt\"]},\"interfaces/IERC721Metadata.sol\":{\"keccak256\":\"0xd32870e2a6e19ded14c88a471733a51504aaec5e51b61be8f57469cc67440f2b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fe79f6298aa790c064e9aec4ded31cdb32d5de372b3fcda66035a9c6b3780331\",\"dweb:/ipfs/QmWvVNwdFao6264NR63yHgKH4LcYqYjJDq9SZ7GqKVRJFx\"]},\"interfaces/UniswapV3/IERC721Permit.sol\":{\"keccak256\":\"0xf64ceb2b37307fe3b391256ee5745ca4877adc339b56fe71ae9531d7f19be9aa\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://f2ab4e22a3cc4a36cf359f0eb37543a66849d864fa27eabc602f32aeae34667a\",\"dweb:/ipfs/QmU9xKeEre66suCJYxchbivZkGbGygw3jKP9daHKUaYMuN\"]},\"interfaces/UniswapV3/INonfungiblePositionManager.sol\":{\"keccak256\":\"0xf223d560260129efd7a8a794c2193ac1e645a49621ebbe3358a31b551aef8dea\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9aa85f6c28aca3fc982b4b93a753865913f435e8aa9d1d04bd51a8a9e052c1d2\",\"dweb:/ipfs/QmWmyTdJUsHH6VxwL9gooFQAeEMkE396cNgmDG3s6HJYdB\"]},\"interfaces/UniswapV3/IPeripheryImmutableState.sol\":{\"keccak256\":\"0x9d4a239b1324e9cb7ffa202088a2784a3d7c56ea7b47d3a12febec032305e245\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://726ee46aabe0655e684d9b344dcf0844bef491879bdc35499c9ba4c1d9fb75b1\",\"dweb:/ipfs/QmV96KM5eoC73ZdsQkLjw2WjNHk3cqnLtNRSWxAsebKusX\"]},\"interfaces/UniswapV3/IPeripheryPayments.sol\":{\"keccak256\":\"0xedc15d14a5be9ed30744f3f8c0a3e53c3d5478464091330ba9c8acc1ddf9fcb4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2b20d91bc3db69de801f8c8e6dd5b05aa42ebc73690fd9f13316e7bf71405641\",\"dweb:/ipfs/QmQX65rHNiJptDzxXX8bctavSHpYCYuPLoSriJaL2GYyDp\"]},\"interfaces/UniswapV3/IPoolInitializer.sol\":{\"keccak256\":\"0xa54fe96a33c55207b9cf3e4c4d727dc7e0212e645b2c767281b9a9026c2edaf3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d082f8a8e48919d6c920d91351fddc3fd509d0446b1f45f541fdcfa0942a9196\",\"dweb:/ipfs/QmRVaquMHr4mbGBADKii6F9K9mLTtDx7omn7pPaEXJTLMw\"]},\"libraries/PoolAddress.sol\":{\"keccak256\":\"0xda7193f15e5262d61ba1995c1523dda0c00fa89b6b930dee4178849fa7ff8506\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://02924be40064529f8cd7ea8e7f40ffeb8fb1e074d82be0603cf9ec2896f9310e\",\"dweb:/ipfs/QmTj3DLXF3ePVr4DcqhnqYj9vAJ9Ng98Pf3EFkG9LzTFuK\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"events": {
							"Collect(uint256,address,uint256,uint256)": {
								"notice": "Emitted when tokens are collected for a position NFT"
							},
							"DecreaseLiquidity(uint256,uint128,uint256,uint256)": {
								"notice": "Emitted when liquidity is decreased for a position NFT"
							},
							"IncreaseLiquidity(uint256,uint128,uint256,uint256)": {
								"notice": "Emitted when liquidity is increased for a position NFT"
							}
						},
						"kind": "user",
						"methods": {
							"DOMAIN_SEPARATOR()": {
								"notice": "The domain separator used in the permit signature"
							},
							"PERMIT_TYPEHASH()": {
								"notice": "The permit typehash used in the permit signature"
							},
							"burn(uint256)": {
								"notice": "Burns a token ID, which deletes it from the NFT contract. The token must have 0 liquidity and all tokens must be collected first."
							},
							"collect((uint256,address,uint128,uint128))": {
								"notice": "Collects up to a maximum amount of fees owed to a specific position to the recipient"
							},
							"createAndInitializePoolIfNecessary(address,address,uint24,uint160)": {
								"notice": "Creates a new pool if it does not exist, then initializes if not initialized"
							},
							"decreaseLiquidity((uint256,uint128,uint256,uint256,uint256))": {
								"notice": "Decreases the amount of liquidity in a position and accounts it to the position"
							},
							"increaseLiquidity((uint256,uint256,uint256,uint256,uint256,uint256))": {
								"notice": "Increases the amount of liquidity in a position, with tokens paid by the `msg.sender`"
							},
							"mint((address,address,uint24,int24,int24,uint256,uint256,uint256,uint256,address,uint256))": {
								"notice": "Creates a new position wrapped in a NFT"
							},
							"permit(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"notice": "Approve of a specific token ID for spending by spender via signature"
							},
							"positions(uint256)": {
								"notice": "Returns the position information associated with a given token ID."
							},
							"refundETH()": {
								"notice": "Refunds any ETH balance held by this contract to the `msg.sender`"
							},
							"sweepToken(address,uint256,address)": {
								"notice": "Transfers the full amount of a token held by this contract to recipient"
							},
							"unwrapWETH9(uint256,address)": {
								"notice": "Unwraps the contract's WETH9 balance and sends it to recipient as ETH."
							}
						},
						"notice": "Wraps Uniswap V3 positions in a non-fungible token interface which allows for them to be transferred and authorized.",
						"version": 1
					}
				}
			},
			"interfaces/UniswapV3/IPeripheryImmutableState.sol": {
				"IPeripheryImmutableState": {
					"abi": [
						{
							"inputs": [],
							"name": "WETH9",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "factory",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"WETH9()": {
								"returns": {
									"_0": "Returns the address of WETH9"
								}
							},
							"factory()": {
								"returns": {
									"_0": "Returns the address of the Uniswap V3 factory"
								}
							}
						},
						"title": "Immutable state",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"WETH9()": "4aa4a4fc",
							"factory()": "c45a0155"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"WETH9\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"WETH9()\":{\"returns\":{\"_0\":\"Returns the address of WETH9\"}},\"factory()\":{\"returns\":{\"_0\":\"Returns the address of the Uniswap V3 factory\"}}},\"title\":\"Immutable state\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Functions that return immutable state of the router\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"interfaces/UniswapV3/IPeripheryImmutableState.sol\":\"IPeripheryImmutableState\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"interfaces/UniswapV3/IPeripheryImmutableState.sol\":{\"keccak256\":\"0x9d4a239b1324e9cb7ffa202088a2784a3d7c56ea7b47d3a12febec032305e245\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://726ee46aabe0655e684d9b344dcf0844bef491879bdc35499c9ba4c1d9fb75b1\",\"dweb:/ipfs/QmV96KM5eoC73ZdsQkLjw2WjNHk3cqnLtNRSWxAsebKusX\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "Functions that return immutable state of the router",
						"version": 1
					}
				}
			},
			"interfaces/UniswapV3/IPeripheryPayments.sol": {
				"IPeripheryPayments": {
					"abi": [
						{
							"inputs": [],
							"name": "refundETH",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amountMinimum",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								}
							],
							"name": "sweepToken",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amountMinimum",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								}
							],
							"name": "unwrapWETH9",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"refundETH()": {
								"details": "Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps that use ether for the input amount"
							},
							"sweepToken(address,uint256,address)": {
								"details": "The amountMinimum parameter prevents malicious contracts from stealing the token from users",
								"params": {
									"amountMinimum": "The minimum amount of token required for a transfer",
									"recipient": "The destination address of the token",
									"token": "The contract address of the token which will be transferred to `recipient`"
								}
							},
							"unwrapWETH9(uint256,address)": {
								"details": "The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.",
								"params": {
									"amountMinimum": "The minimum amount of WETH9 to unwrap",
									"recipient": "The address receiving ETH"
								}
							}
						},
						"title": "Periphery Payments",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"refundETH()": "12210e8a",
							"sweepToken(address,uint256,address)": "df2ab5bb",
							"unwrapWETH9(uint256,address)": "49404b7c"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"refundETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountMinimum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"sweepToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountMinimum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"unwrapWETH9\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"refundETH()\":{\"details\":\"Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps that use ether for the input amount\"},\"sweepToken(address,uint256,address)\":{\"details\":\"The amountMinimum parameter prevents malicious contracts from stealing the token from users\",\"params\":{\"amountMinimum\":\"The minimum amount of token required for a transfer\",\"recipient\":\"The destination address of the token\",\"token\":\"The contract address of the token which will be transferred to `recipient`\"}},\"unwrapWETH9(uint256,address)\":{\"details\":\"The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\",\"params\":{\"amountMinimum\":\"The minimum amount of WETH9 to unwrap\",\"recipient\":\"The address receiving ETH\"}}},\"title\":\"Periphery Payments\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"refundETH()\":{\"notice\":\"Refunds any ETH balance held by this contract to the `msg.sender`\"},\"sweepToken(address,uint256,address)\":{\"notice\":\"Transfers the full amount of a token held by this contract to recipient\"},\"unwrapWETH9(uint256,address)\":{\"notice\":\"Unwraps the contract's WETH9 balance and sends it to recipient as ETH.\"}},\"notice\":\"Functions to ease deposits and withdrawals of ETH\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"interfaces/UniswapV3/IPeripheryPayments.sol\":\"IPeripheryPayments\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"interfaces/UniswapV3/IPeripheryPayments.sol\":{\"keccak256\":\"0xedc15d14a5be9ed30744f3f8c0a3e53c3d5478464091330ba9c8acc1ddf9fcb4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2b20d91bc3db69de801f8c8e6dd5b05aa42ebc73690fd9f13316e7bf71405641\",\"dweb:/ipfs/QmQX65rHNiJptDzxXX8bctavSHpYCYuPLoSriJaL2GYyDp\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"refundETH()": {
								"notice": "Refunds any ETH balance held by this contract to the `msg.sender`"
							},
							"sweepToken(address,uint256,address)": {
								"notice": "Transfers the full amount of a token held by this contract to recipient"
							},
							"unwrapWETH9(uint256,address)": {
								"notice": "Unwraps the contract's WETH9 balance and sends it to recipient as ETH."
							}
						},
						"notice": "Functions to ease deposits and withdrawals of ETH",
						"version": 1
					}
				}
			},
			"interfaces/UniswapV3/IPoolInitializer.sol": {
				"IPoolInitializer": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token0",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "token1",
									"type": "address"
								},
								{
									"internalType": "uint24",
									"name": "fee",
									"type": "uint24"
								},
								{
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								}
							],
							"name": "createAndInitializePoolIfNecessary",
							"outputs": [
								{
									"internalType": "address",
									"name": "pool",
									"type": "address"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"createAndInitializePoolIfNecessary(address,address,uint24,uint160)": {
								"details": "This method can be bundled with others via IMulticall for the first action (e.g. mint) performed against a pool",
								"params": {
									"fee": "The fee amount of the v3 pool for the specified token pair",
									"sqrtPriceX96": "The initial square root price of the pool as a Q64.96 value",
									"token0": "The contract address of token0 of the pool",
									"token1": "The contract address of token1 of the pool"
								},
								"returns": {
									"pool": "Returns the pool address based on the pair of tokens and fee, will return the newly created pool address if necessary"
								}
							}
						},
						"title": "Creates and initializes V3 Pools",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"createAndInitializePoolIfNecessary(address,address,uint24,uint160)": "13ead562"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"}],\"name\":\"createAndInitializePoolIfNecessary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"createAndInitializePoolIfNecessary(address,address,uint24,uint160)\":{\"details\":\"This method can be bundled with others via IMulticall for the first action (e.g. mint) performed against a pool\",\"params\":{\"fee\":\"The fee amount of the v3 pool for the specified token pair\",\"sqrtPriceX96\":\"The initial square root price of the pool as a Q64.96 value\",\"token0\":\"The contract address of token0 of the pool\",\"token1\":\"The contract address of token1 of the pool\"},\"returns\":{\"pool\":\"Returns the pool address based on the pair of tokens and fee, will return the newly created pool address if necessary\"}}},\"title\":\"Creates and initializes V3 Pools\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createAndInitializePoolIfNecessary(address,address,uint24,uint160)\":{\"notice\":\"Creates a new pool if it does not exist, then initializes if not initialized\"}},\"notice\":\"Provides a method for creating and initializing a pool, if necessary, for bundling with other methods that require the pool to exist.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"interfaces/UniswapV3/IPoolInitializer.sol\":\"IPoolInitializer\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"interfaces/UniswapV3/IPoolInitializer.sol\":{\"keccak256\":\"0xa54fe96a33c55207b9cf3e4c4d727dc7e0212e645b2c767281b9a9026c2edaf3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d082f8a8e48919d6c920d91351fddc3fd509d0446b1f45f541fdcfa0942a9196\",\"dweb:/ipfs/QmRVaquMHr4mbGBADKii6F9K9mLTtDx7omn7pPaEXJTLMw\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"createAndInitializePoolIfNecessary(address,address,uint24,uint160)": {
								"notice": "Creates a new pool if it does not exist, then initializes if not initialized"
							}
						},
						"notice": "Provides a method for creating and initializing a pool, if necessary, for bundling with other methods that require the pool to exist.",
						"version": 1
					}
				}
			},
			"libraries/Address.sol": {
				"Address": {
					"abi": [],
					"devdoc": {
						"details": "Collection of functions related to the address type",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"libraries/Address.sol\":203:9607  library Address {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"libraries/Address.sol\":203:9607  library Address {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212208aba8ab5b1d0934d275ed6c96d12d871cbed0cc8c01112f7677f382abfe17e0e64736f6c63430008130033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212208aba8ab5b1d0934d275ed6c96d12d871cbed0cc8c01112f7677f382abfe17e0e64736f6c63430008130033",
							"opcodes": "PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP11 0xBA DUP11 0xB5 0xB1 0xD0 SWAP4 0x4D 0x27 0x5E 0xD6 0xC9 PUSH14 0x12D871CBED0CC8C01112F7677F38 0x2A 0xBF 0xE1 PUSH31 0xE64736F6C6343000813003300000000000000000000000000000000000000 ",
							"sourceMap": "203:9404:16:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212208aba8ab5b1d0934d275ed6c96d12d871cbed0cc8c01112f7677f382abfe17e0e64736f6c63430008130033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP11 0xBA DUP11 0xB5 0xB1 0xD0 SWAP4 0x4D 0x27 0x5E 0xD6 0xC9 PUSH14 0x12D871CBED0CC8C01112F7677F38 0x2A 0xBF 0xE1 PUSH31 0xE64736F6C6343000813003300000000000000000000000000000000000000 ",
							"sourceMap": "203:9404:16:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"_revert(bytes memory,string memory)": "infinite",
								"functionCall(address,bytes memory)": "infinite",
								"functionCall(address,bytes memory,string memory)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256,string memory)": "infinite",
								"functionDelegateCall(address,bytes memory)": "infinite",
								"functionDelegateCall(address,bytes memory,string memory)": "infinite",
								"functionStaticCall(address,bytes memory)": "infinite",
								"functionStaticCall(address,bytes memory,string memory)": "infinite",
								"isContract(address)": "infinite",
								"sendValue(address payable,uint256)": "infinite",
								"verifyCallResult(bool,bytes memory,string memory)": "infinite",
								"verifyCallResultFromTarget(address,bool,bytes memory,string memory)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 203,
									"end": 9607,
									"name": "PUSH #[$]",
									"source": 16,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 203,
									"end": 9607,
									"name": "PUSH [$]",
									"source": 16,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 203,
									"end": 9607,
									"name": "PUSH",
									"source": 16,
									"value": "B"
								},
								{
									"begin": 203,
									"end": 9607,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 203,
									"end": 9607,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 203,
									"end": 9607,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 203,
									"end": 9607,
									"name": "CODECOPY",
									"source": 16
								},
								{
									"begin": 203,
									"end": 9607,
									"name": "DUP1",
									"source": 16
								},
								{
									"begin": 203,
									"end": 9607,
									"name": "MLOAD",
									"source": 16
								},
								{
									"begin": 203,
									"end": 9607,
									"name": "PUSH",
									"source": 16,
									"value": "0"
								},
								{
									"begin": 203,
									"end": 9607,
									"name": "BYTE",
									"source": 16
								},
								{
									"begin": 203,
									"end": 9607,
									"name": "PUSH",
									"source": 16,
									"value": "73"
								},
								{
									"begin": 203,
									"end": 9607,
									"name": "EQ",
									"source": 16
								},
								{
									"begin": 203,
									"end": 9607,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "1"
								},
								{
									"begin": 203,
									"end": 9607,
									"name": "JUMPI",
									"source": 16
								},
								{
									"begin": 203,
									"end": 9607,
									"name": "PUSH",
									"source": 16,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 203,
									"end": 9607,
									"name": "PUSH",
									"source": 16,
									"value": "0"
								},
								{
									"begin": 203,
									"end": 9607,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 203,
									"end": 9607,
									"name": "PUSH",
									"source": 16,
									"value": "0"
								},
								{
									"begin": 203,
									"end": 9607,
									"name": "PUSH",
									"source": 16,
									"value": "4"
								},
								{
									"begin": 203,
									"end": 9607,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 203,
									"end": 9607,
									"name": "PUSH",
									"source": 16,
									"value": "24"
								},
								{
									"begin": 203,
									"end": 9607,
									"name": "PUSH",
									"source": 16,
									"value": "0"
								},
								{
									"begin": 203,
									"end": 9607,
									"name": "REVERT",
									"source": 16
								},
								{
									"begin": 203,
									"end": 9607,
									"name": "tag",
									"source": 16,
									"value": "1"
								},
								{
									"begin": 203,
									"end": 9607,
									"name": "JUMPDEST",
									"source": 16
								},
								{
									"begin": 203,
									"end": 9607,
									"name": "ADDRESS",
									"source": 16
								},
								{
									"begin": 203,
									"end": 9607,
									"name": "PUSH",
									"source": 16,
									"value": "0"
								},
								{
									"begin": 203,
									"end": 9607,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 203,
									"end": 9607,
									"name": "PUSH",
									"source": 16,
									"value": "73"
								},
								{
									"begin": 203,
									"end": 9607,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 203,
									"end": 9607,
									"name": "MSTORE8",
									"source": 16
								},
								{
									"begin": 203,
									"end": 9607,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 203,
									"end": 9607,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 203,
									"end": 9607,
									"name": "RETURN",
									"source": 16
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212208aba8ab5b1d0934d275ed6c96d12d871cbed0cc8c01112f7677f382abfe17e0e64736f6c63430008130033",
									".code": [
										{
											"begin": 203,
											"end": 9607,
											"name": "PUSHDEPLOYADDRESS",
											"source": 16
										},
										{
											"begin": 203,
											"end": 9607,
											"name": "ADDRESS",
											"source": 16
										},
										{
											"begin": 203,
											"end": 9607,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 203,
											"end": 9607,
											"name": "PUSH",
											"source": 16,
											"value": "80"
										},
										{
											"begin": 203,
											"end": 9607,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 203,
											"end": 9607,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 203,
											"end": 9607,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 203,
											"end": 9607,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 203,
											"end": 9607,
											"name": "REVERT",
											"source": 16
										}
									]
								}
							},
							"sourceList": [
								"contracts/TimeMarket.sol",
								"interfaces/IERC165.sol",
								"interfaces/IERC20.sol",
								"interfaces/IERC20Permit.sol",
								"interfaces/IERC721.sol",
								"interfaces/IERC721Enumerable.sol",
								"interfaces/IERC721Metadata.sol",
								"interfaces/IERC721Receiver.sol",
								"interfaces/IError.sol",
								"interfaces/ITimeStruct.sol",
								"interfaces/IUniswapV3Factory.sol",
								"interfaces/UniswapV3/IERC721Permit.sol",
								"interfaces/UniswapV3/INonfungiblePositionManager.sol",
								"interfaces/UniswapV3/IPeripheryImmutableState.sol",
								"interfaces/UniswapV3/IPeripheryPayments.sol",
								"interfaces/UniswapV3/IPoolInitializer.sol",
								"libraries/Address.sol",
								"libraries/PoolAddress.sol",
								"libraries/SafeERC20.sol",
								"libraries/TimeFee.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"libraries/Address.sol\":\"Address\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"libraries/Address.sol\":{\"keccak256\":\"0x0f4169fea1817f1228f6a2db5e764e2a86f357a9f42f83de1f157449bca0f1ad\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://244a3f17ec48680bfaadacf724e5b12030636dc8b3e59f01de1cf206f0802ad7\",\"dweb:/ipfs/QmZXNxyUx2vm7LjcwtNhwYyKgqVxmbMAM3cG5bricBmL1K\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"libraries/PoolAddress.sol": {
				"PoolAddress": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"title": "Provides functions for deriving a pool address from the factory, tokens, and the fee",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"libraries/PoolAddress.sol\":171:1863  library PoolAddress {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"libraries/PoolAddress.sol\":171:1863  library PoolAddress {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212209e03e37564e324b6cfe327ef3d504cdfdcd917267a083cea54f400f770dc03e564736f6c63430008130033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212209e03e37564e324b6cfe327ef3d504cdfdcd917267a083cea54f400f770dc03e564736f6c63430008130033",
							"opcodes": "PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP15 SUB 0xE3 PUSH22 0x64E324B6CFE327EF3D504CDFDCD917267A083CEA54F4 STOP 0xF7 PUSH17 0xDC03E564736F6C63430008130033000000 ",
							"sourceMap": "171:1692:17:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212209e03e37564e324b6cfe327ef3d504cdfdcd917267a083cea54f400f770dc03e564736f6c63430008130033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP15 SUB 0xE3 PUSH22 0x64E324B6CFE327EF3D504CDFDCD917267A083CEA54F4 STOP 0xF7 PUSH17 0xDC03E564736F6C63430008130033000000 ",
							"sourceMap": "171:1692:17:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"computeAddress(address,struct PoolAddress.PoolKey memory)": "infinite",
								"getPoolKey(address,address,uint24)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 171,
									"end": 1863,
									"name": "PUSH #[$]",
									"source": 17,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 171,
									"end": 1863,
									"name": "PUSH [$]",
									"source": 17,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 171,
									"end": 1863,
									"name": "PUSH",
									"source": 17,
									"value": "B"
								},
								{
									"begin": 171,
									"end": 1863,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 171,
									"end": 1863,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 171,
									"end": 1863,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 171,
									"end": 1863,
									"name": "CODECOPY",
									"source": 17
								},
								{
									"begin": 171,
									"end": 1863,
									"name": "DUP1",
									"source": 17
								},
								{
									"begin": 171,
									"end": 1863,
									"name": "MLOAD",
									"source": 17
								},
								{
									"begin": 171,
									"end": 1863,
									"name": "PUSH",
									"source": 17,
									"value": "0"
								},
								{
									"begin": 171,
									"end": 1863,
									"name": "BYTE",
									"source": 17
								},
								{
									"begin": 171,
									"end": 1863,
									"name": "PUSH",
									"source": 17,
									"value": "73"
								},
								{
									"begin": 171,
									"end": 1863,
									"name": "EQ",
									"source": 17
								},
								{
									"begin": 171,
									"end": 1863,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "1"
								},
								{
									"begin": 171,
									"end": 1863,
									"name": "JUMPI",
									"source": 17
								},
								{
									"begin": 171,
									"end": 1863,
									"name": "PUSH",
									"source": 17,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 171,
									"end": 1863,
									"name": "PUSH",
									"source": 17,
									"value": "0"
								},
								{
									"begin": 171,
									"end": 1863,
									"name": "MSTORE",
									"source": 17
								},
								{
									"begin": 171,
									"end": 1863,
									"name": "PUSH",
									"source": 17,
									"value": "0"
								},
								{
									"begin": 171,
									"end": 1863,
									"name": "PUSH",
									"source": 17,
									"value": "4"
								},
								{
									"begin": 171,
									"end": 1863,
									"name": "MSTORE",
									"source": 17
								},
								{
									"begin": 171,
									"end": 1863,
									"name": "PUSH",
									"source": 17,
									"value": "24"
								},
								{
									"begin": 171,
									"end": 1863,
									"name": "PUSH",
									"source": 17,
									"value": "0"
								},
								{
									"begin": 171,
									"end": 1863,
									"name": "REVERT",
									"source": 17
								},
								{
									"begin": 171,
									"end": 1863,
									"name": "tag",
									"source": 17,
									"value": "1"
								},
								{
									"begin": 171,
									"end": 1863,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 171,
									"end": 1863,
									"name": "ADDRESS",
									"source": 17
								},
								{
									"begin": 171,
									"end": 1863,
									"name": "PUSH",
									"source": 17,
									"value": "0"
								},
								{
									"begin": 171,
									"end": 1863,
									"name": "MSTORE",
									"source": 17
								},
								{
									"begin": 171,
									"end": 1863,
									"name": "PUSH",
									"source": 17,
									"value": "73"
								},
								{
									"begin": 171,
									"end": 1863,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 171,
									"end": 1863,
									"name": "MSTORE8",
									"source": 17
								},
								{
									"begin": 171,
									"end": 1863,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 171,
									"end": 1863,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 171,
									"end": 1863,
									"name": "RETURN",
									"source": 17
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212209e03e37564e324b6cfe327ef3d504cdfdcd917267a083cea54f400f770dc03e564736f6c63430008130033",
									".code": [
										{
											"begin": 171,
											"end": 1863,
											"name": "PUSHDEPLOYADDRESS",
											"source": 17
										},
										{
											"begin": 171,
											"end": 1863,
											"name": "ADDRESS",
											"source": 17
										},
										{
											"begin": 171,
											"end": 1863,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 171,
											"end": 1863,
											"name": "PUSH",
											"source": 17,
											"value": "80"
										},
										{
											"begin": 171,
											"end": 1863,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 171,
											"end": 1863,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 171,
											"end": 1863,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 171,
											"end": 1863,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 171,
											"end": 1863,
											"name": "REVERT",
											"source": 17
										}
									]
								}
							},
							"sourceList": [
								"contracts/TimeMarket.sol",
								"interfaces/IERC165.sol",
								"interfaces/IERC20.sol",
								"interfaces/IERC20Permit.sol",
								"interfaces/IERC721.sol",
								"interfaces/IERC721Enumerable.sol",
								"interfaces/IERC721Metadata.sol",
								"interfaces/IERC721Receiver.sol",
								"interfaces/IError.sol",
								"interfaces/ITimeStruct.sol",
								"interfaces/IUniswapV3Factory.sol",
								"interfaces/UniswapV3/IERC721Permit.sol",
								"interfaces/UniswapV3/INonfungiblePositionManager.sol",
								"interfaces/UniswapV3/IPeripheryImmutableState.sol",
								"interfaces/UniswapV3/IPeripheryPayments.sol",
								"interfaces/UniswapV3/IPoolInitializer.sol",
								"libraries/Address.sol",
								"libraries/PoolAddress.sol",
								"libraries/SafeERC20.sol",
								"libraries/TimeFee.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"Provides functions for deriving a pool address from the factory, tokens, and the fee\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"libraries/PoolAddress.sol\":\"PoolAddress\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"libraries/PoolAddress.sol\":{\"keccak256\":\"0xda7193f15e5262d61ba1995c1523dda0c00fa89b6b930dee4178849fa7ff8506\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://02924be40064529f8cd7ea8e7f40ffeb8fb1e074d82be0603cf9ec2896f9310e\",\"dweb:/ipfs/QmTj3DLXF3ePVr4DcqhnqYj9vAJ9Ng98Pf3EFkG9LzTFuK\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"libraries/SafeERC20.sol": {
				"SafeERC20": {
					"abi": [],
					"devdoc": {
						"details": "Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.",
						"kind": "dev",
						"methods": {},
						"title": "SafeERC20",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"libraries/SafeERC20.sol\":778:7136  library SafeERC20 {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"libraries/SafeERC20.sol\":778:7136  library SafeERC20 {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220cfc1a177b08d92ef6e409df06efba5d08548ab6dea2783bf77aa4be603199f3364736f6c63430008130033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220cfc1a177b08d92ef6e409df06efba5d08548ab6dea2783bf77aa4be603199f3364736f6c63430008130033",
							"opcodes": "PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCF 0xC1 LOG1 PUSH24 0xB08D92EF6E409DF06EFBA5D08548AB6DEA2783BF77AA4BE6 SUB NOT SWAP16 CALLER PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ",
							"sourceMap": "778:6358:18:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220cfc1a177b08d92ef6e409df06efba5d08548ab6dea2783bf77aa4be603199f3364736f6c63430008130033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCF 0xC1 LOG1 PUSH24 0xB08D92EF6E409DF06EFBA5D08548AB6DEA2783BF77AA4BE6 SUB NOT SWAP16 CALLER PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ",
							"sourceMap": "778:6358:18:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"_callOptionalReturn(contract IERC20,bytes memory)": "infinite",
								"_callOptionalReturnBool(contract IERC20,bytes memory)": "infinite",
								"forceApprove(contract IERC20,address,uint256)": "infinite",
								"safeApprove(contract IERC20,address,uint256)": "infinite",
								"safeDecreaseAllowance(contract IERC20,address,uint256)": "infinite",
								"safeIncreaseAllowance(contract IERC20,address,uint256)": "infinite",
								"safePermit(contract IERC20Permit,address,address,uint256,uint256,uint8,bytes32,bytes32)": "infinite",
								"safeTransfer(contract IERC20,address,uint256)": "infinite",
								"safeTransferFrom(contract IERC20,address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 778,
									"end": 7136,
									"name": "PUSH #[$]",
									"source": 18,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 778,
									"end": 7136,
									"name": "PUSH [$]",
									"source": 18,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 778,
									"end": 7136,
									"name": "PUSH",
									"source": 18,
									"value": "B"
								},
								{
									"begin": 778,
									"end": 7136,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 778,
									"end": 7136,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 778,
									"end": 7136,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 778,
									"end": 7136,
									"name": "CODECOPY",
									"source": 18
								},
								{
									"begin": 778,
									"end": 7136,
									"name": "DUP1",
									"source": 18
								},
								{
									"begin": 778,
									"end": 7136,
									"name": "MLOAD",
									"source": 18
								},
								{
									"begin": 778,
									"end": 7136,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 778,
									"end": 7136,
									"name": "BYTE",
									"source": 18
								},
								{
									"begin": 778,
									"end": 7136,
									"name": "PUSH",
									"source": 18,
									"value": "73"
								},
								{
									"begin": 778,
									"end": 7136,
									"name": "EQ",
									"source": 18
								},
								{
									"begin": 778,
									"end": 7136,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "1"
								},
								{
									"begin": 778,
									"end": 7136,
									"name": "JUMPI",
									"source": 18
								},
								{
									"begin": 778,
									"end": 7136,
									"name": "PUSH",
									"source": 18,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 778,
									"end": 7136,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 778,
									"end": 7136,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 778,
									"end": 7136,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 778,
									"end": 7136,
									"name": "PUSH",
									"source": 18,
									"value": "4"
								},
								{
									"begin": 778,
									"end": 7136,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 778,
									"end": 7136,
									"name": "PUSH",
									"source": 18,
									"value": "24"
								},
								{
									"begin": 778,
									"end": 7136,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 778,
									"end": 7136,
									"name": "REVERT",
									"source": 18
								},
								{
									"begin": 778,
									"end": 7136,
									"name": "tag",
									"source": 18,
									"value": "1"
								},
								{
									"begin": 778,
									"end": 7136,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 778,
									"end": 7136,
									"name": "ADDRESS",
									"source": 18
								},
								{
									"begin": 778,
									"end": 7136,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 778,
									"end": 7136,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 778,
									"end": 7136,
									"name": "PUSH",
									"source": 18,
									"value": "73"
								},
								{
									"begin": 778,
									"end": 7136,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 778,
									"end": 7136,
									"name": "MSTORE8",
									"source": 18
								},
								{
									"begin": 778,
									"end": 7136,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 778,
									"end": 7136,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 778,
									"end": 7136,
									"name": "RETURN",
									"source": 18
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220cfc1a177b08d92ef6e409df06efba5d08548ab6dea2783bf77aa4be603199f3364736f6c63430008130033",
									".code": [
										{
											"begin": 778,
											"end": 7136,
											"name": "PUSHDEPLOYADDRESS",
											"source": 18
										},
										{
											"begin": 778,
											"end": 7136,
											"name": "ADDRESS",
											"source": 18
										},
										{
											"begin": 778,
											"end": 7136,
											"name": "EQ",
											"source": 18
										},
										{
											"begin": 778,
											"end": 7136,
											"name": "PUSH",
											"source": 18,
											"value": "80"
										},
										{
											"begin": 778,
											"end": 7136,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 778,
											"end": 7136,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 778,
											"end": 7136,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 778,
											"end": 7136,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 778,
											"end": 7136,
											"name": "REVERT",
											"source": 18
										}
									]
								}
							},
							"sourceList": [
								"contracts/TimeMarket.sol",
								"interfaces/IERC165.sol",
								"interfaces/IERC20.sol",
								"interfaces/IERC20Permit.sol",
								"interfaces/IERC721.sol",
								"interfaces/IERC721Enumerable.sol",
								"interfaces/IERC721Metadata.sol",
								"interfaces/IERC721Receiver.sol",
								"interfaces/IError.sol",
								"interfaces/ITimeStruct.sol",
								"interfaces/IUniswapV3Factory.sol",
								"interfaces/UniswapV3/IERC721Permit.sol",
								"interfaces/UniswapV3/INonfungiblePositionManager.sol",
								"interfaces/UniswapV3/IPeripheryImmutableState.sol",
								"interfaces/UniswapV3/IPeripheryPayments.sol",
								"interfaces/UniswapV3/IPoolInitializer.sol",
								"libraries/Address.sol",
								"libraries/PoolAddress.sol",
								"libraries/SafeERC20.sol",
								"libraries/TimeFee.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"libraries/SafeERC20.sol\":\"SafeERC20\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"interfaces/IERC20.sol\":{\"keccak256\":\"0xa426add89e9b4785ddeeb07b4d9352b57de8b4cb314c8cb8f0d5898938bd8de9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://09852a830ad29d33cfdf74e7035853c68e43e1a8c242b25db9d656a074a54e6d\",\"dweb:/ipfs/QmeRSfQwWr3vyP2uJxnjybtPYLMiD17E51d4eMhXQh93R1\"]},\"interfaces/IERC20Permit.sol\":{\"keccak256\":\"0xc51a927b9d9ff62cf4c237f7f197827b90c460786c855c527007c02a94f23154\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d1107bf21355e8518d9fdcf1aa7052de7e5fc6d867d86d87b61b43667813cc1d\",\"dweb:/ipfs/QmZG3AQa61MLFWmovNyuzv3iCBPnFHGV7E7CimxLwpAwKt\"]},\"libraries/Address.sol\":{\"keccak256\":\"0x0f4169fea1817f1228f6a2db5e764e2a86f357a9f42f83de1f157449bca0f1ad\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://244a3f17ec48680bfaadacf724e5b12030636dc8b3e59f01de1cf206f0802ad7\",\"dweb:/ipfs/QmZXNxyUx2vm7LjcwtNhwYyKgqVxmbMAM3cG5bricBmL1K\"]},\"libraries/SafeERC20.sol\":{\"keccak256\":\"0xe74183ce288c892718941897cf193167013ef062470ea7fc7f0e74c23521cdd1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://75be313f96388535ff46fc29a55ed358e24e887c5706ea595ef2ed95c1d58e03\",\"dweb:/ipfs/QmReMXbvdgk5wZtn3mrjsDGLKFzfbBxG6HJBELLsaAKXkS\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"libraries/TimeFee.sol": {
				"TimeFee": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"libraries/TimeFee.sol\":59:683  library TimeFee{... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"libraries/TimeFee.sol\":59:683  library TimeFee{... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220b643603d3f61444de72c4d2a3656381586395d096189df0b0226cf24510006f764736f6c63430008130033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220b643603d3f61444de72c4d2a3656381586395d096189df0b0226cf24510006f764736f6c63430008130033",
							"opcodes": "PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB6 NUMBER PUSH1 0x3D EXTCODEHASH PUSH2 0x444D 0xE7 0x2C 0x4D 0x2A CALLDATASIZE JUMP CODESIZE ISZERO DUP7 CODECOPY 0x5D MULMOD PUSH2 0x89DF SIGNEXTEND MUL 0x26 0xCF 0x24 MLOAD STOP MOD 0xF7 PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ",
							"sourceMap": "59:624:19:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220b643603d3f61444de72c4d2a3656381586395d096189df0b0226cf24510006f764736f6c63430008130033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB6 NUMBER PUSH1 0x3D EXTCODEHASH PUSH2 0x444D 0xE7 0x2C 0x4D 0x2A CALLDATASIZE JUMP CODESIZE ISZERO DUP7 CODECOPY 0x5D MULMOD PUSH2 0x89DF SIGNEXTEND MUL 0x26 0xCF 0x24 MLOAD STOP MOD 0xF7 PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ",
							"sourceMap": "59:624:19:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"fee(uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 59,
									"end": 683,
									"name": "PUSH #[$]",
									"source": 19,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 59,
									"end": 683,
									"name": "PUSH [$]",
									"source": 19,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 59,
									"end": 683,
									"name": "PUSH",
									"source": 19,
									"value": "B"
								},
								{
									"begin": 59,
									"end": 683,
									"name": "DUP3",
									"source": 19
								},
								{
									"begin": 59,
									"end": 683,
									"name": "DUP3",
									"source": 19
								},
								{
									"begin": 59,
									"end": 683,
									"name": "DUP3",
									"source": 19
								},
								{
									"begin": 59,
									"end": 683,
									"name": "CODECOPY",
									"source": 19
								},
								{
									"begin": 59,
									"end": 683,
									"name": "DUP1",
									"source": 19
								},
								{
									"begin": 59,
									"end": 683,
									"name": "MLOAD",
									"source": 19
								},
								{
									"begin": 59,
									"end": 683,
									"name": "PUSH",
									"source": 19,
									"value": "0"
								},
								{
									"begin": 59,
									"end": 683,
									"name": "BYTE",
									"source": 19
								},
								{
									"begin": 59,
									"end": 683,
									"name": "PUSH",
									"source": 19,
									"value": "73"
								},
								{
									"begin": 59,
									"end": 683,
									"name": "EQ",
									"source": 19
								},
								{
									"begin": 59,
									"end": 683,
									"name": "PUSH [tag]",
									"source": 19,
									"value": "1"
								},
								{
									"begin": 59,
									"end": 683,
									"name": "JUMPI",
									"source": 19
								},
								{
									"begin": 59,
									"end": 683,
									"name": "PUSH",
									"source": 19,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 59,
									"end": 683,
									"name": "PUSH",
									"source": 19,
									"value": "0"
								},
								{
									"begin": 59,
									"end": 683,
									"name": "MSTORE",
									"source": 19
								},
								{
									"begin": 59,
									"end": 683,
									"name": "PUSH",
									"source": 19,
									"value": "0"
								},
								{
									"begin": 59,
									"end": 683,
									"name": "PUSH",
									"source": 19,
									"value": "4"
								},
								{
									"begin": 59,
									"end": 683,
									"name": "MSTORE",
									"source": 19
								},
								{
									"begin": 59,
									"end": 683,
									"name": "PUSH",
									"source": 19,
									"value": "24"
								},
								{
									"begin": 59,
									"end": 683,
									"name": "PUSH",
									"source": 19,
									"value": "0"
								},
								{
									"begin": 59,
									"end": 683,
									"name": "REVERT",
									"source": 19
								},
								{
									"begin": 59,
									"end": 683,
									"name": "tag",
									"source": 19,
									"value": "1"
								},
								{
									"begin": 59,
									"end": 683,
									"name": "JUMPDEST",
									"source": 19
								},
								{
									"begin": 59,
									"end": 683,
									"name": "ADDRESS",
									"source": 19
								},
								{
									"begin": 59,
									"end": 683,
									"name": "PUSH",
									"source": 19,
									"value": "0"
								},
								{
									"begin": 59,
									"end": 683,
									"name": "MSTORE",
									"source": 19
								},
								{
									"begin": 59,
									"end": 683,
									"name": "PUSH",
									"source": 19,
									"value": "73"
								},
								{
									"begin": 59,
									"end": 683,
									"name": "DUP2",
									"source": 19
								},
								{
									"begin": 59,
									"end": 683,
									"name": "MSTORE8",
									"source": 19
								},
								{
									"begin": 59,
									"end": 683,
									"name": "DUP3",
									"source": 19
								},
								{
									"begin": 59,
									"end": 683,
									"name": "DUP2",
									"source": 19
								},
								{
									"begin": 59,
									"end": 683,
									"name": "RETURN",
									"source": 19
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220b643603d3f61444de72c4d2a3656381586395d096189df0b0226cf24510006f764736f6c63430008130033",
									".code": [
										{
											"begin": 59,
											"end": 683,
											"name": "PUSHDEPLOYADDRESS",
											"source": 19
										},
										{
											"begin": 59,
											"end": 683,
											"name": "ADDRESS",
											"source": 19
										},
										{
											"begin": 59,
											"end": 683,
											"name": "EQ",
											"source": 19
										},
										{
											"begin": 59,
											"end": 683,
											"name": "PUSH",
											"source": 19,
											"value": "80"
										},
										{
											"begin": 59,
											"end": 683,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 59,
											"end": 683,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 59,
											"end": 683,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 59,
											"end": 683,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 59,
											"end": 683,
											"name": "REVERT",
											"source": 19
										}
									]
								}
							},
							"sourceList": [
								"contracts/TimeMarket.sol",
								"interfaces/IERC165.sol",
								"interfaces/IERC20.sol",
								"interfaces/IERC20Permit.sol",
								"interfaces/IERC721.sol",
								"interfaces/IERC721Enumerable.sol",
								"interfaces/IERC721Metadata.sol",
								"interfaces/IERC721Receiver.sol",
								"interfaces/IError.sol",
								"interfaces/ITimeStruct.sol",
								"interfaces/IUniswapV3Factory.sol",
								"interfaces/UniswapV3/IERC721Permit.sol",
								"interfaces/UniswapV3/INonfungiblePositionManager.sol",
								"interfaces/UniswapV3/IPeripheryImmutableState.sol",
								"interfaces/UniswapV3/IPeripheryPayments.sol",
								"interfaces/UniswapV3/IPoolInitializer.sol",
								"libraries/Address.sol",
								"libraries/PoolAddress.sol",
								"libraries/SafeERC20.sol",
								"libraries/TimeFee.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"libraries/TimeFee.sol\":\"TimeFee\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"libraries/TimeFee.sol\":{\"keccak256\":\"0x263efba43eaec339f5385a6c25158219d00edce75157d7cd759f3032725fcc79\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bcb2fee6d1fa020c5a58f9de9dace4b0c09339c784b1b7888ef78ffd52faa7c0\",\"dweb:/ipfs/QmVjYwXXg8QyvTh1dyTWp41qjyrajaqyXuATtMJqN4SRF7\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"contracts/TimeMarket.sol": {
				"ast": {
					"absolutePath": "contracts/TimeMarket.sol",
					"exportedSymbols": {
						"Address": [
							1886
						],
						"IERC165": [
							838
						],
						"IERC20": [
							916
						],
						"IERC20Permit": [
							952
						],
						"IERC721": [
							1069
						],
						"IERC721Enumerable": [
							1100
						],
						"IERC721Metadata": [
							1127
						],
						"IERC721Permit": [
							1296
						],
						"IERC721Receiver": [
							1145
						],
						"IError": [
							1158
						],
						"INonfungiblePositionManager": [
							1495
						],
						"IPeripheryImmutableState": [
							1511
						],
						"IPeripheryPayments": [
							1537
						],
						"IPoolInitializer": [
							1556
						],
						"ITimeStruct": [
							1178
						],
						"IUniswapV3Factory": [
							1261
						],
						"PoolAddress": [
							1986
						],
						"SafeERC20": [
							2365
						],
						"TimeFee": [
							2414
						],
						"TimeMarket": [
							826
						]
					},
					"id": 827,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".9"
							],
							"nodeType": "PragmaDirective",
							"src": "31:23:0"
						},
						{
							"id": 2,
							"literals": [
								"abicoder",
								"v2"
							],
							"nodeType": "PragmaDirective",
							"src": "56:19:0"
						},
						{
							"absolutePath": "libraries/SafeERC20.sol",
							"file": "../libraries/SafeERC20.sol",
							"id": 3,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 827,
							"sourceUnit": 2366,
							"src": "77:36:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "interfaces/ITimeStruct.sol",
							"file": "../interfaces/ITimeStruct.sol",
							"id": 4,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 827,
							"sourceUnit": 1179,
							"src": "115:39:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "interfaces/IError.sol",
							"file": "../interfaces/IError.sol",
							"id": 5,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 827,
							"sourceUnit": 1159,
							"src": "156:34:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "libraries/TimeFee.sol",
							"file": "../libraries/TimeFee.sol",
							"id": 6,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 827,
							"sourceUnit": 2415,
							"src": "192:34:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "interfaces/IERC721Receiver.sol",
							"file": "../interfaces/IERC721Receiver.sol",
							"id": 7,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 827,
							"sourceUnit": 1146,
							"src": "242:43:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "interfaces/IUniswapV3Factory.sol",
							"file": "../interfaces/IUniswapV3Factory.sol",
							"id": 8,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 827,
							"sourceUnit": 1262,
							"src": "287:45:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "interfaces/UniswapV3/INonfungiblePositionManager.sol",
							"file": "../interfaces/UniswapV3/INonfungiblePositionManager.sol",
							"id": 9,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 827,
							"sourceUnit": 1496,
							"src": "334:65:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 10,
										"name": "ITimeStruct",
										"nameLocations": [
											"442:11:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1178,
										"src": "442:11:0"
									},
									"id": 11,
									"nodeType": "InheritanceSpecifier",
									"src": "442:11:0"
								},
								{
									"baseName": {
										"id": 12,
										"name": "IError",
										"nameLocations": [
											"455:6:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1158,
										"src": "455:6:0"
									},
									"id": 13,
									"nodeType": "InheritanceSpecifier",
									"src": "455:6:0"
								}
							],
							"canonicalName": "TimeMarket",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 826,
							"linearizedBaseContracts": [
								826,
								1158,
								1178
							],
							"name": "TimeMarket",
							"nameLocation": "428:10:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"global": false,
									"id": 17,
									"libraryName": {
										"id": 14,
										"name": "SafeERC20",
										"nameLocations": [
											"474:9:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 2365,
										"src": "474:9:0"
									},
									"nodeType": "UsingForDirective",
									"src": "468:27:0",
									"typeName": {
										"id": 16,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 15,
											"name": "IERC20",
											"nameLocations": [
												"488:6:0"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 916,
											"src": "488:6:0"
										},
										"referencedDeclaration": 916,
										"src": "488:6:0",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC20_$916",
											"typeString": "contract IERC20"
										}
									}
								},
								{
									"constant": false,
									"id": 19,
									"mutability": "mutable",
									"name": "clearingTime",
									"nameLocation": "516:12:0",
									"nodeType": "VariableDeclaration",
									"scope": 826,
									"src": "501:27:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint56",
										"typeString": "uint56"
									},
									"typeName": {
										"id": 18,
										"name": "uint56",
										"nodeType": "ElementaryTypeName",
										"src": "501:6:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint56",
											"typeString": "uint56"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 21,
									"mutability": "mutable",
									"name": "id",
									"nameLocation": "542:2:0",
									"nodeType": "VariableDeclaration",
									"scope": 826,
									"src": "535:9:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint64",
										"typeString": "uint64"
									},
									"typeName": {
										"id": 20,
										"name": "uint64",
										"nodeType": "ElementaryTypeName",
										"src": "535:6:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint64",
											"typeString": "uint64"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 23,
									"mutability": "mutable",
									"name": "airdropToken",
									"nameLocation": "567:12:0",
									"nodeType": "VariableDeclaration",
									"scope": 826,
									"src": "551:28:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 22,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "551:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 26,
									"mutability": "mutable",
									"name": "univ3Factory",
									"nameLocation": "618:12:0",
									"nodeType": "VariableDeclaration",
									"scope": 826,
									"src": "602:71:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 24,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "602:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"value": {
										"hexValue": "307831463938343331633861443938353233363331414534613539663236373334366561333146393834",
										"id": 25,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "631:42:0",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										},
										"value": "0x1F98431c8aD98523631AE4a59f267346ea31F984"
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 29,
									"mutability": "mutable",
									"name": "NonfungiblePositionManager",
									"nameLocation": "696:26:0",
									"nodeType": "VariableDeclaration",
									"scope": 826,
									"src": "680:85:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 27,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "680:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"value": {
										"hexValue": "307843333634343262346134353232453837313339394344373137614244443834374162313146453838",
										"id": 28,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "723:42:0",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										},
										"value": "0xC36442b4a4522E871399CD717aBDD847Ab11FE88"
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 47,
										"nodeType": "Block",
										"src": "827:90:0",
										"statements": [
											{
												"expression": {
													"id": 38,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 36,
														"name": "airdropToken",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 23,
														"src": "838:12:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 37,
														"name": "_airdropToken",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 31,
														"src": "851:13:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "838:26:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 39,
												"nodeType": "ExpressionStatement",
												"src": "838:26:0"
											},
											{
												"expression": {
													"id": 45,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 40,
														"name": "clearingTime",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 19,
														"src": "875:12:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint56",
															"typeString": "uint56"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 43,
																"name": "_clearingTime",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 33,
																"src": "895:13:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 42,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "888:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint56_$",
																"typeString": "type(uint56)"
															},
															"typeName": {
																"id": 41,
																"name": "uint56",
																"nodeType": "ElementaryTypeName",
																"src": "888:6:0",
																"typeDescriptions": {}
															}
														},
														"id": 44,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "888:21:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint56",
															"typeString": "uint56"
														}
													},
													"src": "875:34:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint56",
														"typeString": "uint56"
													}
												},
												"id": 46,
												"nodeType": "ExpressionStatement",
												"src": "875:34:0"
											}
										]
									},
									"id": 48,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 34,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 31,
												"mutability": "mutable",
												"name": "_airdropToken",
												"nameLocation": "794:13:0",
												"nodeType": "VariableDeclaration",
												"scope": 48,
												"src": "786:21:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 30,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "786:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 33,
												"mutability": "mutable",
												"name": "_clearingTime",
												"nameLocation": "813:13:0",
												"nodeType": "VariableDeclaration",
												"scope": 48,
												"src": "808:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 32,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "808:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "785:42:0"
									},
									"returnParameters": {
										"id": 35,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "827:0:0"
									},
									"scope": 826,
									"src": "774:143:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"constant": false,
									"id": 53,
									"mutability": "mutable",
									"name": "_tradeMes",
									"nameLocation": "958:9:0",
									"nodeType": "VariableDeclaration",
									"scope": 826,
									"src": "925:42:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_uint64_$_t_struct$_tradeMes_$1177_storage_$",
										"typeString": "mapping(uint64 => struct ITimeStruct.tradeMes)"
									},
									"typeName": {
										"id": 52,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 49,
											"name": "uint64",
											"nodeType": "ElementaryTypeName",
											"src": "933:6:0",
											"typeDescriptions": {
												"typeIdentifier": "t_uint64",
												"typeString": "uint64"
											}
										},
										"nodeType": "Mapping",
										"src": "925:25:0",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_uint64_$_t_struct$_tradeMes_$1177_storage_$",
											"typeString": "mapping(uint64 => struct ITimeStruct.tradeMes)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 51,
											"nodeType": "UserDefinedTypeName",
											"pathNode": {
												"id": 50,
												"name": "tradeMes",
												"nameLocations": [
													"941:8:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1177,
												"src": "941:8:0"
											},
											"referencedDeclaration": 1177,
											"src": "941:8:0",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_tradeMes_$1177_storage_ptr",
												"typeString": "struct ITimeStruct.tradeMes"
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 59,
									"mutability": "mutable",
									"name": "ifInject",
									"nameLocation": "1104:8:0",
									"nodeType": "VariableDeclaration",
									"scope": 826,
									"src": "1054:58:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_bool_$_$",
										"typeString": "mapping(address => mapping(uint256 => bool))"
									},
									"typeName": {
										"id": 58,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 54,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1062:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1054:42:0",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_bool_$_$",
											"typeString": "mapping(address => mapping(uint256 => bool))"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 57,
											"keyName": "",
											"keyNameLocation": "-1:-1:-1",
											"keyType": {
												"id": 55,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1081:7:0",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"nodeType": "Mapping",
											"src": "1073:22:0",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
												"typeString": "mapping(uint256 => bool)"
											},
											"valueName": "",
											"valueNameLocation": "-1:-1:-1",
											"valueType": {
												"id": 56,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "1090:4:0",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"functionSelector": "59de2f60",
									"id": 65,
									"mutability": "mutable",
									"name": "userIfWithdraw1",
									"nameLocation": "1227:15:0",
									"nodeType": "VariableDeclaration",
									"scope": 826,
									"src": "1178:64:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_bool_$_$",
										"typeString": "mapping(address => mapping(uint256 => bool))"
									},
									"typeName": {
										"id": 64,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 60,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1186:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1178:42:0",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_bool_$_$",
											"typeString": "mapping(address => mapping(uint256 => bool))"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 63,
											"keyName": "",
											"keyNameLocation": "-1:-1:-1",
											"keyType": {
												"id": 61,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1205:7:0",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"nodeType": "Mapping",
											"src": "1197:22:0",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
												"typeString": "mapping(uint256 => bool)"
											},
											"valueName": "",
											"valueNameLocation": "-1:-1:-1",
											"valueType": {
												"id": 62,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "1214:4:0",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											}
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "df0905c6",
									"id": 71,
									"mutability": "mutable",
									"name": "userIfWithdraw2",
									"nameLocation": "1351:15:0",
									"nodeType": "VariableDeclaration",
									"scope": 826,
									"src": "1302:64:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_bool_$_$",
										"typeString": "mapping(address => mapping(uint256 => bool))"
									},
									"typeName": {
										"id": 70,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 66,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1310:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1302:42:0",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_bool_$_$",
											"typeString": "mapping(address => mapping(uint256 => bool))"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 69,
											"keyName": "",
											"keyNameLocation": "-1:-1:-1",
											"keyType": {
												"id": 67,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1329:7:0",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"nodeType": "Mapping",
											"src": "1321:22:0",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
												"typeString": "mapping(uint256 => bool)"
											},
											"valueName": "",
											"valueNameLocation": "-1:-1:-1",
											"valueType": {
												"id": 68,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "1338:4:0",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											}
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "b8d7f980",
									"id": 77,
									"mutability": "mutable",
									"name": "userIfWithdraw3",
									"nameLocation": "1475:15:0",
									"nodeType": "VariableDeclaration",
									"scope": 826,
									"src": "1426:64:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_bool_$_$",
										"typeString": "mapping(address => mapping(uint256 => bool))"
									},
									"typeName": {
										"id": 76,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 72,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1434:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1426:42:0",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_bool_$_$",
											"typeString": "mapping(address => mapping(uint256 => bool))"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 75,
											"keyName": "",
											"keyNameLocation": "-1:-1:-1",
											"keyType": {
												"id": 73,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1453:7:0",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"nodeType": "Mapping",
											"src": "1445:22:0",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
												"typeString": "mapping(uint256 => bool)"
											},
											"valueName": "",
											"valueNameLocation": "-1:-1:-1",
											"valueType": {
												"id": 74,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "1462:4:0",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											}
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "fc993ea8",
									"id": 83,
									"mutability": "mutable",
									"name": "userIfWithdraw4",
									"nameLocation": "1586:15:0",
									"nodeType": "VariableDeclaration",
									"scope": 826,
									"src": "1537:64:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_bool_$_$",
										"typeString": "mapping(address => mapping(uint256 => bool))"
									},
									"typeName": {
										"id": 82,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 78,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1545:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1537:42:0",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_bool_$_$",
											"typeString": "mapping(address => mapping(uint256 => bool))"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 81,
											"keyName": "",
											"keyNameLocation": "-1:-1:-1",
											"keyType": {
												"id": 79,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1564:7:0",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"nodeType": "Mapping",
											"src": "1556:22:0",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
												"typeString": "mapping(uint256 => bool)"
											},
											"valueName": "",
											"valueNameLocation": "-1:-1:-1",
											"valueType": {
												"id": 80,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "1573:4:0",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											}
										}
									},
									"visibility": "public"
								},
								{
									"body": {
										"id": 180,
										"nodeType": "Block",
										"src": "1719:998:0",
										"statements": [
											{
												"assignments": [
													95
												],
												"declarations": [
													{
														"constant": false,
														"id": 95,
														"mutability": "mutable",
														"name": "total",
														"nameLocation": "1735:5:0",
														"nodeType": "VariableDeclaration",
														"scope": 180,
														"src": "1730:10:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 94,
															"name": "uint",
															"nodeType": "ElementaryTypeName",
															"src": "1730:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 99,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													},
													"id": 98,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 96,
														"name": "_buyAmount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 89,
														"src": "1741:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint128",
															"typeString": "uint128"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "*",
													"rightExpression": {
														"id": 97,
														"name": "_buyPrice",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 91,
														"src": "1752:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint128",
															"typeString": "uint128"
														}
													},
													"src": "1741:20:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1730:31:0"
											},
											{
												"assignments": [
													101
												],
												"declarations": [
													{
														"constant": false,
														"id": 101,
														"mutability": "mutable",
														"name": "thisPool",
														"nameLocation": "1856:8:0",
														"nodeType": "VariableDeclaration",
														"scope": 180,
														"src": "1848:16:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 100,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "1848:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 107,
												"initialValue": {
													"arguments": [
														{
															"id": 103,
															"name": "_tokenAddress",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 85,
															"src": "1880:13:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 104,
															"name": "token1",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 87,
															"src": "1894:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"hexValue": "31303030",
															"id": 105,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1901:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1000_by_1",
																"typeString": "int_const 1000"
															},
															"value": "1000"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_rational_1000_by_1",
																"typeString": "int_const 1000"
															}
														],
														"id": 102,
														"name": "getPoolAddress",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 735,
														"src": "1865:14:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$_t_uint24_$returns$_t_address_$",
															"typeString": "function (address,address,uint24) view returns (address)"
														}
													},
													"id": 106,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1865:41:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1848:58:0"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 110,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 108,
														"name": "total",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 95,
														"src": "1920:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"hexValue": "313030",
														"id": 109,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1926:9:0",
														"subdenomination": "ether",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_100000000000000000000_by_1",
															"typeString": "int_const 100000000000000000000"
														},
														"value": "100"
													},
													"src": "1920:15:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 115,
												"nodeType": "IfStatement",
												"src": "1917:70:0",
												"trueBody": {
													"id": 114,
													"nodeType": "Block",
													"src": "1936:51:0",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 111,
																	"name": "NotEnoughAmount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1149,
																	"src": "1958:15:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 112,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1958:17:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 113,
															"nodeType": "RevertStatement",
															"src": "1951:24:0"
														}
													]
												}
											},
											{
												"assignments": [
													118
												],
												"declarations": [
													{
														"constant": false,
														"id": 118,
														"mutability": "mutable",
														"name": "newTradeMes",
														"nameLocation": "2013:11:0",
														"nodeType": "VariableDeclaration",
														"scope": 180,
														"src": "1997:27:0",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_tradeMes_$1177_memory_ptr",
															"typeString": "struct ITimeStruct.tradeMes"
														},
														"typeName": {
															"id": 117,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 116,
																"name": "tradeMes",
																"nameLocations": [
																	"1997:8:0"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 1177,
																"src": "1997:8:0"
															},
															"referencedDeclaration": 1177,
															"src": "1997:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_tradeMes_$1177_storage_ptr",
																"typeString": "struct ITimeStruct.tradeMes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 137,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "31",
															"id": 120,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2060:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														{
															"id": 121,
															"name": "id",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 21,
															"src": "2084:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"id": 124,
																		"name": "block",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967292,
																		"src": "2116:5:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_block",
																			"typeString": "block"
																		}
																	},
																	"id": 125,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "2122:9:0",
																	"memberName": "timestamp",
																	"nodeType": "MemberAccess",
																	"src": "2116:15:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 123,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2109:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_uint56_$",
																	"typeString": "type(uint56)"
																},
																"typeName": {
																	"id": 122,
																	"name": "uint56",
																	"nodeType": "ElementaryTypeName",
																	"src": "2109:6:0",
																	"typeDescriptions": {}
																}
															},
															"id": 126,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2109:23:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint56",
																"typeString": "uint56"
															}
														},
														{
															"id": 127,
															"name": "_buyAmount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 89,
															"src": "2162:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint128",
																"typeString": "uint128"
															}
														},
														{
															"id": 128,
															"name": "_buyPrice",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 91,
															"src": "2196:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint128",
																"typeString": "uint128"
															}
														},
														{
															"id": 129,
															"name": "_tokenAddress",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 85,
															"src": "2233:13:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"expression": {
																"id": 130,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "2274:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 131,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "2278:6:0",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "2274:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"id": 134,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "2321:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_TimeMarket_$826",
																		"typeString": "contract TimeMarket"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_TimeMarket_$826",
																		"typeString": "contract TimeMarket"
																	}
																],
																"id": 133,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2313:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 132,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "2313:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 135,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2313:13:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															{
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															},
															{
																"typeIdentifier": "t_uint56",
																"typeString": "uint56"
															},
															{
																"typeIdentifier": "t_uint128",
																"typeString": "uint128"
															},
															{
																"typeIdentifier": "t_uint128",
																"typeString": "uint128"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 119,
														"name": "tradeMes",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1177,
														"src": "2025:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_struct$_tradeMes_$1177_storage_ptr_$",
															"typeString": "type(struct ITimeStruct.tradeMes storage pointer)"
														}
													},
													"id": 136,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "structConstructorCall",
													"lValueRequested": false,
													"nameLocations": [
														"2049:10:0",
														"2076:7:0",
														"2101:7:0",
														"2147:14:0",
														"2187:8:0",
														"2220:12:0",
														"2261:12:0",
														"2299:13:0"
													],
													"names": [
														"tradeState",
														"tradeId",
														"buyTime",
														"buyTotalAmount",
														"buyPrice",
														"tokenAddress",
														"buyerAddress",
														"solderAddress"
													],
													"nodeType": "FunctionCall",
													"src": "2025:313:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_tradeMes_$1177_memory_ptr",
														"typeString": "struct ITimeStruct.tradeMes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1997:341:0"
											},
											{
												"expression": {
													"id": 142,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 138,
															"name": "_tradeMes",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 53,
															"src": "2349:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint64_$_t_struct$_tradeMes_$1177_storage_$",
																"typeString": "mapping(uint64 => struct ITimeStruct.tradeMes storage ref)"
															}
														},
														"id": 140,
														"indexExpression": {
															"id": 139,
															"name": "id",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 21,
															"src": "2359:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "2349:13:0",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_tradeMes_$1177_storage",
															"typeString": "struct ITimeStruct.tradeMes storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 141,
														"name": "newTradeMes",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 118,
														"src": "2363:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_tradeMes_$1177_memory_ptr",
															"typeString": "struct ITimeStruct.tradeMes memory"
														}
													},
													"src": "2349:25:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_tradeMes_$1177_storage",
														"typeString": "struct ITimeStruct.tradeMes storage ref"
													}
												},
												"id": 143,
												"nodeType": "ExpressionStatement",
												"src": "2349:25:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 148,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "2460:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 149,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "2464:6:0",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "2460:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"id": 152,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "2479:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_TimeMarket_$826",
																		"typeString": "contract TimeMarket"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_TimeMarket_$826",
																		"typeString": "contract TimeMarket"
																	}
																],
																"id": 151,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2471:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 150,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "2471:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 153,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2471:13:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 154,
															"name": "total",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 95,
															"src": "2485:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 145,
																	"name": "_tokenAddress",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 85,
																	"src": "2428:13:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 144,
																"name": "IERC20",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 916,
																"src": "2421:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20_$916_$",
																	"typeString": "type(contract IERC20)"
																}
															},
															"id": 146,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2421:21:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$916",
																"typeString": "contract IERC20"
															}
														},
														"id": 147,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2443:16:0",
														"memberName": "safeTransferFrom",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2049,
														"src": "2421:38:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$916_$_t_address_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$916_$",
															"typeString": "function (contract IERC20,address,address,uint256)"
														}
													},
													"id": 155,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2421:70:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 156,
												"nodeType": "ExpressionStatement",
												"src": "2421:70:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 161,
															"name": "thisPool",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 101,
															"src": "2600:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 162,
															"name": "total",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 95,
															"src": "2609:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 158,
																	"name": "_tokenAddress",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 85,
																	"src": "2573:13:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 157,
																"name": "IERC20",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 916,
																"src": "2566:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20_$916_$",
																	"typeString": "type(contract IERC20)"
																}
															},
															"id": 159,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2566:21:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$916",
																"typeString": "contract IERC20"
															}
														},
														"id": 160,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2588:11:0",
														"memberName": "safeApprove",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2093,
														"src": "2566:33:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$916_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$916_$",
															"typeString": "function (contract IERC20,address,uint256)"
														}
													},
													"id": 163,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2566:49:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 164,
												"nodeType": "ExpressionStatement",
												"src": "2566:49:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 171,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "2673:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_TimeMarket_$826",
																		"typeString": "contract TimeMarket"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_TimeMarket_$826",
																		"typeString": "contract TimeMarket"
																	}
																],
																"id": 170,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2665:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 169,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "2665:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 172,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2665:13:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 173,
															"name": "thisPool",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 101,
															"src": "2679:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 174,
															"name": "total",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 95,
															"src": "2688:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 166,
																	"name": "_tokenAddress",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 85,
																	"src": "2633:13:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 165,
																"name": "IERC20",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 916,
																"src": "2626:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20_$916_$",
																	"typeString": "type(contract IERC20)"
																}
															},
															"id": 167,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2626:21:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$916",
																"typeString": "contract IERC20"
															}
														},
														"id": 168,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2648:16:0",
														"memberName": "safeTransferFrom",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2049,
														"src": "2626:38:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$916_$_t_address_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$916_$",
															"typeString": "function (contract IERC20,address,address,uint256)"
														}
													},
													"id": 175,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2626:68:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 176,
												"nodeType": "ExpressionStatement",
												"src": "2626:68:0"
											},
											{
												"expression": {
													"id": 178,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "++",
													"prefix": false,
													"src": "2705:4:0",
													"subExpression": {
														"id": 177,
														"name": "id",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 21,
														"src": "2705:2:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"id": 179,
												"nodeType": "ExpressionStatement",
												"src": "2705:4:0"
											}
										]
									},
									"functionSelector": "0d45431d",
									"id": 181,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "buy",
									"nameLocation": "1633:3:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 92,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 85,
												"mutability": "mutable",
												"name": "_tokenAddress",
												"nameLocation": "1645:13:0",
												"nodeType": "VariableDeclaration",
												"scope": 181,
												"src": "1637:21:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 84,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1637:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 87,
												"mutability": "mutable",
												"name": "token1",
												"nameLocation": "1667:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 181,
												"src": "1659:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 86,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1659:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 89,
												"mutability": "mutable",
												"name": "_buyAmount",
												"nameLocation": "1682:10:0",
												"nodeType": "VariableDeclaration",
												"scope": 181,
												"src": "1674:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 88,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "1674:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 91,
												"mutability": "mutable",
												"name": "_buyPrice",
												"nameLocation": "1701:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 181,
												"src": "1693:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 90,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "1693:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1636:75:0"
									},
									"returnParameters": {
										"id": 93,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1719:0:0"
									},
									"scope": 826,
									"src": "1624:1093:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 272,
										"nodeType": "Block",
										"src": "2796:965:0",
										"statements": [
											{
												"assignments": [
													190
												],
												"declarations": [
													{
														"constant": false,
														"id": 190,
														"mutability": "mutable",
														"name": "maxTradeMes",
														"nameLocation": "2823:11:0",
														"nodeType": "VariableDeclaration",
														"scope": 272,
														"src": "2807:27:0",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_tradeMes_$1177_memory_ptr",
															"typeString": "struct ITimeStruct.tradeMes"
														},
														"typeName": {
															"id": 189,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 188,
																"name": "tradeMes",
																"nameLocations": [
																	"2807:8:0"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 1177,
																"src": "2807:8:0"
															},
															"referencedDeclaration": 1177,
															"src": "2807:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_tradeMes_$1177_storage_ptr",
																"typeString": "struct ITimeStruct.tradeMes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 194,
												"initialValue": {
													"baseExpression": {
														"id": 191,
														"name": "_tradeMes",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 53,
														"src": "2835:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_uint64_$_t_struct$_tradeMes_$1177_storage_$",
															"typeString": "mapping(uint64 => struct ITimeStruct.tradeMes storage ref)"
														}
													},
													"id": 193,
													"indexExpression": {
														"id": 192,
														"name": "_id",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 183,
														"src": "2845:3:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "2835:14:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_tradeMes_$1177_storage",
														"typeString": "struct ITimeStruct.tradeMes storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2807:42:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															"id": 199,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 196,
																	"name": "maxTradeMes",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 190,
																	"src": "2868:11:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_tradeMes_$1177_memory_ptr",
																		"typeString": "struct ITimeStruct.tradeMes memory"
																	}
																},
																"id": 197,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "2880:10:0",
																"memberName": "tradeState",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1162,
																"src": "2868:22:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "31",
																"id": 198,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2892:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "2868:25:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 195,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2860:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 200,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2860:34:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 201,
												"nodeType": "ExpressionStatement",
												"src": "2860:34:0"
											},
											{
												"assignments": [
													203
												],
												"declarations": [
													{
														"constant": false,
														"id": 203,
														"mutability": "mutable",
														"name": "promiseStableToken",
														"nameLocation": "2941:18:0",
														"nodeType": "VariableDeclaration",
														"scope": 272,
														"src": "2933:26:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 202,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2933:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 206,
												"initialValue": {
													"expression": {
														"id": 204,
														"name": "maxTradeMes",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 190,
														"src": "2960:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_tradeMes_$1177_memory_ptr",
															"typeString": "struct ITimeStruct.tradeMes memory"
														}
													},
													"id": 205,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "2972:12:0",
													"memberName": "tokenAddress",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 1172,
													"src": "2960:24:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2933:51:0"
											},
											{
												"assignments": [
													208
												],
												"declarations": [
													{
														"constant": false,
														"id": 208,
														"mutability": "mutable",
														"name": "thisPool",
														"nameLocation": "3085:8:0",
														"nodeType": "VariableDeclaration",
														"scope": 272,
														"src": "3077:16:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 207,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "3077:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 214,
												"initialValue": {
													"arguments": [
														{
															"id": 210,
															"name": "promiseStableToken",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 203,
															"src": "3109:18:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 211,
															"name": "token1",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 185,
															"src": "3128:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"hexValue": "31303030",
															"id": 212,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3135:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1000_by_1",
																"typeString": "int_const 1000"
															},
															"value": "1000"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_rational_1000_by_1",
																"typeString": "int_const 1000"
															}
														],
														"id": 209,
														"name": "getPoolAddress",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 735,
														"src": "3094:14:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$_t_uint24_$returns$_t_address_$",
															"typeString": "function (address,address,uint24) view returns (address)"
														}
													},
													"id": 213,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3094:46:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3077:63:0"
											},
											{
												"assignments": [
													216
												],
												"declarations": [
													{
														"constant": false,
														"id": 216,
														"mutability": "mutable",
														"name": "penalAmount",
														"nameLocation": "3156:11:0",
														"nodeType": "VariableDeclaration",
														"scope": 272,
														"src": "3151:16:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 215,
															"name": "uint",
															"nodeType": "ElementaryTypeName",
															"src": "3151:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 223,
												"initialValue": {
													"arguments": [
														{
															"expression": {
																"id": 218,
																"name": "maxTradeMes",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 190,
																"src": "3177:11:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_tradeMes_$1177_memory_ptr",
																	"typeString": "struct ITimeStruct.tradeMes memory"
																}
															},
															"id": 219,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3189:8:0",
															"memberName": "buyPrice",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1170,
															"src": "3177:20:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint128",
																"typeString": "uint128"
															}
														},
														{
															"expression": {
																"id": 220,
																"name": "maxTradeMes",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 190,
																"src": "3199:11:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_tradeMes_$1177_memory_ptr",
																	"typeString": "struct ITimeStruct.tradeMes memory"
																}
															},
															"id": 221,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3211:14:0",
															"memberName": "buyTotalAmount",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1168,
															"src": "3199:26:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint128",
																"typeString": "uint128"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint128",
																"typeString": "uint128"
															},
															{
																"typeIdentifier": "t_uint128",
																"typeString": "uint128"
															}
														],
														"id": 217,
														"name": "getPenal",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 825,
														"src": "3168:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint128_$_t_uint128_$returns$_t_uint256_$",
															"typeString": "function (uint128,uint128) pure returns (uint256)"
														}
													},
													"id": 222,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3168:58:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3151:75:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 228,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "3322:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 229,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3326:6:0",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "3322:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"id": 232,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "3355:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_TimeMarket_$826",
																		"typeString": "contract TimeMarket"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_TimeMarket_$826",
																		"typeString": "contract TimeMarket"
																	}
																],
																"id": 231,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "3347:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 230,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "3347:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 233,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3347:13:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 234,
															"name": "penalAmount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 216,
															"src": "3375:11:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 225,
																	"name": "promiseStableToken",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 203,
																	"src": "3271:18:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 224,
																"name": "IERC20",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 916,
																"src": "3264:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20_$916_$",
																	"typeString": "type(contract IERC20)"
																}
															},
															"id": 226,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3264:26:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$916",
																"typeString": "contract IERC20"
															}
														},
														"id": 227,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "3291:16:0",
														"memberName": "safeTransferFrom",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2049,
														"src": "3264:43:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$916_$_t_address_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$916_$",
															"typeString": "function (contract IERC20,address,address,uint256)"
														}
													},
													"id": 235,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3264:133:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 236,
												"nodeType": "ExpressionStatement",
												"src": "3264:133:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 241,
															"name": "thisPool",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 208,
															"src": "3511:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 242,
															"name": "penalAmount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 216,
															"src": "3520:11:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 238,
																	"name": "promiseStableToken",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 203,
																	"src": "3479:18:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 237,
																"name": "IERC20",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 916,
																"src": "3472:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20_$916_$",
																	"typeString": "type(contract IERC20)"
																}
															},
															"id": 239,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3472:26:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$916",
																"typeString": "contract IERC20"
															}
														},
														"id": 240,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "3499:11:0",
														"memberName": "safeApprove",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2093,
														"src": "3472:38:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$916_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$916_$",
															"typeString": "function (contract IERC20,address,uint256)"
														}
													},
													"id": 243,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3472:60:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 244,
												"nodeType": "ExpressionStatement",
												"src": "3472:60:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 251,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "3595:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_TimeMarket_$826",
																		"typeString": "contract TimeMarket"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_TimeMarket_$826",
																		"typeString": "contract TimeMarket"
																	}
																],
																"id": 250,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "3587:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 249,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "3587:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 252,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3587:13:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 253,
															"name": "thisPool",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 208,
															"src": "3601:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 254,
															"name": "penalAmount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 216,
															"src": "3610:11:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 246,
																	"name": "promiseStableToken",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 203,
																	"src": "3550:18:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 245,
																"name": "IERC20",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 916,
																"src": "3543:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20_$916_$",
																	"typeString": "type(contract IERC20)"
																}
															},
															"id": 247,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3543:26:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$916",
																"typeString": "contract IERC20"
															}
														},
														"id": 248,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "3570:16:0",
														"memberName": "safeTransferFrom",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2049,
														"src": "3543:43:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$916_$_t_address_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$916_$",
															"typeString": "function (contract IERC20,address,address,uint256)"
														}
													},
													"id": 255,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3543:79:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 256,
												"nodeType": "ExpressionStatement",
												"src": "3543:79:0"
											},
											{
												"expression": {
													"id": 263,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 257,
																"name": "_tradeMes",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 53,
																"src": "3633:9:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_uint64_$_t_struct$_tradeMes_$1177_storage_$",
																	"typeString": "mapping(uint64 => struct ITimeStruct.tradeMes storage ref)"
																}
															},
															"id": 259,
															"indexExpression": {
																"id": 258,
																"name": "_id",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 183,
																"src": "3643:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "3633:14:0",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_tradeMes_$1177_storage",
																"typeString": "struct ITimeStruct.tradeMes storage ref"
															}
														},
														"id": 260,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "3648:13:0",
														"memberName": "solderAddress",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1176,
														"src": "3633:28:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"expression": {
															"id": 261,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "3662:3:0",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 262,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "3666:6:0",
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "3662:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "3633:39:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 264,
												"nodeType": "ExpressionStatement",
												"src": "3633:39:0"
											},
											{
												"expression": {
													"id": 270,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 265,
																"name": "_tradeMes",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 53,
																"src": "3726:9:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_uint64_$_t_struct$_tradeMes_$1177_storage_$",
																	"typeString": "mapping(uint64 => struct ITimeStruct.tradeMes storage ref)"
																}
															},
															"id": 267,
															"indexExpression": {
																"id": 266,
																"name": "_id",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 183,
																"src": "3736:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "3726:14:0",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_tradeMes_$1177_storage",
																"typeString": "struct ITimeStruct.tradeMes storage ref"
															}
														},
														"id": 268,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "3741:10:0",
														"memberName": "tradeState",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1162,
														"src": "3726:25:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "32",
														"id": 269,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3752:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_2_by_1",
															"typeString": "int_const 2"
														},
														"value": "2"
													},
													"src": "3726:27:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"id": 271,
												"nodeType": "ExpressionStatement",
												"src": "3726:27:0"
											}
										]
									},
									"functionSelector": "d91af492",
									"id": 273,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "Sale",
									"nameLocation": "2755:4:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 186,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 183,
												"mutability": "mutable",
												"name": "_id",
												"nameLocation": "2767:3:0",
												"nodeType": "VariableDeclaration",
												"scope": 273,
												"src": "2760:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 182,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "2760:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 185,
												"mutability": "mutable",
												"name": "token1",
												"nameLocation": "2779:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 273,
												"src": "2771:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 184,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2771:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2759:27:0"
									},
									"returnParameters": {
										"id": 187,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2796:0:0"
									},
									"scope": 826,
									"src": "2746:1015:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 338,
										"nodeType": "Block",
										"src": "3936:561:0",
										"statements": [
											{
												"condition": {
													"id": 285,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"id": 278,
																"name": "ifInject",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 59,
																"src": "4004:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_bool_$_$",
																	"typeString": "mapping(address => mapping(uint256 => bool))"
																}
															},
															"id": 281,
															"indexExpression": {
																"expression": {
																	"id": 279,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "4013:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 280,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "4017:6:0",
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "4013:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "4004:20:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
																"typeString": "mapping(uint256 => bool)"
															}
														},
														"id": 283,
														"indexExpression": {
															"id": 282,
															"name": "_id",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 275,
															"src": "4025:3:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "4004:25:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "66616c7365",
														"id": 284,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4030:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "false"
													},
													"src": "4004:31:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 290,
												"nodeType": "IfStatement",
												"src": "4001:65:0",
												"trueBody": {
													"id": 289,
													"nodeType": "Block",
													"src": "4036:30:0",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 286,
																	"name": "AlreadyInjectToken",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1151,
																	"src": "4044:18:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 287,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4044:20:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 288,
															"nodeType": "RevertStatement",
															"src": "4037:27:0"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 296,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 292,
																"name": "_id",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 275,
																"src": "4168:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															],
															"id": 291,
															"name": "getSolder",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 761,
															"src": "4158:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_uint64_$returns$_t_address_$",
																"typeString": "function (uint64) view returns (address)"
															}
														},
														"id": 293,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "4158:14:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"expression": {
															"id": 294,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "4174:3:0",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 295,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "4178:6:0",
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "4174:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "4158:26:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 301,
												"nodeType": "IfStatement",
												"src": "4155:51:0",
												"trueBody": {
													"id": 300,
													"nodeType": "Block",
													"src": "4185:21:0",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 297,
																	"name": "NorSolder",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1157,
																	"src": "4193:9:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 298,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4193:11:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 299,
															"nodeType": "RevertStatement",
															"src": "4186:18:0"
														}
													]
												}
											},
											{
												"assignments": [
													303
												],
												"declarations": [
													{
														"constant": false,
														"id": 303,
														"mutability": "mutable",
														"name": "thisAirdropAmount",
														"nameLocation": "4271:17:0",
														"nodeType": "VariableDeclaration",
														"scope": 338,
														"src": "4263:25:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 302,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4263:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 308,
												"initialValue": {
													"expression": {
														"baseExpression": {
															"id": 304,
															"name": "_tradeMes",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 53,
															"src": "4289:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint64_$_t_struct$_tradeMes_$1177_storage_$",
																"typeString": "mapping(uint64 => struct ITimeStruct.tradeMes storage ref)"
															}
														},
														"id": 306,
														"indexExpression": {
															"id": 305,
															"name": "_id",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 275,
															"src": "4299:3:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "4289:14:0",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_tradeMes_$1177_storage",
															"typeString": "struct ITimeStruct.tradeMes storage ref"
														}
													},
													"id": 307,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "4304:14:0",
													"memberName": "buyTotalAmount",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 1168,
													"src": "4289:29:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4263:55:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 313,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "4367:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 314,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "4371:6:0",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "4367:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"id": 317,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "4386:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_TimeMarket_$826",
																		"typeString": "contract TimeMarket"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_TimeMarket_$826",
																		"typeString": "contract TimeMarket"
																	}
																],
																"id": 316,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "4378:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 315,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "4378:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 318,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4378:13:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 319,
															"name": "thisAirdropAmount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 303,
															"src": "4392:17:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 310,
																	"name": "airdropToken",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 23,
																	"src": "4336:12:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 309,
																"name": "IERC20",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 916,
																"src": "4329:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20_$916_$",
																	"typeString": "type(contract IERC20)"
																}
															},
															"id": 311,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4329:20:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$916",
																"typeString": "contract IERC20"
															}
														},
														"id": 312,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "4350:16:0",
														"memberName": "safeTransferFrom",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2049,
														"src": "4329:37:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$916_$_t_address_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$916_$",
															"typeString": "function (contract IERC20,address,address,uint256)"
														}
													},
													"id": 320,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4329:81:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 321,
												"nodeType": "ExpressionStatement",
												"src": "4329:81:0"
											},
											{
												"expression": {
													"id": 329,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"id": 322,
																"name": "ifInject",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 59,
																"src": "4421:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_bool_$_$",
																	"typeString": "mapping(address => mapping(uint256 => bool))"
																}
															},
															"id": 326,
															"indexExpression": {
																"expression": {
																	"id": 323,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "4430:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 324,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "4434:6:0",
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "4430:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "4421:20:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
																"typeString": "mapping(uint256 => bool)"
															}
														},
														"id": 327,
														"indexExpression": {
															"id": 325,
															"name": "_id",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 275,
															"src": "4442:3:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "4421:25:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "74727565",
														"id": 328,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4447:4:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "4421:30:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 330,
												"nodeType": "ExpressionStatement",
												"src": "4421:30:0"
											},
											{
												"expression": {
													"id": 336,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 331,
																"name": "_tradeMes",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 53,
																"src": "4462:9:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_uint64_$_t_struct$_tradeMes_$1177_storage_$",
																	"typeString": "mapping(uint64 => struct ITimeStruct.tradeMes storage ref)"
																}
															},
															"id": 333,
															"indexExpression": {
																"id": 332,
																"name": "_id",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 275,
																"src": "4472:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "4462:14:0",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_tradeMes_$1177_storage",
																"typeString": "struct ITimeStruct.tradeMes storage ref"
															}
														},
														"id": 334,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "4477:10:0",
														"memberName": "tradeState",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1162,
														"src": "4462:25:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "33",
														"id": 335,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4488:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_3_by_1",
															"typeString": "int_const 3"
														},
														"value": "3"
													},
													"src": "4462:27:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"id": 337,
												"nodeType": "ExpressionStatement",
												"src": "4462:27:0"
											}
										]
									},
									"functionSelector": "25ac3a73",
									"id": 339,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "injectFutureToken",
									"nameLocation": "3899:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 276,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 275,
												"mutability": "mutable",
												"name": "_id",
												"nameLocation": "3924:3:0",
												"nodeType": "VariableDeclaration",
												"scope": 339,
												"src": "3917:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 274,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "3917:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3916:12:0"
									},
									"returnParameters": {
										"id": 277,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3936:0:0"
									},
									"scope": 826,
									"src": "3890:607:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 421,
										"nodeType": "Block",
										"src": "4554:711:0",
										"statements": [
											{
												"assignments": [
													345
												],
												"declarations": [
													{
														"constant": false,
														"id": 345,
														"mutability": "mutable",
														"name": "buyer",
														"nameLocation": "4573:5:0",
														"nodeType": "VariableDeclaration",
														"scope": 421,
														"src": "4565:13:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 344,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "4565:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 349,
												"initialValue": {
													"arguments": [
														{
															"id": 347,
															"name": "_id",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 341,
															"src": "4588:3:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														],
														"id": 346,
														"name": "getBuyer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 748,
														"src": "4579:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint64_$returns$_t_address_$",
															"typeString": "function (uint64) view returns (address)"
														}
													},
													"id": 348,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4579:13:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4565:27:0"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 353,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 350,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "4639:3:0",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 351,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "4643:6:0",
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "4639:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"id": 352,
														"name": "buyer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 345,
														"src": "4651:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "4639:17:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 358,
												"nodeType": "IfStatement",
												"src": "4636:41:0",
												"trueBody": {
													"id": 357,
													"nodeType": "Block",
													"src": "4657:20:0",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 354,
																	"name": "NotBuyer",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1155,
																	"src": "4665:8:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 355,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4665:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 356,
															"nodeType": "RevertStatement",
															"src": "4658:17:0"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													},
													"id": 364,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"baseExpression": {
																"id": 359,
																"name": "_tradeMes",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 53,
																"src": "4753:9:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_uint64_$_t_struct$_tradeMes_$1177_storage_$",
																	"typeString": "mapping(uint64 => struct ITimeStruct.tradeMes storage ref)"
																}
															},
															"id": 361,
															"indexExpression": {
																"id": 360,
																"name": "_id",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 341,
																"src": "4763:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "4753:14:0",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_tradeMes_$1177_storage",
																"typeString": "struct ITimeStruct.tradeMes storage ref"
															}
														},
														"id": 362,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "4768:10:0",
														"memberName": "tradeState",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1162,
														"src": "4753:25:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "33",
														"id": 363,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4780:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_3_by_1",
															"typeString": "int_const 3"
														},
														"value": "3"
													},
													"src": "4753:28:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 369,
												"nodeType": "IfStatement",
												"src": "4750:58:0",
												"trueBody": {
													"id": 368,
													"nodeType": "Block",
													"src": "4782:26:0",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 365,
																	"name": "NotInjectToken",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1153,
																	"src": "4790:14:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 366,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4790:16:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 367,
															"nodeType": "RevertStatement",
															"src": "4783:23:0"
														}
													]
												}
											},
											{
												"assignments": [
													371
												],
												"declarations": [
													{
														"constant": false,
														"id": 371,
														"mutability": "mutable",
														"name": "buyAmount",
														"nameLocation": "4827:9:0",
														"nodeType": "VariableDeclaration",
														"scope": 421,
														"src": "4819:17:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint128",
															"typeString": "uint128"
														},
														"typeName": {
															"id": 370,
															"name": "uint128",
															"nodeType": "ElementaryTypeName",
															"src": "4819:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint128",
																"typeString": "uint128"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 376,
												"initialValue": {
													"expression": {
														"baseExpression": {
															"id": 372,
															"name": "_tradeMes",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 53,
															"src": "4837:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint64_$_t_struct$_tradeMes_$1177_storage_$",
																"typeString": "mapping(uint64 => struct ITimeStruct.tradeMes storage ref)"
															}
														},
														"id": 374,
														"indexExpression": {
															"id": 373,
															"name": "_id",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 341,
															"src": "4847:3:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "4837:14:0",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_tradeMes_$1177_storage",
															"typeString": "struct ITimeStruct.tradeMes storage ref"
														}
													},
													"id": 375,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "4852:14:0",
													"memberName": "buyTotalAmount",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 1168,
													"src": "4837:29:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4819:47:0"
											},
											{
												"assignments": [
													378
												],
												"declarations": [
													{
														"constant": false,
														"id": 378,
														"mutability": "mutable",
														"name": "buyerPrice",
														"nameLocation": "4885:10:0",
														"nodeType": "VariableDeclaration",
														"scope": 421,
														"src": "4877:18:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint128",
															"typeString": "uint128"
														},
														"typeName": {
															"id": 377,
															"name": "uint128",
															"nodeType": "ElementaryTypeName",
															"src": "4877:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint128",
																"typeString": "uint128"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 383,
												"initialValue": {
													"expression": {
														"baseExpression": {
															"id": 379,
															"name": "_tradeMes",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 53,
															"src": "4896:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint64_$_t_struct$_tradeMes_$1177_storage_$",
																"typeString": "mapping(uint64 => struct ITimeStruct.tradeMes storage ref)"
															}
														},
														"id": 381,
														"indexExpression": {
															"id": 380,
															"name": "_id",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 341,
															"src": "4906:3:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "4896:14:0",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_tradeMes_$1177_storage",
															"typeString": "struct ITimeStruct.tradeMes storage ref"
														}
													},
													"id": 382,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "4911:8:0",
													"memberName": "buyPrice",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 1170,
													"src": "4896:23:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4877:42:0"
											},
											{
												"assignments": [
													385
												],
												"declarations": [
													{
														"constant": false,
														"id": 385,
														"mutability": "mutable",
														"name": "fee",
														"nameLocation": "4982:3:0",
														"nodeType": "VariableDeclaration",
														"scope": 421,
														"src": "4974:11:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 384,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4974:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 392,
												"initialValue": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint128",
																"typeString": "uint128"
															},
															"id": 390,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 388,
																"name": "buyAmount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 371,
																"src": "4998:9:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint128",
																	"typeString": "uint128"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 389,
																"name": "buyerPrice",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 378,
																"src": "5008:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint128",
																	"typeString": "uint128"
																}
															},
															"src": "4998:20:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint128",
																"typeString": "uint128"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint128",
																"typeString": "uint128"
															}
														],
														"expression": {
															"id": 386,
															"name": "TimeFee",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2414,
															"src": "4986:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_TimeFee_$2414_$",
																"typeString": "type(library TimeFee)"
															}
														},
														"id": 387,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "4994:3:0",
														"memberName": "fee",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2413,
														"src": "4986:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256) pure returns (uint256)"
														}
													},
													"id": 391,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4986:33:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4974:45:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 399,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "5114:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_TimeMarket_$826",
																		"typeString": "contract TimeMarket"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_TimeMarket_$826",
																		"typeString": "contract TimeMarket"
																	}
																],
																"id": 398,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "5106:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 397,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "5106:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 400,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5106:13:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 401,
															"name": "fee",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 385,
															"src": "5120:3:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 394,
																	"name": "airdropToken",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 23,
																	"src": "5079:12:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 393,
																"name": "IERC20",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 916,
																"src": "5072:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20_$916_$",
																	"typeString": "type(contract IERC20)"
																}
															},
															"id": 395,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5072:20:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$916",
																"typeString": "contract IERC20"
															}
														},
														"id": 396,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "5093:12:0",
														"memberName": "safeTransfer",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2022,
														"src": "5072:33:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$916_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$916_$",
															"typeString": "function (contract IERC20,address,uint256)"
														}
													},
													"id": 402,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5072:52:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 403,
												"nodeType": "ExpressionStatement",
												"src": "5072:52:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 408,
															"name": "buyer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 345,
															"src": "5199:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 411,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 409,
																"name": "buyAmount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 371,
																"src": "5205:9:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint128",
																	"typeString": "uint128"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"id": 410,
																"name": "fee",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 385,
																"src": "5215:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5205:13:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 405,
																	"name": "airdropToken",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 23,
																	"src": "5172:12:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 404,
																"name": "IERC20",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 916,
																"src": "5165:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20_$916_$",
																	"typeString": "type(contract IERC20)"
																}
															},
															"id": 406,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5165:20:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$916",
																"typeString": "contract IERC20"
															}
														},
														"id": 407,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "5186:12:0",
														"memberName": "safeTransfer",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2022,
														"src": "5165:33:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$916_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$916_$",
															"typeString": "function (contract IERC20,address,uint256)"
														}
													},
													"id": 412,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5165:54:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 413,
												"nodeType": "ExpressionStatement",
												"src": "5165:54:0"
											},
											{
												"expression": {
													"id": 419,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 414,
																"name": "_tradeMes",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 53,
																"src": "5230:9:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_uint64_$_t_struct$_tradeMes_$1177_storage_$",
																	"typeString": "mapping(uint64 => struct ITimeStruct.tradeMes storage ref)"
																}
															},
															"id": 416,
															"indexExpression": {
																"id": 415,
																"name": "_id",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 341,
																"src": "5240:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "5230:14:0",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_tradeMes_$1177_storage",
																"typeString": "struct ITimeStruct.tradeMes storage ref"
															}
														},
														"id": 417,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "5245:10:0",
														"memberName": "tradeState",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1162,
														"src": "5230:25:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "34",
														"id": 418,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5256:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_4_by_1",
															"typeString": "int_const 4"
														},
														"value": "4"
													},
													"src": "5230:27:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"id": 420,
												"nodeType": "ExpressionStatement",
												"src": "5230:27:0"
											}
										]
									},
									"functionSelector": "c0102de4",
									"id": 422,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "buyerWithdrawAirdorp",
									"nameLocation": "4514:20:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 342,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 341,
												"mutability": "mutable",
												"name": "_id",
												"nameLocation": "4542:3:0",
												"nodeType": "VariableDeclaration",
												"scope": 422,
												"src": "4535:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 340,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "4535:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4534:12:0"
									},
									"returnParameters": {
										"id": 343,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4554:0:0"
									},
									"scope": 826,
									"src": "4505:760:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 536,
										"nodeType": "Block",
										"src": "5367:1088:0",
										"statements": [
											{
												"assignments": [
													428
												],
												"declarations": [
													{
														"constant": false,
														"id": 428,
														"mutability": "mutable",
														"name": "solder",
														"nameLocation": "5386:6:0",
														"nodeType": "VariableDeclaration",
														"scope": 536,
														"src": "5378:14:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 427,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "5378:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 432,
												"initialValue": {
													"arguments": [
														{
															"id": 430,
															"name": "_id",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 424,
															"src": "5403:3:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														],
														"id": 429,
														"name": "getSolder",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 761,
														"src": "5393:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint64_$returns$_t_address_$",
															"typeString": "function (uint64) view returns (address)"
														}
													},
													"id": 431,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5393:14:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5378:29:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 437,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 434,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "5459:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 435,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "5463:6:0",
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "5459:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 436,
																"name": "solder",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 428,
																"src": "5471:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "5459:18:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 433,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5451:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 438,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5451:27:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 439,
												"nodeType": "ExpressionStatement",
												"src": "5451:27:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"baseExpression": {
																"baseExpression": {
																	"id": 441,
																	"name": "ifInject",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 59,
																	"src": "5560:8:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_bool_$_$",
																		"typeString": "mapping(address => mapping(uint256 => bool))"
																	}
																},
																"id": 443,
																"indexExpression": {
																	"id": 442,
																	"name": "solder",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 428,
																	"src": "5569:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "5560:16:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
																	"typeString": "mapping(uint256 => bool)"
																}
															},
															"id": 445,
															"indexExpression": {
																"id": 444,
																"name": "_id",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 424,
																"src": "5577:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "5560:21:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 440,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5552:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 446,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5552:30:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 447,
												"nodeType": "ExpressionStatement",
												"src": "5552:30:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 456,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"baseExpression": {
																	"baseExpression": {
																		"id": 449,
																		"name": "userIfWithdraw2",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 71,
																		"src": "5634:15:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_bool_$_$",
																			"typeString": "mapping(address => mapping(uint256 => bool))"
																		}
																	},
																	"id": 452,
																	"indexExpression": {
																		"expression": {
																			"id": 450,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "5650:3:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 451,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "5654:6:0",
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "5650:10:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "5634:27:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
																		"typeString": "mapping(uint256 => bool)"
																	}
																},
																"id": 454,
																"indexExpression": {
																	"id": 453,
																	"name": "_id",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 424,
																	"src": "5662:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint64",
																		"typeString": "uint64"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "5634:32:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "66616c7365",
																"id": 455,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5668:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															"src": "5634:39:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 448,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5626:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 457,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5626:48:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 458,
												"nodeType": "ExpressionStatement",
												"src": "5626:48:0"
											},
											{
												"assignments": [
													460
												],
												"declarations": [
													{
														"constant": false,
														"id": 460,
														"mutability": "mutable",
														"name": "promiseStableToken",
														"nameLocation": "5693:18:0",
														"nodeType": "VariableDeclaration",
														"scope": 536,
														"src": "5685:26:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 459,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "5685:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 465,
												"initialValue": {
													"expression": {
														"baseExpression": {
															"id": 461,
															"name": "_tradeMes",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 53,
															"src": "5712:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint64_$_t_struct$_tradeMes_$1177_storage_$",
																"typeString": "mapping(uint64 => struct ITimeStruct.tradeMes storage ref)"
															}
														},
														"id": 463,
														"indexExpression": {
															"id": 462,
															"name": "_id",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 424,
															"src": "5722:3:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "5712:14:0",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_tradeMes_$1177_storage",
															"typeString": "struct ITimeStruct.tradeMes storage ref"
														}
													},
													"id": 464,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "5727:12:0",
													"memberName": "tokenAddress",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 1172,
													"src": "5712:27:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5685:54:0"
											},
											{
												"assignments": [
													467
												],
												"declarations": [
													{
														"constant": false,
														"id": 467,
														"mutability": "mutable",
														"name": "total",
														"nameLocation": "5758:5:0",
														"nodeType": "VariableDeclaration",
														"scope": 536,
														"src": "5750:13:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 466,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "5750:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 477,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													},
													"id": 476,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"baseExpression": {
																"id": 468,
																"name": "_tradeMes",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 53,
																"src": "5764:9:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_uint64_$_t_struct$_tradeMes_$1177_storage_$",
																	"typeString": "mapping(uint64 => struct ITimeStruct.tradeMes storage ref)"
																}
															},
															"id": 470,
															"indexExpression": {
																"id": 469,
																"name": "_id",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 424,
																"src": "5774:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "5764:14:0",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_tradeMes_$1177_storage",
																"typeString": "struct ITimeStruct.tradeMes storage ref"
															}
														},
														"id": 471,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "5779:8:0",
														"memberName": "buyPrice",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1170,
														"src": "5764:23:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint128",
															"typeString": "uint128"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "*",
													"rightExpression": {
														"expression": {
															"baseExpression": {
																"id": 472,
																"name": "_tradeMes",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 53,
																"src": "5788:9:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_uint64_$_t_struct$_tradeMes_$1177_storage_$",
																	"typeString": "mapping(uint64 => struct ITimeStruct.tradeMes storage ref)"
																}
															},
															"id": 474,
															"indexExpression": {
																"id": 473,
																"name": "_id",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 424,
																"src": "5798:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "5788:14:0",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_tradeMes_$1177_storage",
																"typeString": "struct ITimeStruct.tradeMes storage ref"
															}
														},
														"id": 475,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "5803:14:0",
														"memberName": "buyTotalAmount",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1168,
														"src": "5788:29:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint128",
															"typeString": "uint128"
														}
													},
													"src": "5764:53:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5750:67:0"
											},
											{
												"assignments": [
													479
												],
												"declarations": [
													{
														"constant": false,
														"id": 479,
														"mutability": "mutable",
														"name": "penalSumAmount",
														"nameLocation": "5836:14:0",
														"nodeType": "VariableDeclaration",
														"scope": 536,
														"src": "5828:22:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 478,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "5828:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 490,
												"initialValue": {
													"arguments": [
														{
															"expression": {
																"baseExpression": {
																	"id": 481,
																	"name": "_tradeMes",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 53,
																	"src": "5860:9:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_uint64_$_t_struct$_tradeMes_$1177_storage_$",
																		"typeString": "mapping(uint64 => struct ITimeStruct.tradeMes storage ref)"
																	}
																},
																"id": 483,
																"indexExpression": {
																	"id": 482,
																	"name": "_id",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 424,
																	"src": "5870:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint64",
																		"typeString": "uint64"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "5860:14:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_tradeMes_$1177_storage",
																	"typeString": "struct ITimeStruct.tradeMes storage ref"
																}
															},
															"id": 484,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "5875:8:0",
															"memberName": "buyPrice",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1170,
															"src": "5860:23:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint128",
																"typeString": "uint128"
															}
														},
														{
															"expression": {
																"baseExpression": {
																	"id": 485,
																	"name": "_tradeMes",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 53,
																	"src": "5884:9:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_uint64_$_t_struct$_tradeMes_$1177_storage_$",
																		"typeString": "mapping(uint64 => struct ITimeStruct.tradeMes storage ref)"
																	}
																},
																"id": 487,
																"indexExpression": {
																	"id": 486,
																	"name": "_id",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 424,
																	"src": "5894:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint64",
																		"typeString": "uint64"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "5884:14:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_tradeMes_$1177_storage",
																	"typeString": "struct ITimeStruct.tradeMes storage ref"
																}
															},
															"id": 488,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "5899:14:0",
															"memberName": "buyTotalAmount",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1168,
															"src": "5884:29:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint128",
																"typeString": "uint128"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint128",
																"typeString": "uint128"
															},
															{
																"typeIdentifier": "t_uint128",
																"typeString": "uint128"
															}
														],
														"id": 480,
														"name": "getPenal",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 825,
														"src": "5851:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint128_$_t_uint128_$returns$_t_uint256_$",
															"typeString": "function (uint128,uint128) pure returns (uint256)"
														}
													},
													"id": 489,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5851:63:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5828:86:0"
											},
											{
												"assignments": [
													492
												],
												"declarations": [
													{
														"constant": false,
														"id": 492,
														"mutability": "mutable",
														"name": "fee",
														"nameLocation": "5933:3:0",
														"nodeType": "VariableDeclaration",
														"scope": 536,
														"src": "5925:11:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 491,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "5925:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 497,
												"initialValue": {
													"arguments": [
														{
															"id": 495,
															"name": "total",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 467,
															"src": "5949:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 493,
															"name": "TimeFee",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2414,
															"src": "5937:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_TimeFee_$2414_$",
																"typeString": "type(library TimeFee)"
															}
														},
														"id": 494,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "5945:3:0",
														"memberName": "fee",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2413,
														"src": "5937:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256) pure returns (uint256)"
														}
													},
													"id": 496,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5937:18:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5925:30:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 504,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "6056:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_TimeMarket_$826",
																		"typeString": "contract TimeMarket"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_TimeMarket_$826",
																		"typeString": "contract TimeMarket"
																	}
																],
																"id": 503,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "6048:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 502,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "6048:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 505,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6048:13:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 506,
															"name": "fee",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 492,
															"src": "6062:3:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 499,
																	"name": "promiseStableToken",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 460,
																	"src": "6015:18:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 498,
																"name": "IERC20",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 916,
																"src": "6008:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20_$916_$",
																	"typeString": "type(contract IERC20)"
																}
															},
															"id": 500,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6008:26:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$916",
																"typeString": "contract IERC20"
															}
														},
														"id": 501,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "6035:12:0",
														"memberName": "safeTransfer",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2022,
														"src": "6008:39:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$916_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$916_$",
															"typeString": "function (contract IERC20,address,uint256)"
														}
													},
													"id": 507,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6008:58:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 508,
												"nodeType": "ExpressionStatement",
												"src": "6008:58:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 513,
															"name": "solder",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 428,
															"src": "6161:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 516,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 514,
																"name": "total",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 467,
																"src": "6182:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"id": 515,
																"name": "fee",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 492,
																"src": "6188:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "6182:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 510,
																	"name": "promiseStableToken",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 460,
																	"src": "6114:18:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 509,
																"name": "IERC20",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 916,
																"src": "6107:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20_$916_$",
																	"typeString": "type(contract IERC20)"
																}
															},
															"id": 511,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6107:26:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$916",
																"typeString": "contract IERC20"
															}
														},
														"id": 512,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "6134:12:0",
														"memberName": "safeTransfer",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2022,
														"src": "6107:39:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$916_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$916_$",
															"typeString": "function (contract IERC20,address,uint256)"
														}
													},
													"id": 517,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6107:95:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 518,
												"nodeType": "ExpressionStatement",
												"src": "6107:95:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 523,
															"name": "solder",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 428,
															"src": "6315:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 524,
															"name": "penalSumAmount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 479,
															"src": "6336:14:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 520,
																	"name": "promiseStableToken",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 460,
																	"src": "6268:18:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 519,
																"name": "IERC20",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 916,
																"src": "6261:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20_$916_$",
																	"typeString": "type(contract IERC20)"
																}
															},
															"id": 521,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6261:26:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$916",
																"typeString": "contract IERC20"
															}
														},
														"id": 522,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "6288:12:0",
														"memberName": "safeTransfer",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2022,
														"src": "6261:39:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$916_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$916_$",
															"typeString": "function (contract IERC20,address,uint256)"
														}
													},
													"id": 525,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6261:100:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 526,
												"nodeType": "ExpressionStatement",
												"src": "6261:100:0"
											},
											{
												"expression": {
													"id": 534,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"id": 527,
																"name": "userIfWithdraw2",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 71,
																"src": "6409:15:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_bool_$_$",
																	"typeString": "mapping(address => mapping(uint256 => bool))"
																}
															},
															"id": 531,
															"indexExpression": {
																"expression": {
																	"id": 528,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "6425:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 529,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "6429:6:0",
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "6425:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "6409:27:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
																"typeString": "mapping(uint256 => bool)"
															}
														},
														"id": 532,
														"indexExpression": {
															"id": 530,
															"name": "_id",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 424,
															"src": "6437:3:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "6409:32:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "74727565",
														"id": 533,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6442:4:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "6409:37:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 535,
												"nodeType": "ExpressionStatement",
												"src": "6409:37:0"
											}
										]
									},
									"functionSelector": "77bcd8a6",
									"id": 537,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "solderWithdrawStable",
									"nameLocation": "5327:20:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 425,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 424,
												"mutability": "mutable",
												"name": "_id",
												"nameLocation": "5355:3:0",
												"nodeType": "VariableDeclaration",
												"scope": 537,
												"src": "5348:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 423,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "5348:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5347:12:0"
									},
									"returnParameters": {
										"id": 426,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5367:0:0"
									},
									"scope": 826,
									"src": "5318:1137:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 703,
										"nodeType": "Block",
										"src": "6590:1385:0",
										"statements": [
											{
												"assignments": [
													543
												],
												"declarations": [
													{
														"constant": false,
														"id": 543,
														"mutability": "mutable",
														"name": "buyer",
														"nameLocation": "6609:5:0",
														"nodeType": "VariableDeclaration",
														"scope": 703,
														"src": "6601:13:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 542,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "6601:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 547,
												"initialValue": {
													"arguments": [
														{
															"id": 545,
															"name": "_id",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 539,
															"src": "6624:3:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														],
														"id": 544,
														"name": "getBuyer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 748,
														"src": "6615:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint64_$returns$_t_address_$",
															"typeString": "function (uint64) view returns (address)"
														}
													},
													"id": 546,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6615:13:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6601:27:0"
											},
											{
												"assignments": [
													549
												],
												"declarations": [
													{
														"constant": false,
														"id": 549,
														"mutability": "mutable",
														"name": "solder",
														"nameLocation": "6647:6:0",
														"nodeType": "VariableDeclaration",
														"scope": 703,
														"src": "6639:14:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 548,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "6639:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 553,
												"initialValue": {
													"arguments": [
														{
															"id": 551,
															"name": "_id",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 539,
															"src": "6664:3:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														],
														"id": 550,
														"name": "getSolder",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 761,
														"src": "6654:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint64_$returns$_t_address_$",
															"typeString": "function (uint64) view returns (address)"
														}
													},
													"id": 552,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6654:14:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6639:29:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 558,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 555,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "6720:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 556,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "6724:6:0",
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "6720:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 557,
																"name": "buyer",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 543,
																"src": "6732:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "6720:17:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 554,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "6712:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 559,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6712:26:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 560,
												"nodeType": "ExpressionStatement",
												"src": "6712:26:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 568,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"baseExpression": {
																	"baseExpression": {
																		"id": 562,
																		"name": "ifInject",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 59,
																		"src": "6820:8:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_bool_$_$",
																			"typeString": "mapping(address => mapping(uint256 => bool))"
																		}
																	},
																	"id": 564,
																	"indexExpression": {
																		"id": 563,
																		"name": "solder",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 549,
																		"src": "6829:6:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "6820:16:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
																		"typeString": "mapping(uint256 => bool)"
																	}
																},
																"id": 566,
																"indexExpression": {
																	"id": 565,
																	"name": "_id",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 539,
																	"src": "6837:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint64",
																		"typeString": "uint64"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "6820:21:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "66616c7365",
																"id": 567,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6843:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															"src": "6820:28:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 561,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "6812:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 569,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6812:37:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 570,
												"nodeType": "ExpressionStatement",
												"src": "6812:37:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 579,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"baseExpression": {
																	"baseExpression": {
																		"id": 572,
																		"name": "userIfWithdraw3",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 77,
																		"src": "6868:15:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_bool_$_$",
																			"typeString": "mapping(address => mapping(uint256 => bool))"
																		}
																	},
																	"id": 575,
																	"indexExpression": {
																		"expression": {
																			"id": 573,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "6884:3:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 574,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "6888:6:0",
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "6884:10:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "6868:27:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
																		"typeString": "mapping(uint256 => bool)"
																	}
																},
																"id": 577,
																"indexExpression": {
																	"id": 576,
																	"name": "_id",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 539,
																	"src": "6896:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint64",
																		"typeString": "uint64"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "6868:32:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "66616c7365",
																"id": 578,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6902:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															"src": "6868:39:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 571,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "6860:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 580,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6860:48:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 581,
												"nodeType": "ExpressionStatement",
												"src": "6860:48:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 586,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 583,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "6960:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 584,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "6964:6:0",
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "6960:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 585,
																"name": "buyer",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 543,
																"src": "6972:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "6960:17:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 582,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "6952:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 587,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6952:26:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 588,
												"nodeType": "ExpressionStatement",
												"src": "6952:26:0"
											},
											{
												"assignments": [
													590
												],
												"declarations": [
													{
														"constant": false,
														"id": 590,
														"mutability": "mutable",
														"name": "promiseStableToken",
														"nameLocation": "6999:18:0",
														"nodeType": "VariableDeclaration",
														"scope": 703,
														"src": "6991:26:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 589,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "6991:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 595,
												"initialValue": {
													"expression": {
														"baseExpression": {
															"id": 591,
															"name": "_tradeMes",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 53,
															"src": "7018:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint64_$_t_struct$_tradeMes_$1177_storage_$",
																"typeString": "mapping(uint64 => struct ITimeStruct.tradeMes storage ref)"
															}
														},
														"id": 593,
														"indexExpression": {
															"id": 592,
															"name": "_id",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 539,
															"src": "7028:3:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "7018:14:0",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_tradeMes_$1177_storage",
															"typeString": "struct ITimeStruct.tradeMes storage ref"
														}
													},
													"id": 594,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "7033:12:0",
													"memberName": "tokenAddress",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 1172,
													"src": "7018:27:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6991:54:0"
											},
											{
												"assignments": [
													597
												],
												"declarations": [
													{
														"constant": false,
														"id": 597,
														"mutability": "mutable",
														"name": "penalSumAmount",
														"nameLocation": "7064:14:0",
														"nodeType": "VariableDeclaration",
														"scope": 703,
														"src": "7056:22:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 596,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "7056:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 608,
												"initialValue": {
													"arguments": [
														{
															"expression": {
																"baseExpression": {
																	"id": 599,
																	"name": "_tradeMes",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 53,
																	"src": "7088:9:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_uint64_$_t_struct$_tradeMes_$1177_storage_$",
																		"typeString": "mapping(uint64 => struct ITimeStruct.tradeMes storage ref)"
																	}
																},
																"id": 601,
																"indexExpression": {
																	"id": 600,
																	"name": "_id",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 539,
																	"src": "7098:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint64",
																		"typeString": "uint64"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "7088:14:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_tradeMes_$1177_storage",
																	"typeString": "struct ITimeStruct.tradeMes storage ref"
																}
															},
															"id": 602,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "7103:8:0",
															"memberName": "buyPrice",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1170,
															"src": "7088:23:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint128",
																"typeString": "uint128"
															}
														},
														{
															"expression": {
																"baseExpression": {
																	"id": 603,
																	"name": "_tradeMes",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 53,
																	"src": "7112:9:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_uint64_$_t_struct$_tradeMes_$1177_storage_$",
																		"typeString": "mapping(uint64 => struct ITimeStruct.tradeMes storage ref)"
																	}
																},
																"id": 605,
																"indexExpression": {
																	"id": 604,
																	"name": "_id",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 539,
																	"src": "7122:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint64",
																		"typeString": "uint64"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "7112:14:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_tradeMes_$1177_storage",
																	"typeString": "struct ITimeStruct.tradeMes storage ref"
																}
															},
															"id": 606,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "7127:14:0",
															"memberName": "buyTotalAmount",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1168,
															"src": "7112:29:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint128",
																"typeString": "uint128"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint128",
																"typeString": "uint128"
															},
															{
																"typeIdentifier": "t_uint128",
																"typeString": "uint128"
															}
														],
														"id": 598,
														"name": "getPenal",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 825,
														"src": "7079:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint128_$_t_uint128_$returns$_t_uint256_$",
															"typeString": "function (uint128,uint128) pure returns (uint256)"
														}
													},
													"id": 607,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7079:63:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7056:86:0"
											},
											{
												"assignments": [
													610
												],
												"declarations": [
													{
														"constant": false,
														"id": 610,
														"mutability": "mutable",
														"name": "fee",
														"nameLocation": "7161:3:0",
														"nodeType": "VariableDeclaration",
														"scope": 703,
														"src": "7153:11:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 609,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "7153:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 615,
												"initialValue": {
													"arguments": [
														{
															"id": 613,
															"name": "penalSumAmount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 597,
															"src": "7177:14:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 611,
															"name": "TimeFee",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2414,
															"src": "7165:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_TimeFee_$2414_$",
																"typeString": "type(library TimeFee)"
															}
														},
														"id": 612,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "7173:3:0",
														"memberName": "fee",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2413,
														"src": "7165:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256) pure returns (uint256)"
														}
													},
													"id": 614,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7165:27:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7153:39:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 622,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "7283:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_TimeMarket_$826",
																		"typeString": "contract TimeMarket"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_TimeMarket_$826",
																		"typeString": "contract TimeMarket"
																	}
																],
																"id": 621,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "7275:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 620,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "7275:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 623,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7275:13:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 624,
															"name": "fee",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 610,
															"src": "7303:3:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 617,
																	"name": "promiseStableToken",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 590,
																	"src": "7228:18:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 616,
																"name": "IERC20",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 916,
																"src": "7221:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20_$916_$",
																	"typeString": "type(contract IERC20)"
																}
															},
															"id": 618,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7221:26:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$916",
																"typeString": "contract IERC20"
															}
														},
														"id": 619,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "7248:12:0",
														"memberName": "safeTransfer",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2022,
														"src": "7221:39:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$916_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$916_$",
															"typeString": "function (contract IERC20,address,uint256)"
														}
													},
													"id": 625,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7221:96:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 626,
												"nodeType": "ExpressionStatement",
												"src": "7221:96:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 631,
															"name": "buyer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 543,
															"src": "7427:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 634,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 632,
																"name": "penalSumAmount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 597,
																"src": "7447:14:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"id": 633,
																"name": "fee",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 610,
																"src": "7462:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7447:18:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 628,
																	"name": "promiseStableToken",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 590,
																	"src": "7380:18:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 627,
																"name": "IERC20",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 916,
																"src": "7373:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20_$916_$",
																	"typeString": "type(contract IERC20)"
																}
															},
															"id": 629,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7373:26:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$916",
																"typeString": "contract IERC20"
															}
														},
														"id": 630,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "7400:12:0",
														"memberName": "safeTransfer",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2022,
														"src": "7373:39:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$916_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$916_$",
															"typeString": "function (contract IERC20,address,uint256)"
														}
													},
													"id": 635,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7373:103:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 636,
												"nodeType": "ExpressionStatement",
												"src": "7373:103:0"
											},
											{
												"expression": {
													"id": 644,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"id": 637,
																"name": "userIfWithdraw3",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 77,
																"src": "7487:15:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_bool_$_$",
																	"typeString": "mapping(address => mapping(uint256 => bool))"
																}
															},
															"id": 641,
															"indexExpression": {
																"expression": {
																	"id": 638,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "7503:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 639,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "7507:6:0",
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "7503:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "7487:27:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
																"typeString": "mapping(uint256 => bool)"
															}
														},
														"id": 642,
														"indexExpression": {
															"id": 640,
															"name": "_id",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 539,
															"src": "7515:3:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "7487:32:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "74727565",
														"id": 643,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "7520:4:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "7487:37:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 645,
												"nodeType": "ExpressionStatement",
												"src": "7487:37:0"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													},
													"id": 651,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"baseExpression": {
																"id": 646,
																"name": "_tradeMes",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 53,
																"src": "7540:9:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_uint64_$_t_struct$_tradeMes_$1177_storage_$",
																	"typeString": "mapping(uint64 => struct ITimeStruct.tradeMes storage ref)"
																}
															},
															"id": 648,
															"indexExpression": {
																"id": 647,
																"name": "_id",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 539,
																"src": "7550:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "7540:14:0",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_tradeMes_$1177_storage",
																"typeString": "struct ITimeStruct.tradeMes storage ref"
															}
														},
														"id": 649,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "7555:10:0",
														"memberName": "tradeState",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1162,
														"src": "7540:25:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "31",
														"id": 650,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "7567:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "7540:28:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 695,
												"nodeType": "IfStatement",
												"src": "7537:393:0",
												"trueBody": {
													"id": 694,
													"nodeType": "Block",
													"src": "7569:361:0",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"id": 660,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"baseExpression": {
																				"baseExpression": {
																					"id": 653,
																					"name": "userIfWithdraw4",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 83,
																					"src": "7592:15:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_bool_$_$",
																						"typeString": "mapping(address => mapping(uint256 => bool))"
																					}
																				},
																				"id": 656,
																				"indexExpression": {
																					"expression": {
																						"id": 654,
																						"name": "msg",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 4294967281,
																						"src": "7608:3:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_magic_message",
																							"typeString": "msg"
																						}
																					},
																					"id": 655,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberLocation": "7612:6:0",
																					"memberName": "sender",
																					"nodeType": "MemberAccess",
																					"src": "7608:10:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "IndexAccess",
																				"src": "7592:27:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
																					"typeString": "mapping(uint256 => bool)"
																				}
																			},
																			"id": 658,
																			"indexExpression": {
																				"id": 657,
																				"name": "_id",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 539,
																				"src": "7620:3:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint64",
																					"typeString": "uint64"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "7592:32:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "66616c7365",
																			"id": 659,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "bool",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "7626:5:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"value": "false"
																		},
																		"src": "7592:39:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	],
																	"id": 652,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "7584:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
																		"typeString": "function (bool) pure"
																	}
																},
																"id": 661,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7584:48:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 662,
															"nodeType": "ExpressionStatement",
															"src": "7584:48:0"
														},
														{
															"assignments": [
																664
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 664,
																	"mutability": "mutable",
																	"name": "total",
																	"nameLocation": "7655:5:0",
																	"nodeType": "VariableDeclaration",
																	"scope": 694,
																	"src": "7647:13:0",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 663,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "7647:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 674,
															"initialValue": {
																"commonType": {
																	"typeIdentifier": "t_uint128",
																	"typeString": "uint128"
																},
																"id": 673,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"baseExpression": {
																			"id": 665,
																			"name": "_tradeMes",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 53,
																			"src": "7661:9:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_uint64_$_t_struct$_tradeMes_$1177_storage_$",
																				"typeString": "mapping(uint64 => struct ITimeStruct.tradeMes storage ref)"
																			}
																		},
																		"id": 667,
																		"indexExpression": {
																			"id": 666,
																			"name": "_id",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 539,
																			"src": "7671:3:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint64",
																				"typeString": "uint64"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "7661:14:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_tradeMes_$1177_storage",
																			"typeString": "struct ITimeStruct.tradeMes storage ref"
																		}
																	},
																	"id": 668,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "7676:8:0",
																	"memberName": "buyPrice",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1170,
																	"src": "7661:23:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint128",
																		"typeString": "uint128"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"expression": {
																		"baseExpression": {
																			"id": 669,
																			"name": "_tradeMes",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 53,
																			"src": "7685:9:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_uint64_$_t_struct$_tradeMes_$1177_storage_$",
																				"typeString": "mapping(uint64 => struct ITimeStruct.tradeMes storage ref)"
																			}
																		},
																		"id": 671,
																		"indexExpression": {
																			"id": 670,
																			"name": "_id",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 539,
																			"src": "7695:3:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint64",
																				"typeString": "uint64"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "7685:14:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_tradeMes_$1177_storage",
																			"typeString": "struct ITimeStruct.tradeMes storage ref"
																		}
																	},
																	"id": 672,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "7700:14:0",
																	"memberName": "buyTotalAmount",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1168,
																	"src": "7685:29:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint128",
																		"typeString": "uint128"
																	}
																},
																"src": "7661:53:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint128",
																	"typeString": "uint128"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "7647:67:0"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"id": 680,
																				"name": "_id",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 539,
																				"src": "7823:3:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint64",
																					"typeString": "uint64"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_uint64",
																					"typeString": "uint64"
																				}
																			],
																			"id": 679,
																			"name": "getBuyer",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 748,
																			"src": "7814:8:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_view$_t_uint64_$returns$_t_address_$",
																				"typeString": "function (uint64) view returns (address)"
																			}
																		},
																		"id": 681,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "7814:13:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 682,
																		"name": "total",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 664,
																		"src": "7846:5:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"arguments": [
																			{
																				"id": 676,
																				"name": "promiseStableToken",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 590,
																				"src": "7763:18:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"id": 675,
																			"name": "IERC20",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 916,
																			"src": "7756:6:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC20_$916_$",
																				"typeString": "type(contract IERC20)"
																			}
																		},
																		"id": 677,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "7756:26:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$916",
																			"typeString": "contract IERC20"
																		}
																	},
																	"id": 678,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "7783:12:0",
																	"memberName": "safeTransfer",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 2022,
																	"src": "7756:39:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$916_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$916_$",
																		"typeString": "function (contract IERC20,address,uint256)"
																	}
																},
																"id": 683,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7756:110:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 684,
															"nodeType": "ExpressionStatement",
															"src": "7756:110:0"
														},
														{
															"expression": {
																"id": 692,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"baseExpression": {
																			"id": 685,
																			"name": "userIfWithdraw4",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 83,
																			"src": "7881:15:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_bool_$_$",
																				"typeString": "mapping(address => mapping(uint256 => bool))"
																			}
																		},
																		"id": 689,
																		"indexExpression": {
																			"expression": {
																				"id": 686,
																				"name": "msg",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967281,
																				"src": "7897:3:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_message",
																					"typeString": "msg"
																				}
																			},
																			"id": 687,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "7901:6:0",
																			"memberName": "sender",
																			"nodeType": "MemberAccess",
																			"src": "7897:10:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "7881:27:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
																			"typeString": "mapping(uint256 => bool)"
																		}
																	},
																	"id": 690,
																	"indexExpression": {
																		"id": 688,
																		"name": "_id",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 539,
																		"src": "7909:3:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint64",
																			"typeString": "uint64"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "7881:32:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "74727565",
																	"id": 691,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7914:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																"src": "7881:37:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 693,
															"nodeType": "ExpressionStatement",
															"src": "7881:37:0"
														}
													]
												}
											},
											{
												"expression": {
													"id": 701,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 696,
																"name": "_tradeMes",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 53,
																"src": "7940:9:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_uint64_$_t_struct$_tradeMes_$1177_storage_$",
																	"typeString": "mapping(uint64 => struct ITimeStruct.tradeMes storage ref)"
																}
															},
															"id": 698,
															"indexExpression": {
																"id": 697,
																"name": "_id",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 539,
																"src": "7950:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "7940:14:0",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_tradeMes_$1177_storage",
																"typeString": "struct ITimeStruct.tradeMes storage ref"
															}
														},
														"id": 699,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "7955:10:0",
														"memberName": "tradeState",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1162,
														"src": "7940:25:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "35",
														"id": 700,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "7966:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_5_by_1",
															"typeString": "int_const 5"
														},
														"value": "5"
													},
													"src": "7940:27:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"id": 702,
												"nodeType": "ExpressionStatement",
												"src": "7940:27:0"
											}
										]
									},
									"functionSelector": "2895cb7b",
									"id": 704,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "buyerWithdrawRefund",
									"nameLocation": "6551:19:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 540,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 539,
												"mutability": "mutable",
												"name": "_id",
												"nameLocation": "6578:3:0",
												"nodeType": "VariableDeclaration",
												"scope": 704,
												"src": "6571:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 538,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "6571:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6570:12:0"
									},
									"returnParameters": {
										"id": 541,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6590:0:0"
									},
									"scope": 826,
									"src": "6542:1433:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 709,
										"nodeType": "Block",
										"src": "8077:10:0",
										"statements": []
									},
									"functionSelector": "c3cf1aa6",
									"id": 710,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "profileEarn",
									"nameLocation": "8047:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 707,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 706,
												"mutability": "mutable",
												"name": "_id",
												"nameLocation": "8066:3:0",
												"nodeType": "VariableDeclaration",
												"scope": 710,
												"src": "8059:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 705,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "8059:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8058:12:0"
									},
									"returnParameters": {
										"id": 708,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8077:0:0"
									},
									"scope": 826,
									"src": "8038:49:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 734,
										"nodeType": "Block",
										"src": "8265:167:0",
										"statements": [
											{
												"expression": {
													"id": 730,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 721,
														"name": "thisPool",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 719,
														"src": "8276:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 726,
																"name": "token0",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 712,
																"src": "8341:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															{
																"id": 727,
																"name": "token1",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 714,
																"src": "8362:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															{
																"id": 728,
																"name": "_fee",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 716,
																"src": "8383:4:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint24",
																	"typeString": "uint24"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																{
																	"typeIdentifier": "t_uint24",
																	"typeString": "uint24"
																}
															],
															"expression": {
																"arguments": [
																	{
																		"id": 723,
																		"name": "univ3Factory",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 26,
																		"src": "8305:12:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 722,
																	"name": "IUniswapV3Factory",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1261,
																	"src": "8287:17:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_IUniswapV3Factory_$1261_$",
																		"typeString": "type(contract IUniswapV3Factory)"
																	}
																},
																"id": 724,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8287:31:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_IUniswapV3Factory_$1261",
																	"typeString": "contract IUniswapV3Factory"
																}
															},
															"id": 725,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "8319:7:0",
															"memberName": "getPool",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1234,
															"src": "8287:39:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$_t_uint24_$returns$_t_address_$",
																"typeString": "function (address,address,uint24) view external returns (address)"
															}
														},
														"id": 729,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8287:111:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "8276:122:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 731,
												"nodeType": "ExpressionStatement",
												"src": "8276:122:0"
											},
											{
												"expression": {
													"id": 732,
													"name": "thisPool",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 719,
													"src": "8416:8:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 720,
												"id": 733,
												"nodeType": "Return",
												"src": "8409:15:0"
											}
										]
									},
									"functionSelector": "696d6283",
									"id": 735,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getPoolAddress",
									"nameLocation": "8171:14:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 717,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 712,
												"mutability": "mutable",
												"name": "token0",
												"nameLocation": "8194:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 735,
												"src": "8186:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 711,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8186:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 714,
												"mutability": "mutable",
												"name": "token1",
												"nameLocation": "8209:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 735,
												"src": "8201:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 713,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8201:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 716,
												"mutability": "mutable",
												"name": "_fee",
												"nameLocation": "8223:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 735,
												"src": "8216:11:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 715,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "8216:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8185:43:0"
									},
									"returnParameters": {
										"id": 720,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 719,
												"mutability": "mutable",
												"name": "thisPool",
												"nameLocation": "8256:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 735,
												"src": "8248:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 718,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8248:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8247:18:0"
									},
									"scope": 826,
									"src": "8162:270:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 747,
										"nodeType": "Block",
										"src": "8542:53:0",
										"statements": [
											{
												"expression": {
													"expression": {
														"baseExpression": {
															"id": 742,
															"name": "_tradeMes",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 53,
															"src": "8560:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint64_$_t_struct$_tradeMes_$1177_storage_$",
																"typeString": "mapping(uint64 => struct ITimeStruct.tradeMes storage ref)"
															}
														},
														"id": 744,
														"indexExpression": {
															"id": 743,
															"name": "_id",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 737,
															"src": "8570:3:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "8560:14:0",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_tradeMes_$1177_storage",
															"typeString": "struct ITimeStruct.tradeMes storage ref"
														}
													},
													"id": 745,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "8575:12:0",
													"memberName": "buyerAddress",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 1174,
													"src": "8560:27:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 741,
												"id": 746,
												"nodeType": "Return",
												"src": "8553:34:0"
											}
										]
									},
									"id": 748,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getBuyer",
									"nameLocation": "8492:8:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 738,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 737,
												"mutability": "mutable",
												"name": "_id",
												"nameLocation": "8508:3:0",
												"nodeType": "VariableDeclaration",
												"scope": 748,
												"src": "8501:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 736,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "8501:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8500:12:0"
									},
									"returnParameters": {
										"id": 741,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 740,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 748,
												"src": "8534:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 739,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8534:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8533:9:0"
									},
									"scope": 826,
									"src": "8483:112:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 760,
										"nodeType": "Block",
										"src": "8703:54:0",
										"statements": [
											{
												"expression": {
													"expression": {
														"baseExpression": {
															"id": 755,
															"name": "_tradeMes",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 53,
															"src": "8721:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint64_$_t_struct$_tradeMes_$1177_storage_$",
																"typeString": "mapping(uint64 => struct ITimeStruct.tradeMes storage ref)"
															}
														},
														"id": 757,
														"indexExpression": {
															"id": 756,
															"name": "_id",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 750,
															"src": "8731:3:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "8721:14:0",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_tradeMes_$1177_storage",
															"typeString": "struct ITimeStruct.tradeMes storage ref"
														}
													},
													"id": 758,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "8736:13:0",
													"memberName": "solderAddress",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 1176,
													"src": "8721:28:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 754,
												"id": 759,
												"nodeType": "Return",
												"src": "8714:35:0"
											}
										]
									},
									"id": 761,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getSolder",
									"nameLocation": "8652:9:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 751,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 750,
												"mutability": "mutable",
												"name": "_id",
												"nameLocation": "8669:3:0",
												"nodeType": "VariableDeclaration",
												"scope": 761,
												"src": "8662:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 749,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "8662:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8661:12:0"
									},
									"returnParameters": {
										"id": 754,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 753,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 761,
												"src": "8695:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 752,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8695:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8694:9:0"
									},
									"scope": 826,
									"src": "8643:114:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 824,
										"nodeType": "Block",
										"src": "8910:456:0",
										"statements": [
											{
												"assignments": [
													771
												],
												"declarations": [
													{
														"constant": false,
														"id": 771,
														"mutability": "mutable",
														"name": "thisAmount",
														"nameLocation": "8929:10:0",
														"nodeType": "VariableDeclaration",
														"scope": 824,
														"src": "8921:18:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 770,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "8921:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 775,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													},
													"id": 774,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 772,
														"name": "_soldPrice",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 763,
														"src": "8942:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint128",
															"typeString": "uint128"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "*",
													"rightExpression": {
														"id": 773,
														"name": "_soldAmount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 765,
														"src": "8953:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint128",
															"typeString": "uint128"
														}
													},
													"src": "8942:22:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8921:43:0"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 782,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 778,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 776,
															"name": "thisAmount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 771,
															"src": "8979:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">=",
														"rightExpression": {
															"hexValue": "313030",
															"id": 777,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8993:9:0",
															"subdenomination": "ether",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_100000000000000000000_by_1",
																"typeString": "int_const 100000000000000000000"
															},
															"value": "100"
														},
														"src": "8979:23:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 781,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 779,
															"name": "thisAmount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 771,
															"src": "9006:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "<",
														"rightExpression": {
															"hexValue": "31303030",
															"id": 780,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9019:10:0",
															"subdenomination": "ether",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1000000000000000000000_by_1",
																"typeString": "int_const 1000000000000000000000"
															},
															"value": "1000"
														},
														"src": "9006:23:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "8979:50:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"id": 797,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 793,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 791,
																"name": "thisAmount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 771,
																"src": "9098:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"hexValue": "31303030",
																"id": 792,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "9112:10:0",
																"subdenomination": "ether",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1000000000000000000000_by_1",
																	"typeString": "int_const 1000000000000000000000"
																},
																"value": "1000"
															},
															"src": "9098:24:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&&",
														"rightExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 796,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 794,
																"name": "thisAmount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 771,
																"src": "9126:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"hexValue": "3130303030",
																"id": 795,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "9139:11:0",
																"subdenomination": "ether",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10000000000000000000000_by_1",
																	"typeString": "int_const 10000000000000000000000"
																},
																"value": "10000"
															},
															"src": "9126:24:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"src": "9098:52:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseBody": {
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 808,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 806,
																"name": "thisAmount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 771,
																"src": "9219:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "3130303030",
																"id": 807,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "9232:11:0",
																"subdenomination": "ether",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10000000000000000000000_by_1",
																	"typeString": "int_const 10000000000000000000000"
																},
																"value": "10000"
															},
															"src": "9219:24:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"falseBody": {
															"id": 820,
															"nodeType": "Block",
															"src": "9308:51:0",
															"statements": [
																{
																	"errorCall": {
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"id": 817,
																			"name": "NotEnoughAmount",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1149,
																			"src": "9330:15:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_error_pure$__$returns$__$",
																				"typeString": "function () pure"
																			}
																		},
																		"id": 818,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "9330:17:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_tuple$__$",
																			"typeString": "tuple()"
																		}
																	},
																	"id": 819,
																	"nodeType": "RevertStatement",
																	"src": "9323:24:0"
																}
															]
														},
														"id": 821,
														"nodeType": "IfStatement",
														"src": "9215:144:0",
														"trueBody": {
															"id": 816,
															"nodeType": "Block",
															"src": "9245:57:0",
															"statements": [
																{
																	"expression": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 814,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"components": [
																				{
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 811,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"id": 809,
																						"name": "thisAmount",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 771,
																						"src": "9268:10:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "*",
																					"rightExpression": {
																						"hexValue": "3235",
																						"id": 810,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "9281:2:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_25_by_1",
																							"typeString": "int_const 25"
																						},
																						"value": "25"
																					},
																					"src": "9268:15:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"id": 812,
																			"isConstant": false,
																			"isInlineArray": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "TupleExpression",
																			"src": "9267:17:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "/",
																		"rightExpression": {
																			"hexValue": "313030",
																			"id": 813,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9287:3:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_100_by_1",
																				"typeString": "int_const 100"
																			},
																			"value": "100"
																		},
																		"src": "9267:23:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"functionReturnParameters": 769,
																	"id": 815,
																	"nodeType": "Return",
																	"src": "9260:30:0"
																}
															]
														}
													},
													"id": 822,
													"nodeType": "IfStatement",
													"src": "9094:265:0",
													"trueBody": {
														"id": 805,
														"nodeType": "Block",
														"src": "9152:57:0",
														"statements": [
															{
																"expression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 803,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"components": [
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 800,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 798,
																					"name": "thisAmount",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 771,
																					"src": "9175:10:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "*",
																				"rightExpression": {
																					"hexValue": "3430",
																					"id": 799,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "9188:2:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_40_by_1",
																						"typeString": "int_const 40"
																					},
																					"value": "40"
																				},
																				"src": "9175:15:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"id": 801,
																		"isConstant": false,
																		"isInlineArray": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "TupleExpression",
																		"src": "9174:17:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "/",
																	"rightExpression": {
																		"hexValue": "313030",
																		"id": 802,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "9194:3:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_100_by_1",
																			"typeString": "int_const 100"
																		},
																		"value": "100"
																	},
																	"src": "9174:23:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"functionReturnParameters": 769,
																"id": 804,
																"nodeType": "Return",
																"src": "9167:30:0"
															}
														]
													}
												},
												"id": 823,
												"nodeType": "IfStatement",
												"src": "8975:384:0",
												"trueBody": {
													"id": 790,
													"nodeType": "Block",
													"src": "9031:57:0",
													"statements": [
														{
															"expression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 788,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 785,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 783,
																				"name": "thisAmount",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 771,
																				"src": "9054:10:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "*",
																			"rightExpression": {
																				"hexValue": "3530",
																				"id": 784,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "9067:2:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_50_by_1",
																					"typeString": "int_const 50"
																				},
																				"value": "50"
																			},
																			"src": "9054:15:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 786,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "9053:17:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"hexValue": "313030",
																	"id": 787,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9073:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_100_by_1",
																		"typeString": "int_const 100"
																	},
																	"value": "100"
																},
																"src": "9053:23:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"functionReturnParameters": 769,
															"id": 789,
															"nodeType": "Return",
															"src": "9046:30:0"
														}
													]
												}
											}
										]
									},
									"functionSelector": "98c50fdd",
									"id": 825,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getPenal",
									"nameLocation": "8832:8:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 766,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 763,
												"mutability": "mutable",
												"name": "_soldPrice",
												"nameLocation": "8849:10:0",
												"nodeType": "VariableDeclaration",
												"scope": 825,
												"src": "8841:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 762,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "8841:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 765,
												"mutability": "mutable",
												"name": "_soldAmount",
												"nameLocation": "8869:11:0",
												"nodeType": "VariableDeclaration",
												"scope": 825,
												"src": "8861:19:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 764,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "8861:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8840:41:0"
									},
									"returnParameters": {
										"id": 769,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 768,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 825,
												"src": "8902:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 767,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8902:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8901:9:0"
									},
									"scope": 826,
									"src": "8823:543:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "public"
								}
							],
							"scope": 827,
							"src": "419:8952:0",
							"usedErrors": [
								1149,
								1151,
								1153,
								1155,
								1157
							]
						}
					],
					"src": "31:9340:0"
				},
				"id": 0
			},
			"interfaces/IERC165.sol": {
				"ast": {
					"absolutePath": "interfaces/IERC165.sol",
					"exportedSymbols": {
						"IERC165": [
							838
						]
					},
					"id": 839,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 828,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "118:24:1"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC165",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 829,
								"nodeType": "StructuredDocumentation",
								"src": "146:287:1",
								"text": " @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."
							},
							"fullyImplemented": false,
							"id": 838,
							"linearizedBaseContracts": [
								838
							],
							"name": "IERC165",
							"nameLocation": "445:7:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 830,
										"nodeType": "StructuredDocumentation",
										"src": "460:347:1",
										"text": " @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."
									},
									"functionSelector": "01ffc9a7",
									"id": 837,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "supportsInterface",
									"nameLocation": "822:17:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 833,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 832,
												"mutability": "mutable",
												"name": "interfaceId",
												"nameLocation": "847:11:1",
												"nodeType": "VariableDeclaration",
												"scope": 837,
												"src": "840:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 831,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "840:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "839:20:1"
									},
									"returnParameters": {
										"id": 836,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 835,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 837,
												"src": "883:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 834,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "883:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "882:6:1"
									},
									"scope": 838,
									"src": "813:76:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 839,
							"src": "435:457:1",
							"usedErrors": []
						}
					],
					"src": "118:776:1"
				},
				"id": 1
			},
			"interfaces/IERC20.sol": {
				"ast": {
					"absolutePath": "interfaces/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							916
						]
					},
					"id": 917,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 840,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "109:23:2"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 841,
								"nodeType": "StructuredDocumentation",
								"src": "136:72:2",
								"text": " @dev Interface of the ERC20 standard as defined in the EIP."
							},
							"fullyImplemented": false,
							"id": 916,
							"linearizedBaseContracts": [
								916
							],
							"name": "IERC20",
							"nameLocation": "220:6:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 842,
										"nodeType": "StructuredDocumentation",
										"src": "234:163:2",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"eventSelector": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
									"id": 850,
									"name": "Transfer",
									"nameLocation": "409:8:2",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 849,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 844,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "434:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 850,
												"src": "418:20:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 843,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "418:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 846,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "456:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 850,
												"src": "440:18:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 845,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "440:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 848,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "468:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 850,
												"src": "460:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 847,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "460:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "417:57:2"
									},
									"src": "403:72:2"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 851,
										"nodeType": "StructuredDocumentation",
										"src": "483:151:2",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"eventSelector": "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
									"id": 859,
									"name": "Approval",
									"nameLocation": "646:8:2",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 858,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 853,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "671:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 859,
												"src": "655:21:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 852,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "655:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 855,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "694:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 859,
												"src": "678:23:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 854,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "678:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 857,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "711:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 859,
												"src": "703:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 856,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "703:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "654:63:2"
									},
									"src": "640:78:2"
								},
								{
									"documentation": {
										"id": 860,
										"nodeType": "StructuredDocumentation",
										"src": "726:68:2",
										"text": " @dev Returns the amount of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 865,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "809:11:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 861,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "820:2:2"
									},
									"returnParameters": {
										"id": 864,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 863,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 865,
												"src": "846:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 862,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "846:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "845:9:2"
									},
									"scope": 916,
									"src": "800:55:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 866,
										"nodeType": "StructuredDocumentation",
										"src": "863:74:2",
										"text": " @dev Returns the amount of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 873,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "952:9:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 869,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 868,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "970:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 873,
												"src": "962:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 867,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "962:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "961:17:2"
									},
									"returnParameters": {
										"id": 872,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 871,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 873,
												"src": "1002:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 870,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1002:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1001:9:2"
									},
									"scope": 916,
									"src": "943:68:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 874,
										"nodeType": "StructuredDocumentation",
										"src": "1019:208:2",
										"text": " @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 883,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "1242:8:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 879,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 876,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1259:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 883,
												"src": "1251:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 875,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1251:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 878,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1271:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 883,
												"src": "1263:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 877,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1263:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1250:28:2"
									},
									"returnParameters": {
										"id": 882,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 881,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 883,
												"src": "1297:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 880,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1297:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1296:6:2"
									},
									"scope": 916,
									"src": "1233:70:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 884,
										"nodeType": "StructuredDocumentation",
										"src": "1311:270:2",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 893,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "1596:9:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 889,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 886,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1614:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 893,
												"src": "1606:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 885,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1606:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 888,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1629:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 893,
												"src": "1621:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 887,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1621:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1605:32:2"
									},
									"returnParameters": {
										"id": 892,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 891,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 893,
												"src": "1661:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 890,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1661:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1660:9:2"
									},
									"scope": 916,
									"src": "1587:83:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 894,
										"nodeType": "StructuredDocumentation",
										"src": "1678:655:2",
										"text": " @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 903,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "2348:7:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 899,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 896,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2364:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 903,
												"src": "2356:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 895,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2356:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 898,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2381:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 903,
												"src": "2373:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 897,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2373:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2355:33:2"
									},
									"returnParameters": {
										"id": 902,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 901,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 903,
												"src": "2407:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 900,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2407:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2406:6:2"
									},
									"scope": 916,
									"src": "2339:74:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 904,
										"nodeType": "StructuredDocumentation",
										"src": "2421:295:2",
										"text": " @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 915,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "2731:12:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 911,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 906,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2752:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 915,
												"src": "2744:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 905,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2744:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 908,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2766:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 915,
												"src": "2758:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 907,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2758:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 910,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2778:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 915,
												"src": "2770:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 909,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2770:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2743:42:2"
									},
									"returnParameters": {
										"id": 914,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 913,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 915,
												"src": "2804:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 912,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2804:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2803:6:2"
									},
									"scope": 916,
									"src": "2722:88:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 917,
							"src": "210:2603:2",
							"usedErrors": []
						}
					],
					"src": "109:2706:2"
				},
				"id": 2
			},
			"interfaces/IERC20Permit.sol": {
				"ast": {
					"absolutePath": "interfaces/IERC20Permit.sol",
					"exportedSymbols": {
						"IERC20Permit": [
							952
						]
					},
					"id": 953,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 918,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "126:24:3"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20Permit",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 919,
								"nodeType": "StructuredDocumentation",
								"src": "154:1998:3",
								"text": " @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n need to send a transaction, and thus is not required to hold Ether at all.\n ==== Security Considerations\n There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n considered as an intention to spend the allowance in any specific way. The second is that because permits have\n built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n generally recommended is:\n ```solidity\n function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n     doThing(..., value);\n }\n function doThing(..., uint256 value) public {\n     token.safeTransferFrom(msg.sender, address(this), value);\n     ...\n }\n ```\n Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n {SafeERC20-safeTransferFrom}).\n Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n contracts should have entry points that don't rely on permit."
							},
							"fullyImplemented": false,
							"id": 952,
							"linearizedBaseContracts": [
								952
							],
							"name": "IERC20Permit",
							"nameLocation": "2164:12:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 920,
										"nodeType": "StructuredDocumentation",
										"src": "2184:872:3",
										"text": " @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n given ``owner``'s signed approval.\n IMPORTANT: The same issues {IERC20-approve} has related to transaction\n ordering also apply here.\n Emits an {Approval} event.\n Requirements:\n - `spender` cannot be the zero address.\n - `deadline` must be a timestamp in the future.\n - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n over the EIP712-formatted function arguments.\n - the signature must use ``owner``'s current nonce (see {nonces}).\n For more information on the signature format, see the\n https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n section].\n CAUTION: See Security Considerations above."
									},
									"functionSelector": "d505accf",
									"id": 937,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "permit",
									"nameLocation": "3071:6:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 935,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 922,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3096:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 937,
												"src": "3088:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 921,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3088:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 924,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "3120:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 937,
												"src": "3112:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 923,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3112:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 926,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3146:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 937,
												"src": "3138:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 925,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3138:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 928,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "3170:8:3",
												"nodeType": "VariableDeclaration",
												"scope": 937,
												"src": "3162:16:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 927,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3162:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 930,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "3195:1:3",
												"nodeType": "VariableDeclaration",
												"scope": 937,
												"src": "3189:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 929,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "3189:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 932,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "3215:1:3",
												"nodeType": "VariableDeclaration",
												"scope": 937,
												"src": "3207:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 931,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3207:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 934,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "3235:1:3",
												"nodeType": "VariableDeclaration",
												"scope": 937,
												"src": "3227:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 933,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3227:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3077:166:3"
									},
									"returnParameters": {
										"id": 936,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3252:0:3"
									},
									"scope": 952,
									"src": "3062:191:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 938,
										"nodeType": "StructuredDocumentation",
										"src": "3261:300:3",
										"text": " @dev Returns the current nonce for `owner`. This value must be\n included whenever a signature is generated for {permit}.\n Every successful call to {permit} increases ``owner``'s nonce by one. This\n prevents a signature from being used multiple times."
									},
									"functionSelector": "7ecebe00",
									"id": 945,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "nonces",
									"nameLocation": "3576:6:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 941,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 940,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3591:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 945,
												"src": "3583:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 939,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3583:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3582:15:3"
									},
									"returnParameters": {
										"id": 944,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 943,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 945,
												"src": "3621:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 942,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3621:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3620:9:3"
									},
									"scope": 952,
									"src": "3567:63:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 946,
										"nodeType": "StructuredDocumentation",
										"src": "3638:130:3",
										"text": " @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
									},
									"functionSelector": "3644e515",
									"id": 951,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "DOMAIN_SEPARATOR",
									"nameLocation": "3837:16:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 947,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3853:2:3"
									},
									"returnParameters": {
										"id": 950,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 949,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 951,
												"src": "3879:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 948,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3879:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3878:9:3"
									},
									"scope": 952,
									"src": "3828:60:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 953,
							"src": "2154:1737:3",
							"usedErrors": []
						}
					],
					"src": "126:3767:3"
				},
				"id": 3
			},
			"interfaces/IERC721.sol": {
				"ast": {
					"absolutePath": "interfaces/IERC721.sol",
					"exportedSymbols": {
						"IERC165": [
							838
						],
						"IERC721": [
							1069
						]
					},
					"id": 1070,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 954,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "111:24:4"
						},
						{
							"absolutePath": "interfaces/IERC165.sol",
							"file": "../interfaces/IERC165.sol",
							"id": 956,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1070,
							"sourceUnit": 839,
							"src": "139:50:4",
							"symbolAliases": [
								{
									"foreign": {
										"id": 955,
										"name": "IERC165",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 838,
										"src": "147:7:4",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 958,
										"name": "IERC165",
										"nameLocations": [
											"285:7:4"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 838,
										"src": "285:7:4"
									},
									"id": 959,
									"nodeType": "InheritanceSpecifier",
									"src": "285:7:4"
								}
							],
							"canonicalName": "IERC721",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 957,
								"nodeType": "StructuredDocumentation",
								"src": "193:69:4",
								"text": " @dev Required interface of an ERC721 compliant contract."
							},
							"fullyImplemented": false,
							"id": 1069,
							"linearizedBaseContracts": [
								1069,
								838
							],
							"name": "IERC721",
							"nameLocation": "274:7:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 960,
										"nodeType": "StructuredDocumentation",
										"src": "300:90:4",
										"text": " @dev Emitted when `tokenId` token is transferred from `from` to `to`."
									},
									"eventSelector": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
									"id": 968,
									"name": "Transfer",
									"nameLocation": "402:8:4",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 967,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 962,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "427:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 968,
												"src": "411:20:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 961,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "411:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 964,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "449:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 968,
												"src": "433:18:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 963,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "433:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 966,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "469:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 968,
												"src": "453:23:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 965,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "453:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "410:67:4"
									},
									"src": "396:82:4"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 969,
										"nodeType": "StructuredDocumentation",
										"src": "486:96:4",
										"text": " @dev Emitted when `owner` enables `approved` to manage the `tokenId` token."
									},
									"eventSelector": "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
									"id": 977,
									"name": "Approval",
									"nameLocation": "594:8:4",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 976,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 971,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "619:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 977,
												"src": "603:21:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 970,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "603:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 973,
												"indexed": true,
												"mutability": "mutable",
												"name": "approved",
												"nameLocation": "642:8:4",
												"nodeType": "VariableDeclaration",
												"scope": 977,
												"src": "626:24:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 972,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "626:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 975,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "668:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 977,
												"src": "652:23:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 974,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "652:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "602:74:4"
									},
									"src": "588:89:4"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 978,
										"nodeType": "StructuredDocumentation",
										"src": "685:119:4",
										"text": " @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
									},
									"eventSelector": "17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31",
									"id": 986,
									"name": "ApprovalForAll",
									"nameLocation": "816:14:4",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 985,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 980,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "847:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 986,
												"src": "831:21:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 979,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "831:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 982,
												"indexed": true,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "870:8:4",
												"nodeType": "VariableDeclaration",
												"scope": 986,
												"src": "854:24:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 981,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "854:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 984,
												"indexed": false,
												"mutability": "mutable",
												"name": "approved",
												"nameLocation": "885:8:4",
												"nodeType": "VariableDeclaration",
												"scope": 986,
												"src": "880:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 983,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "880:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "830:64:4"
									},
									"src": "810:85:4"
								},
								{
									"documentation": {
										"id": 987,
										"nodeType": "StructuredDocumentation",
										"src": "903:78:4",
										"text": " @dev Returns the number of tokens in ``owner``'s account."
									},
									"functionSelector": "70a08231",
									"id": 994,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "996:9:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 990,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 989,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1014:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 994,
												"src": "1006:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 988,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1006:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1005:15:4"
									},
									"returnParameters": {
										"id": 993,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 992,
												"mutability": "mutable",
												"name": "balance",
												"nameLocation": "1052:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 994,
												"src": "1044:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 991,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1044:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1043:17:4"
									},
									"scope": 1069,
									"src": "987:74:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 995,
										"nodeType": "StructuredDocumentation",
										"src": "1069:137:4",
										"text": " @dev Returns the owner of the `tokenId` token.\n Requirements:\n - `tokenId` must exist."
									},
									"functionSelector": "6352211e",
									"id": 1002,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "ownerOf",
									"nameLocation": "1221:7:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 998,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 997,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "1237:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 1002,
												"src": "1229:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 996,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1229:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1228:17:4"
									},
									"returnParameters": {
										"id": 1001,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1000,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1277:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 1002,
												"src": "1269:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 999,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1269:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1268:15:4"
									},
									"scope": 1069,
									"src": "1212:72:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1003,
										"nodeType": "StructuredDocumentation",
										"src": "1292:578:4",
										"text": " @dev Safely transfers `tokenId` token from `from` to `to`.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n   a safe transfer.\n Emits a {Transfer} event."
									},
									"functionSelector": "b88d4fde",
									"id": 1014,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "1885:16:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1012,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1005,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "1910:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 1014,
												"src": "1902:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1004,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1902:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1007,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1924:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 1014,
												"src": "1916:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1006,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1916:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1009,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "1936:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 1014,
												"src": "1928:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1008,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1928:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1011,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "1960:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 1014,
												"src": "1945:19:4",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1010,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1945:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1901:64:4"
									},
									"returnParameters": {
										"id": 1013,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1974:0:4"
									},
									"scope": 1069,
									"src": "1876:99:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1015,
										"nodeType": "StructuredDocumentation",
										"src": "1983:720:4",
										"text": " @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n are aware of the ERC721 protocol to prevent tokens from being forever locked.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\n   {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n   a safe transfer.\n Emits a {Transfer} event."
									},
									"functionSelector": "42842e0e",
									"id": 1024,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "2718:16:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1022,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1017,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2743:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 1024,
												"src": "2735:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1016,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2735:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1019,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2757:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 1024,
												"src": "2749:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1018,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2749:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1021,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "2769:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 1024,
												"src": "2761:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1020,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2761:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2734:43:4"
									},
									"returnParameters": {
										"id": 1023,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2786:0:4"
									},
									"scope": 1069,
									"src": "2709:78:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1025,
										"nodeType": "StructuredDocumentation",
										"src": "2795:747:4",
										"text": " @dev Transfers `tokenId` token from `from` to `to`.\n WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n understand this adds an external call which potentially creates a reentrancy vulnerability.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 1034,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "3557:12:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1032,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1027,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "3578:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 1034,
												"src": "3570:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1026,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3570:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1029,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "3592:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 1034,
												"src": "3584:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1028,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3584:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1031,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3604:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 1034,
												"src": "3596:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1030,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3596:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3569:43:4"
									},
									"returnParameters": {
										"id": 1033,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3621:0:4"
									},
									"scope": 1069,
									"src": "3548:74:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1035,
										"nodeType": "StructuredDocumentation",
										"src": "3630:464:4",
										"text": " @dev Gives permission to `to` to transfer `tokenId` token to another account.\n The approval is cleared when the token is transferred.\n Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n Requirements:\n - The caller must own the token or be an approved operator.\n - `tokenId` must exist.\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 1042,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "4109:7:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1040,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1037,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "4125:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 1042,
												"src": "4117:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1036,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4117:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1039,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "4137:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 1042,
												"src": "4129:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1038,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4129:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4116:29:4"
									},
									"returnParameters": {
										"id": 1041,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4154:0:4"
									},
									"scope": 1069,
									"src": "4100:55:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1043,
										"nodeType": "StructuredDocumentation",
										"src": "4163:324:4",
										"text": " @dev Approve or remove `operator` as an operator for the caller.\n Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n Requirements:\n - The `operator` cannot be the address zero.\n Emits an {ApprovalForAll} event."
									},
									"functionSelector": "a22cb465",
									"id": 1050,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setApprovalForAll",
									"nameLocation": "4502:17:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1048,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1045,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4528:8:4",
												"nodeType": "VariableDeclaration",
												"scope": 1050,
												"src": "4520:16:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1044,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4520:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1047,
												"mutability": "mutable",
												"name": "approved",
												"nameLocation": "4543:8:4",
												"nodeType": "VariableDeclaration",
												"scope": 1050,
												"src": "4538:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1046,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4538:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4519:33:4"
									},
									"returnParameters": {
										"id": 1049,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4561:0:4"
									},
									"scope": 1069,
									"src": "4493:69:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1051,
										"nodeType": "StructuredDocumentation",
										"src": "4570:145:4",
										"text": " @dev Returns the account approved for `tokenId` token.\n Requirements:\n - `tokenId` must exist."
									},
									"functionSelector": "081812fc",
									"id": 1058,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getApproved",
									"nameLocation": "4730:11:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1054,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1053,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "4750:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 1058,
												"src": "4742:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1052,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4742:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4741:17:4"
									},
									"returnParameters": {
										"id": 1057,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1056,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4790:8:4",
												"nodeType": "VariableDeclaration",
												"scope": 1058,
												"src": "4782:16:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1055,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4782:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4781:18:4"
									},
									"scope": 1069,
									"src": "4721:79:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1059,
										"nodeType": "StructuredDocumentation",
										"src": "4808:142:4",
										"text": " @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n See {setApprovalForAll}"
									},
									"functionSelector": "e985e9c5",
									"id": 1068,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isApprovedForAll",
									"nameLocation": "4965:16:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1064,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1061,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "4990:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 1068,
												"src": "4982:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1060,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4982:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1063,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "5005:8:4",
												"nodeType": "VariableDeclaration",
												"scope": 1068,
												"src": "4997:16:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1062,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4997:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4981:33:4"
									},
									"returnParameters": {
										"id": 1067,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1066,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1068,
												"src": "5038:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1065,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5038:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5037:6:4"
									},
									"scope": 1069,
									"src": "4956:88:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1070,
							"src": "264:4783:4",
							"usedErrors": []
						}
					],
					"src": "111:4938:4"
				},
				"id": 4
			},
			"interfaces/IERC721Enumerable.sol": {
				"ast": {
					"absolutePath": "interfaces/IERC721Enumerable.sol",
					"exportedSymbols": {
						"IERC165": [
							838
						],
						"IERC721": [
							1069
						],
						"IERC721Enumerable": [
							1100
						]
					},
					"id": 1101,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1071,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "35:24:5"
						},
						{
							"absolutePath": "interfaces/IERC721.sol",
							"file": "../interfaces/IERC721.sol",
							"id": 1072,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1101,
							"sourceUnit": 1070,
							"src": "63:35:5",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1074,
										"name": "IERC721",
										"nameLocations": [
											"274:7:5"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1069,
										"src": "274:7:5"
									},
									"id": 1075,
									"nodeType": "InheritanceSpecifier",
									"src": "274:7:5"
								}
							],
							"canonicalName": "IERC721Enumerable",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1073,
								"nodeType": "StructuredDocumentation",
								"src": "102:139:5",
								"text": " @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n @dev See https://eips.ethereum.org/EIPS/eip-721"
							},
							"fullyImplemented": false,
							"id": 1100,
							"linearizedBaseContracts": [
								1100,
								1069,
								838
							],
							"name": "IERC721Enumerable",
							"nameLocation": "253:17:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1076,
										"nodeType": "StructuredDocumentation",
										"src": "291:84:5",
										"text": " @dev Returns the total amount of tokens stored by the contract."
									},
									"functionSelector": "18160ddd",
									"id": 1081,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "390:11:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1077,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "401:2:5"
									},
									"returnParameters": {
										"id": 1080,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1079,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1081,
												"src": "427:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1078,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "427:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "426:9:5"
									},
									"scope": 1100,
									"src": "381:55:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1082,
										"nodeType": "StructuredDocumentation",
										"src": "444:174:5",
										"text": " @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n Use along with {balanceOf} to enumerate all of ``owner``'s tokens."
									},
									"functionSelector": "2f745c59",
									"id": 1091,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "tokenOfOwnerByIndex",
									"nameLocation": "633:19:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1087,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1084,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "661:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1091,
												"src": "653:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1083,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "653:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1086,
												"mutability": "mutable",
												"name": "index",
												"nameLocation": "676:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1091,
												"src": "668:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1085,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "668:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "652:30:5"
									},
									"returnParameters": {
										"id": 1090,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1089,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "714:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 1091,
												"src": "706:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1088,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "706:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "705:17:5"
									},
									"scope": 1100,
									"src": "624:99:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1092,
										"nodeType": "StructuredDocumentation",
										"src": "731:167:5",
										"text": " @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n Use along with {totalSupply} to enumerate all tokens."
									},
									"functionSelector": "4f6ccce7",
									"id": 1099,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "tokenByIndex",
									"nameLocation": "913:12:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1095,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1094,
												"mutability": "mutable",
												"name": "index",
												"nameLocation": "934:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1099,
												"src": "926:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1093,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "926:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "925:15:5"
									},
									"returnParameters": {
										"id": 1098,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1097,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1099,
												"src": "964:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1096,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "964:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "963:9:5"
									},
									"scope": 1100,
									"src": "904:69:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1101,
							"src": "243:733:5",
							"usedErrors": []
						}
					],
					"src": "35:943:5"
				},
				"id": 5
			},
			"interfaces/IERC721Metadata.sol": {
				"ast": {
					"absolutePath": "interfaces/IERC721Metadata.sol",
					"exportedSymbols": {
						"IERC165": [
							838
						],
						"IERC721": [
							1069
						],
						"IERC721Metadata": [
							1127
						]
					},
					"id": 1128,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1102,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "115:24:6"
						},
						{
							"absolutePath": "interfaces/IERC721.sol",
							"file": "../interfaces/IERC721.sol",
							"id": 1103,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1128,
							"sourceUnit": 1070,
							"src": "143:35:6",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1105,
										"name": "IERC721",
										"nameLocations": [
											"349:7:6"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1069,
										"src": "349:7:6"
									},
									"id": 1106,
									"nodeType": "InheritanceSpecifier",
									"src": "349:7:6"
								}
							],
							"canonicalName": "IERC721Metadata",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1104,
								"nodeType": "StructuredDocumentation",
								"src": "182:136:6",
								"text": " @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n @dev See https://eips.ethereum.org/EIPS/eip-721"
							},
							"fullyImplemented": false,
							"id": 1127,
							"linearizedBaseContracts": [
								1127,
								1069,
								838
							],
							"name": "IERC721Metadata",
							"nameLocation": "330:15:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1107,
										"nodeType": "StructuredDocumentation",
										"src": "364:60:6",
										"text": " @dev Returns the token collection name."
									},
									"functionSelector": "06fdde03",
									"id": 1112,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "439:4:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1108,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "443:2:6"
									},
									"returnParameters": {
										"id": 1111,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1110,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1112,
												"src": "469:13:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1109,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "469:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "468:15:6"
									},
									"scope": 1127,
									"src": "430:54:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1113,
										"nodeType": "StructuredDocumentation",
										"src": "492:62:6",
										"text": " @dev Returns the token collection symbol."
									},
									"functionSelector": "95d89b41",
									"id": 1118,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "569:6:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1114,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "575:2:6"
									},
									"returnParameters": {
										"id": 1117,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1116,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1118,
												"src": "601:13:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1115,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "601:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "600:15:6"
									},
									"scope": 1127,
									"src": "560:56:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1119,
										"nodeType": "StructuredDocumentation",
										"src": "624:92:6",
										"text": " @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token."
									},
									"functionSelector": "c87b56dd",
									"id": 1126,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "tokenURI",
									"nameLocation": "731:8:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1122,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1121,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "748:7:6",
												"nodeType": "VariableDeclaration",
												"scope": 1126,
												"src": "740:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1120,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "740:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "739:17:6"
									},
									"returnParameters": {
										"id": 1125,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1124,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1126,
												"src": "780:13:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1123,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "780:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "779:15:6"
									},
									"scope": 1127,
									"src": "722:73:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1128,
							"src": "320:478:6",
							"usedErrors": []
						}
					],
					"src": "115:683:6"
				},
				"id": 6
			},
			"interfaces/IERC721Receiver.sol": {
				"ast": {
					"absolutePath": "interfaces/IERC721Receiver.sol",
					"exportedSymbols": {
						"IERC721Receiver": [
							1145
						]
					},
					"id": 1146,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1129,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "119:24:7"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC721Receiver",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1130,
								"nodeType": "StructuredDocumentation",
								"src": "147:156:7",
								"text": " @title ERC721 token receiver interface\n @dev Interface for any contract that wants to support safeTransfers\n from ERC721 asset contracts."
							},
							"fullyImplemented": false,
							"id": 1145,
							"linearizedBaseContracts": [
								1145
							],
							"name": "IERC721Receiver",
							"nameLocation": "315:15:7",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1131,
										"nodeType": "StructuredDocumentation",
										"src": "338:501:7",
										"text": " @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n by `operator` from `from`, this function is called.\n It must return its Solidity selector to confirm the token transfer.\n If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`."
									},
									"functionSelector": "150b7a02",
									"id": 1144,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "onERC721Received",
									"nameLocation": "854:16:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1140,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1133,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "889:8:7",
												"nodeType": "VariableDeclaration",
												"scope": 1144,
												"src": "881:16:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1132,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "881:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1135,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "916:4:7",
												"nodeType": "VariableDeclaration",
												"scope": 1144,
												"src": "908:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1134,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "908:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1137,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "939:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 1144,
												"src": "931:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1136,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "931:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1139,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "972:4:7",
												"nodeType": "VariableDeclaration",
												"scope": 1144,
												"src": "957:19:7",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1138,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "957:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "870:113:7"
									},
									"returnParameters": {
										"id": 1143,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1142,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1144,
												"src": "1002:6:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 1141,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "1002:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1001:8:7"
									},
									"scope": 1145,
									"src": "845:165:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1146,
							"src": "305:708:7",
							"usedErrors": []
						}
					],
					"src": "119:894:7"
				},
				"id": 7
			},
			"interfaces/IError.sol": {
				"ast": {
					"absolutePath": "interfaces/IError.sol",
					"exportedSymbols": {
						"IError": [
							1158
						]
					},
					"id": 1159,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1147,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "31:24:8"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IError",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": true,
							"id": 1158,
							"linearizedBaseContracts": [
								1158
							],
							"name": "IError",
							"nameLocation": "69:6:8",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"errorSelector": "e008b5f9",
									"id": 1149,
									"name": "NotEnoughAmount",
									"nameLocation": "112:15:8",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1148,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "127:2:8"
									},
									"src": "106:24:8"
								},
								{
									"errorSelector": "42327169",
									"id": 1151,
									"name": "AlreadyInjectToken",
									"nameLocation": "189:18:8",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1150,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "207:2:8"
									},
									"src": "183:27:8"
								},
								{
									"errorSelector": "de4461cd",
									"id": 1153,
									"name": "NotInjectToken",
									"nameLocation": "269:14:8",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1152,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "283:2:8"
									},
									"src": "263:23:8"
								},
								{
									"errorSelector": "472e017e",
									"id": 1155,
									"name": "NotBuyer",
									"nameLocation": "321:8:8",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1154,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "329:2:8"
									},
									"src": "315:17:8"
								},
								{
									"errorSelector": "d7c498bf",
									"id": 1157,
									"name": "NorSolder",
									"nameLocation": "367:9:8",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1156,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "376:2:8"
									},
									"src": "361:18:8"
								}
							],
							"scope": 1159,
							"src": "59:323:8",
							"usedErrors": [
								1149,
								1151,
								1153,
								1155,
								1157
							]
						}
					],
					"src": "31:351:8"
				},
				"id": 8
			},
			"interfaces/ITimeStruct.sol": {
				"ast": {
					"absolutePath": "interfaces/ITimeStruct.sol",
					"exportedSymbols": {
						"ITimeStruct": [
							1178
						]
					},
					"id": 1179,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1160,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "31:24:9"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "ITimeStruct",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": true,
							"id": 1178,
							"linearizedBaseContracts": [
								1178
							],
							"name": "ITimeStruct",
							"nameLocation": "69:11:9",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "ITimeStruct.tradeMes",
									"id": 1177,
									"members": [
										{
											"constant": false,
											"id": 1162,
											"mutability": "mutable",
											"name": "tradeState",
											"nameLocation": "119:10:9",
											"nodeType": "VariableDeclaration",
											"scope": 1177,
											"src": "113:16:9",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint8",
												"typeString": "uint8"
											},
											"typeName": {
												"id": 1161,
												"name": "uint8",
												"nodeType": "ElementaryTypeName",
												"src": "113:5:9",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1164,
											"mutability": "mutable",
											"name": "tradeId",
											"nameLocation": "148:7:9",
											"nodeType": "VariableDeclaration",
											"scope": 1177,
											"src": "141:14:9",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint64",
												"typeString": "uint64"
											},
											"typeName": {
												"id": 1163,
												"name": "uint64",
												"nodeType": "ElementaryTypeName",
												"src": "141:6:9",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1166,
											"mutability": "mutable",
											"name": "buyTime",
											"nameLocation": "173:7:9",
											"nodeType": "VariableDeclaration",
											"scope": 1177,
											"src": "166:14:9",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint56",
												"typeString": "uint56"
											},
											"typeName": {
												"id": 1165,
												"name": "uint56",
												"nodeType": "ElementaryTypeName",
												"src": "166:6:9",
												"typeDescriptions": {
													"typeIdentifier": "t_uint56",
													"typeString": "uint56"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1168,
											"mutability": "mutable",
											"name": "buyTotalAmount",
											"nameLocation": "199:14:9",
											"nodeType": "VariableDeclaration",
											"scope": 1177,
											"src": "191:22:9",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint128",
												"typeString": "uint128"
											},
											"typeName": {
												"id": 1167,
												"name": "uint128",
												"nodeType": "ElementaryTypeName",
												"src": "191:7:9",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1170,
											"mutability": "mutable",
											"name": "buyPrice",
											"nameLocation": "259:8:9",
											"nodeType": "VariableDeclaration",
											"scope": 1177,
											"src": "251:16:9",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint128",
												"typeString": "uint128"
											},
											"typeName": {
												"id": 1169,
												"name": "uint128",
												"nodeType": "ElementaryTypeName",
												"src": "251:7:9",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1172,
											"mutability": "mutable",
											"name": "tokenAddress",
											"nameLocation": "321:12:9",
											"nodeType": "VariableDeclaration",
											"scope": 1177,
											"src": "313:20:9",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1171,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "313:7:9",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1174,
											"mutability": "mutable",
											"name": "buyerAddress",
											"nameLocation": "352:12:9",
											"nodeType": "VariableDeclaration",
											"scope": 1177,
											"src": "344:20:9",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1173,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "344:7:9",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1176,
											"mutability": "mutable",
											"name": "solderAddress",
											"nameLocation": "383:13:9",
											"nodeType": "VariableDeclaration",
											"scope": 1177,
											"src": "375:21:9",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1175,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "375:7:9",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "tradeMes",
									"nameLocation": "94:8:9",
									"nodeType": "StructDefinition",
									"scope": 1178,
									"src": "87:317:9",
									"visibility": "public"
								}
							],
							"scope": 1179,
							"src": "59:348:9",
							"usedErrors": []
						}
					],
					"src": "31:376:9"
				},
				"id": 9
			},
			"interfaces/IUniswapV3Factory.sol": {
				"ast": {
					"absolutePath": "interfaces/IUniswapV3Factory.sol",
					"exportedSymbols": {
						"IUniswapV3Factory": [
							1261
						]
					},
					"id": 1262,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1180,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "46:24:10"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IUniswapV3Factory",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1181,
								"nodeType": "StructuredDocumentation",
								"src": "74:165:10",
								"text": "@title The interface for the Uniswap V3 Factory\n @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees"
							},
							"fullyImplemented": false,
							"id": 1261,
							"linearizedBaseContracts": [
								1261
							],
							"name": "IUniswapV3Factory",
							"nameLocation": "249:17:10",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 1182,
										"nodeType": "StructuredDocumentation",
										"src": "274:187:10",
										"text": "@notice Emitted when the owner of the factory is changed\n @param oldOwner The owner before the owner was changed\n @param newOwner The owner after the owner was changed"
									},
									"eventSelector": "b532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c",
									"id": 1188,
									"name": "OwnerChanged",
									"nameLocation": "473:12:10",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1187,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1184,
												"indexed": true,
												"mutability": "mutable",
												"name": "oldOwner",
												"nameLocation": "502:8:10",
												"nodeType": "VariableDeclaration",
												"scope": 1188,
												"src": "486:24:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1183,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "486:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1186,
												"indexed": true,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "528:8:10",
												"nodeType": "VariableDeclaration",
												"scope": 1188,
												"src": "512:24:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1185,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "512:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "485:52:10"
									},
									"src": "467:71:10"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1189,
										"nodeType": "StructuredDocumentation",
										"src": "546:426:10",
										"text": "@notice Emitted when a pool is created\n @param token0 The first token of the pool by address sort order\n @param token1 The second token of the pool by address sort order\n @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n @param tickSpacing The minimum number of ticks between initialized ticks\n @param pool The address of the created pool"
									},
									"eventSelector": "783cca1c0412dd0d695e784568c96da2e9c22ff989357a2e8b1d9b2b4e6b7118",
									"id": 1201,
									"name": "PoolCreated",
									"nameLocation": "984:11:10",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1200,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1191,
												"indexed": true,
												"mutability": "mutable",
												"name": "token0",
												"nameLocation": "1022:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 1201,
												"src": "1006:22:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1190,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1006:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1193,
												"indexed": true,
												"mutability": "mutable",
												"name": "token1",
												"nameLocation": "1055:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 1201,
												"src": "1039:22:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1192,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1039:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1195,
												"indexed": true,
												"mutability": "mutable",
												"name": "fee",
												"nameLocation": "1087:3:10",
												"nodeType": "VariableDeclaration",
												"scope": 1201,
												"src": "1072:18:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 1194,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "1072:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1197,
												"indexed": false,
												"mutability": "mutable",
												"name": "tickSpacing",
												"nameLocation": "1107:11:10",
												"nodeType": "VariableDeclaration",
												"scope": 1201,
												"src": "1101:17:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1196,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1101:5:10",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1199,
												"indexed": false,
												"mutability": "mutable",
												"name": "pool",
												"nameLocation": "1137:4:10",
												"nodeType": "VariableDeclaration",
												"scope": 1201,
												"src": "1129:12:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1198,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1129:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "995:153:10"
									},
									"src": "978:171:10"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1202,
										"nodeType": "StructuredDocumentation",
										"src": "1157:277:10",
										"text": "@notice Emitted when a new fee amount is enabled for pool creation via the factory\n @param fee The enabled fee, denominated in hundredths of a bip\n @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee"
									},
									"eventSelector": "c66a3fdf07232cdd185febcc6579d408c241b47ae2f9907d84be655141eeaecc",
									"id": 1208,
									"name": "FeeAmountEnabled",
									"nameLocation": "1446:16:10",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1207,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1204,
												"indexed": true,
												"mutability": "mutable",
												"name": "fee",
												"nameLocation": "1478:3:10",
												"nodeType": "VariableDeclaration",
												"scope": 1208,
												"src": "1463:18:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 1203,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "1463:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1206,
												"indexed": true,
												"mutability": "mutable",
												"name": "tickSpacing",
												"nameLocation": "1497:11:10",
												"nodeType": "VariableDeclaration",
												"scope": 1208,
												"src": "1483:25:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1205,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1483:5:10",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1462:47:10"
									},
									"src": "1440:70:10"
								},
								{
									"documentation": {
										"id": 1209,
										"nodeType": "StructuredDocumentation",
										"src": "1518:165:10",
										"text": "@notice Returns the current owner of the factory\n @dev Can be changed by the current owner via setOwner\n @return The address of the factory owner"
									},
									"functionSelector": "8da5cb5b",
									"id": 1214,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nameLocation": "1698:5:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1210,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1703:2:10"
									},
									"returnParameters": {
										"id": 1213,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1212,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1214,
												"src": "1729:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1211,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1729:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1728:9:10"
									},
									"scope": 1261,
									"src": "1689:49:10",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1215,
										"nodeType": "StructuredDocumentation",
										"src": "1746:351:10",
										"text": "@notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\n @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\n @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\n @return The tick spacing"
									},
									"functionSelector": "22afcccb",
									"id": 1222,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "feeAmountTickSpacing",
									"nameLocation": "2112:20:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1218,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1217,
												"mutability": "mutable",
												"name": "fee",
												"nameLocation": "2140:3:10",
												"nodeType": "VariableDeclaration",
												"scope": 1222,
												"src": "2133:10:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 1216,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "2133:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2132:12:10"
									},
									"returnParameters": {
										"id": 1221,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1220,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1222,
												"src": "2168:5:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1219,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "2168:5:10",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2167:7:10"
									},
									"scope": 1261,
									"src": "2103:72:10",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1223,
										"nodeType": "StructuredDocumentation",
										"src": "2183:476:10",
										"text": "@notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\n @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\n @param tokenA The contract address of either token0 or token1\n @param tokenB The contract address of the other token\n @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n @return pool The pool address"
									},
									"functionSelector": "1698ee82",
									"id": 1234,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getPool",
									"nameLocation": "2674:7:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1230,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1225,
												"mutability": "mutable",
												"name": "tokenA",
												"nameLocation": "2700:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 1234,
												"src": "2692:14:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1224,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2692:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1227,
												"mutability": "mutable",
												"name": "tokenB",
												"nameLocation": "2725:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 1234,
												"src": "2717:14:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1226,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2717:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1229,
												"mutability": "mutable",
												"name": "fee",
												"nameLocation": "2749:3:10",
												"nodeType": "VariableDeclaration",
												"scope": 1234,
												"src": "2742:10:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 1228,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "2742:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2681:78:10"
									},
									"returnParameters": {
										"id": 1233,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1232,
												"mutability": "mutable",
												"name": "pool",
												"nameLocation": "2791:4:10",
												"nodeType": "VariableDeclaration",
												"scope": 1234,
												"src": "2783:12:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1231,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2783:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2782:14:10"
									},
									"scope": 1261,
									"src": "2665:132:10",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1235,
										"nodeType": "StructuredDocumentation",
										"src": "2805:561:10",
										"text": "@notice Creates a pool for the given two tokens and fee\n @param tokenA One of the two tokens in the desired pool\n @param tokenB The other of the two tokens in the desired pool\n @param fee The desired fee for the pool\n @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\n from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\n are invalid.\n @return pool The address of the newly created pool"
									},
									"functionSelector": "a1671295",
									"id": 1246,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "createPool",
									"nameLocation": "3381:10:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1242,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1237,
												"mutability": "mutable",
												"name": "tokenA",
												"nameLocation": "3410:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 1246,
												"src": "3402:14:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1236,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3402:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1239,
												"mutability": "mutable",
												"name": "tokenB",
												"nameLocation": "3435:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 1246,
												"src": "3427:14:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1238,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3427:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1241,
												"mutability": "mutable",
												"name": "fee",
												"nameLocation": "3459:3:10",
												"nodeType": "VariableDeclaration",
												"scope": 1246,
												"src": "3452:10:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 1240,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "3452:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3391:78:10"
									},
									"returnParameters": {
										"id": 1245,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1244,
												"mutability": "mutable",
												"name": "pool",
												"nameLocation": "3496:4:10",
												"nodeType": "VariableDeclaration",
												"scope": 1246,
												"src": "3488:12:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1243,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3488:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3487:14:10"
									},
									"scope": 1261,
									"src": "3372:130:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1247,
										"nodeType": "StructuredDocumentation",
										"src": "3510:146:10",
										"text": "@notice Updates the owner of the factory\n @dev Must be called by the current owner\n @param _owner The new owner of the factory"
									},
									"functionSelector": "13af4035",
									"id": 1252,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setOwner",
									"nameLocation": "3671:8:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1250,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1249,
												"mutability": "mutable",
												"name": "_owner",
												"nameLocation": "3688:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 1252,
												"src": "3680:14:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1248,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3680:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3679:16:10"
									},
									"returnParameters": {
										"id": 1251,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3704:0:10"
									},
									"scope": 1261,
									"src": "3662:43:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1253,
										"nodeType": "StructuredDocumentation",
										"src": "3713:329:10",
										"text": "@notice Enables a fee amount with the given tickSpacing\n @dev Fee amounts may never be removed once enabled\n @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\n @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount"
									},
									"functionSelector": "8a7c195f",
									"id": 1260,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "enableFeeAmount",
									"nameLocation": "4057:15:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1258,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1255,
												"mutability": "mutable",
												"name": "fee",
												"nameLocation": "4080:3:10",
												"nodeType": "VariableDeclaration",
												"scope": 1260,
												"src": "4073:10:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 1254,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "4073:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1257,
												"mutability": "mutable",
												"name": "tickSpacing",
												"nameLocation": "4091:11:10",
												"nodeType": "VariableDeclaration",
												"scope": 1260,
												"src": "4085:17:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1256,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "4085:5:10",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4072:31:10"
									},
									"returnParameters": {
										"id": 1259,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4112:0:10"
									},
									"scope": 1261,
									"src": "4048:65:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1262,
							"src": "239:3877:10",
							"usedErrors": []
						}
					],
					"src": "46:4070:10"
				},
				"id": 10
			},
			"interfaces/UniswapV3/IERC721Permit.sol": {
				"ast": {
					"absolutePath": "interfaces/UniswapV3/IERC721Permit.sol",
					"exportedSymbols": {
						"IERC165": [
							838
						],
						"IERC721": [
							1069
						],
						"IERC721Permit": [
							1296
						]
					},
					"id": 1297,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1263,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "46:24:11"
						},
						{
							"absolutePath": "interfaces/IERC721.sol",
							"file": "../../interfaces/IERC721.sol",
							"id": 1264,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1297,
							"sourceUnit": 1070,
							"src": "74:38:11",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1266,
										"name": "IERC721",
										"nameLocations": [
											"269:7:11"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1069,
										"src": "269:7:11"
									},
									"id": 1267,
									"nodeType": "InheritanceSpecifier",
									"src": "269:7:11"
								}
							],
							"canonicalName": "IERC721Permit",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1265,
								"nodeType": "StructuredDocumentation",
								"src": "116:126:11",
								"text": "@title ERC721 with permit\n @notice Extension to ERC721 that includes a permit function for signature based approvals"
							},
							"fullyImplemented": false,
							"id": 1296,
							"linearizedBaseContracts": [
								1296,
								1069,
								838
							],
							"name": "IERC721Permit",
							"nameLocation": "252:13:11",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1268,
										"nodeType": "StructuredDocumentation",
										"src": "284:105:11",
										"text": "@notice The permit typehash used in the permit signature\n @return The typehash for the permit"
									},
									"functionSelector": "30adf81f",
									"id": 1273,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "PERMIT_TYPEHASH",
									"nameLocation": "404:15:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1269,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "419:2:11"
									},
									"returnParameters": {
										"id": 1272,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1271,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1273,
												"src": "445:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1270,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "445:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "444:9:11"
									},
									"scope": 1296,
									"src": "395:59:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1274,
										"nodeType": "StructuredDocumentation",
										"src": "462:136:11",
										"text": "@notice The domain separator used in the permit signature\n @return The domain seperator used in encoding of permit signature"
									},
									"functionSelector": "3644e515",
									"id": 1279,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "DOMAIN_SEPARATOR",
									"nameLocation": "613:16:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1275,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "629:2:11"
									},
									"returnParameters": {
										"id": 1278,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1277,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1279,
												"src": "655:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1276,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "655:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "654:9:11"
									},
									"scope": 1296,
									"src": "604:60:11",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1280,
										"nodeType": "StructuredDocumentation",
										"src": "672:611:11",
										"text": "@notice Approve of a specific token ID for spending by spender via signature\n @param spender The account that is being approved\n @param tokenId The ID of the token that is being approved for spending\n @param deadline The deadline timestamp by which the call must be mined for the approve to work\n @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\n @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\n @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`"
									},
									"functionSelector": "7ac2ff7b",
									"id": 1295,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "permit",
									"nameLocation": "1298:6:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1293,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1282,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1323:7:11",
												"nodeType": "VariableDeclaration",
												"scope": 1295,
												"src": "1315:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1281,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1315:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1284,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "1349:7:11",
												"nodeType": "VariableDeclaration",
												"scope": 1295,
												"src": "1341:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1283,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1341:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1286,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "1375:8:11",
												"nodeType": "VariableDeclaration",
												"scope": 1295,
												"src": "1367:16:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1285,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1367:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1288,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "1400:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 1295,
												"src": "1394:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1287,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "1394:5:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1290,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "1420:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 1295,
												"src": "1412:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1289,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1412:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1292,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "1440:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 1295,
												"src": "1432:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1291,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1432:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1304:144:11"
									},
									"returnParameters": {
										"id": 1294,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1465:0:11"
									},
									"scope": 1296,
									"src": "1289:177:11",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1297,
							"src": "242:1227:11",
							"usedErrors": []
						}
					],
					"src": "46:1423:11"
				},
				"id": 11
			},
			"interfaces/UniswapV3/INonfungiblePositionManager.sol": {
				"ast": {
					"absolutePath": "interfaces/UniswapV3/INonfungiblePositionManager.sol",
					"exportedSymbols": {
						"IERC165": [
							838
						],
						"IERC721": [
							1069
						],
						"IERC721Enumerable": [
							1100
						],
						"IERC721Metadata": [
							1127
						],
						"IERC721Permit": [
							1296
						],
						"INonfungiblePositionManager": [
							1495
						],
						"IPeripheryImmutableState": [
							1511
						],
						"IPeripheryPayments": [
							1537
						],
						"IPoolInitializer": [
							1556
						],
						"PoolAddress": [
							1986
						]
					},
					"id": 1496,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1298,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "31:24:12"
						},
						{
							"id": 1299,
							"literals": [
								"abicoder",
								"v2"
							],
							"nodeType": "PragmaDirective",
							"src": "57:19:12"
						},
						{
							"absolutePath": "interfaces/IERC721Metadata.sol",
							"file": "../../interfaces/IERC721Metadata.sol",
							"id": 1300,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1496,
							"sourceUnit": 1128,
							"src": "80:46:12",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "interfaces/IERC721Enumerable.sol",
							"file": "../../interfaces/IERC721Enumerable.sol",
							"id": 1301,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1496,
							"sourceUnit": 1101,
							"src": "128:48:12",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "interfaces/UniswapV3/IPoolInitializer.sol",
							"file": "../../interfaces/UniswapV3/IPoolInitializer.sol",
							"id": 1302,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1496,
							"sourceUnit": 1557,
							"src": "180:57:12",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "interfaces/UniswapV3/IERC721Permit.sol",
							"file": "../../interfaces/UniswapV3/IERC721Permit.sol",
							"id": 1303,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1496,
							"sourceUnit": 1297,
							"src": "239:54:12",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "interfaces/UniswapV3/IPeripheryPayments.sol",
							"file": "../../interfaces/UniswapV3/IPeripheryPayments.sol",
							"id": 1304,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1496,
							"sourceUnit": 1538,
							"src": "295:59:12",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "interfaces/UniswapV3/IPeripheryImmutableState.sol",
							"file": "../../interfaces/UniswapV3/IPeripheryImmutableState.sol",
							"id": 1305,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1496,
							"sourceUnit": 1512,
							"src": "356:65:12",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "libraries/PoolAddress.sol",
							"file": "../../libraries/PoolAddress.sol",
							"id": 1306,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1496,
							"sourceUnit": 1987,
							"src": "423:41:12",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1308,
										"name": "IPoolInitializer",
										"nameLocations": [
											"694:16:12"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1556,
										"src": "694:16:12"
									},
									"id": 1309,
									"nodeType": "InheritanceSpecifier",
									"src": "694:16:12"
								},
								{
									"baseName": {
										"id": 1310,
										"name": "IPeripheryPayments",
										"nameLocations": [
											"717:18:12"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1537,
										"src": "717:18:12"
									},
									"id": 1311,
									"nodeType": "InheritanceSpecifier",
									"src": "717:18:12"
								},
								{
									"baseName": {
										"id": 1312,
										"name": "IPeripheryImmutableState",
										"nameLocations": [
											"742:24:12"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1511,
										"src": "742:24:12"
									},
									"id": 1313,
									"nodeType": "InheritanceSpecifier",
									"src": "742:24:12"
								},
								{
									"baseName": {
										"id": 1314,
										"name": "IERC721Metadata",
										"nameLocations": [
											"773:15:12"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1127,
										"src": "773:15:12"
									},
									"id": 1315,
									"nodeType": "InheritanceSpecifier",
									"src": "773:15:12"
								},
								{
									"baseName": {
										"id": 1316,
										"name": "IERC721Enumerable",
										"nameLocations": [
											"795:17:12"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1100,
										"src": "795:17:12"
									},
									"id": 1317,
									"nodeType": "InheritanceSpecifier",
									"src": "795:17:12"
								},
								{
									"baseName": {
										"id": 1318,
										"name": "IERC721Permit",
										"nameLocations": [
											"819:13:12"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1296,
										"src": "819:13:12"
									},
									"id": 1319,
									"nodeType": "InheritanceSpecifier",
									"src": "819:13:12"
								}
							],
							"canonicalName": "INonfungiblePositionManager",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1307,
								"nodeType": "StructuredDocumentation",
								"src": "468:180:12",
								"text": "@title Non-fungible token for positions\n @notice Wraps Uniswap V3 positions in a non-fungible token interface which allows for them to be transferred\n and authorized."
							},
							"fullyImplemented": false,
							"id": 1495,
							"linearizedBaseContracts": [
								1495,
								1296,
								1100,
								1127,
								1069,
								838,
								1511,
								1537,
								1556
							],
							"name": "INonfungiblePositionManager",
							"nameLocation": "658:27:12",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 1320,
										"nodeType": "StructuredDocumentation",
										"src": "841:463:12",
										"text": "@notice Emitted when liquidity is increased for a position NFT\n @dev Also emitted when a token is minted\n @param tokenId The ID of the token for which liquidity was increased\n @param liquidity The amount by which liquidity for the NFT position was increased\n @param amount0 The amount of token0 that was paid for the increase in liquidity\n @param amount1 The amount of token1 that was paid for the increase in liquidity"
									},
									"eventSelector": "3067048beee31b25b2f1681f88dac838c8bba36af25bfb2b7cf7473a5847e35f",
									"id": 1330,
									"name": "IncreaseLiquidity",
									"nameLocation": "1316:17:12",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1329,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1322,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "1350:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 1330,
												"src": "1334:23:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1321,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1334:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1324,
												"indexed": false,
												"mutability": "mutable",
												"name": "liquidity",
												"nameLocation": "1367:9:12",
												"nodeType": "VariableDeclaration",
												"scope": 1330,
												"src": "1359:17:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1323,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "1359:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1326,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nameLocation": "1386:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 1330,
												"src": "1378:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1325,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1378:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1328,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nameLocation": "1403:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 1330,
												"src": "1395:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1327,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1395:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1333:78:12"
									},
									"src": "1310:102:12"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1331,
										"nodeType": "StructuredDocumentation",
										"src": "1418:423:12",
										"text": "@notice Emitted when liquidity is decreased for a position NFT\n @param tokenId The ID of the token for which liquidity was decreased\n @param liquidity The amount by which liquidity for the NFT position was decreased\n @param amount0 The amount of token0 that was accounted for the decrease in liquidity\n @param amount1 The amount of token1 that was accounted for the decrease in liquidity"
									},
									"eventSelector": "26f6a048ee9138f2c0ce266f322cb99228e8d619ae2bff30c67f8dcf9d2377b4",
									"id": 1341,
									"name": "DecreaseLiquidity",
									"nameLocation": "1853:17:12",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1340,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1333,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "1887:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 1341,
												"src": "1871:23:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1332,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1871:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1335,
												"indexed": false,
												"mutability": "mutable",
												"name": "liquidity",
												"nameLocation": "1904:9:12",
												"nodeType": "VariableDeclaration",
												"scope": 1341,
												"src": "1896:17:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1334,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "1896:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1337,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nameLocation": "1923:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 1341,
												"src": "1915:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1336,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1915:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1339,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nameLocation": "1940:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 1341,
												"src": "1932:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1338,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1932:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1870:78:12"
									},
									"src": "1847:102:12"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1342,
										"nodeType": "StructuredDocumentation",
										"src": "1955:527:12",
										"text": "@notice Emitted when tokens are collected for a position NFT\n @dev The amounts reported may not be exactly equivalent to the amounts transferred, due to rounding behavior\n @param tokenId The ID of the token for which underlying tokens were collected\n @param recipient The address of the account that received the collected tokens\n @param amount0 The amount of token0 owed to the position that was collected\n @param amount1 The amount of token1 owed to the position that was collected"
									},
									"eventSelector": "40d0efd1a53d60ecbf40971b9daf7dc90178c3aadc7aab1765632738fa8b8f01",
									"id": 1352,
									"name": "Collect",
									"nameLocation": "2494:7:12",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1351,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1344,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "2518:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 1352,
												"src": "2502:23:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1343,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2502:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1346,
												"indexed": false,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "2535:9:12",
												"nodeType": "VariableDeclaration",
												"scope": 1352,
												"src": "2527:17:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1345,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2527:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1348,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nameLocation": "2554:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 1352,
												"src": "2546:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1347,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2546:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1350,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nameLocation": "2571:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 1352,
												"src": "2563:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1349,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2563:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2501:78:12"
									},
									"src": "2488:92:12"
								},
								{
									"documentation": {
										"id": 1353,
										"nodeType": "StructuredDocumentation",
										"src": "2588:1171:12",
										"text": "@notice Returns the position information associated with a given token ID.\n @dev Throws if the token ID is not valid.\n @param tokenId The ID of the token that represents the position\n @return nonce The nonce for permits\n @return operator The address that is approved for spending\n @return token0 The address of the token0 for a specific pool\n @return token1 The address of the token1 for a specific pool\n @return fee The fee associated with the pool\n @return tickLower The lower end of the tick range for the position\n @return tickUpper The higher end of the tick range for the position\n @return liquidity The liquidity of the position\n @return feeGrowthInside0LastX128 The fee growth of token0 as of the last action on the individual position\n @return feeGrowthInside1LastX128 The fee growth of token1 as of the last action on the individual position\n @return tokensOwed0 The uncollected amount of token0 owed to the position as of the last computation\n @return tokensOwed1 The uncollected amount of token1 owed to the position as of the last computation"
									},
									"functionSelector": "99fbab88",
									"id": 1382,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "positions",
									"nameLocation": "3774:9:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1356,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1355,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3792:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 1382,
												"src": "3784:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1354,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3784:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3783:17:12"
									},
									"returnParameters": {
										"id": 1381,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1358,
												"mutability": "mutable",
												"name": "nonce",
												"nameLocation": "3872:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 1382,
												"src": "3865:12:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint96",
													"typeString": "uint96"
												},
												"typeName": {
													"id": 1357,
													"name": "uint96",
													"nodeType": "ElementaryTypeName",
													"src": "3865:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint96",
														"typeString": "uint96"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1360,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "3900:8:12",
												"nodeType": "VariableDeclaration",
												"scope": 1382,
												"src": "3892:16:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1359,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3892:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1362,
												"mutability": "mutable",
												"name": "token0",
												"nameLocation": "3931:6:12",
												"nodeType": "VariableDeclaration",
												"scope": 1382,
												"src": "3923:14:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1361,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3923:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1364,
												"mutability": "mutable",
												"name": "token1",
												"nameLocation": "3960:6:12",
												"nodeType": "VariableDeclaration",
												"scope": 1382,
												"src": "3952:14:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1363,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3952:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1366,
												"mutability": "mutable",
												"name": "fee",
												"nameLocation": "3988:3:12",
												"nodeType": "VariableDeclaration",
												"scope": 1382,
												"src": "3981:10:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 1365,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "3981:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1368,
												"mutability": "mutable",
												"name": "tickLower",
												"nameLocation": "4012:9:12",
												"nodeType": "VariableDeclaration",
												"scope": 1382,
												"src": "4006:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1367,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "4006:5:12",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1370,
												"mutability": "mutable",
												"name": "tickUpper",
												"nameLocation": "4042:9:12",
												"nodeType": "VariableDeclaration",
												"scope": 1382,
												"src": "4036:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1369,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "4036:5:12",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1372,
												"mutability": "mutable",
												"name": "liquidity",
												"nameLocation": "4074:9:12",
												"nodeType": "VariableDeclaration",
												"scope": 1382,
												"src": "4066:17:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1371,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "4066:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1374,
												"mutability": "mutable",
												"name": "feeGrowthInside0LastX128",
												"nameLocation": "4106:24:12",
												"nodeType": "VariableDeclaration",
												"scope": 1382,
												"src": "4098:32:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1373,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4098:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1376,
												"mutability": "mutable",
												"name": "feeGrowthInside1LastX128",
												"nameLocation": "4153:24:12",
												"nodeType": "VariableDeclaration",
												"scope": 1382,
												"src": "4145:32:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1375,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4145:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1378,
												"mutability": "mutable",
												"name": "tokensOwed0",
												"nameLocation": "4200:11:12",
												"nodeType": "VariableDeclaration",
												"scope": 1382,
												"src": "4192:19:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1377,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "4192:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1380,
												"mutability": "mutable",
												"name": "tokensOwed1",
												"nameLocation": "4234:11:12",
												"nodeType": "VariableDeclaration",
												"scope": 1382,
												"src": "4226:19:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1379,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "4226:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3850:406:12"
									},
									"scope": 1495,
									"src": "3765:492:12",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"canonicalName": "INonfungiblePositionManager.MintParams",
									"id": 1405,
									"members": [
										{
											"constant": false,
											"id": 1384,
											"mutability": "mutable",
											"name": "token0",
											"nameLocation": "4302:6:12",
											"nodeType": "VariableDeclaration",
											"scope": 1405,
											"src": "4294:14:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1383,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "4294:7:12",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1386,
											"mutability": "mutable",
											"name": "token1",
											"nameLocation": "4327:6:12",
											"nodeType": "VariableDeclaration",
											"scope": 1405,
											"src": "4319:14:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1385,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "4319:7:12",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1388,
											"mutability": "mutable",
											"name": "fee",
											"nameLocation": "4351:3:12",
											"nodeType": "VariableDeclaration",
											"scope": 1405,
											"src": "4344:10:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint24",
												"typeString": "uint24"
											},
											"typeName": {
												"id": 1387,
												"name": "uint24",
												"nodeType": "ElementaryTypeName",
												"src": "4344:6:12",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1390,
											"mutability": "mutable",
											"name": "tickLower",
											"nameLocation": "4371:9:12",
											"nodeType": "VariableDeclaration",
											"scope": 1405,
											"src": "4365:15:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_int24",
												"typeString": "int24"
											},
											"typeName": {
												"id": 1389,
												"name": "int24",
												"nodeType": "ElementaryTypeName",
												"src": "4365:5:12",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1392,
											"mutability": "mutable",
											"name": "tickUpper",
											"nameLocation": "4397:9:12",
											"nodeType": "VariableDeclaration",
											"scope": 1405,
											"src": "4391:15:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_int24",
												"typeString": "int24"
											},
											"typeName": {
												"id": 1391,
												"name": "int24",
												"nodeType": "ElementaryTypeName",
												"src": "4391:5:12",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1394,
											"mutability": "mutable",
											"name": "amount0Desired",
											"nameLocation": "4425:14:12",
											"nodeType": "VariableDeclaration",
											"scope": 1405,
											"src": "4417:22:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1393,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "4417:7:12",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1396,
											"mutability": "mutable",
											"name": "amount1Desired",
											"nameLocation": "4458:14:12",
											"nodeType": "VariableDeclaration",
											"scope": 1405,
											"src": "4450:22:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1395,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "4450:7:12",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1398,
											"mutability": "mutable",
											"name": "amount0Min",
											"nameLocation": "4491:10:12",
											"nodeType": "VariableDeclaration",
											"scope": 1405,
											"src": "4483:18:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1397,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "4483:7:12",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1400,
											"mutability": "mutable",
											"name": "amount1Min",
											"nameLocation": "4520:10:12",
											"nodeType": "VariableDeclaration",
											"scope": 1405,
											"src": "4512:18:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1399,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "4512:7:12",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1402,
											"mutability": "mutable",
											"name": "recipient",
											"nameLocation": "4549:9:12",
											"nodeType": "VariableDeclaration",
											"scope": 1405,
											"src": "4541:17:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1401,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "4541:7:12",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1404,
											"mutability": "mutable",
											"name": "deadline",
											"nameLocation": "4577:8:12",
											"nodeType": "VariableDeclaration",
											"scope": 1405,
											"src": "4569:16:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1403,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "4569:7:12",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "MintParams",
									"nameLocation": "4272:10:12",
									"nodeType": "StructDefinition",
									"scope": 1495,
									"src": "4265:328:12",
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 1406,
										"nodeType": "StructuredDocumentation",
										"src": "4601:593:12",
										"text": "@notice Creates a new position wrapped in a NFT\n @dev Call this when the pool does exist and is initialized. Note that if the pool is created but not initialized\n a method does not exist, i.e. the pool is assumed to be initialized.\n @param params The params necessary to mint a position, encoded as `MintParams` in calldata\n @return tokenId The ID of the token that represents the minted position\n @return liquidity The amount of liquidity for this position\n @return amount0 The amount of token0\n @return amount1 The amount of token1"
									},
									"functionSelector": "88316456",
									"id": 1420,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "mint",
									"nameLocation": "5209:4:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1410,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1409,
												"mutability": "mutable",
												"name": "params",
												"nameLocation": "5234:6:12",
												"nodeType": "VariableDeclaration",
												"scope": 1420,
												"src": "5214:26:12",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_MintParams_$1405_calldata_ptr",
													"typeString": "struct INonfungiblePositionManager.MintParams"
												},
												"typeName": {
													"id": 1408,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1407,
														"name": "MintParams",
														"nameLocations": [
															"5214:10:12"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1405,
														"src": "5214:10:12"
													},
													"referencedDeclaration": 1405,
													"src": "5214:10:12",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_MintParams_$1405_storage_ptr",
														"typeString": "struct INonfungiblePositionManager.MintParams"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5213:28:12"
									},
									"returnParameters": {
										"id": 1419,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1412,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "5317:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 1420,
												"src": "5309:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1411,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5309:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1414,
												"mutability": "mutable",
												"name": "liquidity",
												"nameLocation": "5347:9:12",
												"nodeType": "VariableDeclaration",
												"scope": 1420,
												"src": "5339:17:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1413,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "5339:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1416,
												"mutability": "mutable",
												"name": "amount0",
												"nameLocation": "5379:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 1420,
												"src": "5371:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1415,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5371:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1418,
												"mutability": "mutable",
												"name": "amount1",
												"nameLocation": "5409:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 1420,
												"src": "5401:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1417,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5401:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5294:133:12"
									},
									"scope": 1495,
									"src": "5200:228:12",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"canonicalName": "INonfungiblePositionManager.IncreaseLiquidityParams",
									"id": 1433,
									"members": [
										{
											"constant": false,
											"id": 1422,
											"mutability": "mutable",
											"name": "tokenId",
											"nameLocation": "5486:7:12",
											"nodeType": "VariableDeclaration",
											"scope": 1433,
											"src": "5478:15:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1421,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "5478:7:12",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1424,
											"mutability": "mutable",
											"name": "amount0Desired",
											"nameLocation": "5512:14:12",
											"nodeType": "VariableDeclaration",
											"scope": 1433,
											"src": "5504:22:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1423,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "5504:7:12",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1426,
											"mutability": "mutable",
											"name": "amount1Desired",
											"nameLocation": "5545:14:12",
											"nodeType": "VariableDeclaration",
											"scope": 1433,
											"src": "5537:22:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1425,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "5537:7:12",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1428,
											"mutability": "mutable",
											"name": "amount0Min",
											"nameLocation": "5578:10:12",
											"nodeType": "VariableDeclaration",
											"scope": 1433,
											"src": "5570:18:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1427,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "5570:7:12",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1430,
											"mutability": "mutable",
											"name": "amount1Min",
											"nameLocation": "5607:10:12",
											"nodeType": "VariableDeclaration",
											"scope": 1433,
											"src": "5599:18:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1429,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "5599:7:12",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1432,
											"mutability": "mutable",
											"name": "deadline",
											"nameLocation": "5636:8:12",
											"nodeType": "VariableDeclaration",
											"scope": 1433,
											"src": "5628:16:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1431,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "5628:7:12",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "IncreaseLiquidityParams",
									"nameLocation": "5443:23:12",
									"nodeType": "StructDefinition",
									"scope": 1495,
									"src": "5436:216:12",
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 1434,
										"nodeType": "StructuredDocumentation",
										"src": "5660:830:12",
										"text": "@notice Increases the amount of liquidity in a position, with tokens paid by the `msg.sender`\n @param params tokenId The ID of the token for which liquidity is being increased,\n amount0Desired The desired amount of token0 to be spent,\n amount1Desired The desired amount of token1 to be spent,\n amount0Min The minimum amount of token0 to spend, which serves as a slippage check,\n amount1Min The minimum amount of token1 to spend, which serves as a slippage check,\n deadline The time by which the transaction must be included to effect the change\n @return liquidity The new liquidity amount as a result of the increase\n @return amount0 The amount of token0 to acheive resulting liquidity\n @return amount1 The amount of token1 to acheive resulting liquidity"
									},
									"functionSelector": "219f5d17",
									"id": 1446,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "increaseLiquidity",
									"nameLocation": "6505:17:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1438,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1437,
												"mutability": "mutable",
												"name": "params",
												"nameLocation": "6556:6:12",
												"nodeType": "VariableDeclaration",
												"scope": 1446,
												"src": "6523:39:12",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_IncreaseLiquidityParams_$1433_calldata_ptr",
													"typeString": "struct INonfungiblePositionManager.IncreaseLiquidityParams"
												},
												"typeName": {
													"id": 1436,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1435,
														"name": "IncreaseLiquidityParams",
														"nameLocations": [
															"6523:23:12"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1433,
														"src": "6523:23:12"
													},
													"referencedDeclaration": 1433,
													"src": "6523:23:12",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_IncreaseLiquidityParams_$1433_storage_ptr",
														"typeString": "struct INonfungiblePositionManager.IncreaseLiquidityParams"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6522:41:12"
									},
									"returnParameters": {
										"id": 1445,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1440,
												"mutability": "mutable",
												"name": "liquidity",
												"nameLocation": "6639:9:12",
												"nodeType": "VariableDeclaration",
												"scope": 1446,
												"src": "6631:17:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1439,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "6631:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1442,
												"mutability": "mutable",
												"name": "amount0",
												"nameLocation": "6671:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 1446,
												"src": "6663:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1441,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6663:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1444,
												"mutability": "mutable",
												"name": "amount1",
												"nameLocation": "6701:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 1446,
												"src": "6693:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1443,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6693:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6616:103:12"
									},
									"scope": 1495,
									"src": "6496:224:12",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"canonicalName": "INonfungiblePositionManager.DecreaseLiquidityParams",
									"id": 1457,
									"members": [
										{
											"constant": false,
											"id": 1448,
											"mutability": "mutable",
											"name": "tokenId",
											"nameLocation": "6778:7:12",
											"nodeType": "VariableDeclaration",
											"scope": 1457,
											"src": "6770:15:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1447,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "6770:7:12",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1450,
											"mutability": "mutable",
											"name": "liquidity",
											"nameLocation": "6804:9:12",
											"nodeType": "VariableDeclaration",
											"scope": 1457,
											"src": "6796:17:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint128",
												"typeString": "uint128"
											},
											"typeName": {
												"id": 1449,
												"name": "uint128",
												"nodeType": "ElementaryTypeName",
												"src": "6796:7:12",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1452,
											"mutability": "mutable",
											"name": "amount0Min",
											"nameLocation": "6832:10:12",
											"nodeType": "VariableDeclaration",
											"scope": 1457,
											"src": "6824:18:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1451,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "6824:7:12",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1454,
											"mutability": "mutable",
											"name": "amount1Min",
											"nameLocation": "6861:10:12",
											"nodeType": "VariableDeclaration",
											"scope": 1457,
											"src": "6853:18:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1453,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "6853:7:12",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1456,
											"mutability": "mutable",
											"name": "deadline",
											"nameLocation": "6890:8:12",
											"nodeType": "VariableDeclaration",
											"scope": 1457,
											"src": "6882:16:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1455,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "6882:7:12",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "DecreaseLiquidityParams",
									"nameLocation": "6735:23:12",
									"nodeType": "StructDefinition",
									"scope": 1495,
									"src": "6728:178:12",
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 1458,
										"nodeType": "StructuredDocumentation",
										"src": "6914:709:12",
										"text": "@notice Decreases the amount of liquidity in a position and accounts it to the position\n @param params tokenId The ID of the token for which liquidity is being decreased,\n amount The amount by which liquidity will be decreased,\n amount0Min The minimum amount of token0 that should be accounted for the burned liquidity,\n amount1Min The minimum amount of token1 that should be accounted for the burned liquidity,\n deadline The time by which the transaction must be included to effect the change\n @return amount0 The amount of token0 accounted to the position's tokens owed\n @return amount1 The amount of token1 accounted to the position's tokens owed"
									},
									"functionSelector": "0c49ccbe",
									"id": 1468,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "decreaseLiquidity",
									"nameLocation": "7638:17:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1462,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1461,
												"mutability": "mutable",
												"name": "params",
												"nameLocation": "7689:6:12",
												"nodeType": "VariableDeclaration",
												"scope": 1468,
												"src": "7656:39:12",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_DecreaseLiquidityParams_$1457_calldata_ptr",
													"typeString": "struct INonfungiblePositionManager.DecreaseLiquidityParams"
												},
												"typeName": {
													"id": 1460,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1459,
														"name": "DecreaseLiquidityParams",
														"nameLocations": [
															"7656:23:12"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1457,
														"src": "7656:23:12"
													},
													"referencedDeclaration": 1457,
													"src": "7656:23:12",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_DecreaseLiquidityParams_$1457_storage_ptr",
														"typeString": "struct INonfungiblePositionManager.DecreaseLiquidityParams"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7655:41:12"
									},
									"returnParameters": {
										"id": 1467,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1464,
												"mutability": "mutable",
												"name": "amount0",
												"nameLocation": "7758:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 1468,
												"src": "7750:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1463,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7750:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1466,
												"mutability": "mutable",
												"name": "amount1",
												"nameLocation": "7775:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 1468,
												"src": "7767:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1465,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7767:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7749:34:12"
									},
									"scope": 1495,
									"src": "7629:155:12",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"canonicalName": "INonfungiblePositionManager.CollectParams",
									"id": 1477,
									"members": [
										{
											"constant": false,
											"id": 1470,
											"mutability": "mutable",
											"name": "tokenId",
											"nameLocation": "7832:7:12",
											"nodeType": "VariableDeclaration",
											"scope": 1477,
											"src": "7824:15:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1469,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "7824:7:12",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1472,
											"mutability": "mutable",
											"name": "recipient",
											"nameLocation": "7858:9:12",
											"nodeType": "VariableDeclaration",
											"scope": 1477,
											"src": "7850:17:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1471,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "7850:7:12",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1474,
											"mutability": "mutable",
											"name": "amount0Max",
											"nameLocation": "7886:10:12",
											"nodeType": "VariableDeclaration",
											"scope": 1477,
											"src": "7878:18:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint128",
												"typeString": "uint128"
											},
											"typeName": {
												"id": 1473,
												"name": "uint128",
												"nodeType": "ElementaryTypeName",
												"src": "7878:7:12",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1476,
											"mutability": "mutable",
											"name": "amount1Max",
											"nameLocation": "7915:10:12",
											"nodeType": "VariableDeclaration",
											"scope": 1477,
											"src": "7907:18:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint128",
												"typeString": "uint128"
											},
											"typeName": {
												"id": 1475,
												"name": "uint128",
												"nodeType": "ElementaryTypeName",
												"src": "7907:7:12",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "CollectParams",
									"nameLocation": "7799:13:12",
									"nodeType": "StructDefinition",
									"scope": 1495,
									"src": "7792:141:12",
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 1478,
										"nodeType": "StructuredDocumentation",
										"src": "7941:495:12",
										"text": "@notice Collects up to a maximum amount of fees owed to a specific position to the recipient\n @param params tokenId The ID of the NFT for which tokens are being collected,\n recipient The account that should receive the tokens,\n amount0Max The maximum amount of token0 to collect,\n amount1Max The maximum amount of token1 to collect\n @return amount0 The amount of fees collected in token0\n @return amount1 The amount of fees collected in token1"
									},
									"functionSelector": "fc6f7865",
									"id": 1488,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "collect",
									"nameLocation": "8451:7:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1482,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1481,
												"mutability": "mutable",
												"name": "params",
												"nameLocation": "8482:6:12",
												"nodeType": "VariableDeclaration",
												"scope": 1488,
												"src": "8459:29:12",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_CollectParams_$1477_calldata_ptr",
													"typeString": "struct INonfungiblePositionManager.CollectParams"
												},
												"typeName": {
													"id": 1480,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1479,
														"name": "CollectParams",
														"nameLocations": [
															"8459:13:12"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1477,
														"src": "8459:13:12"
													},
													"referencedDeclaration": 1477,
													"src": "8459:13:12",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_CollectParams_$1477_storage_ptr",
														"typeString": "struct INonfungiblePositionManager.CollectParams"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8458:31:12"
									},
									"returnParameters": {
										"id": 1487,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1484,
												"mutability": "mutable",
												"name": "amount0",
												"nameLocation": "8524:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 1488,
												"src": "8516:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1483,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8516:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1486,
												"mutability": "mutable",
												"name": "amount1",
												"nameLocation": "8541:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 1488,
												"src": "8533:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1485,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8533:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8515:34:12"
									},
									"scope": 1495,
									"src": "8442:108:12",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1489,
										"nodeType": "StructuredDocumentation",
										"src": "8558:215:12",
										"text": "@notice Burns a token ID, which deletes it from the NFT contract. The token must have 0 liquidity and all tokens\n must be collected first.\n @param tokenId The ID of the token that is being burned"
									},
									"functionSelector": "42966c68",
									"id": 1494,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "burn",
									"nameLocation": "8788:4:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1492,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1491,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "8801:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 1494,
												"src": "8793:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1490,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8793:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8792:17:12"
									},
									"returnParameters": {
										"id": 1493,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8826:0:12"
									},
									"scope": 1495,
									"src": "8779:48:12",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1496,
							"src": "648:8182:12",
							"usedErrors": []
						}
					],
					"src": "31:8799:12"
				},
				"id": 12
			},
			"interfaces/UniswapV3/IPeripheryImmutableState.sol": {
				"ast": {
					"absolutePath": "interfaces/UniswapV3/IPeripheryImmutableState.sol",
					"exportedSymbols": {
						"IPeripheryImmutableState": [
							1511
						]
					},
					"id": 1512,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1497,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "31:24:13"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IPeripheryImmutableState",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1498,
								"nodeType": "StructuredDocumentation",
								"src": "59:93:13",
								"text": "@title Immutable state\n @notice Functions that return immutable state of the router"
							},
							"fullyImplemented": false,
							"id": 1511,
							"linearizedBaseContracts": [
								1511
							],
							"name": "IPeripheryImmutableState",
							"nameLocation": "162:24:13",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1499,
										"nodeType": "StructuredDocumentation",
										"src": "194:57:13",
										"text": "@return Returns the address of the Uniswap V3 factory"
									},
									"functionSelector": "c45a0155",
									"id": 1504,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "factory",
									"nameLocation": "266:7:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1500,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "273:2:13"
									},
									"returnParameters": {
										"id": 1503,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1502,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1504,
												"src": "299:7:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1501,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "299:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "298:9:13"
									},
									"scope": 1511,
									"src": "257:51:13",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1505,
										"nodeType": "StructuredDocumentation",
										"src": "316:40:13",
										"text": "@return Returns the address of WETH9"
									},
									"functionSelector": "4aa4a4fc",
									"id": 1510,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "WETH9",
									"nameLocation": "371:5:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1506,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "376:2:13"
									},
									"returnParameters": {
										"id": 1509,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1508,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1510,
												"src": "402:7:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1507,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "402:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "401:9:13"
									},
									"scope": 1511,
									"src": "362:49:13",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1512,
							"src": "152:262:13",
							"usedErrors": []
						}
					],
					"src": "31:383:13"
				},
				"id": 13
			},
			"interfaces/UniswapV3/IPeripheryPayments.sol": {
				"ast": {
					"absolutePath": "interfaces/UniswapV3/IPeripheryPayments.sol",
					"exportedSymbols": {
						"IPeripheryPayments": [
							1537
						]
					},
					"id": 1538,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1513,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "31:24:14"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IPeripheryPayments",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1514,
								"nodeType": "StructuredDocumentation",
								"src": "59:94:14",
								"text": "@title Periphery Payments\n @notice Functions to ease deposits and withdrawals of ETH"
							},
							"fullyImplemented": false,
							"id": 1537,
							"linearizedBaseContracts": [
								1537
							],
							"name": "IPeripheryPayments",
							"nameLocation": "163:18:14",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1515,
										"nodeType": "StructuredDocumentation",
										"src": "189:305:14",
										"text": "@notice Unwraps the contract's WETH9 balance and sends it to recipient as ETH.\n @dev The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\n @param amountMinimum The minimum amount of WETH9 to unwrap\n @param recipient The address receiving ETH"
									},
									"functionSelector": "49404b7c",
									"id": 1522,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "unwrapWETH9",
									"nameLocation": "509:11:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1520,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1517,
												"mutability": "mutable",
												"name": "amountMinimum",
												"nameLocation": "529:13:14",
												"nodeType": "VariableDeclaration",
												"scope": 1522,
												"src": "521:21:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1516,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "521:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1519,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "552:9:14",
												"nodeType": "VariableDeclaration",
												"scope": 1522,
												"src": "544:17:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1518,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "544:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "520:42:14"
									},
									"returnParameters": {
										"id": 1521,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "579:0:14"
									},
									"scope": 1537,
									"src": "500:80:14",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1523,
										"nodeType": "StructuredDocumentation",
										"src": "588:227:14",
										"text": "@notice Refunds any ETH balance held by this contract to the `msg.sender`\n @dev Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps\n that use ether for the input amount"
									},
									"functionSelector": "12210e8a",
									"id": 1526,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "refundETH",
									"nameLocation": "830:9:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1524,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "839:2:14"
									},
									"returnParameters": {
										"id": 1525,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "858:0:14"
									},
									"scope": 1537,
									"src": "821:38:14",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1527,
										"nodeType": "StructuredDocumentation",
										"src": "867:431:14",
										"text": "@notice Transfers the full amount of a token held by this contract to recipient\n @dev The amountMinimum parameter prevents malicious contracts from stealing the token from users\n @param token The contract address of the token which will be transferred to `recipient`\n @param amountMinimum The minimum amount of token required for a transfer\n @param recipient The destination address of the token"
									},
									"functionSelector": "df2ab5bb",
									"id": 1536,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "sweepToken",
									"nameLocation": "1313:10:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1534,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1529,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1342:5:14",
												"nodeType": "VariableDeclaration",
												"scope": 1536,
												"src": "1334:13:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1528,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1334:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1531,
												"mutability": "mutable",
												"name": "amountMinimum",
												"nameLocation": "1366:13:14",
												"nodeType": "VariableDeclaration",
												"scope": 1536,
												"src": "1358:21:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1530,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1358:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1533,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "1398:9:14",
												"nodeType": "VariableDeclaration",
												"scope": 1536,
												"src": "1390:17:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1532,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1390:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1323:91:14"
									},
									"returnParameters": {
										"id": 1535,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1431:0:14"
									},
									"scope": 1537,
									"src": "1304:128:14",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1538,
							"src": "153:1282:14",
							"usedErrors": []
						}
					],
					"src": "31:1404:14"
				},
				"id": 14
			},
			"interfaces/UniswapV3/IPoolInitializer.sol": {
				"ast": {
					"absolutePath": "interfaces/UniswapV3/IPoolInitializer.sol",
					"exportedSymbols": {
						"IPoolInitializer": [
							1556
						]
					},
					"id": 1557,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1539,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "31:24:15"
						},
						{
							"id": 1540,
							"literals": [
								"abicoder",
								"v2"
							],
							"nodeType": "PragmaDirective",
							"src": "57:19:15"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IPoolInitializer",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1541,
								"nodeType": "StructuredDocumentation",
								"src": "80:197:15",
								"text": "@title Creates and initializes V3 Pools\n @notice Provides a method for creating and initializing a pool, if necessary, for bundling with other methods that\n require the pool to exist."
							},
							"fullyImplemented": false,
							"id": 1556,
							"linearizedBaseContracts": [
								1556
							],
							"name": "IPoolInitializer",
							"nameLocation": "287:16:15",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1542,
										"nodeType": "StructuredDocumentation",
										"src": "311:654:15",
										"text": "@notice Creates a new pool if it does not exist, then initializes if not initialized\n @dev This method can be bundled with others via IMulticall for the first action (e.g. mint) performed against a pool\n @param token0 The contract address of token0 of the pool\n @param token1 The contract address of token1 of the pool\n @param fee The fee amount of the v3 pool for the specified token pair\n @param sqrtPriceX96 The initial square root price of the pool as a Q64.96 value\n @return pool Returns the pool address based on the pair of tokens and fee, will return the newly created pool address if necessary"
									},
									"functionSelector": "13ead562",
									"id": 1555,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "createAndInitializePoolIfNecessary",
									"nameLocation": "980:34:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1551,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1544,
												"mutability": "mutable",
												"name": "token0",
												"nameLocation": "1033:6:15",
												"nodeType": "VariableDeclaration",
												"scope": 1555,
												"src": "1025:14:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1543,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1025:7:15",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1546,
												"mutability": "mutable",
												"name": "token1",
												"nameLocation": "1058:6:15",
												"nodeType": "VariableDeclaration",
												"scope": 1555,
												"src": "1050:14:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1545,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1050:7:15",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1548,
												"mutability": "mutable",
												"name": "fee",
												"nameLocation": "1082:3:15",
												"nodeType": "VariableDeclaration",
												"scope": 1555,
												"src": "1075:10:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 1547,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "1075:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1550,
												"mutability": "mutable",
												"name": "sqrtPriceX96",
												"nameLocation": "1104:12:15",
												"nodeType": "VariableDeclaration",
												"scope": 1555,
												"src": "1096:20:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 1549,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "1096:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1014:109:15"
									},
									"returnParameters": {
										"id": 1554,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1553,
												"mutability": "mutable",
												"name": "pool",
												"nameLocation": "1158:4:15",
												"nodeType": "VariableDeclaration",
												"scope": 1555,
												"src": "1150:12:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1552,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1150:7:15",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1149:14:15"
									},
									"scope": 1556,
									"src": "971:193:15",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1557,
							"src": "277:890:15",
							"usedErrors": []
						}
					],
					"src": "31:1136:15"
				},
				"id": 15
			},
			"libraries/Address.sol": {
				"ast": {
					"absolutePath": "libraries/Address.sol",
					"exportedSymbols": {
						"Address": [
							1886
						]
					},
					"id": 1887,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1558,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "104:24:16"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Address",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1559,
								"nodeType": "StructuredDocumentation",
								"src": "132:69:16",
								"text": " @dev Collection of functions related to the address type"
							},
							"fullyImplemented": true,
							"id": 1886,
							"linearizedBaseContracts": [
								1886
							],
							"name": "Address",
							"nameLocation": "211:7:16",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 1573,
										"nodeType": "Block",
										"src": "1518:260:16",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1571,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"expression": {
																"id": 1567,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1562,
																"src": "1747:7:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 1568,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "1755:4:16",
															"memberName": "code",
															"nodeType": "MemberAccess",
															"src": "1747:12:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1569,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1760:6:16",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "1747:19:16",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 1570,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1769:1:16",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1747:23:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1566,
												"id": 1572,
												"nodeType": "Return",
												"src": "1740:30:16"
											}
										]
									},
									"documentation": {
										"id": 1560,
										"nodeType": "StructuredDocumentation",
										"src": "226:1220:16",
										"text": " @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n Furthermore, `isContract` will also return true if the target contract within\n the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n which only has an effect at the end of a transaction.\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="
									},
									"id": 1574,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isContract",
									"nameLocation": "1461:10:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1563,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1562,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "1480:7:16",
												"nodeType": "VariableDeclaration",
												"scope": 1574,
												"src": "1472:15:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1561,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1472:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1471:17:16"
									},
									"returnParameters": {
										"id": 1566,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1565,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1574,
												"src": "1512:4:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1564,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1512:4:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1511:6:16"
									},
									"scope": 1886,
									"src": "1452:326:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1607,
										"nodeType": "Block",
										"src": "2782:246:16",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1589,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 1585,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "2809:4:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_Address_$1886",
																				"typeString": "library Address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_Address_$1886",
																				"typeString": "library Address"
																			}
																		],
																		"id": 1584,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2801:7:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 1583,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2801:7:16",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1586,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2801:13:16",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 1587,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "2815:7:16",
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "2801:21:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 1588,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1579,
																"src": "2826:6:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2801:31:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e6365",
															"id": 1590,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2834:31:16",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															},
															"value": "Address: insufficient balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															}
														],
														"id": 1582,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2793:7:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1591,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2793:73:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1592,
												"nodeType": "ExpressionStatement",
												"src": "2793:73:16"
											},
											{
												"assignments": [
													1594,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 1594,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "2885:7:16",
														"nodeType": "VariableDeclaration",
														"scope": 1607,
														"src": "2880:12:16",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1593,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "2880:4:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													null
												],
												"id": 1601,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "",
															"id": 1599,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2928:2:16",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																	"typeString": "literal_string \"\""
																}
															],
															"expression": {
																"id": 1595,
																"name": "recipient",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1577,
																"src": "2898:9:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"id": 1596,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "2908:4:16",
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "2898:14:16",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 1598,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 1597,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1579,
																"src": "2920:6:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "2898:29:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 1600,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2898:33:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2879:52:16"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1603,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1594,
															"src": "2950:7:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564",
															"id": 1604,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2959:60:16",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															},
															"value": "Address: unable to send value, recipient may have reverted"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															}
														],
														"id": 1602,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2942:7:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1605,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2942:78:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1606,
												"nodeType": "ExpressionStatement",
												"src": "2942:78:16"
											}
										]
									},
									"documentation": {
										"id": 1575,
										"nodeType": "StructuredDocumentation",
										"src": "1786:919:16",
										"text": " @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."
									},
									"id": 1608,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sendValue",
									"nameLocation": "2720:9:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1580,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1577,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "2746:9:16",
												"nodeType": "VariableDeclaration",
												"scope": 1608,
												"src": "2730:25:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 1576,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2730:15:16",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1579,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2765:6:16",
												"nodeType": "VariableDeclaration",
												"scope": 1608,
												"src": "2757:14:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1578,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2757:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2729:43:16"
									},
									"returnParameters": {
										"id": 1581,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2782:0:16"
									},
									"scope": 1886,
									"src": "2711:317:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1625,
										"nodeType": "Block",
										"src": "3879:98:16",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1619,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1611,
															"src": "3919:6:16",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1620,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1613,
															"src": "3927:4:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "30",
															"id": 1621,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3933:1:16",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564",
															"id": 1622,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3936:32:16",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															},
															"value": "Address: low-level call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															}
														],
														"id": 1618,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1666,
															1710
														],
														"referencedDeclaration": 1710,
														"src": "3897:21:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 1623,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3897:72:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 1617,
												"id": 1624,
												"nodeType": "Return",
												"src": "3890:79:16"
											}
										]
									},
									"documentation": {
										"id": 1609,
										"nodeType": "StructuredDocumentation",
										"src": "3036:748:16",
										"text": " @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"
									},
									"id": 1626,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nameLocation": "3799:12:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1614,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1611,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "3820:6:16",
												"nodeType": "VariableDeclaration",
												"scope": 1626,
												"src": "3812:14:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1610,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3812:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1613,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3841:4:16",
												"nodeType": "VariableDeclaration",
												"scope": 1626,
												"src": "3828:17:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1612,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3828:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3811:35:16"
									},
									"returnParameters": {
										"id": 1617,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1616,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1626,
												"src": "3865:12:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1615,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3865:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3864:14:16"
									},
									"scope": 1886,
									"src": "3790:187:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1645,
										"nodeType": "Block",
										"src": "4358:78:16",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1639,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1629,
															"src": "4398:6:16",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1640,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1631,
															"src": "4406:4:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "30",
															"id": 1641,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4412:1:16",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"id": 1642,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1633,
															"src": "4415:12:16",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 1638,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1666,
															1710
														],
														"referencedDeclaration": 1710,
														"src": "4376:21:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 1643,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4376:52:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 1637,
												"id": 1644,
												"nodeType": "Return",
												"src": "4369:59:16"
											}
										]
									},
									"documentation": {
										"id": 1627,
										"nodeType": "StructuredDocumentation",
										"src": "3985:216:16",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 1646,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nameLocation": "4216:12:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1634,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1629,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "4247:6:16",
												"nodeType": "VariableDeclaration",
												"scope": 1646,
												"src": "4239:14:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1628,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4239:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1631,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "4277:4:16",
												"nodeType": "VariableDeclaration",
												"scope": 1646,
												"src": "4264:17:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1630,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4264:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1633,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "4306:12:16",
												"nodeType": "VariableDeclaration",
												"scope": 1646,
												"src": "4292:26:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1632,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "4292:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4228:97:16"
									},
									"returnParameters": {
										"id": 1637,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1636,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1646,
												"src": "4344:12:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1635,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4344:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4343:14:16"
									},
									"scope": 1886,
									"src": "4207:229:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1665,
										"nodeType": "Block",
										"src": "4924:113:16",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1659,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1649,
															"src": "4964:6:16",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1660,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1651,
															"src": "4972:4:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 1661,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1653,
															"src": "4978:5:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564",
															"id": 1662,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4985:43:16",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															},
															"value": "Address: low-level call with value failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															}
														],
														"id": 1658,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1666,
															1710
														],
														"referencedDeclaration": 1710,
														"src": "4942:21:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 1663,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4942:87:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 1657,
												"id": 1664,
												"nodeType": "Return",
												"src": "4935:94:16"
											}
										]
									},
									"documentation": {
										"id": 1647,
										"nodeType": "StructuredDocumentation",
										"src": "4444:361:16",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"
									},
									"id": 1666,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nameLocation": "4820:21:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1654,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1649,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "4850:6:16",
												"nodeType": "VariableDeclaration",
												"scope": 1666,
												"src": "4842:14:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1648,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4842:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1651,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "4871:4:16",
												"nodeType": "VariableDeclaration",
												"scope": 1666,
												"src": "4858:17:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1650,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4858:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1653,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4885:5:16",
												"nodeType": "VariableDeclaration",
												"scope": 1666,
												"src": "4877:13:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1652,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4877:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4841:50:16"
									},
									"returnParameters": {
										"id": 1657,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1656,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1666,
												"src": "4910:12:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1655,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4910:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4909:14:16"
									},
									"scope": 1886,
									"src": "4811:226:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1709,
										"nodeType": "Block",
										"src": "5477:271:16",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1687,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 1683,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "5504:4:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_Address_$1886",
																				"typeString": "library Address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_Address_$1886",
																				"typeString": "library Address"
																			}
																		],
																		"id": 1682,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "5496:7:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 1681,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "5496:7:16",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1684,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "5496:13:16",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 1685,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "5510:7:16",
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "5496:21:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 1686,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1673,
																"src": "5521:5:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5496:30:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c",
															"id": 1688,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5528:40:16",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															},
															"value": "Address: insufficient balance for call"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															}
														],
														"id": 1680,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5488:7:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1689,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5488:81:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1690,
												"nodeType": "ExpressionStatement",
												"src": "5488:81:16"
											},
											{
												"assignments": [
													1692,
													1694
												],
												"declarations": [
													{
														"constant": false,
														"id": 1692,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "5586:7:16",
														"nodeType": "VariableDeclaration",
														"scope": 1709,
														"src": "5581:12:16",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1691,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "5581:4:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1694,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "5608:10:16",
														"nodeType": "VariableDeclaration",
														"scope": 1709,
														"src": "5595:23:16",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1693,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "5595:5:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1701,
												"initialValue": {
													"arguments": [
														{
															"id": 1699,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1671,
															"src": "5648:4:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"expression": {
																"id": 1695,
																"name": "target",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1669,
																"src": "5622:6:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 1696,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "5629:4:16",
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "5622:11:16",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 1698,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 1697,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1673,
																"src": "5641:5:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "5622:25:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 1700,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5622:31:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5580:73:16"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1703,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1669,
															"src": "5698:6:16",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1704,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1692,
															"src": "5706:7:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 1705,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1694,
															"src": "5715:10:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 1706,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1675,
															"src": "5727:12:16",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 1702,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1841,
														"src": "5671:26:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 1707,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5671:69:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 1679,
												"id": 1708,
												"nodeType": "Return",
												"src": "5664:76:16"
											}
										]
									},
									"documentation": {
										"id": 1667,
										"nodeType": "StructuredDocumentation",
										"src": "5045:242:16",
										"text": " @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 1710,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nameLocation": "5302:21:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1676,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1669,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "5342:6:16",
												"nodeType": "VariableDeclaration",
												"scope": 1710,
												"src": "5334:14:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1668,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5334:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1671,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5372:4:16",
												"nodeType": "VariableDeclaration",
												"scope": 1710,
												"src": "5359:17:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1670,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5359:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1673,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5395:5:16",
												"nodeType": "VariableDeclaration",
												"scope": 1710,
												"src": "5387:13:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1672,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5387:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1675,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "5425:12:16",
												"nodeType": "VariableDeclaration",
												"scope": 1710,
												"src": "5411:26:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1674,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5411:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5323:121:16"
									},
									"returnParameters": {
										"id": 1679,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1678,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1710,
												"src": "5463:12:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1677,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5463:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5462:14:16"
									},
									"scope": 1886,
									"src": "5293:455:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1726,
										"nodeType": "Block",
										"src": "6033:99:16",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1721,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1713,
															"src": "6070:6:16",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1722,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1715,
															"src": "6078:4:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564",
															"id": 1723,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6084:39:16",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															},
															"value": "Address: low-level static call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															}
														],
														"id": 1720,
														"name": "functionStaticCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1727,
															1756
														],
														"referencedDeclaration": 1756,
														"src": "6051:18:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 1724,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6051:73:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 1719,
												"id": 1725,
												"nodeType": "Return",
												"src": "6044:80:16"
											}
										]
									},
									"documentation": {
										"id": 1711,
										"nodeType": "StructuredDocumentation",
										"src": "5756:171:16",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 1727,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nameLocation": "5942:18:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1716,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1713,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "5969:6:16",
												"nodeType": "VariableDeclaration",
												"scope": 1727,
												"src": "5961:14:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1712,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5961:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1715,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5990:4:16",
												"nodeType": "VariableDeclaration",
												"scope": 1727,
												"src": "5977:17:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1714,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5977:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5960:35:16"
									},
									"returnParameters": {
										"id": 1719,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1718,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1727,
												"src": "6019:12:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1717,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6019:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6018:14:16"
									},
									"scope": 1886,
									"src": "5933:199:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1755,
										"nodeType": "Block",
										"src": "6486:171:16",
										"statements": [
											{
												"assignments": [
													1740,
													1742
												],
												"declarations": [
													{
														"constant": false,
														"id": 1740,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "6503:7:16",
														"nodeType": "VariableDeclaration",
														"scope": 1755,
														"src": "6498:12:16",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1739,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "6498:4:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1742,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "6525:10:16",
														"nodeType": "VariableDeclaration",
														"scope": 1755,
														"src": "6512:23:16",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1741,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "6512:5:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1747,
												"initialValue": {
													"arguments": [
														{
															"id": 1745,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1732,
															"src": "6557:4:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 1743,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1730,
															"src": "6539:6:16",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 1744,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "6546:10:16",
														"memberName": "staticcall",
														"nodeType": "MemberAccess",
														"src": "6539:17:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) view returns (bool,bytes memory)"
														}
													},
													"id": 1746,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6539:23:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6497:65:16"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1749,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1730,
															"src": "6607:6:16",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1750,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1740,
															"src": "6615:7:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 1751,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1742,
															"src": "6624:10:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 1752,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1734,
															"src": "6636:12:16",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 1748,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1841,
														"src": "6580:26:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 1753,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6580:69:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 1738,
												"id": 1754,
												"nodeType": "Return",
												"src": "6573:76:16"
											}
										]
									},
									"documentation": {
										"id": 1728,
										"nodeType": "StructuredDocumentation",
										"src": "6140:178:16",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 1756,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nameLocation": "6333:18:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1735,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1730,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "6370:6:16",
												"nodeType": "VariableDeclaration",
												"scope": 1756,
												"src": "6362:14:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1729,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6362:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1732,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6400:4:16",
												"nodeType": "VariableDeclaration",
												"scope": 1756,
												"src": "6387:17:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1731,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6387:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1734,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "6429:12:16",
												"nodeType": "VariableDeclaration",
												"scope": 1756,
												"src": "6415:26:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1733,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6415:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6351:97:16"
									},
									"returnParameters": {
										"id": 1738,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1737,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1756,
												"src": "6472:12:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1736,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6472:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6471:14:16"
									},
									"scope": 1886,
									"src": "6324:333:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1772,
										"nodeType": "Block",
										"src": "6941:103:16",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1767,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1759,
															"src": "6980:6:16",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1768,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1761,
															"src": "6988:4:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564",
															"id": 1769,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6994:41:16",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398",
																"typeString": "literal_string \"Address: low-level delegate call failed\""
															},
															"value": "Address: low-level delegate call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398",
																"typeString": "literal_string \"Address: low-level delegate call failed\""
															}
														],
														"id": 1766,
														"name": "functionDelegateCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1773,
															1802
														],
														"referencedDeclaration": 1802,
														"src": "6959:20:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
														}
													},
													"id": 1770,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6959:77:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 1765,
												"id": 1771,
												"nodeType": "Return",
												"src": "6952:84:16"
											}
										]
									},
									"documentation": {
										"id": 1757,
										"nodeType": "StructuredDocumentation",
										"src": "6665:173:16",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"
									},
									"id": 1773,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionDelegateCall",
									"nameLocation": "6853:20:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1762,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1759,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "6882:6:16",
												"nodeType": "VariableDeclaration",
												"scope": 1773,
												"src": "6874:14:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1758,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6874:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1761,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6903:4:16",
												"nodeType": "VariableDeclaration",
												"scope": 1773,
												"src": "6890:17:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1760,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6890:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6873:35:16"
									},
									"returnParameters": {
										"id": 1765,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1764,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1773,
												"src": "6927:12:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1763,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6927:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6926:14:16"
									},
									"scope": 1886,
									"src": "6844:200:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1801,
										"nodeType": "Block",
										"src": "7397:173:16",
										"statements": [
											{
												"assignments": [
													1786,
													1788
												],
												"declarations": [
													{
														"constant": false,
														"id": 1786,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "7414:7:16",
														"nodeType": "VariableDeclaration",
														"scope": 1801,
														"src": "7409:12:16",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1785,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "7409:4:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1788,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "7436:10:16",
														"nodeType": "VariableDeclaration",
														"scope": 1801,
														"src": "7423:23:16",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1787,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "7423:5:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1793,
												"initialValue": {
													"arguments": [
														{
															"id": 1791,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1778,
															"src": "7470:4:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 1789,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1776,
															"src": "7450:6:16",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 1790,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "7457:12:16",
														"memberName": "delegatecall",
														"nodeType": "MemberAccess",
														"src": "7450:19:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) returns (bool,bytes memory)"
														}
													},
													"id": 1792,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7450:25:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7408:67:16"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1795,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1776,
															"src": "7520:6:16",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1796,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1786,
															"src": "7528:7:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 1797,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1788,
															"src": "7537:10:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 1798,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1780,
															"src": "7549:12:16",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 1794,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1841,
														"src": "7493:26:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 1799,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7493:69:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 1784,
												"id": 1800,
												"nodeType": "Return",
												"src": "7486:76:16"
											}
										]
									},
									"documentation": {
										"id": 1774,
										"nodeType": "StructuredDocumentation",
										"src": "7052:180:16",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"
									},
									"id": 1802,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionDelegateCall",
									"nameLocation": "7247:20:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1781,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1776,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "7286:6:16",
												"nodeType": "VariableDeclaration",
												"scope": 1802,
												"src": "7278:14:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1775,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7278:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1778,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "7316:4:16",
												"nodeType": "VariableDeclaration",
												"scope": 1802,
												"src": "7303:17:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1777,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7303:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1780,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "7345:12:16",
												"nodeType": "VariableDeclaration",
												"scope": 1802,
												"src": "7331:26:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1779,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "7331:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7267:97:16"
									},
									"returnParameters": {
										"id": 1784,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1783,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1802,
												"src": "7383:12:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1782,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7383:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7382:14:16"
									},
									"scope": 1886,
									"src": "7238:332:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1840,
										"nodeType": "Block",
										"src": "8065:445:16",
										"statements": [
											{
												"condition": {
													"id": 1816,
													"name": "success",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1807,
													"src": "8080:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1838,
													"nodeType": "Block",
													"src": "8443:60:16",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1834,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1809,
																		"src": "8466:10:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	{
																		"id": 1835,
																		"name": "errorMessage",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1811,
																		"src": "8478:12:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		},
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 1833,
																	"name": "_revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1885,
																	"src": "8458:7:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bytes memory,string memory) pure"
																	}
																},
																"id": 1836,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8458:33:16",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1837,
															"nodeType": "ExpressionStatement",
															"src": "8458:33:16"
														}
													]
												},
												"id": 1839,
												"nodeType": "IfStatement",
												"src": "8076:427:16",
												"trueBody": {
													"id": 1832,
													"nodeType": "Block",
													"src": "8089:348:16",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1820,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 1817,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1809,
																		"src": "8108:10:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 1818,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "8119:6:16",
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"src": "8108:17:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 1819,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8129:1:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "8108:22:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1829,
															"nodeType": "IfStatement",
															"src": "8104:290:16",
															"trueBody": {
																"id": 1828,
																"nodeType": "Block",
																"src": "8132:262:16",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"id": 1823,
																							"name": "target",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 1805,
																							"src": "8337:6:16",
																							"typeDescriptions": {
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						],
																						"id": 1822,
																						"name": "isContract",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1574,
																						"src": "8326:10:16",
																						"typeDescriptions": {
																							"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																							"typeString": "function (address) view returns (bool)"
																						}
																					},
																					"id": 1824,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "functionCall",
																					"lValueRequested": false,
																					"nameLocations": [],
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "8326:18:16",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					}
																				},
																				{
																					"hexValue": "416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374",
																					"id": 1825,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "string",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "8346:31:16",
																					"typeDescriptions": {
																						"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																						"typeString": "literal_string \"Address: call to non-contract\""
																					},
																					"value": "Address: call to non-contract"
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					},
																					{
																						"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																						"typeString": "literal_string \"Address: call to non-contract\""
																					}
																				],
																				"id": 1821,
																				"name": "require",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [
																					4294967278,
																					4294967278
																				],
																				"referencedDeclaration": 4294967278,
																				"src": "8318:7:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																					"typeString": "function (bool,string memory) pure"
																				}
																			},
																			"id": 1826,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "8318:60:16",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 1827,
																		"nodeType": "ExpressionStatement",
																		"src": "8318:60:16"
																	}
																]
															}
														},
														{
															"expression": {
																"id": 1830,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1809,
																"src": "8415:10:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 1815,
															"id": 1831,
															"nodeType": "Return",
															"src": "8408:17:16"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1803,
										"nodeType": "StructuredDocumentation",
										"src": "7578:282:16",
										"text": " @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"
									},
									"id": 1841,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCallResultFromTarget",
									"nameLocation": "7875:26:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1812,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1805,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "7920:6:16",
												"nodeType": "VariableDeclaration",
												"scope": 1841,
												"src": "7912:14:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1804,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7912:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1807,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "7942:7:16",
												"nodeType": "VariableDeclaration",
												"scope": 1841,
												"src": "7937:12:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1806,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7937:4:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1809,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "7973:10:16",
												"nodeType": "VariableDeclaration",
												"scope": 1841,
												"src": "7960:23:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1808,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7960:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1811,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "8008:12:16",
												"nodeType": "VariableDeclaration",
												"scope": 1841,
												"src": "7994:26:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1810,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "7994:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7901:126:16"
									},
									"returnParameters": {
										"id": 1815,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1814,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1841,
												"src": "8051:12:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1813,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8051:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8050:14:16"
									},
									"scope": 1886,
									"src": "7866:644:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1864,
										"nodeType": "Block",
										"src": "8903:141:16",
										"statements": [
											{
												"condition": {
													"id": 1853,
													"name": "success",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1844,
													"src": "8918:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1862,
													"nodeType": "Block",
													"src": "8977:60:16",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1858,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1846,
																		"src": "9000:10:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	{
																		"id": 1859,
																		"name": "errorMessage",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1848,
																		"src": "9012:12:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		},
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 1857,
																	"name": "_revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1885,
																	"src": "8992:7:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bytes memory,string memory) pure"
																	}
																},
																"id": 1860,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8992:33:16",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1861,
															"nodeType": "ExpressionStatement",
															"src": "8992:33:16"
														}
													]
												},
												"id": 1863,
												"nodeType": "IfStatement",
												"src": "8914:123:16",
												"trueBody": {
													"id": 1856,
													"nodeType": "Block",
													"src": "8927:44:16",
													"statements": [
														{
															"expression": {
																"id": 1854,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1846,
																"src": "8949:10:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 1852,
															"id": 1855,
															"nodeType": "Return",
															"src": "8942:17:16"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1842,
										"nodeType": "StructuredDocumentation",
										"src": "8518:215:16",
										"text": " @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"
									},
									"id": 1865,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCallResult",
									"nameLocation": "8748:16:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1849,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1844,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "8780:7:16",
												"nodeType": "VariableDeclaration",
												"scope": 1865,
												"src": "8775:12:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1843,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "8775:4:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1846,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "8811:10:16",
												"nodeType": "VariableDeclaration",
												"scope": 1865,
												"src": "8798:23:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1845,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8798:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1848,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "8846:12:16",
												"nodeType": "VariableDeclaration",
												"scope": 1865,
												"src": "8832:26:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1847,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "8832:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8764:101:16"
									},
									"returnParameters": {
										"id": 1852,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1851,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1865,
												"src": "8889:12:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1850,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8889:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8888:14:16"
									},
									"scope": 1886,
									"src": "8739:305:16",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1884,
										"nodeType": "Block",
										"src": "9135:469:16",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1875,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 1872,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1867,
															"src": "9213:10:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1873,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "9224:6:16",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "9213:17:16",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 1874,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "9233:1:16",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "9213:21:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1882,
													"nodeType": "Block",
													"src": "9550:47:16",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1879,
																		"name": "errorMessage",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1869,
																		"src": "9572:12:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 1878,
																	"name": "revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967277,
																		4294967277
																	],
																	"referencedDeclaration": 4294967277,
																	"src": "9565:6:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (string memory) pure"
																	}
																},
																"id": 1880,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9565:20:16",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1881,
															"nodeType": "ExpressionStatement",
															"src": "9565:20:16"
														}
													]
												},
												"id": 1883,
												"nodeType": "IfStatement",
												"src": "9209:388:16",
												"trueBody": {
													"id": 1877,
													"nodeType": "Block",
													"src": "9236:308:16",
													"statements": [
														{
															"AST": {
																"nodeType": "YulBlock",
																"src": "9397:136:16",
																"statements": [
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "9416:40:16",
																		"value": {
																			"arguments": [
																				{
																					"name": "returndata",
																					"nodeType": "YulIdentifier",
																					"src": "9445:10:16"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nodeType": "YulIdentifier",
																				"src": "9439:5:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9439:17:16"
																		},
																		"variables": [
																			{
																				"name": "returndata_size",
																				"nodeType": "YulTypedName",
																				"src": "9420:15:16",
																				"type": ""
																			}
																		]
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "9485:2:16",
																							"type": "",
																							"value": "32"
																						},
																						{
																							"name": "returndata",
																							"nodeType": "YulIdentifier",
																							"src": "9489:10:16"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "9481:3:16"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "9481:19:16"
																				},
																				{
																					"name": "returndata_size",
																					"nodeType": "YulIdentifier",
																					"src": "9502:15:16"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "9474:6:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9474:44:16"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "9474:44:16"
																	}
																]
															},
															"documentation": "@solidity memory-safe-assembly",
															"evmVersion": "paris",
															"externalReferences": [
																{
																	"declaration": 1867,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "9445:10:16",
																	"valueSize": 1
																},
																{
																	"declaration": 1867,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "9489:10:16",
																	"valueSize": 1
																}
															],
															"id": 1876,
															"nodeType": "InlineAssembly",
															"src": "9388:145:16"
														}
													]
												}
											}
										]
									},
									"id": 1885,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_revert",
									"nameLocation": "9061:7:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1870,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1867,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "9082:10:16",
												"nodeType": "VariableDeclaration",
												"scope": 1885,
												"src": "9069:23:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1866,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "9069:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1869,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "9108:12:16",
												"nodeType": "VariableDeclaration",
												"scope": 1885,
												"src": "9094:26:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1868,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "9094:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9068:53:16"
									},
									"returnParameters": {
										"id": 1871,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9135:0:16"
									},
									"scope": 1886,
									"src": "9052:552:16",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 1887,
							"src": "203:9404:16",
							"usedErrors": []
						}
					],
					"src": "104:9505:16"
				},
				"id": 16
			},
			"libraries/PoolAddress.sol": {
				"ast": {
					"absolutePath": "libraries/PoolAddress.sol",
					"exportedSymbols": {
						"PoolAddress": [
							1986
						]
					},
					"id": 1987,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1888,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "46:24:17"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "PoolAddress",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1889,
								"nodeType": "StructuredDocumentation",
								"src": "74:97:17",
								"text": "@title Provides functions for deriving a pool address from the factory, tokens, and the fee"
							},
							"fullyImplemented": true,
							"id": 1986,
							"linearizedBaseContracts": [
								1986
							],
							"name": "PoolAddress",
							"nameLocation": "179:11:17",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 1892,
									"mutability": "constant",
									"name": "POOL_INIT_CODE_HASH",
									"nameLocation": "224:19:17",
									"nodeType": "VariableDeclaration",
									"scope": 1986,
									"src": "198:114:17",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 1890,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "198:7:17",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"hexValue": "307865333466313939623139623262346634376636383434323631396435353535323764323434663738613332393765613839333235663834336638376238623534",
										"id": 1891,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "246:66:17",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_102814774271675688723325049954498779091328469440286648861889194717372678376276_by_1",
											"typeString": "int_const 1028...(70 digits omitted)...6276"
										},
										"value": "0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54"
									},
									"visibility": "internal"
								},
								{
									"canonicalName": "PoolAddress.PoolKey",
									"id": 1899,
									"members": [
										{
											"constant": false,
											"id": 1894,
											"mutability": "mutable",
											"name": "token0",
											"nameLocation": "404:6:17",
											"nodeType": "VariableDeclaration",
											"scope": 1899,
											"src": "396:14:17",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1893,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "396:7:17",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1896,
											"mutability": "mutable",
											"name": "token1",
											"nameLocation": "429:6:17",
											"nodeType": "VariableDeclaration",
											"scope": 1899,
											"src": "421:14:17",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1895,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "421:7:17",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1898,
											"mutability": "mutable",
											"name": "fee",
											"nameLocation": "453:3:17",
											"nodeType": "VariableDeclaration",
											"scope": 1899,
											"src": "446:10:17",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint24",
												"typeString": "uint24"
											},
											"typeName": {
												"id": 1897,
												"name": "uint24",
												"nodeType": "ElementaryTypeName",
												"src": "446:6:17",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "PoolKey",
									"nameLocation": "377:7:17",
									"nodeType": "StructDefinition",
									"scope": 1986,
									"src": "370:94:17",
									"visibility": "public"
								},
								{
									"body": {
										"id": 1930,
										"nodeType": "Block",
										"src": "940:144:17",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1914,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1912,
														"name": "tokenA",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1902,
														"src": "955:6:17",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"id": 1913,
														"name": "tokenB",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1904,
														"src": "964:6:17",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "955:15:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1923,
												"nodeType": "IfStatement",
												"src": "951:56:17",
												"trueBody": {
													"expression": {
														"id": 1921,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"components": [
																{
																	"id": 1915,
																	"name": "tokenA",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1902,
																	"src": "973:6:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1916,
																	"name": "tokenB",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1904,
																	"src": "981:6:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"id": 1917,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": true,
															"nodeType": "TupleExpression",
															"src": "972:16:17",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_address_$_t_address_$",
																"typeString": "tuple(address,address)"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"components": [
																{
																	"id": 1918,
																	"name": "tokenB",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1904,
																	"src": "992:6:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1919,
																	"name": "tokenA",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1902,
																	"src": "1000:6:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"id": 1920,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "991:16:17",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_address_$_t_address_$",
																"typeString": "tuple(address,address)"
															}
														},
														"src": "972:35:17",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 1922,
													"nodeType": "ExpressionStatement",
													"src": "972:35:17"
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1925,
															"name": "tokenA",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1902,
															"src": "1042:6:17",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1926,
															"name": "tokenB",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1904,
															"src": "1058:6:17",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1927,
															"name": "fee",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1906,
															"src": "1071:3:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint24",
																"typeString": "uint24"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint24",
																"typeString": "uint24"
															}
														],
														"id": 1924,
														"name": "PoolKey",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1899,
														"src": "1025:7:17",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_struct$_PoolKey_$1899_storage_ptr_$",
															"typeString": "type(struct PoolAddress.PoolKey storage pointer)"
														}
													},
													"id": 1928,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "structConstructorCall",
													"lValueRequested": false,
													"nameLocations": [
														"1034:6:17",
														"1050:6:17",
														"1066:3:17"
													],
													"names": [
														"token0",
														"token1",
														"fee"
													],
													"nodeType": "FunctionCall",
													"src": "1025:51:17",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_PoolKey_$1899_memory_ptr",
														"typeString": "struct PoolAddress.PoolKey memory"
													}
												},
												"functionReturnParameters": 1911,
												"id": 1929,
												"nodeType": "Return",
												"src": "1018:58:17"
											}
										]
									},
									"documentation": {
										"id": 1900,
										"nodeType": "StructuredDocumentation",
										"src": "472:325:17",
										"text": "@notice Returns PoolKey: the ordered tokens with the matched fee levels\n @param tokenA The first token of a pool, unsorted\n @param tokenB The second token of a pool, unsorted\n @param fee The fee level of the pool\n @return Poolkey The pool details with ordered token0 and token1 assignments"
									},
									"id": 1931,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getPoolKey",
									"nameLocation": "812:10:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1907,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1902,
												"mutability": "mutable",
												"name": "tokenA",
												"nameLocation": "841:6:17",
												"nodeType": "VariableDeclaration",
												"scope": 1931,
												"src": "833:14:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1901,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "833:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1904,
												"mutability": "mutable",
												"name": "tokenB",
												"nameLocation": "866:6:17",
												"nodeType": "VariableDeclaration",
												"scope": 1931,
												"src": "858:14:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1903,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "858:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1906,
												"mutability": "mutable",
												"name": "fee",
												"nameLocation": "890:3:17",
												"nodeType": "VariableDeclaration",
												"scope": 1931,
												"src": "883:10:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 1905,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "883:6:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "822:78:17"
									},
									"returnParameters": {
										"id": 1911,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1910,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1931,
												"src": "924:14:17",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_PoolKey_$1899_memory_ptr",
													"typeString": "struct PoolAddress.PoolKey"
												},
												"typeName": {
													"id": 1909,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1908,
														"name": "PoolKey",
														"nameLocations": [
															"924:7:17"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1899,
														"src": "924:7:17"
													},
													"referencedDeclaration": 1899,
													"src": "924:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_PoolKey_$1899_storage_ptr",
														"typeString": "struct PoolAddress.PoolKey"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "923:16:17"
									},
									"scope": 1986,
									"src": "803:281:17",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1984,
										"nodeType": "Block",
										"src": "1435:425:17",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1947,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 1943,
																	"name": "key",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1937,
																	"src": "1454:3:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_PoolKey_$1899_memory_ptr",
																		"typeString": "struct PoolAddress.PoolKey memory"
																	}
																},
																"id": 1944,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "1458:6:17",
																"memberName": "token0",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1894,
																"src": "1454:10:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"expression": {
																	"id": 1945,
																	"name": "key",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1937,
																	"src": "1467:3:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_PoolKey_$1899_memory_ptr",
																		"typeString": "struct PoolAddress.PoolKey memory"
																	}
																},
																"id": 1946,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "1471:6:17",
																"memberName": "token1",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1896,
																"src": "1467:10:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1454:23:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 1942,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1446:7:17",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 1948,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1446:32:17",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1949,
												"nodeType": "ExpressionStatement",
												"src": "1446:32:17"
											},
											{
												"expression": {
													"id": 1982,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1950,
														"name": "pool",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1940,
														"src": "1489:4:17",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"hexValue": "30786666",
																										"id": 1962,
																										"isConstant": false,
																										"isLValue": false,
																										"isPure": true,
																										"kind": "number",
																										"lValueRequested": false,
																										"nodeType": "Literal",
																										"src": "1617:4:17",
																										"typeDescriptions": {
																											"typeIdentifier": "t_rational_255_by_1",
																											"typeString": "int_const 255"
																										},
																										"value": "0xff"
																									}
																								],
																								"expression": {
																									"argumentTypes": [
																										{
																											"typeIdentifier": "t_rational_255_by_1",
																											"typeString": "int_const 255"
																										}
																									],
																									"id": 1961,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"lValueRequested": false,
																									"nodeType": "ElementaryTypeNameExpression",
																									"src": "1610:6:17",
																									"typeDescriptions": {
																										"typeIdentifier": "t_type$_t_bytes1_$",
																										"typeString": "type(bytes1)"
																									},
																									"typeName": {
																										"id": 1960,
																										"name": "bytes1",
																										"nodeType": "ElementaryTypeName",
																										"src": "1610:6:17",
																										"typeDescriptions": {}
																									}
																								},
																								"id": 1963,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": true,
																								"kind": "typeConversion",
																								"lValueRequested": false,
																								"nameLocations": [],
																								"names": [],
																								"nodeType": "FunctionCall",
																								"src": "1610:12:17",
																								"tryCall": false,
																								"typeDescriptions": {
																									"typeIdentifier": "t_bytes1",
																									"typeString": "bytes1"
																								}
																							},
																							{
																								"id": 1964,
																								"name": "factory",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 1934,
																								"src": "1649:7:17",
																								"typeDescriptions": {
																									"typeIdentifier": "t_address",
																									"typeString": "address"
																								}
																							},
																							{
																								"arguments": [
																									{
																										"arguments": [
																											{
																												"expression": {
																													"id": 1968,
																													"name": "key",
																													"nodeType": "Identifier",
																													"overloadedDeclarations": [],
																													"referencedDeclaration": 1937,
																													"src": "1704:3:17",
																													"typeDescriptions": {
																														"typeIdentifier": "t_struct$_PoolKey_$1899_memory_ptr",
																														"typeString": "struct PoolAddress.PoolKey memory"
																													}
																												},
																												"id": 1969,
																												"isConstant": false,
																												"isLValue": true,
																												"isPure": false,
																												"lValueRequested": false,
																												"memberLocation": "1708:6:17",
																												"memberName": "token0",
																												"nodeType": "MemberAccess",
																												"referencedDeclaration": 1894,
																												"src": "1704:10:17",
																												"typeDescriptions": {
																													"typeIdentifier": "t_address",
																													"typeString": "address"
																												}
																											},
																											{
																												"expression": {
																													"id": 1970,
																													"name": "key",
																													"nodeType": "Identifier",
																													"overloadedDeclarations": [],
																													"referencedDeclaration": 1937,
																													"src": "1716:3:17",
																													"typeDescriptions": {
																														"typeIdentifier": "t_struct$_PoolKey_$1899_memory_ptr",
																														"typeString": "struct PoolAddress.PoolKey memory"
																													}
																												},
																												"id": 1971,
																												"isConstant": false,
																												"isLValue": true,
																												"isPure": false,
																												"lValueRequested": false,
																												"memberLocation": "1720:6:17",
																												"memberName": "token1",
																												"nodeType": "MemberAccess",
																												"referencedDeclaration": 1896,
																												"src": "1716:10:17",
																												"typeDescriptions": {
																													"typeIdentifier": "t_address",
																													"typeString": "address"
																												}
																											},
																											{
																												"expression": {
																													"id": 1972,
																													"name": "key",
																													"nodeType": "Identifier",
																													"overloadedDeclarations": [],
																													"referencedDeclaration": 1937,
																													"src": "1728:3:17",
																													"typeDescriptions": {
																														"typeIdentifier": "t_struct$_PoolKey_$1899_memory_ptr",
																														"typeString": "struct PoolAddress.PoolKey memory"
																													}
																												},
																												"id": 1973,
																												"isConstant": false,
																												"isLValue": true,
																												"isPure": false,
																												"lValueRequested": false,
																												"memberLocation": "1732:3:17",
																												"memberName": "fee",
																												"nodeType": "MemberAccess",
																												"referencedDeclaration": 1898,
																												"src": "1728:7:17",
																												"typeDescriptions": {
																													"typeIdentifier": "t_uint24",
																													"typeString": "uint24"
																												}
																											}
																										],
																										"expression": {
																											"argumentTypes": [
																												{
																													"typeIdentifier": "t_address",
																													"typeString": "address"
																												},
																												{
																													"typeIdentifier": "t_address",
																													"typeString": "address"
																												},
																												{
																													"typeIdentifier": "t_uint24",
																													"typeString": "uint24"
																												}
																											],
																											"expression": {
																												"id": 1966,
																												"name": "abi",
																												"nodeType": "Identifier",
																												"overloadedDeclarations": [],
																												"referencedDeclaration": 4294967295,
																												"src": "1693:3:17",
																												"typeDescriptions": {
																													"typeIdentifier": "t_magic_abi",
																													"typeString": "abi"
																												}
																											},
																											"id": 1967,
																											"isConstant": false,
																											"isLValue": false,
																											"isPure": true,
																											"lValueRequested": false,
																											"memberLocation": "1697:6:17",
																											"memberName": "encode",
																											"nodeType": "MemberAccess",
																											"src": "1693:10:17",
																											"typeDescriptions": {
																												"typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
																												"typeString": "function () pure returns (bytes memory)"
																											}
																										},
																										"id": 1974,
																										"isConstant": false,
																										"isLValue": false,
																										"isPure": false,
																										"kind": "functionCall",
																										"lValueRequested": false,
																										"nameLocations": [],
																										"names": [],
																										"nodeType": "FunctionCall",
																										"src": "1693:43:17",
																										"tryCall": false,
																										"typeDescriptions": {
																											"typeIdentifier": "t_bytes_memory_ptr",
																											"typeString": "bytes memory"
																										}
																									}
																								],
																								"expression": {
																									"argumentTypes": [
																										{
																											"typeIdentifier": "t_bytes_memory_ptr",
																											"typeString": "bytes memory"
																										}
																									],
																									"id": 1965,
																									"name": "keccak256",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 4294967288,
																									"src": "1683:9:17",
																									"typeDescriptions": {
																										"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																										"typeString": "function (bytes memory) pure returns (bytes32)"
																									}
																								},
																								"id": 1975,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"kind": "functionCall",
																								"lValueRequested": false,
																								"nameLocations": [],
																								"names": [],
																								"nodeType": "FunctionCall",
																								"src": "1683:54:17",
																								"tryCall": false,
																								"typeDescriptions": {
																									"typeIdentifier": "t_bytes32",
																									"typeString": "bytes32"
																								}
																							},
																							{
																								"id": 1976,
																								"name": "POOL_INIT_CODE_HASH",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 1892,
																								"src": "1764:19:17",
																								"typeDescriptions": {
																									"typeIdentifier": "t_bytes32",
																									"typeString": "bytes32"
																								}
																							}
																						],
																						"expression": {
																							"argumentTypes": [
																								{
																									"typeIdentifier": "t_bytes1",
																									"typeString": "bytes1"
																								},
																								{
																									"typeIdentifier": "t_address",
																									"typeString": "address"
																								},
																								{
																									"typeIdentifier": "t_bytes32",
																									"typeString": "bytes32"
																								},
																								{
																									"typeIdentifier": "t_bytes32",
																									"typeString": "bytes32"
																								}
																							],
																							"expression": {
																								"id": 1958,
																								"name": "abi",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 4294967295,
																								"src": "1567:3:17",
																								"typeDescriptions": {
																									"typeIdentifier": "t_magic_abi",
																									"typeString": "abi"
																								}
																							},
																							"id": 1959,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"lValueRequested": false,
																							"memberLocation": "1571:12:17",
																							"memberName": "encodePacked",
																							"nodeType": "MemberAccess",
																							"src": "1567:16:17",
																							"typeDescriptions": {
																								"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
																								"typeString": "function () pure returns (bytes memory)"
																							}
																						},
																						"id": 1977,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"kind": "functionCall",
																						"lValueRequested": false,
																						"nameLocations": [],
																						"names": [],
																						"nodeType": "FunctionCall",
																						"src": "1567:239:17",
																						"tryCall": false,
																						"typeDescriptions": {
																							"typeIdentifier": "t_bytes_memory_ptr",
																							"typeString": "bytes memory"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_bytes_memory_ptr",
																							"typeString": "bytes memory"
																						}
																					],
																					"id": 1957,
																					"name": "keccak256",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4294967288,
																					"src": "1535:9:17",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																						"typeString": "function (bytes memory) pure returns (bytes32)"
																					}
																				},
																				"id": 1978,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "1535:290:17",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			],
																			"id": 1956,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "1512:4:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_uint256_$",
																				"typeString": "type(uint256)"
																			},
																			"typeName": {
																				"id": 1955,
																				"name": "uint",
																				"nodeType": "ElementaryTypeName",
																				"src": "1512:4:17",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1979,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "1512:328:17",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1954,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "1504:7:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint160_$",
																		"typeString": "type(uint160)"
																	},
																	"typeName": {
																		"id": 1953,
																		"name": "uint160",
																		"nodeType": "ElementaryTypeName",
																		"src": "1504:7:17",
																		"typeDescriptions": {}
																	}
																},
																"id": 1980,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1504:347:17",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															],
															"id": 1952,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "1496:7:17",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 1951,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "1496:7:17",
																"typeDescriptions": {}
															}
														},
														"id": 1981,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1496:356:17",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1489:363:17",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 1983,
												"nodeType": "ExpressionStatement",
												"src": "1489:363:17"
											}
										]
									},
									"documentation": {
										"id": 1932,
										"nodeType": "StructuredDocumentation",
										"src": "1092:239:17",
										"text": "@notice Deterministically computes the pool address given the factory and PoolKey\n @param factory The Uniswap V3 factory contract address\n @param key The PoolKey\n @return pool The contract address of the V3 pool"
									},
									"id": 1985,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "computeAddress",
									"nameLocation": "1346:14:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1938,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1934,
												"mutability": "mutable",
												"name": "factory",
												"nameLocation": "1369:7:17",
												"nodeType": "VariableDeclaration",
												"scope": 1985,
												"src": "1361:15:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1933,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1361:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1937,
												"mutability": "mutable",
												"name": "key",
												"nameLocation": "1393:3:17",
												"nodeType": "VariableDeclaration",
												"scope": 1985,
												"src": "1378:18:17",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_PoolKey_$1899_memory_ptr",
													"typeString": "struct PoolAddress.PoolKey"
												},
												"typeName": {
													"id": 1936,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1935,
														"name": "PoolKey",
														"nameLocations": [
															"1378:7:17"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1899,
														"src": "1378:7:17"
													},
													"referencedDeclaration": 1899,
													"src": "1378:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_PoolKey_$1899_storage_ptr",
														"typeString": "struct PoolAddress.PoolKey"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1360:37:17"
									},
									"returnParameters": {
										"id": 1941,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1940,
												"mutability": "mutable",
												"name": "pool",
												"nameLocation": "1429:4:17",
												"nodeType": "VariableDeclaration",
												"scope": 1985,
												"src": "1421:12:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1939,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1421:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1420:14:17"
									},
									"scope": 1986,
									"src": "1337:523:17",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1987,
							"src": "171:1692:17",
							"usedErrors": []
						}
					],
					"src": "46:1817:17"
				},
				"id": 17
			},
			"libraries/SafeERC20.sol": {
				"ast": {
					"absolutePath": "libraries/SafeERC20.sol",
					"exportedSymbols": {
						"Address": [
							1886
						],
						"IERC20": [
							916
						],
						"IERC20Permit": [
							952
						],
						"SafeERC20": [
							2365
						]
					},
					"id": 2366,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1988,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "118:24:18"
						},
						{
							"absolutePath": "interfaces/IERC20.sol",
							"file": "../interfaces/IERC20.sol",
							"id": 1990,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2366,
							"sourceUnit": 917,
							"src": "146:48:18",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1989,
										"name": "IERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 916,
										"src": "154:6:18",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "interfaces/IERC20Permit.sol",
							"file": "../interfaces/IERC20Permit.sol",
							"id": 1992,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2366,
							"sourceUnit": 953,
							"src": "196:60:18",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1991,
										"name": "IERC20Permit",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 952,
										"src": "204:12:18",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "libraries/Address.sol",
							"file": "../libraries/Address.sol",
							"id": 1994,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2366,
							"sourceUnit": 1887,
							"src": "258:49:18",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1993,
										"name": "Address",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1886,
										"src": "266:7:18",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "SafeERC20",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1995,
								"nodeType": "StructuredDocumentation",
								"src": "311:465:18",
								"text": " @title SafeERC20\n @dev Wrappers around ERC20 operations that throw on failure (when the token\n contract returns false). Tokens that return no value (and instead revert or\n throw on failure) are also supported, non-reverting calls are assumed to be\n successful.\n To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n which allows you to call the safe operations as `token.safeTransfer(...)`, etc."
							},
							"fullyImplemented": true,
							"id": 2365,
							"linearizedBaseContracts": [
								2365
							],
							"name": "SafeERC20",
							"nameLocation": "786:9:18",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"global": false,
									"id": 1998,
									"libraryName": {
										"id": 1996,
										"name": "Address",
										"nameLocations": [
											"809:7:18"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1886,
										"src": "809:7:18"
									},
									"nodeType": "UsingForDirective",
									"src": "803:26:18",
									"typeName": {
										"id": 1997,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "821:7:18",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									}
								},
								{
									"body": {
										"id": 2021,
										"nodeType": "Block",
										"src": "1097:105:18",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 2010,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2002,
															"src": "1128:5:18",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$916",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 2013,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2002,
																			"src": "1158:5:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$916",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 2014,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "1164:8:18",
																		"memberName": "transfer",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 883,
																		"src": "1158:14:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 2015,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "1173:8:18",
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "1158:23:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 2016,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2004,
																	"src": "1183:2:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 2017,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2006,
																	"src": "1187:5:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 2011,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "1135:3:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 2012,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "1139:18:18",
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "1135:22:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 2018,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1135:58:18",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$916",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 2009,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2316,
														"src": "1108:19:18",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$916_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 2019,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1108:86:18",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2020,
												"nodeType": "ExpressionStatement",
												"src": "1108:86:18"
											}
										]
									},
									"documentation": {
										"id": 1999,
										"nodeType": "StructuredDocumentation",
										"src": "837:182:18",
										"text": " @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n non-reverting calls are assumed to be successful."
									},
									"id": 2022,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransfer",
									"nameLocation": "1034:12:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2007,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2002,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1054:5:18",
												"nodeType": "VariableDeclaration",
												"scope": 2022,
												"src": "1047:12:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$916",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 2001,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2000,
														"name": "IERC20",
														"nameLocations": [
															"1047:6:18"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 916,
														"src": "1047:6:18"
													},
													"referencedDeclaration": 916,
													"src": "1047:6:18",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$916",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2004,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1069:2:18",
												"nodeType": "VariableDeclaration",
												"scope": 2022,
												"src": "1061:10:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2003,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1061:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2006,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1081:5:18",
												"nodeType": "VariableDeclaration",
												"scope": 2022,
												"src": "1073:13:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2005,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1073:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1046:41:18"
									},
									"returnParameters": {
										"id": 2008,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1097:0:18"
									},
									"scope": 2365,
									"src": "1025:177:18",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2048,
										"nodeType": "Block",
										"src": "1537:115:18",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 2036,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2026,
															"src": "1568:5:18",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$916",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 2039,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2026,
																			"src": "1598:5:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$916",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 2040,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "1604:12:18",
																		"memberName": "transferFrom",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 915,
																		"src": "1598:18:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,address,uint256) external returns (bool)"
																		}
																	},
																	"id": 2041,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "1617:8:18",
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "1598:27:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 2042,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2028,
																	"src": "1627:4:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 2043,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2030,
																	"src": "1633:2:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 2044,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2032,
																	"src": "1637:5:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 2037,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "1575:3:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 2038,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "1579:18:18",
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "1575:22:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 2045,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1575:68:18",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$916",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 2035,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2316,
														"src": "1548:19:18",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$916_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 2046,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1548:96:18",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2047,
												"nodeType": "ExpressionStatement",
												"src": "1548:96:18"
											}
										]
									},
									"documentation": {
										"id": 2023,
										"nodeType": "StructuredDocumentation",
										"src": "1210:231:18",
										"text": " @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n calling contract. If `token` returns no value, non-reverting calls are assumed to be successful."
									},
									"id": 2049,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "1456:16:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2033,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2026,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1480:5:18",
												"nodeType": "VariableDeclaration",
												"scope": 2049,
												"src": "1473:12:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$916",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 2025,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2024,
														"name": "IERC20",
														"nameLocations": [
															"1473:6:18"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 916,
														"src": "1473:6:18"
													},
													"referencedDeclaration": 916,
													"src": "1473:6:18",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$916",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2028,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "1495:4:18",
												"nodeType": "VariableDeclaration",
												"scope": 2049,
												"src": "1487:12:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2027,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1487:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2030,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1509:2:18",
												"nodeType": "VariableDeclaration",
												"scope": 2049,
												"src": "1501:10:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2029,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1501:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2032,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1521:5:18",
												"nodeType": "VariableDeclaration",
												"scope": 2049,
												"src": "1513:13:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2031,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1513:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1472:55:18"
									},
									"returnParameters": {
										"id": 2034,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1537:0:18"
									},
									"scope": 2365,
									"src": "1447:205:18",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2092,
										"nodeType": "Block",
										"src": "1997:506:18",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 2076,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2063,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2061,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2057,
																			"src": "2251:5:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 2062,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2260:1:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "2251:10:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 2064,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2250:12:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2074,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"id": 2069,
																							"name": "this",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 4294967268,
																							"src": "2291:4:18",
																							"typeDescriptions": {
																								"typeIdentifier": "t_contract$_SafeERC20_$2365",
																								"typeString": "library SafeERC20"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_contract$_SafeERC20_$2365",
																								"typeString": "library SafeERC20"
																							}
																						],
																						"id": 2068,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "2283:7:18",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_address_$",
																							"typeString": "type(address)"
																						},
																						"typeName": {
																							"id": 2067,
																							"name": "address",
																							"nodeType": "ElementaryTypeName",
																							"src": "2283:7:18",
																							"typeDescriptions": {}
																						}
																					},
																					"id": 2070,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "typeConversion",
																					"lValueRequested": false,
																					"nameLocations": [],
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "2283:13:18",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"id": 2071,
																					"name": "spender",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2055,
																					"src": "2298:7:18",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				],
																				"expression": {
																					"id": 2065,
																					"name": "token",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2053,
																					"src": "2267:5:18",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IERC20_$916",
																						"typeString": "contract IERC20"
																					}
																				},
																				"id": 2066,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "2273:9:18",
																				"memberName": "allowance",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 893,
																				"src": "2267:15:18",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																					"typeString": "function (address,address) view external returns (uint256)"
																				}
																			},
																			"id": 2072,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "2267:39:18",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 2073,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2310:1:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "2267:44:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 2075,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2266:46:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "2250:62:18",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365",
															"id": 2077,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2327:56:18",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25",
																"typeString": "literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""
															},
															"value": "SafeERC20: approve from non-zero to non-zero allowance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25",
																"typeString": "literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""
															}
														],
														"id": 2060,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2228:7:18",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2078,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2228:166:18",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2079,
												"nodeType": "ExpressionStatement",
												"src": "2228:166:18"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2081,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2053,
															"src": "2425:5:18",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$916",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 2084,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2053,
																			"src": "2455:5:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$916",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 2085,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "2461:7:18",
																		"memberName": "approve",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 903,
																		"src": "2455:13:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 2086,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "2469:8:18",
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "2455:22:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 2087,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2055,
																	"src": "2479:7:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 2088,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2057,
																	"src": "2488:5:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 2082,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "2432:3:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 2083,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "2436:18:18",
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "2432:22:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 2089,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2432:62:18",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$916",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 2080,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2316,
														"src": "2405:19:18",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$916_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 2090,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2405:90:18",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2091,
												"nodeType": "ExpressionStatement",
												"src": "2405:90:18"
											}
										]
									},
									"documentation": {
										"id": 2050,
										"nodeType": "StructuredDocumentation",
										"src": "1660:255:18",
										"text": " @dev Deprecated. This function has issues similar to the ones found in\n {IERC20-approve}, and its usage is discouraged.\n Whenever possible, use {safeIncreaseAllowance} and\n {safeDecreaseAllowance} instead."
									},
									"id": 2093,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeApprove",
									"nameLocation": "1930:11:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2058,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2053,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1949:5:18",
												"nodeType": "VariableDeclaration",
												"scope": 2093,
												"src": "1942:12:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$916",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 2052,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2051,
														"name": "IERC20",
														"nameLocations": [
															"1942:6:18"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 916,
														"src": "1942:6:18"
													},
													"referencedDeclaration": 916,
													"src": "1942:6:18",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$916",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2055,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1964:7:18",
												"nodeType": "VariableDeclaration",
												"scope": 2093,
												"src": "1956:15:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2054,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1956:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2057,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1981:5:18",
												"nodeType": "VariableDeclaration",
												"scope": 2093,
												"src": "1973:13:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2056,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1973:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1941:46:18"
									},
									"returnParameters": {
										"id": 2059,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1997:0:18"
									},
									"scope": 2365,
									"src": "1921:582:18",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2129,
										"nodeType": "Block",
										"src": "2786:197:18",
										"statements": [
											{
												"assignments": [
													2105
												],
												"declarations": [
													{
														"constant": false,
														"id": 2105,
														"mutability": "mutable",
														"name": "oldAllowance",
														"nameLocation": "2805:12:18",
														"nodeType": "VariableDeclaration",
														"scope": 2129,
														"src": "2797:20:18",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2104,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2797:7:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2114,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 2110,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "2844:4:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_SafeERC20_$2365",
																		"typeString": "library SafeERC20"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_SafeERC20_$2365",
																		"typeString": "library SafeERC20"
																	}
																],
																"id": 2109,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2836:7:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 2108,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "2836:7:18",
																	"typeDescriptions": {}
																}
															},
															"id": 2111,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2836:13:18",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2112,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2099,
															"src": "2851:7:18",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 2106,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2097,
															"src": "2820:5:18",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$916",
																"typeString": "contract IERC20"
															}
														},
														"id": 2107,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2826:9:18",
														"memberName": "allowance",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 893,
														"src": "2820:15:18",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address,address) view external returns (uint256)"
														}
													},
													"id": 2113,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2820:39:18",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2797:62:18"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2116,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2097,
															"src": "2890:5:18",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$916",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 2119,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2097,
																			"src": "2920:5:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$916",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 2120,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "2926:7:18",
																		"memberName": "approve",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 903,
																		"src": "2920:13:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 2121,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "2934:8:18",
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "2920:22:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 2122,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2099,
																	"src": "2944:7:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2125,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2123,
																		"name": "oldAllowance",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2105,
																		"src": "2953:12:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "+",
																	"rightExpression": {
																		"id": 2124,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2101,
																		"src": "2968:5:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2953:20:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 2117,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "2897:3:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 2118,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "2901:18:18",
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "2897:22:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 2126,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2897:77:18",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$916",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 2115,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2316,
														"src": "2870:19:18",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$916_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 2127,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2870:105:18",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2128,
												"nodeType": "ExpressionStatement",
												"src": "2870:105:18"
											}
										]
									},
									"documentation": {
										"id": 2094,
										"nodeType": "StructuredDocumentation",
										"src": "2511:183:18",
										"text": " @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful."
									},
									"id": 2130,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeIncreaseAllowance",
									"nameLocation": "2709:21:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2102,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2097,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "2738:5:18",
												"nodeType": "VariableDeclaration",
												"scope": 2130,
												"src": "2731:12:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$916",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 2096,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2095,
														"name": "IERC20",
														"nameLocations": [
															"2731:6:18"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 916,
														"src": "2731:6:18"
													},
													"referencedDeclaration": 916,
													"src": "2731:6:18",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$916",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2099,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2753:7:18",
												"nodeType": "VariableDeclaration",
												"scope": 2130,
												"src": "2745:15:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2098,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2745:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2101,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2770:5:18",
												"nodeType": "VariableDeclaration",
												"scope": 2130,
												"src": "2762:13:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2100,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2762:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2730:46:18"
									},
									"returnParameters": {
										"id": 2103,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2786:0:18"
									},
									"scope": 2365,
									"src": "2700:283:18",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2174,
										"nodeType": "Block",
										"src": "3266:327:18",
										"statements": [
											{
												"id": 2173,
												"nodeType": "UncheckedBlock",
												"src": "3277:309:18",
												"statements": [
													{
														"assignments": [
															2142
														],
														"declarations": [
															{
																"constant": false,
																"id": 2142,
																"mutability": "mutable",
																"name": "oldAllowance",
																"nameLocation": "3310:12:18",
																"nodeType": "VariableDeclaration",
																"scope": 2173,
																"src": "3302:20:18",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2141,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "3302:7:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2151,
														"initialValue": {
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 2147,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "3349:4:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_SafeERC20_$2365",
																				"typeString": "library SafeERC20"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_SafeERC20_$2365",
																				"typeString": "library SafeERC20"
																			}
																		],
																		"id": 2146,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "3341:7:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 2145,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "3341:7:18",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 2148,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "3341:13:18",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 2149,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2136,
																	"src": "3356:7:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"expression": {
																	"id": 2143,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2134,
																	"src": "3325:5:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$916",
																		"typeString": "contract IERC20"
																	}
																},
																"id": 2144,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "3331:9:18",
																"memberName": "allowance",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 893,
																"src": "3325:15:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																	"typeString": "function (address,address) view external returns (uint256)"
																}
															},
															"id": 2150,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3325:39:18",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "3302:62:18"
													},
													{
														"expression": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2155,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2153,
																		"name": "oldAllowance",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2142,
																		"src": "3387:12:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": ">=",
																	"rightExpression": {
																		"id": 2154,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2138,
																		"src": "3403:5:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "3387:21:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																{
																	"hexValue": "5361666545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f",
																	"id": 2156,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "string",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3410:43:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a",
																		"typeString": "literal_string \"SafeERC20: decreased allowance below zero\""
																	},
																	"value": "SafeERC20: decreased allowance below zero"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	{
																		"typeIdentifier": "t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a",
																		"typeString": "literal_string \"SafeERC20: decreased allowance below zero\""
																	}
																],
																"id": 2152,
																"name": "require",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	4294967278,
																	4294967278
																],
																"referencedDeclaration": 4294967278,
																"src": "3379:7:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																	"typeString": "function (bool,string memory) pure"
																}
															},
															"id": 2157,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3379:75:18",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 2158,
														"nodeType": "ExpressionStatement",
														"src": "3379:75:18"
													},
													{
														"expression": {
															"arguments": [
																{
																	"id": 2160,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2134,
																	"src": "3489:5:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$916",
																		"typeString": "contract IERC20"
																	}
																},
																{
																	"arguments": [
																		{
																			"expression": {
																				"expression": {
																					"id": 2163,
																					"name": "token",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2134,
																					"src": "3519:5:18",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IERC20_$916",
																						"typeString": "contract IERC20"
																					}
																				},
																				"id": 2164,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "3525:7:18",
																				"memberName": "approve",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 903,
																				"src": "3519:13:18",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																					"typeString": "function (address,uint256) external returns (bool)"
																				}
																			},
																			"id": 2165,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "3533:8:18",
																			"memberName": "selector",
																			"nodeType": "MemberAccess",
																			"src": "3519:22:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes4",
																				"typeString": "bytes4"
																			}
																		},
																		{
																			"id": 2166,
																			"name": "spender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2136,
																			"src": "3543:7:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2169,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2167,
																				"name": "oldAllowance",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2142,
																				"src": "3552:12:18",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "-",
																			"rightExpression": {
																				"id": 2168,
																				"name": "value",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2138,
																				"src": "3567:5:18",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "3552:20:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_bytes4",
																				"typeString": "bytes4"
																			},
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			},
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"expression": {
																			"id": 2161,
																			"name": "abi",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967295,
																			"src": "3496:3:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_abi",
																				"typeString": "abi"
																			}
																		},
																		"id": 2162,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberLocation": "3500:18:18",
																		"memberName": "encodeWithSelector",
																		"nodeType": "MemberAccess",
																		"src": "3496:22:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																			"typeString": "function (bytes4) pure returns (bytes memory)"
																		}
																	},
																	"id": 2170,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "3496:77:18",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20_$916",
																		"typeString": "contract IERC20"
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"id": 2159,
																"name": "_callOptionalReturn",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2316,
																"src": "3469:19:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$916_$_t_bytes_memory_ptr_$returns$__$",
																	"typeString": "function (contract IERC20,bytes memory)"
																}
															},
															"id": 2171,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3469:105:18",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 2172,
														"nodeType": "ExpressionStatement",
														"src": "3469:105:18"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2131,
										"nodeType": "StructuredDocumentation",
										"src": "2991:183:18",
										"text": " @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful."
									},
									"id": 2175,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeDecreaseAllowance",
									"nameLocation": "3189:21:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2139,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2134,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "3218:5:18",
												"nodeType": "VariableDeclaration",
												"scope": 2175,
												"src": "3211:12:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$916",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 2133,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2132,
														"name": "IERC20",
														"nameLocations": [
															"3211:6:18"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 916,
														"src": "3211:6:18"
													},
													"referencedDeclaration": 916,
													"src": "3211:6:18",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$916",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2136,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "3233:7:18",
												"nodeType": "VariableDeclaration",
												"scope": 2175,
												"src": "3225:15:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2135,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3225:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2138,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3250:5:18",
												"nodeType": "VariableDeclaration",
												"scope": 2175,
												"src": "3242:13:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2137,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3242:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3210:46:18"
									},
									"returnParameters": {
										"id": 2140,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3266:0:18"
									},
									"scope": 2365,
									"src": "3180:413:18",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2221,
										"nodeType": "Block",
										"src": "3996:340:18",
										"statements": [
											{
												"assignments": [
													2187
												],
												"declarations": [
													{
														"constant": false,
														"id": 2187,
														"mutability": "mutable",
														"name": "approvalCall",
														"nameLocation": "4020:12:18",
														"nodeType": "VariableDeclaration",
														"scope": 2221,
														"src": "4007:25:18",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 2186,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "4007:5:18",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2196,
												"initialValue": {
													"arguments": [
														{
															"expression": {
																"expression": {
																	"id": 2190,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2179,
																	"src": "4058:5:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$916",
																		"typeString": "contract IERC20"
																	}
																},
																"id": 2191,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "4064:7:18",
																"memberName": "approve",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 903,
																"src": "4058:13:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																	"typeString": "function (address,uint256) external returns (bool)"
																}
															},
															"id": 2192,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "4072:8:18",
															"memberName": "selector",
															"nodeType": "MemberAccess",
															"src": "4058:22:18",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes4",
																"typeString": "bytes4"
															}
														},
														{
															"id": 2193,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2181,
															"src": "4082:7:18",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2194,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2183,
															"src": "4091:5:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes4",
																"typeString": "bytes4"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 2188,
															"name": "abi",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967295,
															"src": "4035:3:18",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_abi",
																"typeString": "abi"
															}
														},
														"id": 2189,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "4039:18:18",
														"memberName": "encodeWithSelector",
														"nodeType": "MemberAccess",
														"src": "4035:22:18",
														"typeDescriptions": {
															"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes4) pure returns (bytes memory)"
														}
													},
													"id": 2195,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4035:62:18",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4007:90:18"
											},
											{
												"condition": {
													"id": 2201,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "4114:45:18",
													"subExpression": {
														"arguments": [
															{
																"id": 2198,
																"name": "token",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2179,
																"src": "4139:5:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_IERC20_$916",
																	"typeString": "contract IERC20"
																}
															},
															{
																"id": 2199,
																"name": "approvalCall",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2187,
																"src": "4146:12:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_contract$_IERC20_$916",
																	"typeString": "contract IERC20"
																},
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"id": 2197,
															"name": "_callOptionalReturnBool",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2364,
															"src": "4115:23:18",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$916_$_t_bytes_memory_ptr_$returns$_t_bool_$",
																"typeString": "function (contract IERC20,bytes memory) returns (bool)"
															}
														},
														"id": 2200,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "4115:44:18",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2220,
												"nodeType": "IfStatement",
												"src": "4110:219:18",
												"trueBody": {
													"id": 2219,
													"nodeType": "Block",
													"src": "4161:168:18",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 2203,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2179,
																		"src": "4196:5:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$916",
																			"typeString": "contract IERC20"
																		}
																	},
																	{
																		"arguments": [
																			{
																				"expression": {
																					"expression": {
																						"id": 2206,
																						"name": "token",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2179,
																						"src": "4226:5:18",
																						"typeDescriptions": {
																							"typeIdentifier": "t_contract$_IERC20_$916",
																							"typeString": "contract IERC20"
																						}
																					},
																					"id": 2207,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberLocation": "4232:7:18",
																					"memberName": "approve",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 903,
																					"src": "4226:13:18",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																						"typeString": "function (address,uint256) external returns (bool)"
																					}
																				},
																				"id": 2208,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "4240:8:18",
																				"memberName": "selector",
																				"nodeType": "MemberAccess",
																				"src": "4226:22:18",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes4",
																					"typeString": "bytes4"
																				}
																			},
																			{
																				"id": 2209,
																				"name": "spender",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2181,
																				"src": "4250:7:18",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"hexValue": "30",
																				"id": 2210,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "4259:1:18",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_bytes4",
																					"typeString": "bytes4"
																				},
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"expression": {
																				"id": 2204,
																				"name": "abi",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967295,
																				"src": "4203:3:18",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_abi",
																					"typeString": "abi"
																				}
																			},
																			"id": 2205,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"memberLocation": "4207:18:18",
																			"memberName": "encodeWithSelector",
																			"nodeType": "MemberAccess",
																			"src": "4203:22:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																				"typeString": "function (bytes4) pure returns (bytes memory)"
																			}
																		},
																		"id": 2211,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "4203:58:18",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_IERC20_$916",
																			"typeString": "contract IERC20"
																		},
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	],
																	"id": 2202,
																	"name": "_callOptionalReturn",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2316,
																	"src": "4176:19:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$916_$_t_bytes_memory_ptr_$returns$__$",
																		"typeString": "function (contract IERC20,bytes memory)"
																	}
																},
																"id": 2212,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4176:86:18",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 2213,
															"nodeType": "ExpressionStatement",
															"src": "4176:86:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"id": 2215,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2179,
																		"src": "4297:5:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$916",
																			"typeString": "contract IERC20"
																		}
																	},
																	{
																		"id": 2216,
																		"name": "approvalCall",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2187,
																		"src": "4304:12:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_IERC20_$916",
																			"typeString": "contract IERC20"
																		},
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	],
																	"id": 2214,
																	"name": "_callOptionalReturn",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2316,
																	"src": "4277:19:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$916_$_t_bytes_memory_ptr_$returns$__$",
																		"typeString": "function (contract IERC20,bytes memory)"
																	}
																},
																"id": 2217,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4277:40:18",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 2218,
															"nodeType": "ExpressionStatement",
															"src": "4277:40:18"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 2176,
										"nodeType": "StructuredDocumentation",
										"src": "3601:312:18",
										"text": " @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n to be set to zero before setting it to a non-zero value, such as USDT."
									},
									"id": 2222,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "forceApprove",
									"nameLocation": "3928:12:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2184,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2179,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "3948:5:18",
												"nodeType": "VariableDeclaration",
												"scope": 2222,
												"src": "3941:12:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$916",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 2178,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2177,
														"name": "IERC20",
														"nameLocations": [
															"3941:6:18"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 916,
														"src": "3941:6:18"
													},
													"referencedDeclaration": 916,
													"src": "3941:6:18",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$916",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2181,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "3963:7:18",
												"nodeType": "VariableDeclaration",
												"scope": 2222,
												"src": "3955:15:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2180,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3955:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2183,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3980:5:18",
												"nodeType": "VariableDeclaration",
												"scope": 2222,
												"src": "3972:13:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2182,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3972:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3940:46:18"
									},
									"returnParameters": {
										"id": 2185,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3996:0:18"
									},
									"scope": 2365,
									"src": "3919:417:18",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2278,
										"nodeType": "Block",
										"src": "4718:262:18",
										"statements": [
											{
												"assignments": [
													2244
												],
												"declarations": [
													{
														"constant": false,
														"id": 2244,
														"mutability": "mutable",
														"name": "nonceBefore",
														"nameLocation": "4737:11:18",
														"nodeType": "VariableDeclaration",
														"scope": 2278,
														"src": "4729:19:18",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2243,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4729:7:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2249,
												"initialValue": {
													"arguments": [
														{
															"id": 2247,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2228,
															"src": "4764:5:18",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 2245,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2226,
															"src": "4751:5:18",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20Permit_$952",
																"typeString": "contract IERC20Permit"
															}
														},
														"id": 2246,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "4757:6:18",
														"memberName": "nonces",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 945,
														"src": "4751:12:18",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view external returns (uint256)"
														}
													},
													"id": 2248,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4751:19:18",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4729:41:18"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2253,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2228,
															"src": "4794:5:18",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2254,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2230,
															"src": "4801:7:18",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2255,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2232,
															"src": "4810:5:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 2256,
															"name": "deadline",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2234,
															"src": "4817:8:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 2257,
															"name": "v",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2236,
															"src": "4827:1:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														{
															"id": 2258,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2238,
															"src": "4830:1:18",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 2259,
															"name": "s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2240,
															"src": "4833:1:18",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"expression": {
															"id": 2250,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2226,
															"src": "4781:5:18",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20Permit_$952",
																"typeString": "contract IERC20Permit"
															}
														},
														"id": 2252,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "4787:6:18",
														"memberName": "permit",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 937,
														"src": "4781:12:18",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$__$",
															"typeString": "function (address,address,uint256,uint256,uint8,bytes32,bytes32) external"
														}
													},
													"id": 2260,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4781:54:18",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2261,
												"nodeType": "ExpressionStatement",
												"src": "4781:54:18"
											},
											{
												"assignments": [
													2263
												],
												"declarations": [
													{
														"constant": false,
														"id": 2263,
														"mutability": "mutable",
														"name": "nonceAfter",
														"nameLocation": "4854:10:18",
														"nodeType": "VariableDeclaration",
														"scope": 2278,
														"src": "4846:18:18",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2262,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4846:7:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2268,
												"initialValue": {
													"arguments": [
														{
															"id": 2266,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2228,
															"src": "4880:5:18",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 2264,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2226,
															"src": "4867:5:18",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20Permit_$952",
																"typeString": "contract IERC20Permit"
															}
														},
														"id": 2265,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "4873:6:18",
														"memberName": "nonces",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 945,
														"src": "4867:12:18",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view external returns (uint256)"
														}
													},
													"id": 2267,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4867:19:18",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4846:40:18"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2274,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2270,
																"name": "nonceAfter",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2263,
																"src": "4905:10:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2273,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2271,
																	"name": "nonceBefore",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2244,
																	"src": "4919:11:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "+",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2272,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "4933:1:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "4919:15:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4905:29:18",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5361666545524332303a207065726d697420646964206e6f742073756363656564",
															"id": 2275,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4936:35:18",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d",
																"typeString": "literal_string \"SafeERC20: permit did not succeed\""
															},
															"value": "SafeERC20: permit did not succeed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d",
																"typeString": "literal_string \"SafeERC20: permit did not succeed\""
															}
														],
														"id": 2269,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4897:7:18",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2276,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4897:75:18",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2277,
												"nodeType": "ExpressionStatement",
												"src": "4897:75:18"
											}
										]
									},
									"documentation": {
										"id": 2223,
										"nodeType": "StructuredDocumentation",
										"src": "4344:144:18",
										"text": " @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n Revert on invalid signature."
									},
									"id": 2279,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safePermit",
									"nameLocation": "4503:10:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2241,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2226,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "4537:5:18",
												"nodeType": "VariableDeclaration",
												"scope": 2279,
												"src": "4524:18:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20Permit_$952",
													"typeString": "contract IERC20Permit"
												},
												"typeName": {
													"id": 2225,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2224,
														"name": "IERC20Permit",
														"nameLocations": [
															"4524:12:18"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 952,
														"src": "4524:12:18"
													},
													"referencedDeclaration": 952,
													"src": "4524:12:18",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20Permit_$952",
														"typeString": "contract IERC20Permit"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2228,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "4561:5:18",
												"nodeType": "VariableDeclaration",
												"scope": 2279,
												"src": "4553:13:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2227,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4553:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2230,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "4585:7:18",
												"nodeType": "VariableDeclaration",
												"scope": 2279,
												"src": "4577:15:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2229,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4577:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2232,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4611:5:18",
												"nodeType": "VariableDeclaration",
												"scope": 2279,
												"src": "4603:13:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2231,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4603:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2234,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "4635:8:18",
												"nodeType": "VariableDeclaration",
												"scope": 2279,
												"src": "4627:16:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2233,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4627:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2236,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "4660:1:18",
												"nodeType": "VariableDeclaration",
												"scope": 2279,
												"src": "4654:7:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 2235,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "4654:5:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2238,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "4680:1:18",
												"nodeType": "VariableDeclaration",
												"scope": 2279,
												"src": "4672:9:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2237,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4672:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2240,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "4700:1:18",
												"nodeType": "VariableDeclaration",
												"scope": 2279,
												"src": "4692:9:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2239,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4692:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4513:195:18"
									},
									"returnParameters": {
										"id": 2242,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4718:0:18"
									},
									"scope": 2365,
									"src": "4494:486:18",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2315,
										"nodeType": "Block",
										"src": "5441:579:18",
										"statements": [
											{
												"assignments": [
													2289
												],
												"declarations": [
													{
														"constant": false,
														"id": 2289,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "5808:10:18",
														"nodeType": "VariableDeclaration",
														"scope": 2315,
														"src": "5795:23:18",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 2288,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "5795:5:18",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2298,
												"initialValue": {
													"arguments": [
														{
															"id": 2295,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2285,
															"src": "5849:4:18",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564",
															"id": 2296,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5855:34:18",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b",
																"typeString": "literal_string \"SafeERC20: low-level call failed\""
															},
															"value": "SafeERC20: low-level call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b",
																"typeString": "literal_string \"SafeERC20: low-level call failed\""
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 2292,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2283,
																	"src": "5829:5:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$916",
																		"typeString": "contract IERC20"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20_$916",
																		"typeString": "contract IERC20"
																	}
																],
																"id": 2291,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "5821:7:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 2290,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "5821:7:18",
																	"typeDescriptions": {}
																}
															},
															"id": 2293,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5821:14:18",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 2294,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "5836:12:18",
														"memberName": "functionCall",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1646,
														"src": "5821:27:18",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$attached_to$_t_address_$",
															"typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
														}
													},
													"id": 2297,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5821:69:18",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5795:95:18"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 2311,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2303,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 2300,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2289,
																		"src": "5909:10:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 2301,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "5920:6:18",
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"src": "5909:17:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 2302,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5930:1:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "5909:22:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"arguments": [
																	{
																		"id": 2306,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2289,
																		"src": "5946:10:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	{
																		"components": [
																			{
																				"id": 2308,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "5959:4:18",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_bool_$",
																					"typeString": "type(bool)"
																				},
																				"typeName": {
																					"id": 2307,
																					"name": "bool",
																					"nodeType": "ElementaryTypeName",
																					"src": "5959:4:18",
																					"typeDescriptions": {}
																				}
																			}
																		],
																		"id": 2309,
																		"isConstant": false,
																		"isInlineArray": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "TupleExpression",
																		"src": "5958:6:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_bool_$",
																			"typeString": "type(bool)"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		},
																		{
																			"typeIdentifier": "t_type$_t_bool_$",
																			"typeString": "type(bool)"
																		}
																	],
																	"expression": {
																		"id": 2304,
																		"name": "abi",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967295,
																		"src": "5935:3:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_abi",
																			"typeString": "abi"
																		}
																	},
																	"id": 2305,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberLocation": "5939:6:18",
																	"memberName": "decode",
																	"nodeType": "MemberAccess",
																	"src": "5935:10:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 2310,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5935:30:18",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "5909:56:18",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564",
															"id": 2312,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5967:44:18",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd",
																"typeString": "literal_string \"SafeERC20: ERC20 operation did not succeed\""
															},
															"value": "SafeERC20: ERC20 operation did not succeed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd",
																"typeString": "literal_string \"SafeERC20: ERC20 operation did not succeed\""
															}
														],
														"id": 2299,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5901:7:18",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2313,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5901:111:18",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2314,
												"nodeType": "ExpressionStatement",
												"src": "5901:111:18"
											}
										]
									},
									"documentation": {
										"id": 2280,
										"nodeType": "StructuredDocumentation",
										"src": "4988:377:18",
										"text": " @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants)."
									},
									"id": 2316,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_callOptionalReturn",
									"nameLocation": "5380:19:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2286,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2283,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "5407:5:18",
												"nodeType": "VariableDeclaration",
												"scope": 2316,
												"src": "5400:12:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$916",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 2282,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2281,
														"name": "IERC20",
														"nameLocations": [
															"5400:6:18"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 916,
														"src": "5400:6:18"
													},
													"referencedDeclaration": 916,
													"src": "5400:6:18",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$916",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2285,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5427:4:18",
												"nodeType": "VariableDeclaration",
												"scope": 2316,
												"src": "5414:17:18",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2284,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5414:5:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5399:33:18"
									},
									"returnParameters": {
										"id": 2287,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5441:0:18"
									},
									"scope": 2365,
									"src": "5371:649:18",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 2363,
										"nodeType": "Block",
										"src": "6620:513:18",
										"statements": [
											{
												"assignments": [
													2328,
													2330
												],
												"declarations": [
													{
														"constant": false,
														"id": 2328,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "6926:7:18",
														"nodeType": "VariableDeclaration",
														"scope": 2363,
														"src": "6921:12:18",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 2327,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "6921:4:18",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 2330,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "6948:10:18",
														"nodeType": "VariableDeclaration",
														"scope": 2363,
														"src": "6935:23:18",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 2329,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "6935:5:18",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2338,
												"initialValue": {
													"arguments": [
														{
															"id": 2336,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2322,
															"src": "6982:4:18",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 2333,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2320,
																	"src": "6970:5:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$916",
																		"typeString": "contract IERC20"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20_$916",
																		"typeString": "contract IERC20"
																	}
																],
																"id": 2332,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "6962:7:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 2331,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "6962:7:18",
																	"typeDescriptions": {}
																}
															},
															"id": 2334,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6962:14:18",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 2335,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "6977:4:18",
														"memberName": "call",
														"nodeType": "MemberAccess",
														"src": "6962:19:18",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 2337,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6962:25:18",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6920:67:18"
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 2361,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"id": 2353,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2339,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2328,
															"src": "7018:7:18",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&&",
														"rightExpression": {
															"components": [
																{
																	"commonType": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"id": 2351,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2343,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"expression": {
																				"id": 2340,
																				"name": "returndata",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2330,
																				"src": "7030:10:18",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			},
																			"id": 2341,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "7041:6:18",
																			"memberName": "length",
																			"nodeType": "MemberAccess",
																			"src": "7030:17:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 2342,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "7051:1:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "7030:22:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "||",
																	"rightExpression": {
																		"arguments": [
																			{
																				"id": 2346,
																				"name": "returndata",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2330,
																				"src": "7067:10:18",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			},
																			{
																				"components": [
																					{
																						"id": 2348,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "7080:4:18",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_bool_$",
																							"typeString": "type(bool)"
																						},
																						"typeName": {
																							"id": 2347,
																							"name": "bool",
																							"nodeType": "ElementaryTypeName",
																							"src": "7080:4:18",
																							"typeDescriptions": {}
																						}
																					}
																				],
																				"id": 2349,
																				"isConstant": false,
																				"isInlineArray": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "TupleExpression",
																				"src": "7079:6:18",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_bool_$",
																					"typeString": "type(bool)"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				},
																				{
																					"typeIdentifier": "t_type$_t_bool_$",
																					"typeString": "type(bool)"
																				}
																			],
																			"expression": {
																				"id": 2344,
																				"name": "abi",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967295,
																				"src": "7056:3:18",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_abi",
																					"typeString": "abi"
																				}
																			},
																			"id": 2345,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"memberLocation": "7060:6:18",
																			"memberName": "decode",
																			"nodeType": "MemberAccess",
																			"src": "7056:10:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
																				"typeString": "function () pure"
																			}
																		},
																		"id": 2350,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "7056:30:18",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"src": "7030:56:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																}
															],
															"id": 2352,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "7029:58:18",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"src": "7018:69:18",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 2358,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2320,
																		"src": "7118:5:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$916",
																			"typeString": "contract IERC20"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_IERC20_$916",
																			"typeString": "contract IERC20"
																		}
																	],
																	"id": 2357,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "7110:7:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 2356,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "7110:7:18",
																		"typeDescriptions": {}
																	}
																},
																"id": 2359,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7110:14:18",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"expression": {
																"id": 2354,
																"name": "Address",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1886,
																"src": "7091:7:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_Address_$1886_$",
																	"typeString": "type(library Address)"
																}
															},
															"id": 2355,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "7099:10:18",
															"memberName": "isContract",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1574,
															"src": "7091:18:18",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																"typeString": "function (address) view returns (bool)"
															}
														},
														"id": 2360,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7091:34:18",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "7018:107:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 2326,
												"id": 2362,
												"nodeType": "Return",
												"src": "6998:127:18"
											}
										]
									},
									"documentation": {
										"id": 2317,
										"nodeType": "StructuredDocumentation",
										"src": "6028:497:18",
										"text": " @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants).\n This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead."
									},
									"id": 2364,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_callOptionalReturnBool",
									"nameLocation": "6540:23:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2323,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2320,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "6571:5:18",
												"nodeType": "VariableDeclaration",
												"scope": 2364,
												"src": "6564:12:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$916",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 2319,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2318,
														"name": "IERC20",
														"nameLocations": [
															"6564:6:18"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 916,
														"src": "6564:6:18"
													},
													"referencedDeclaration": 916,
													"src": "6564:6:18",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$916",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2322,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6591:4:18",
												"nodeType": "VariableDeclaration",
												"scope": 2364,
												"src": "6578:17:18",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2321,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6578:5:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6563:33:18"
									},
									"returnParameters": {
										"id": 2326,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2325,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2364,
												"src": "6614:4:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2324,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6614:4:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6613:6:18"
									},
									"scope": 2365,
									"src": "6531:602:18",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 2366,
							"src": "778:6358:18",
							"usedErrors": []
						}
					],
					"src": "118:7020:18"
				},
				"id": 18
			},
			"libraries/TimeFee.sol": {
				"ast": {
					"absolutePath": "libraries/TimeFee.sol",
					"exportedSymbols": {
						"TimeFee": [
							2414
						]
					},
					"id": 2415,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2367,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".9"
							],
							"nodeType": "PragmaDirective",
							"src": "31:24:19"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "TimeFee",
							"contractDependencies": [],
							"contractKind": "library",
							"fullyImplemented": true,
							"id": 2414,
							"linearizedBaseContracts": [
								2414
							],
							"name": "TimeFee",
							"nameLocation": "67:7:19",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 2412,
										"nodeType": "Block",
										"src": "324:356:19",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 2380,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2376,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2374,
															"name": "stableAmount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2369,
															"src": "338:12:19",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">=",
														"rightExpression": {
															"hexValue": "313030",
															"id": 2375,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "352:9:19",
															"subdenomination": "ether",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_100000000000000000000_by_1",
																"typeString": "int_const 100000000000000000000"
															},
															"value": "100"
														},
														"src": "338:23:19",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2379,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2377,
															"name": "stableAmount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2369,
															"src": "365:12:19",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "<",
														"rightExpression": {
															"hexValue": "31303030",
															"id": 2378,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "378:10:19",
															"subdenomination": "ether",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1000000000000000000000_by_1",
																"typeString": "int_const 1000000000000000000000"
															},
															"value": "1000"
														},
														"src": "365:23:19",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "338:50:19",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"id": 2392,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2388,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2386,
																"name": "stableAmount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2369,
																"src": "447:12:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"hexValue": "31303030",
																"id": 2387,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "461:10:19",
																"subdenomination": "ether",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1000000000000000000000_by_1",
																	"typeString": "int_const 1000000000000000000000"
																},
																"value": "1000"
															},
															"src": "447:24:19",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&&",
														"rightExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2391,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2389,
																"name": "stableAmount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2369,
																"src": "475:12:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"hexValue": "3130303030",
																"id": 2390,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "488:11:19",
																"subdenomination": "ether",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10000000000000000000000_by_1",
																	"typeString": "int_const 10000000000000000000000"
																},
																"value": "10000"
															},
															"src": "475:24:19",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"src": "447:52:19",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseBody": {
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2400,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2398,
																"name": "stableAmount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2369,
																"src": "558:12:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"hexValue": "3130303030",
																"id": 2399,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "572:11:19",
																"subdenomination": "ether",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10000000000000000000000_by_1",
																	"typeString": "int_const 10000000000000000000000"
																},
																"value": "10000"
															},
															"src": "558:25:19",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"falseBody": {
															"id": 2408,
															"nodeType": "Block",
															"src": "638:35:19",
															"statements": [
																{
																	"expression": {
																		"hexValue": "30",
																		"id": 2406,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "660:1:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"functionReturnParameters": 2373,
																	"id": 2407,
																	"nodeType": "Return",
																	"src": "653:8:19"
																}
															]
														},
														"id": 2409,
														"nodeType": "IfStatement",
														"src": "555:118:19",
														"trueBody": {
															"id": 2405,
															"nodeType": "Block",
															"src": "584:50:19",
															"statements": [
																{
																	"expression": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2403,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2401,
																			"name": "stableAmount",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2369,
																			"src": "606:12:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "/",
																		"rightExpression": {
																			"hexValue": "343030",
																			"id": 2402,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "619:3:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_400_by_1",
																				"typeString": "int_const 400"
																			},
																			"value": "400"
																		},
																		"src": "606:16:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"functionReturnParameters": 2373,
																	"id": 2404,
																	"nodeType": "Return",
																	"src": "599:23:19"
																}
															]
														}
													},
													"id": 2410,
													"nodeType": "IfStatement",
													"src": "444:229:19",
													"trueBody": {
														"id": 2397,
														"nodeType": "Block",
														"src": "500:50:19",
														"statements": [
															{
																"expression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2395,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2393,
																		"name": "stableAmount",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2369,
																		"src": "522:12:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "/",
																	"rightExpression": {
																		"hexValue": "323030",
																		"id": 2394,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "535:3:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_200_by_1",
																			"typeString": "int_const 200"
																		},
																		"value": "200"
																	},
																	"src": "522:16:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"functionReturnParameters": 2373,
																"id": 2396,
																"nodeType": "Return",
																"src": "515:23:19"
															}
														]
													}
												},
												"id": 2411,
												"nodeType": "IfStatement",
												"src": "335:338:19",
												"trueBody": {
													"id": 2385,
													"nodeType": "Block",
													"src": "389:50:19",
													"statements": [
														{
															"expression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2383,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2381,
																	"name": "stableAmount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2369,
																	"src": "411:12:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"hexValue": "313030",
																	"id": 2382,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "424:3:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_100_by_1",
																		"typeString": "int_const 100"
																	},
																	"value": "100"
																},
																"src": "411:16:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"functionReturnParameters": 2373,
															"id": 2384,
															"nodeType": "Return",
															"src": "404:23:19"
														}
													]
												}
											}
										]
									},
									"id": 2413,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "fee",
									"nameLocation": "259:3:19",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2370,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2369,
												"mutability": "mutable",
												"name": "stableAmount",
												"nameLocation": "271:12:19",
												"nodeType": "VariableDeclaration",
												"scope": 2413,
												"src": "263:20:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2368,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "263:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "262:22:19"
									},
									"returnParameters": {
										"id": 2373,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2372,
												"mutability": "mutable",
												"name": "stableFee",
												"nameLocation": "314:9:19",
												"nodeType": "VariableDeclaration",
												"scope": 2413,
												"src": "306:17:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2371,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "306:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "305:19:19"
									},
									"scope": 2414,
									"src": "250:430:19",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 2415,
							"src": "59:624:19",
							"usedErrors": []
						}
					],
					"src": "31:652:19"
				},
				"id": 19
			}
		}
	}
}