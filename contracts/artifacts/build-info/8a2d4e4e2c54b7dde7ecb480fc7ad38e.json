{
	"id": "8a2d4e4e2c54b7dde7ecb480fc7ad38e",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.9",
	"solcLongVersion": "0.8.9+commit.e5eed63a",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/TimeFactory.sol": {
				"content": "//SPDX-License-Identifier:MIT\r\npragma solidity ^0.8.9;\r\npragma abicoder v2;\r\nimport \"./TimeMarket.sol\";\r\n\r\ncontract TimeFactory{\r\n\r\n\r\n    //创建新的空投市场\r\n    function createMarket()external{\r\n\r\n    }\r\n}"
			},
			"contracts/TimeMarket.sol": {
				"content": "//SPDX-License-Identifier:MIT\r\npragma solidity ^0.8.9;\r\npragma abicoder v2;\r\nimport \"../libraries/SafeERC20.sol\";\r\nimport \"../interfaces/ITimeStruct.sol\";\r\nimport \"../interfaces/IError.sol\";\r\nimport \"../libraries/TimeFee.sol\";\r\n//uniswap v3\r\nimport '../interfaces/IERC721Receiver.sol';\r\nimport '../interfaces/UniswapV3/INonfungiblePositionManager.sol';\r\n\r\ncontract TimeMarket is ITimeStruct, IError{\r\n    using SafeERC20 for IERC20;\r\n    uint56 private clearingTime;\r\n    uint64 id;\r\n    address private airdropToken;\r\n\r\n    constructor(address _airdropToken,uint _clearingTime){\r\n        airdropToken=_airdropToken;\r\n        clearingTime=uint56(_clearingTime);\r\n    }\r\n\r\n    mapping(uint64=>tradeMes)private _tradeMes;\r\n    //出售者是否在交易时间结束前存入某个交易的空投代币\r\n    mapping(address => mapping(uint256=>bool))private ifInject; \r\n\r\n    //交易成功，购买者是否提取空投代币\r\n    mapping(address => mapping(uint256=>bool))public userIfWithdraw1;\r\n    //交易成功，出售者是否提取稳定币\r\n    mapping(address => mapping(uint256=>bool))public userIfWithdraw2;\r\n    //交易失败，购买者是否提取违约金\r\n    mapping(address => mapping(uint256=>bool))public userIfWithdraw3;\r\n    //未交易，购买者取回money\r\n    mapping(address => mapping(uint256=>bool))public userIfWithdraw4;\r\n\r\n    //购买\r\n    function buy(address _tokenAddress,uint128 _buyAmount,uint128 _buyPrice)external{\r\n        uint total=_buyAmount*_buyPrice;\r\n        if(total<100 ether){\r\n            revert NotEnoughAmount();\r\n        }\r\n        tradeMes memory newTradeMes=tradeMes({\r\n            tradeState:1,\r\n            tradeId:id,\r\n            buyTime:uint56(block.timestamp),\r\n            buyTotalAmount:_buyAmount,\r\n            buyPrice:_buyPrice,\r\n            tokenAddress:_tokenAddress,\r\n            buyerAddress:msg.sender,\r\n            solderAddress:address(this)\r\n        });\r\n        _tradeMes[id]=newTradeMes;\r\n        //转移购买需要质押的token数量\r\n        IERC20(_tokenAddress).safeTransferFrom(msg.sender,address(this),total);\r\n        id++;\r\n    }\r\n\r\n    //出售\r\n    function Sale(uint64 _id) external {\r\n        tradeMes memory maxTradeMes=_tradeMes[_id];\r\n        require(maxTradeMes.tradeState==1);  //未产生交易的事务\r\n\r\n        address promiseStableToken=maxTradeMes.tokenAddress;\r\n        //质押违约金\r\n        IERC20(promiseStableToken).safeTransferFrom(\r\n            msg.sender,\r\n            address(this),\r\n            getPenal(maxTradeMes.buyPrice, maxTradeMes.buyTotalAmount)\r\n        );\r\n        _tradeMes[_id].solderAddress=msg.sender;\r\n        //寻找到出售者则更改为3\r\n        _tradeMes[_id].tradeState=2;\r\n    }\r\n\r\n    //出售者放入自己成交的空投token数量(在清算结束1小时前存入空投代币，否则视为违约)\r\n    function injectFutureToken(uint64 _id)external{\r\n        //是否已放入约定的空投代币数量\r\n        if(ifInject[msg.sender][_id]=false){revert AlreadyInjectToken();}\r\n        //发送者是否是出售者,同时也意味着出售者已经质押\r\n        if(getSolder(_id)!=msg.sender){revert NorSolder();}\r\n\r\n        //需要质押的空投代币数量\r\n        uint256 thisAirdropAmount=_tradeMes[_id].buyTotalAmount;\r\n        IERC20(airdropToken).safeTransferFrom(msg.sender,address(this),thisAirdropAmount);\r\n        ifInject[msg.sender][_id]=true;\r\n        _tradeMes[_id].tradeState=3;\r\n    }\r\n\r\n    function buyerWithdrawAirdorp(uint64 _id)external{\r\n        address buyer=getBuyer(_id);\r\n        //是否是该购买者\r\n        if(msg.sender!=buyer){revert NotBuyer();}\r\n        //该笔交易是否出售者已经质押空投代币\r\n        if(_tradeMes[_id].tradeState!=3){revert NotInjectToken();} \r\n        uint128 buyAmount=_tradeMes[_id].buyTotalAmount;\r\n        uint128 buyerPrice=_tradeMes[_id].buyPrice;\r\n        //费用=购买数量*购买价格\r\n        uint256 fee=TimeFee.fee(buyAmount*buyerPrice);\r\n        //转移费用给协议所有者\r\n        IERC20(airdropToken).safeTransfer(address(this),fee);\r\n        //转移给购买者\r\n        IERC20(airdropToken).safeTransfer(buyer,buyAmount-fee);\r\n        _tradeMes[_id].tradeState=4;\r\n    }\r\n\r\n    //交易成功,出售者提取稳定币\r\n    function solderWithdrawStable(uint64 _id)external{\r\n        address solder=getSolder(_id);\r\n        //是否是该出售者\r\n        require(msg.sender==solder); \r\n        //交易对手是否质押相应成交的空投token\r\n        require(ifInject[solder][_id]);\r\n        //购买者是否提取\r\n        require(userIfWithdraw2[msg.sender][_id]==false);\r\n        address promiseStableToken=_tradeMes[_id].tokenAddress;\r\n        uint256 total=_tradeMes[_id].buyPrice*_tradeMes[_id].buyTotalAmount;\r\n        uint256 penalSumAmount=getPenal(_tradeMes[_id].buyPrice,_tradeMes[_id].buyTotalAmount);\r\n        uint256 fee=TimeFee.fee(total);\r\n        //转移费用给协议所有者\r\n        IERC20(promiseStableToken).safeTransfer(address(this),fee);\r\n        //转移给出售者\r\n        IERC20(promiseStableToken).safeTransfer(\r\n            solder,\r\n            total-fee\r\n        );\r\n        //转移质押的违约金给出售者\r\n        IERC20(promiseStableToken).safeTransfer(\r\n            solder,\r\n            penalSumAmount\r\n        );\r\n        //用户提取设置为true\r\n        userIfWithdraw2[msg.sender][_id]=true; \r\n    }\r\n\r\n    //交易失败，购买者提取违约金（未产生交易退回money）\r\n    function buyerWithdrawRefund(uint64 _id)external{\r\n        address buyer=getBuyer(_id);\r\n        address solder=getSolder(_id);\r\n        //是否是该出售者\r\n        require(msg.sender==buyer); \r\n        //交易对手是否质押相应成交的空投token\r\n        require(ifInject[solder][_id]==false);\r\n        require(userIfWithdraw3[msg.sender][_id]==false);\r\n        //是否是该购买者\r\n        require(msg.sender==buyer);  \r\n        address promiseStableToken=_tradeMes[_id].tokenAddress;\r\n        uint256 penalSumAmount=getPenal(_tradeMes[_id].buyPrice,_tradeMes[_id].buyTotalAmount);\r\n        uint256 fee=TimeFee.fee(penalSumAmount);\r\n        //费用\r\n        IERC20(promiseStableToken).safeTransfer(\r\n            address(this),\r\n            fee\r\n        );\r\n        //转移相应稳定币到购买者\r\n        IERC20(promiseStableToken).safeTransfer(\r\n            buyer,\r\n            penalSumAmount-fee\r\n        );\r\n        userIfWithdraw3[msg.sender][_id]=true;\r\n\r\n        if(_tradeMes[_id].tradeState==1){\r\n            require(userIfWithdraw4[msg.sender][_id]==false);\r\n            uint256 total=_tradeMes[_id].buyPrice*_tradeMes[_id].buyTotalAmount;\r\n            //取回token\r\n            IERC20(promiseStableToken).safeTransfer(\r\n                getBuyer(_id),\r\n                total\r\n            );\r\n            userIfWithdraw4[msg.sender][_id]=true;\r\n        }\r\n        _tradeMes[_id].tradeState=5;\r\n    }\r\n   \r\n\r\n    //根据交易id获取到购买者\r\n    function getBuyer(uint64 _id)internal view returns(address){\r\n        return _tradeMes[_id].buyerAddress;\r\n    }\r\n\r\n    //根据交易id获取到出售者\r\n    function getSolder(uint64 _id)internal view returns(address){\r\n        return _tradeMes[_id].solderAddress;\r\n    }\r\n\r\n    //计算出售者需要质押的违约金(稳定币)\r\n    function getPenal(uint128 _soldPrice, uint128 _soldAmount)public pure returns (uint256){\r\n        uint256 thisAmount = _soldPrice*_soldAmount;\r\n        if (thisAmount >= 100 ether && thisAmount < 1000 ether) {\r\n            return (thisAmount * 50) / 100;\r\n        } else if (thisAmount >= 1000 ether && thisAmount < 10000 ether) {\r\n            return (thisAmount * 40) / 100;\r\n        } else if (thisAmount > 10000 ether) {\r\n            return (thisAmount * 25) / 100;\r\n        } else {\r\n            revert NotEnoughAmount();\r\n        }\r\n    }\r\n\r\n}"
			},
			"interfaces/UniswapV3/INonfungiblePositionManager.sol": {
				"content": "//SPDX-License-Identifier:MIT\r\npragma solidity >=0.8.0;\r\npragma abicoder v2;\r\n\r\nimport '../../interfaces/IERC721Metadata.sol';\r\nimport '../../interfaces/IERC721Enumerable.sol';\r\n\r\nimport '../../interfaces/UniswapV3/IPoolInitializer.sol';\r\nimport '../../interfaces/UniswapV3/IERC721Permit.sol';\r\nimport '../../interfaces/UniswapV3/IPeripheryPayments.sol';\r\nimport '../../interfaces/UniswapV3/IPeripheryImmutableState.sol';\r\nimport '../../libraries/PoolAddress.sol';\r\n\r\n/// @title Non-fungible token for positions\r\n/// @notice Wraps Uniswap V3 positions in a non-fungible token interface which allows for them to be transferred\r\n/// and authorized.\r\ninterface INonfungiblePositionManager is\r\n    IPoolInitializer,\r\n    IPeripheryPayments,\r\n    IPeripheryImmutableState,\r\n    IERC721Metadata,\r\n    IERC721Enumerable,\r\n    IERC721Permit\r\n{\r\n    /// @notice Emitted when liquidity is increased for a position NFT\r\n    /// @dev Also emitted when a token is minted\r\n    /// @param tokenId The ID of the token for which liquidity was increased\r\n    /// @param liquidity The amount by which liquidity for the NFT position was increased\r\n    /// @param amount0 The amount of token0 that was paid for the increase in liquidity\r\n    /// @param amount1 The amount of token1 that was paid for the increase in liquidity\r\n    event IncreaseLiquidity(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\r\n    /// @notice Emitted when liquidity is decreased for a position NFT\r\n    /// @param tokenId The ID of the token for which liquidity was decreased\r\n    /// @param liquidity The amount by which liquidity for the NFT position was decreased\r\n    /// @param amount0 The amount of token0 that was accounted for the decrease in liquidity\r\n    /// @param amount1 The amount of token1 that was accounted for the decrease in liquidity\r\n    event DecreaseLiquidity(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\r\n    /// @notice Emitted when tokens are collected for a position NFT\r\n    /// @dev The amounts reported may not be exactly equivalent to the amounts transferred, due to rounding behavior\r\n    /// @param tokenId The ID of the token for which underlying tokens were collected\r\n    /// @param recipient The address of the account that received the collected tokens\r\n    /// @param amount0 The amount of token0 owed to the position that was collected\r\n    /// @param amount1 The amount of token1 owed to the position that was collected\r\n    event Collect(uint256 indexed tokenId, address recipient, uint256 amount0, uint256 amount1);\r\n\r\n    /// @notice Returns the position information associated with a given token ID.\r\n    /// @dev Throws if the token ID is not valid.\r\n    /// @param tokenId The ID of the token that represents the position\r\n    /// @return nonce The nonce for permits\r\n    /// @return operator The address that is approved for spending\r\n    /// @return token0 The address of the token0 for a specific pool\r\n    /// @return token1 The address of the token1 for a specific pool\r\n    /// @return fee The fee associated with the pool\r\n    /// @return tickLower The lower end of the tick range for the position\r\n    /// @return tickUpper The higher end of the tick range for the position\r\n    /// @return liquidity The liquidity of the position\r\n    /// @return feeGrowthInside0LastX128 The fee growth of token0 as of the last action on the individual position\r\n    /// @return feeGrowthInside1LastX128 The fee growth of token1 as of the last action on the individual position\r\n    /// @return tokensOwed0 The uncollected amount of token0 owed to the position as of the last computation\r\n    /// @return tokensOwed1 The uncollected amount of token1 owed to the position as of the last computation\r\n    function positions(uint256 tokenId)\r\n        external\r\n        view\r\n        returns (\r\n            uint96 nonce,\r\n            address operator,\r\n            address token0,\r\n            address token1,\r\n            uint24 fee,\r\n            int24 tickLower,\r\n            int24 tickUpper,\r\n            uint128 liquidity,\r\n            uint256 feeGrowthInside0LastX128,\r\n            uint256 feeGrowthInside1LastX128,\r\n            uint128 tokensOwed0,\r\n            uint128 tokensOwed1\r\n        );\r\n\r\n    struct MintParams {\r\n        address token0;\r\n        address token1;\r\n        uint24 fee;\r\n        int24 tickLower;\r\n        int24 tickUpper;\r\n        uint256 amount0Desired;\r\n        uint256 amount1Desired;\r\n        uint256 amount0Min;\r\n        uint256 amount1Min;\r\n        address recipient;\r\n        uint256 deadline;\r\n    }\r\n\r\n    /// @notice Creates a new position wrapped in a NFT\r\n    /// @dev Call this when the pool does exist and is initialized. Note that if the pool is created but not initialized\r\n    /// a method does not exist, i.e. the pool is assumed to be initialized.\r\n    /// @param params The params necessary to mint a position, encoded as `MintParams` in calldata\r\n    /// @return tokenId The ID of the token that represents the minted position\r\n    /// @return liquidity The amount of liquidity for this position\r\n    /// @return amount0 The amount of token0\r\n    /// @return amount1 The amount of token1\r\n    function mint(MintParams calldata params)\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 tokenId,\r\n            uint128 liquidity,\r\n            uint256 amount0,\r\n            uint256 amount1\r\n        );\r\n\r\n    struct IncreaseLiquidityParams {\r\n        uint256 tokenId;\r\n        uint256 amount0Desired;\r\n        uint256 amount1Desired;\r\n        uint256 amount0Min;\r\n        uint256 amount1Min;\r\n        uint256 deadline;\r\n    }\r\n\r\n    /// @notice Increases the amount of liquidity in a position, with tokens paid by the `msg.sender`\r\n    /// @param params tokenId The ID of the token for which liquidity is being increased,\r\n    /// amount0Desired The desired amount of token0 to be spent,\r\n    /// amount1Desired The desired amount of token1 to be spent,\r\n    /// amount0Min The minimum amount of token0 to spend, which serves as a slippage check,\r\n    /// amount1Min The minimum amount of token1 to spend, which serves as a slippage check,\r\n    /// deadline The time by which the transaction must be included to effect the change\r\n    /// @return liquidity The new liquidity amount as a result of the increase\r\n    /// @return amount0 The amount of token0 to acheive resulting liquidity\r\n    /// @return amount1 The amount of token1 to acheive resulting liquidity\r\n    function increaseLiquidity(IncreaseLiquidityParams calldata params)\r\n        external\r\n        payable\r\n        returns (\r\n            uint128 liquidity,\r\n            uint256 amount0,\r\n            uint256 amount1\r\n        );\r\n\r\n    struct DecreaseLiquidityParams {\r\n        uint256 tokenId;\r\n        uint128 liquidity;\r\n        uint256 amount0Min;\r\n        uint256 amount1Min;\r\n        uint256 deadline;\r\n    }\r\n\r\n    /// @notice Decreases the amount of liquidity in a position and accounts it to the position\r\n    /// @param params tokenId The ID of the token for which liquidity is being decreased,\r\n    /// amount The amount by which liquidity will be decreased,\r\n    /// amount0Min The minimum amount of token0 that should be accounted for the burned liquidity,\r\n    /// amount1Min The minimum amount of token1 that should be accounted for the burned liquidity,\r\n    /// deadline The time by which the transaction must be included to effect the change\r\n    /// @return amount0 The amount of token0 accounted to the position's tokens owed\r\n    /// @return amount1 The amount of token1 accounted to the position's tokens owed\r\n    function decreaseLiquidity(DecreaseLiquidityParams calldata params)\r\n        external\r\n        payable\r\n        returns (uint256 amount0, uint256 amount1);\r\n\r\n    struct CollectParams {\r\n        uint256 tokenId;\r\n        address recipient;\r\n        uint128 amount0Max;\r\n        uint128 amount1Max;\r\n    }\r\n\r\n    /// @notice Collects up to a maximum amount of fees owed to a specific position to the recipient\r\n    /// @param params tokenId The ID of the NFT for which tokens are being collected,\r\n    /// recipient The account that should receive the tokens,\r\n    /// amount0Max The maximum amount of token0 to collect,\r\n    /// amount1Max The maximum amount of token1 to collect\r\n    /// @return amount0 The amount of fees collected in token0\r\n    /// @return amount1 The amount of fees collected in token1\r\n    function collect(CollectParams calldata params) external payable returns (uint256 amount0, uint256 amount1);\r\n\r\n    /// @notice Burns a token ID, which deletes it from the NFT contract. The token must have 0 liquidity and all tokens\r\n    /// must be collected first.\r\n    /// @param tokenId The ID of the token that is being burned\r\n    function burn(uint256 tokenId) external payable;\r\n}"
			},
			"interfaces/IERC721Receiver.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\r\n\r\npragma solidity >=0.8.0;\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}"
			},
			"libraries/TimeFee.sol": {
				"content": "//SPDX-License-Identifier:MIT\r\npragma solidity >=0.8.9;\r\n\r\nlibrary TimeFee{\r\n    /*\r\n        *  100 ether<=amount<1000 ether, 1%\r\n        *  1000 ether<=amount<10000 ether,0.5%\r\n        *  amount>10000 ether,0.25%\r\n        * other error\r\n    */\r\n    function fee(uint256 stableAmount)internal pure returns(uint256 stableFee){\r\n        if(stableAmount>=100 ether && stableAmount<1000 ether){\r\n            return stableAmount/100;\r\n        }else if(stableAmount>=1000 ether && stableAmount<10000 ether){\r\n            return stableAmount/200;\r\n        }else if(stableAmount>=10000 ether){\r\n            return stableAmount/400;\r\n        }else{\r\n            return 0;\r\n        }\r\n    }\r\n}"
			},
			"interfaces/IError.sol": {
				"content": "//SPDX-License-Identifier:MIT\r\npragma solidity >=0.8.0;\r\n\r\ninterface IError{\r\n    //购买数量<100\r\n    error NotEnoughAmount();\r\n    //已经放入约定的空投代币数量\r\n    error AlreadyInjectToken();\r\n    //没有放入约定的空投代币数量\r\n    error NotInjectToken();\r\n    //不是购买者\r\n    error NotBuyer();\r\n    //不是出售者\r\n    error NorSolder();\r\n}"
			},
			"interfaces/ITimeStruct.sol": {
				"content": "//SPDX-License-Identifier:MIT\r\npragma solidity >=0.8.0;\r\n\r\ninterface ITimeStruct{\r\n    struct tradeMes{\r\n        uint8 tradeState; \r\n        uint64 tradeId;\r\n        uint56 buyTime;\r\n        uint128 buyTotalAmount; //预期空投代币数量\r\n        uint128 buyPrice;       //buyPrice/1000=当前价格\r\n        address tokenAddress;\r\n        address buyerAddress;\r\n        address solderAddress;\r\n    }\r\n}"
			},
			"libraries/SafeERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\r\n\r\npragma solidity >=0.8.0;\r\n\r\nimport {IERC20} from \"../interfaces/IERC20.sol\";\r\nimport {IERC20Permit} from \"../interfaces/IERC20Permit.sol\";\r\nimport {Address} from \"../libraries/Address.sol\";\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    /**\r\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\r\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 oldAllowance = token.allowance(address(this), spender);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\r\n     * to be set to zero before setting it to a non-zero value, such as USDT.\r\n     */\r\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\r\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\r\n\r\n        if (!_callOptionalReturnBool(token, approvalCall)) {\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\r\n            _callOptionalReturn(token, approvalCall);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\r\n     * Revert on invalid signature.\r\n     */\r\n    function safePermit(\r\n        IERC20Permit token,\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal {\r\n        uint256 nonceBefore = token.nonces(owner);\r\n        token.permit(owner, spender, value, deadline, v, r, s);\r\n        uint256 nonceAfter = token.nonces(owner);\r\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     *\r\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\r\n     */\r\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\r\n        // and not revert is the subcall reverts.\r\n\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        return\r\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\r\n    }\r\n}\r\n"
			},
			"libraries/Address.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\r\n\r\npragma solidity >=0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     *\r\n     * Furthermore, `isContract` will also return true if the target contract within\r\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\r\n     * which only has an effect at the end of a transaction.\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\r\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\r\n     *\r\n     * _Available since v4.8._\r\n     */\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        if (success) {\r\n            if (returndata.length == 0) {\r\n                // only check isContract if the call was successful and the return data is empty\r\n                // otherwise we already know that it was a contract\r\n                require(isContract(target), \"Address: call to non-contract\");\r\n            }\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason or using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length > 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert(errorMessage);\r\n        }\r\n    }\r\n}\r\n"
			},
			"interfaces/IERC20Permit.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\r\n\r\npragma solidity >=0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\r\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\r\n *\r\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\r\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\r\n * need to send a transaction, and thus is not required to hold Ether at all.\r\n *\r\n * ==== Security Considerations\r\n *\r\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\r\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\r\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\r\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\r\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\r\n * generally recommended is:\r\n *\r\n * ```solidity\r\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\r\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\r\n *     doThing(..., value);\r\n * }\r\n *\r\n * function doThing(..., uint256 value) public {\r\n *     token.safeTransferFrom(msg.sender, address(this), value);\r\n *     ...\r\n * }\r\n * ```\r\n *\r\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\r\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\r\n * {SafeERC20-safeTransferFrom}).\r\n *\r\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\r\n * contracts should have entry points that don't rely on permit.\r\n */\r\ninterface IERC20Permit {\r\n    /**\r\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\r\n     * given ``owner``'s signed approval.\r\n     *\r\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\r\n     * ordering also apply here.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `deadline` must be a timestamp in the future.\r\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\r\n     * over the EIP712-formatted function arguments.\r\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\r\n     *\r\n     * For more information on the signature format, see the\r\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\r\n     * section].\r\n     *\r\n     * CAUTION: See Security Considerations above.\r\n     */\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Returns the current nonce for `owner`. This value must be\r\n     * included whenever a signature is generated for {permit}.\r\n     *\r\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\r\n     * prevents a signature from being used multiple times.\r\n     */\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\r\n     */\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n}\r\n"
			},
			"interfaces/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n"
			},
			"libraries/PoolAddress.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.8.0;\r\n\r\n/// @title Provides functions for deriving a pool address from the factory, tokens, and the fee\r\nlibrary PoolAddress {\r\n    bytes32 internal constant POOL_INIT_CODE_HASH = 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54;\r\n\r\n    /// @notice The identifying key of the pool\r\n    struct PoolKey {\r\n        address token0;\r\n        address token1;\r\n        uint24 fee;\r\n    }\r\n\r\n    /// @notice Returns PoolKey: the ordered tokens with the matched fee levels\r\n    /// @param tokenA The first token of a pool, unsorted\r\n    /// @param tokenB The second token of a pool, unsorted\r\n    /// @param fee The fee level of the pool\r\n    /// @return Poolkey The pool details with ordered token0 and token1 assignments\r\n    function getPoolKey(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint24 fee\r\n    ) internal pure returns (PoolKey memory) {\r\n        if (tokenA > tokenB) (tokenA, tokenB) = (tokenB, tokenA);\r\n        return PoolKey({token0: tokenA, token1: tokenB, fee: fee});\r\n    }\r\n\r\n    /// @notice Deterministically computes the pool address given the factory and PoolKey\r\n    /// @param factory The Uniswap V3 factory contract address\r\n    /// @param key The PoolKey\r\n    /// @return pool The contract address of the V3 pool\r\n    function computeAddress(address factory, PoolKey memory key) internal pure returns (address pool) {\r\n        require(key.token0 < key.token1);\r\n        pool = address(uint160(uint(\r\n                keccak256(\r\n                    abi.encodePacked(\r\n                        bytes1(0xff),\r\n                        factory,\r\n                        keccak256(abi.encode(key.token0, key.token1, key.fee)),\r\n                        POOL_INIT_CODE_HASH\r\n                    )\r\n                )\r\n            )\r\n        ));\r\n    }\r\n}"
			},
			"interfaces/UniswapV3/IPeripheryImmutableState.sol": {
				"content": "//SPDX-License-Identifier:MIT\r\npragma solidity >=0.8.0;\r\n\r\n/// @title Immutable state\r\n/// @notice Functions that return immutable state of the router\r\ninterface IPeripheryImmutableState {\r\n    /// @return Returns the address of the Uniswap V3 factory\r\n    function factory() external view returns (address);\r\n\r\n    /// @return Returns the address of WETH9\r\n    function WETH9() external view returns (address);\r\n}"
			},
			"interfaces/UniswapV3/IPeripheryPayments.sol": {
				"content": "//SPDX-License-Identifier:MIT\r\npragma solidity >=0.8.0;\r\n\r\n/// @title Periphery Payments\r\n/// @notice Functions to ease deposits and withdrawals of ETH\r\ninterface IPeripheryPayments {\r\n    /// @notice Unwraps the contract's WETH9 balance and sends it to recipient as ETH.\r\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\r\n    /// @param amountMinimum The minimum amount of WETH9 to unwrap\r\n    /// @param recipient The address receiving ETH\r\n    function unwrapWETH9(uint256 amountMinimum, address recipient) external payable;\r\n\r\n    /// @notice Refunds any ETH balance held by this contract to the `msg.sender`\r\n    /// @dev Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps\r\n    /// that use ether for the input amount\r\n    function refundETH() external payable;\r\n\r\n    /// @notice Transfers the full amount of a token held by this contract to recipient\r\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing the token from users\r\n    /// @param token The contract address of the token which will be transferred to `recipient`\r\n    /// @param amountMinimum The minimum amount of token required for a transfer\r\n    /// @param recipient The destination address of the token\r\n    function sweepToken(\r\n        address token,\r\n        uint256 amountMinimum,\r\n        address recipient\r\n    ) external payable;\r\n}"
			},
			"interfaces/UniswapV3/IERC721Permit.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.8.0;\r\n\r\nimport '../../interfaces/IERC721.sol';\r\n\r\n/// @title ERC721 with permit\r\n/// @notice Extension to ERC721 that includes a permit function for signature based approvals\r\ninterface IERC721Permit is IERC721 {\r\n    /// @notice The permit typehash used in the permit signature\r\n    /// @return The typehash for the permit\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    /// @notice The domain separator used in the permit signature\r\n    /// @return The domain seperator used in encoding of permit signature\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    /// @notice Approve of a specific token ID for spending by spender via signature\r\n    /// @param spender The account that is being approved\r\n    /// @param tokenId The ID of the token that is being approved for spending\r\n    /// @param deadline The deadline timestamp by which the call must be mined for the approve to work\r\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\r\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\r\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\r\n    function permit(\r\n        address spender,\r\n        uint256 tokenId,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external payable;\r\n}"
			},
			"interfaces/UniswapV3/IPoolInitializer.sol": {
				"content": "//SPDX-License-Identifier:MIT\r\npragma solidity >=0.8.0;\r\npragma abicoder v2;\r\n\r\n/// @title Creates and initializes V3 Pools\r\n/// @notice Provides a method for creating and initializing a pool, if necessary, for bundling with other methods that\r\n/// require the pool to exist.\r\ninterface IPoolInitializer {\r\n    /// @notice Creates a new pool if it does not exist, then initializes if not initialized\r\n    /// @dev This method can be bundled with others via IMulticall for the first action (e.g. mint) performed against a pool\r\n    /// @param token0 The contract address of token0 of the pool\r\n    /// @param token1 The contract address of token1 of the pool\r\n    /// @param fee The fee amount of the v3 pool for the specified token pair\r\n    /// @param sqrtPriceX96 The initial square root price of the pool as a Q64.96 value\r\n    /// @return pool Returns the pool address based on the pair of tokens and fee, will return the newly created pool address if necessary\r\n    function createAndInitializePoolIfNecessary(\r\n        address token0,\r\n        address token1,\r\n        uint24 fee,\r\n        uint160 sqrtPriceX96\r\n    ) external payable returns (address pool);\r\n}"
			},
			"interfaces/IERC721Enumerable.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.8.0;\r\n\r\nimport \"../interfaces/IERC721.sol\";\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Enumerable is IERC721 {\r\n\r\n    /**\r\n     * @dev Returns the total amount of tokens stored by the contract.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\r\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\r\n\r\n    /**\r\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\r\n     * Use along with {totalSupply} to enumerate all tokens.\r\n     */\r\n    function tokenByIndex(uint256 index) external view returns (uint256);\r\n}\r\n"
			},
			"interfaces/IERC721Metadata.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\r\n\r\npragma solidity >=0.8.0;\r\n\r\nimport \"../interfaces/IERC721.sol\";\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Metadata is IERC721 {\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}"
			},
			"interfaces/IERC721.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\r\n\r\npragma solidity >=0.8.0;\r\n\r\nimport {IERC165} from \"../interfaces/IERC165.sol\";\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\r\n     *   a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\r\n     *   {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\r\n     *   a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\r\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\r\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the address zero.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n}\r\n"
			},
			"interfaces/IERC165.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\r\n\r\npragma solidity >=0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"contracts/TimeFactory.sol": {
				"TimeFactory": {
					"abi": [
						{
							"inputs": [],
							"name": "createMarket",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/TimeFactory.sol\":107:214  contract TimeFactory{... */\n  mstore(0x40, 0x80)\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/TimeFactory.sol\":107:214  contract TimeFactory{... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0xaea0e35f\n      eq\n      tag_3\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"contracts/TimeFactory.sol\":170:211  function createMarket()external{... */\n    tag_3:\n      tag_4\n      tag_5\n      jump\t// in\n    tag_4:\n      stop\n    tag_5:\n      jump\t// out\n\n    auxdata: 0xa2646970667358221220b7cfa7e0b143d17fed69deb4d71a2e49cc71463692bbc7e5e7108efbe5ee726464736f6c63430008090033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6080604052348015600f57600080fd5b50606d80601d6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063aea0e35f14602d575b600080fd5b60336035565b005b56fea2646970667358221220b7cfa7e0b143d17fed69deb4d71a2e49cc71463692bbc7e5e7108efbe5ee726464736f6c63430008090033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x6D DUP1 PUSH1 0x1D PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH1 0x28 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xAEA0E35F EQ PUSH1 0x2D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x33 PUSH1 0x35 JUMP JUMPDEST STOP JUMPDEST JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB7 0xCF 0xA7 0xE0 0xB1 NUMBER 0xD1 PUSH32 0xED69DEB4D71A2E49CC71463692BBC7E5E7108EFBE5EE726464736F6C63430008 MULMOD STOP CALLER ",
							"sourceMap": "107:107:0:-:0;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@createMarket_7": {
									"entryPoint": 53,
									"id": 7,
									"parameterSlots": 0,
									"returnSlots": 0
								}
							},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "6080604052348015600f57600080fd5b506004361060285760003560e01c8063aea0e35f14602d575b600080fd5b60336035565b005b56fea2646970667358221220b7cfa7e0b143d17fed69deb4d71a2e49cc71463692bbc7e5e7108efbe5ee726464736f6c63430008090033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH1 0x28 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xAEA0E35F EQ PUSH1 0x2D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x33 PUSH1 0x35 JUMP JUMPDEST STOP JUMPDEST JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB7 0xCF 0xA7 0xE0 0xB1 NUMBER 0xD1 PUSH32 0xED69DEB4D71A2E49CC71463692BBC7E5E7108EFBE5EE726464736F6C63430008 MULMOD STOP CALLER ",
							"sourceMap": "107:107:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;170:41;;;:::i;:::-;;;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "21800",
								"executionCost": "75",
								"totalCost": "21875"
							},
							"external": {
								"createMarket()": "122"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 107,
									"end": 214,
									"name": "PUSH",
									"source": 0,
									"value": "80"
								},
								{
									"begin": 107,
									"end": 214,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 107,
									"end": 214,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 107,
									"end": 214,
									"name": "CALLVALUE",
									"source": 0
								},
								{
									"begin": 107,
									"end": 214,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 107,
									"end": 214,
									"name": "ISZERO",
									"source": 0
								},
								{
									"begin": 107,
									"end": 214,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 107,
									"end": 214,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 107,
									"end": 214,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 107,
									"end": 214,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 107,
									"end": 214,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 107,
									"end": 214,
									"name": "tag",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 107,
									"end": 214,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 107,
									"end": 214,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 107,
									"end": 214,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 107,
									"end": 214,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 107,
									"end": 214,
									"name": "PUSH [$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 107,
									"end": 214,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 107,
									"end": 214,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 107,
									"end": 214,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 107,
									"end": 214,
									"name": "RETURN",
									"source": 0
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220b7cfa7e0b143d17fed69deb4d71a2e49cc71463692bbc7e5e7108efbe5ee726464736f6c63430008090033",
									".code": [
										{
											"begin": 107,
											"end": 214,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 107,
											"end": 214,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 107,
											"end": 214,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 107,
											"end": 214,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 107,
											"end": 214,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 107,
											"end": 214,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 107,
											"end": 214,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 107,
											"end": 214,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 107,
											"end": 214,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 107,
											"end": 214,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 107,
											"end": 214,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 107,
											"end": 214,
											"name": "tag",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 107,
											"end": 214,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 107,
											"end": 214,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 107,
											"end": 214,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 107,
											"end": 214,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 107,
											"end": 214,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 107,
											"end": 214,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 107,
											"end": 214,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 107,
											"end": 214,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 107,
											"end": 214,
											"name": "CALLDATALOAD",
											"source": 0
										},
										{
											"begin": 107,
											"end": 214,
											"name": "PUSH",
											"source": 0,
											"value": "E0"
										},
										{
											"begin": 107,
											"end": 214,
											"name": "SHR",
											"source": 0
										},
										{
											"begin": 107,
											"end": 214,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 107,
											"end": 214,
											"name": "PUSH",
											"source": 0,
											"value": "AEA0E35F"
										},
										{
											"begin": 107,
											"end": 214,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 107,
											"end": 214,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 107,
											"end": 214,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 107,
											"end": 214,
											"name": "tag",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 107,
											"end": 214,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 107,
											"end": 214,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 107,
											"end": 214,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 107,
											"end": 214,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 170,
											"end": 211,
											"name": "tag",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 170,
											"end": 211,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 170,
											"end": 211,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 170,
											"end": 211,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 170,
											"end": 211,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 170,
											"end": 211,
											"name": "tag",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 170,
											"end": 211,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 170,
											"end": 211,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 170,
											"end": 211,
											"name": "tag",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 170,
											"end": 211,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 170,
											"end": 211,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"createMarket()": "aea0e35f"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"createMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TimeFactory.sol\":\"TimeFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/TimeFactory.sol\":{\"keccak256\":\"0xb21cbcfb3e8d487c229a74b39949d7a29ce03e8a1c9515ce93d16012c07e147c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://df31aed74388988a54311f0a041ee02ec7473edf786667d366f9bc32d4b4671e\",\"dweb:/ipfs/QmYaMDtsPZ7AMHH7SXTnpGJkKXCveAdncWdkamp2f9KLmN\"]},\"contracts/TimeMarket.sol\":{\"keccak256\":\"0x906e8366c55b7d89ed49603b0f99f7fa45d4d691dfed9b35f5531e59f4f31838\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e9ab22df632f823cc7ca2ebf010b27b24e3a5bc1309b5f97ee7f66af95c59460\",\"dweb:/ipfs/QmZ2ay92qx7WKeYGev9yoCUwRXFEPdrENrRqv1JPWYfprf\"]},\"interfaces/IERC165.sol\":{\"keccak256\":\"0x7d622aae953af8cc0c42b642ea6bfefc4851d9da99ebf0c11c8a99e1b97dc7ff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ef936c54bf126d59024eaf04e4a15aa3527c52a27e160d5f93185cf2e47db5e8\",\"dweb:/ipfs/QmQS5yZTHRPGXyJbj1RX9JajLueqN3MTQ6SSvAG9iJQ4cV\"]},\"interfaces/IERC20.sol\":{\"keccak256\":\"0xa426add89e9b4785ddeeb07b4d9352b57de8b4cb314c8cb8f0d5898938bd8de9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://09852a830ad29d33cfdf74e7035853c68e43e1a8c242b25db9d656a074a54e6d\",\"dweb:/ipfs/QmeRSfQwWr3vyP2uJxnjybtPYLMiD17E51d4eMhXQh93R1\"]},\"interfaces/IERC20Permit.sol\":{\"keccak256\":\"0xc51a927b9d9ff62cf4c237f7f197827b90c460786c855c527007c02a94f23154\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d1107bf21355e8518d9fdcf1aa7052de7e5fc6d867d86d87b61b43667813cc1d\",\"dweb:/ipfs/QmZG3AQa61MLFWmovNyuzv3iCBPnFHGV7E7CimxLwpAwKt\"]},\"interfaces/IERC721.sol\":{\"keccak256\":\"0x49d5ef5ec866b921e61b9fd74a17160dc7f7396e2a58c3812fa4936ae7655899\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5675c27037dbd9a9d90cf650930c5ed95ee6c62bb8dfcacdc3872eab62ecf50d\",\"dweb:/ipfs/QmYmdBCaUZNiQjc4qnx4avKAWx7QXYiid1nwo76Zq7PdHn\"]},\"interfaces/IERC721Enumerable.sol\":{\"keccak256\":\"0x2928336d6b9bbc64be3a0969fadfc1e4d4b319497651d54851dcb919c1c50590\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://cf5a9f178df915738ce28563818060b15c62249653fa417d9cfde1b04516c31b\",\"dweb:/ipfs/QmfLqHXScsK1t8D2NCAVZa4j7niAqXHjxEHuG77HDUrSdt\"]},\"interfaces/IERC721Metadata.sol\":{\"keccak256\":\"0xd32870e2a6e19ded14c88a471733a51504aaec5e51b61be8f57469cc67440f2b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fe79f6298aa790c064e9aec4ded31cdb32d5de372b3fcda66035a9c6b3780331\",\"dweb:/ipfs/QmWvVNwdFao6264NR63yHgKH4LcYqYjJDq9SZ7GqKVRJFx\"]},\"interfaces/IERC721Receiver.sol\":{\"keccak256\":\"0xd669818e4d77be24bc391f00146315479826edff54e6791b92508bf7f4147791\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2ab4b52e2db524224473b3e62999634b2adf7d6e6fe00c34a6f57d562619a251\",\"dweb:/ipfs/QmaHFCwJtUDXoyLfV1KyDoFAAti1UgSqS8pQWZMFYZv2wu\"]},\"interfaces/IError.sol\":{\"keccak256\":\"0xeba0280837886bc9f46fea9c1a96b9a687e3f3e2d4646c5416a925d48d07b54c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://de9649f76e3bbf2896049207657ad98a181962e0ee8ca6dcaeb9317a002d5420\",\"dweb:/ipfs/QmdAadR7iwRtUgATLc3a3bgsqefxDWdadm9zQD7eP7GiiQ\"]},\"interfaces/ITimeStruct.sol\":{\"keccak256\":\"0x0afe849cb20e95bbad7d16aa2ea4d9b3b9cec028c3efeefa5fe8b34cc24f7e4b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://cf85a5b15f40309babd9526c684bf3c160716e1ed3a465da6c18dd57de883a07\",\"dweb:/ipfs/QmNYMhZPWaALPTvJbo21uyngnc2sP3JnfVRqLNCNXwGUAK\"]},\"interfaces/UniswapV3/IERC721Permit.sol\":{\"keccak256\":\"0xf64ceb2b37307fe3b391256ee5745ca4877adc339b56fe71ae9531d7f19be9aa\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://f2ab4e22a3cc4a36cf359f0eb37543a66849d864fa27eabc602f32aeae34667a\",\"dweb:/ipfs/QmU9xKeEre66suCJYxchbivZkGbGygw3jKP9daHKUaYMuN\"]},\"interfaces/UniswapV3/INonfungiblePositionManager.sol\":{\"keccak256\":\"0xf223d560260129efd7a8a794c2193ac1e645a49621ebbe3358a31b551aef8dea\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9aa85f6c28aca3fc982b4b93a753865913f435e8aa9d1d04bd51a8a9e052c1d2\",\"dweb:/ipfs/QmWmyTdJUsHH6VxwL9gooFQAeEMkE396cNgmDG3s6HJYdB\"]},\"interfaces/UniswapV3/IPeripheryImmutableState.sol\":{\"keccak256\":\"0x9d4a239b1324e9cb7ffa202088a2784a3d7c56ea7b47d3a12febec032305e245\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://726ee46aabe0655e684d9b344dcf0844bef491879bdc35499c9ba4c1d9fb75b1\",\"dweb:/ipfs/QmV96KM5eoC73ZdsQkLjw2WjNHk3cqnLtNRSWxAsebKusX\"]},\"interfaces/UniswapV3/IPeripheryPayments.sol\":{\"keccak256\":\"0xedc15d14a5be9ed30744f3f8c0a3e53c3d5478464091330ba9c8acc1ddf9fcb4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2b20d91bc3db69de801f8c8e6dd5b05aa42ebc73690fd9f13316e7bf71405641\",\"dweb:/ipfs/QmQX65rHNiJptDzxXX8bctavSHpYCYuPLoSriJaL2GYyDp\"]},\"interfaces/UniswapV3/IPoolInitializer.sol\":{\"keccak256\":\"0xa54fe96a33c55207b9cf3e4c4d727dc7e0212e645b2c767281b9a9026c2edaf3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d082f8a8e48919d6c920d91351fddc3fd509d0446b1f45f541fdcfa0942a9196\",\"dweb:/ipfs/QmRVaquMHr4mbGBADKii6F9K9mLTtDx7omn7pPaEXJTLMw\"]},\"libraries/Address.sol\":{\"keccak256\":\"0x0f4169fea1817f1228f6a2db5e764e2a86f357a9f42f83de1f157449bca0f1ad\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://244a3f17ec48680bfaadacf724e5b12030636dc8b3e59f01de1cf206f0802ad7\",\"dweb:/ipfs/QmZXNxyUx2vm7LjcwtNhwYyKgqVxmbMAM3cG5bricBmL1K\"]},\"libraries/PoolAddress.sol\":{\"keccak256\":\"0xda7193f15e5262d61ba1995c1523dda0c00fa89b6b930dee4178849fa7ff8506\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://02924be40064529f8cd7ea8e7f40ffeb8fb1e074d82be0603cf9ec2896f9310e\",\"dweb:/ipfs/QmTj3DLXF3ePVr4DcqhnqYj9vAJ9Ng98Pf3EFkG9LzTFuK\"]},\"libraries/SafeERC20.sol\":{\"keccak256\":\"0xe74183ce288c892718941897cf193167013ef062470ea7fc7f0e74c23521cdd1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://75be313f96388535ff46fc29a55ed358e24e887c5706ea595ef2ed95c1d58e03\",\"dweb:/ipfs/QmReMXbvdgk5wZtn3mrjsDGLKFzfbBxG6HJBELLsaAKXkS\"]},\"libraries/TimeFee.sol\":{\"keccak256\":\"0x263efba43eaec339f5385a6c25158219d00edce75157d7cd759f3032725fcc79\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bcb2fee6d1fa020c5a58f9de9dace4b0c09339c784b1b7888ef78ffd52faa7c0\",\"dweb:/ipfs/QmVjYwXXg8QyvTh1dyTWp41qjyrajaqyXuATtMJqN4SRF7\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/TimeMarket.sol": {
				"TimeMarket": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_airdropToken",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "_clearingTime",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"inputs": [],
							"name": "AlreadyInjectToken",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "NorSolder",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "NotBuyer",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "NotEnoughAmount",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "NotInjectToken",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint64",
									"name": "_id",
									"type": "uint64"
								}
							],
							"name": "Sale",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_tokenAddress",
									"type": "address"
								},
								{
									"internalType": "uint128",
									"name": "_buyAmount",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "_buyPrice",
									"type": "uint128"
								}
							],
							"name": "buy",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint64",
									"name": "_id",
									"type": "uint64"
								}
							],
							"name": "buyerWithdrawAirdorp",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint64",
									"name": "_id",
									"type": "uint64"
								}
							],
							"name": "buyerWithdrawRefund",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint128",
									"name": "_soldPrice",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "_soldAmount",
									"type": "uint128"
								}
							],
							"name": "getPenal",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint64",
									"name": "_id",
									"type": "uint64"
								}
							],
							"name": "injectFutureToken",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint64",
									"name": "_id",
									"type": "uint64"
								}
							],
							"name": "solderWithdrawStable",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"name": "userIfWithdraw1",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"name": "userIfWithdraw2",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"name": "userIfWithdraw3",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"name": "userIfWithdraw4",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/TimeMarket.sol\":356:7878  contract TimeMarket is ITimeStruct, IError{... */\n  mstore(0x40, 0x80)\n    /* \"contracts/TimeMarket.sol\":525:668  constructor(address _airdropToken,uint _clearingTime){... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  mload(0x40)\n  sub(codesize, bytecodeSize)\n  dup1\n  bytecodeSize\n  dup4\n  codecopy\n  dup2\n  dup2\n  add\n  0x40\n  mstore\n  dup2\n  add\n  swap1\n  tag_2\n  swap2\n  swap1\n  tag_3\n  jump\t// in\ntag_2:\n    /* \"contracts/TimeMarket.sol\":602:615  _airdropToken */\n  dup2\n    /* \"contracts/TimeMarket.sol\":589:601  airdropToken */\n  0x01\n  0x00\n    /* \"contracts/TimeMarket.sol\":589:615  airdropToken=_airdropToken */\n  0x0100\n  exp\n  dup2\n  sload\n  dup2\n  0xffffffffffffffffffffffffffffffffffffffff\n  mul\n  not\n  and\n  swap1\n  dup4\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  mul\n  or\n  swap1\n  sstore\n  pop\n    /* \"contracts/TimeMarket.sol\":646:659  _clearingTime */\n  dup1\n    /* \"contracts/TimeMarket.sol\":626:638  clearingTime */\n  0x00\n  dup1\n    /* \"contracts/TimeMarket.sol\":626:660  clearingTime=uint56(_clearingTime) */\n  0x0100\n  exp\n  dup2\n  sload\n  dup2\n  0xffffffffffffff\n  mul\n  not\n  and\n  swap1\n  dup4\n  0xffffffffffffff\n  and\n  mul\n  or\n  swap1\n  sstore\n  pop\n    /* \"contracts/TimeMarket.sol\":525:668  constructor(address _airdropToken,uint _clearingTime){... */\n  pop\n  pop\n    /* \"contracts/TimeMarket.sol\":356:7878  contract TimeMarket is ITimeStruct, IError{... */\n  jump(tag_6)\n    /* \"#utility.yul\":88:205   */\ntag_8:\n    /* \"#utility.yul\":197:198   */\n  0x00\n    /* \"#utility.yul\":194:195   */\n  dup1\n    /* \"#utility.yul\":187:199   */\n  revert\n    /* \"#utility.yul\":334:460   */\ntag_10:\n    /* \"#utility.yul\":371:378   */\n  0x00\n    /* \"#utility.yul\":411:453   */\n  0xffffffffffffffffffffffffffffffffffffffff\n    /* \"#utility.yul\":404:409   */\n  dup3\n    /* \"#utility.yul\":400:454   */\n  and\n    /* \"#utility.yul\":389:454   */\n  swap1\n  pop\n    /* \"#utility.yul\":334:460   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":466:562   */\ntag_11:\n    /* \"#utility.yul\":503:510   */\n  0x00\n    /* \"#utility.yul\":532:556   */\n  tag_23\n    /* \"#utility.yul\":550:555   */\n  dup3\n    /* \"#utility.yul\":532:556   */\n  tag_10\n  jump\t// in\ntag_23:\n    /* \"#utility.yul\":521:556   */\n  swap1\n  pop\n    /* \"#utility.yul\":466:562   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":568:690   */\ntag_12:\n    /* \"#utility.yul\":641:665   */\n  tag_25\n    /* \"#utility.yul\":659:664   */\n  dup2\n    /* \"#utility.yul\":641:665   */\n  tag_11\n  jump\t// in\ntag_25:\n    /* \"#utility.yul\":634:639   */\n  dup2\n    /* \"#utility.yul\":631:666   */\n  eq\n    /* \"#utility.yul\":621:684   */\n  tag_26\n  jumpi\n    /* \"#utility.yul\":680:681   */\n  0x00\n    /* \"#utility.yul\":677:678   */\n  dup1\n    /* \"#utility.yul\":670:682   */\n  revert\n    /* \"#utility.yul\":621:684   */\ntag_26:\n    /* \"#utility.yul\":568:690   */\n  pop\n  jump\t// out\n    /* \"#utility.yul\":696:839   */\ntag_13:\n    /* \"#utility.yul\":753:758   */\n  0x00\n    /* \"#utility.yul\":784:790   */\n  dup2\n    /* \"#utility.yul\":778:791   */\n  mload\n    /* \"#utility.yul\":769:791   */\n  swap1\n  pop\n    /* \"#utility.yul\":800:833   */\n  tag_28\n    /* \"#utility.yul\":827:832   */\n  dup2\n    /* \"#utility.yul\":800:833   */\n  tag_12\n  jump\t// in\ntag_28:\n    /* \"#utility.yul\":696:839   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":845:922   */\ntag_14:\n    /* \"#utility.yul\":882:889   */\n  0x00\n    /* \"#utility.yul\":911:916   */\n  dup2\n    /* \"#utility.yul\":900:916   */\n  swap1\n  pop\n    /* \"#utility.yul\":845:922   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":928:1050   */\ntag_15:\n    /* \"#utility.yul\":1001:1025   */\n  tag_31\n    /* \"#utility.yul\":1019:1024   */\n  dup2\n    /* \"#utility.yul\":1001:1025   */\n  tag_14\n  jump\t// in\ntag_31:\n    /* \"#utility.yul\":994:999   */\n  dup2\n    /* \"#utility.yul\":991:1026   */\n  eq\n    /* \"#utility.yul\":981:1044   */\n  tag_32\n  jumpi\n    /* \"#utility.yul\":1040:1041   */\n  0x00\n    /* \"#utility.yul\":1037:1038   */\n  dup1\n    /* \"#utility.yul\":1030:1042   */\n  revert\n    /* \"#utility.yul\":981:1044   */\ntag_32:\n    /* \"#utility.yul\":928:1050   */\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1056:1199   */\ntag_16:\n    /* \"#utility.yul\":1113:1118   */\n  0x00\n    /* \"#utility.yul\":1144:1150   */\n  dup2\n    /* \"#utility.yul\":1138:1151   */\n  mload\n    /* \"#utility.yul\":1129:1151   */\n  swap1\n  pop\n    /* \"#utility.yul\":1160:1193   */\n  tag_34\n    /* \"#utility.yul\":1187:1192   */\n  dup2\n    /* \"#utility.yul\":1160:1193   */\n  tag_15\n  jump\t// in\ntag_34:\n    /* \"#utility.yul\":1056:1199   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1205:1712   */\ntag_3:\n    /* \"#utility.yul\":1284:1290   */\n  0x00\n    /* \"#utility.yul\":1292:1298   */\n  dup1\n    /* \"#utility.yul\":1341:1343   */\n  0x40\n    /* \"#utility.yul\":1329:1338   */\n  dup4\n    /* \"#utility.yul\":1320:1327   */\n  dup6\n    /* \"#utility.yul\":1316:1339   */\n  sub\n    /* \"#utility.yul\":1312:1344   */\n  slt\n    /* \"#utility.yul\":1309:1428   */\n  iszero\n  tag_36\n  jumpi\n    /* \"#utility.yul\":1347:1426   */\n  tag_37\n  tag_8\n  jump\t// in\ntag_37:\n    /* \"#utility.yul\":1309:1428   */\ntag_36:\n    /* \"#utility.yul\":1467:1468   */\n  0x00\n    /* \"#utility.yul\":1492:1556   */\n  tag_38\n    /* \"#utility.yul\":1548:1555   */\n  dup6\n    /* \"#utility.yul\":1539:1545   */\n  dup3\n    /* \"#utility.yul\":1528:1537   */\n  dup7\n    /* \"#utility.yul\":1524:1546   */\n  add\n    /* \"#utility.yul\":1492:1556   */\n  tag_13\n  jump\t// in\ntag_38:\n    /* \"#utility.yul\":1482:1556   */\n  swap3\n  pop\n    /* \"#utility.yul\":1438:1566   */\n  pop\n    /* \"#utility.yul\":1605:1607   */\n  0x20\n    /* \"#utility.yul\":1631:1695   */\n  tag_39\n    /* \"#utility.yul\":1687:1694   */\n  dup6\n    /* \"#utility.yul\":1678:1684   */\n  dup3\n    /* \"#utility.yul\":1667:1676   */\n  dup7\n    /* \"#utility.yul\":1663:1685   */\n  add\n    /* \"#utility.yul\":1631:1695   */\n  tag_16\n  jump\t// in\ntag_39:\n    /* \"#utility.yul\":1621:1695   */\n  swap2\n  pop\n    /* \"#utility.yul\":1576:1705   */\n  pop\n    /* \"#utility.yul\":1205:1712   */\n  swap3\n  pop\n  swap3\n  swap1\n  pop\n  jump\t// out\n    /* \"contracts/TimeMarket.sol\":356:7878  contract TimeMarket is ITimeStruct, IError{... */\ntag_6:\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/TimeMarket.sol\":356:7878  contract TimeMarket is ITimeStruct, IError{... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x98c50fdd\n      gt\n      tag_14\n      jumpi\n      dup1\n      0x98c50fdd\n      eq\n      tag_8\n      jumpi\n      dup1\n      0xb8d7f980\n      eq\n      tag_9\n      jumpi\n      dup1\n      0xc0102de4\n      eq\n      tag_10\n      jumpi\n      dup1\n      0xd14485a2\n      eq\n      tag_11\n      jumpi\n      dup1\n      0xdf0905c6\n      eq\n      tag_12\n      jumpi\n      dup1\n      0xfc993ea8\n      eq\n      tag_13\n      jumpi\n      jump(tag_2)\n    tag_14:\n      dup1\n      0x25ac3a73\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x2895cb7b\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x59de2f60\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x762e9d30\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x77bcd8a6\n      eq\n      tag_7\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"contracts/TimeMarket.sol\":2852:3459  function injectFutureToken(uint64 _id)external{... */\n    tag_3:\n      tag_15\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_16\n      swap2\n      swap1\n      tag_17\n      jump\t// in\n    tag_16:\n      tag_18\n      jump\t// in\n    tag_15:\n      stop\n        /* \"contracts/TimeMarket.sol\":5504:6937  function buyerWithdrawRefund(uint64 _id)external{... */\n    tag_4:\n      tag_19\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_20\n      swap2\n      swap1\n      tag_17\n      jump\t// in\n    tag_20:\n      tag_21\n      jump\t// in\n    tag_19:\n      stop\n        /* \"contracts/TimeMarket.sol\":929:993  mapping(address => mapping(uint256=>bool))public userIfWithdraw1 */\n    tag_5:\n      tag_22\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_23\n      swap2\n      swap1\n      tag_24\n      jump\t// in\n    tag_23:\n      tag_25\n      jump\t// in\n    tag_22:\n      mload(0x40)\n      tag_26\n      swap2\n      swap1\n      tag_27\n      jump\t// in\n    tag_26:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/TimeMarket.sol\":2141:2723  function Sale(uint64 _id) external {... */\n    tag_6:\n      tag_28\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_29\n      swap2\n      swap1\n      tag_17\n      jump\t// in\n    tag_29:\n      tag_30\n      jump\t// in\n    tag_28:\n      stop\n        /* \"contracts/TimeMarket.sol\":4280:5417  function solderWithdrawStable(uint64 _id)external{... */\n    tag_7:\n      tag_31\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_32\n      swap2\n      swap1\n      tag_17\n      jump\t// in\n    tag_32:\n      tag_33\n      jump\t// in\n    tag_31:\n      stop\n        /* \"contracts/TimeMarket.sol\":7330:7873  function getPenal(uint128 _soldPrice, uint128 _soldAmount)public pure returns (uint256){... */\n    tag_8:\n      tag_34\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_35\n      swap2\n      swap1\n      tag_36\n      jump\t// in\n    tag_35:\n      tag_37\n      jump\t// in\n    tag_34:\n      mload(0x40)\n      tag_38\n      swap2\n      swap1\n      tag_39\n      jump\t// in\n    tag_38:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/TimeMarket.sol\":1177:1241  mapping(address => mapping(uint256=>bool))public userIfWithdraw3 */\n    tag_9:\n      tag_40\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_41\n      swap2\n      swap1\n      tag_24\n      jump\t// in\n    tag_41:\n      tag_42\n      jump\t// in\n    tag_40:\n      mload(0x40)\n      tag_43\n      swap2\n      swap1\n      tag_27\n      jump\t// in\n    tag_43:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/TimeMarket.sol\":3467:4227  function buyerWithdrawAirdorp(uint64 _id)external{... */\n    tag_10:\n      tag_44\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_45\n      swap2\n      swap1\n      tag_17\n      jump\t// in\n    tag_45:\n      tag_46\n      jump\t// in\n    tag_44:\n      stop\n        /* \"contracts/TimeMarket.sol\":1375:2119  function buy(address _tokenAddress,uint128 _buyAmount,uint128 _buyPrice)external{... */\n    tag_11:\n      tag_47\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_48\n      swap2\n      swap1\n      tag_49\n      jump\t// in\n    tag_48:\n      tag_50\n      jump\t// in\n    tag_47:\n      stop\n        /* \"contracts/TimeMarket.sol\":1053:1117  mapping(address => mapping(uint256=>bool))public userIfWithdraw2 */\n    tag_12:\n      tag_51\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_52\n      swap2\n      swap1\n      tag_24\n      jump\t// in\n    tag_52:\n      tag_53\n      jump\t// in\n    tag_51:\n      mload(0x40)\n      tag_54\n      swap2\n      swap1\n      tag_27\n      jump\t// in\n    tag_54:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/TimeMarket.sol\":1288:1352  mapping(address => mapping(uint256=>bool))public userIfWithdraw4 */\n    tag_13:\n      tag_55\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_56\n      swap2\n      swap1\n      tag_24\n      jump\t// in\n    tag_56:\n      tag_57\n      jump\t// in\n    tag_55:\n      mload(0x40)\n      tag_58\n      swap2\n      swap1\n      tag_27\n      jump\t// in\n    tag_58:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/TimeMarket.sol\":2852:3459  function injectFutureToken(uint64 _id)external{... */\n    tag_18:\n        /* \"contracts/TimeMarket.sol\":2992:2997  false */\n      0x00\n        /* \"contracts/TimeMarket.sol\":2966:2974  ifInject */\n      0x03\n        /* \"contracts/TimeMarket.sol\":2966:2986  ifInject[msg.sender] */\n      0x00\n        /* \"contracts/TimeMarket.sol\":2975:2985  msg.sender */\n      caller\n        /* \"contracts/TimeMarket.sol\":2966:2986  ifInject[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/TimeMarket.sol\":2966:2991  ifInject[msg.sender][_id] */\n      0x00\n        /* \"contracts/TimeMarket.sol\":2987:2990  _id */\n      dup4\n        /* \"contracts/TimeMarket.sol\":2966:2991  ifInject[msg.sender][_id] */\n      0xffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n        /* \"contracts/TimeMarket.sol\":2966:2997  ifInject[msg.sender][_id]=false */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xff\n      mul\n      not\n      and\n      swap1\n      dup4\n      iszero\n      iszero\n      mul\n      or\n      swap1\n      sstore\n        /* \"contracts/TimeMarket.sol\":2963:3028  if(ifInject[msg.sender][_id]=false){revert AlreadyInjectToken();} */\n      iszero\n      tag_60\n      jumpi\n        /* \"contracts/TimeMarket.sol\":3006:3026  AlreadyInjectToken() */\n      mload(0x40)\n      0x4232716900000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/TimeMarket.sol\":2963:3028  if(ifInject[msg.sender][_id]=false){revert AlreadyInjectToken();} */\n    tag_60:\n        /* \"contracts/TimeMarket.sol\":3136:3146  msg.sender */\n      caller\n        /* \"contracts/TimeMarket.sol\":3120:3146  getSolder(_id)!=msg.sender */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/TimeMarket.sol\":3120:3134  getSolder(_id) */\n      tag_61\n        /* \"contracts/TimeMarket.sol\":3130:3133  _id */\n      dup3\n        /* \"contracts/TimeMarket.sol\":3120:3129  getSolder */\n      tag_62\n        /* \"contracts/TimeMarket.sol\":3120:3134  getSolder(_id) */\n      jump\t// in\n    tag_61:\n        /* \"contracts/TimeMarket.sol\":3120:3146  getSolder(_id)!=msg.sender */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"contracts/TimeMarket.sol\":3117:3168  if(getSolder(_id)!=msg.sender){revert NorSolder();} */\n      tag_63\n      jumpi\n        /* \"contracts/TimeMarket.sol\":3155:3166  NorSolder() */\n      mload(0x40)\n      0xd7c498bf00000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/TimeMarket.sol\":3117:3168  if(getSolder(_id)!=msg.sender){revert NorSolder();} */\n    tag_63:\n        /* \"contracts/TimeMarket.sol\":3225:3250  uint256 thisAirdropAmount */\n      0x00\n        /* \"contracts/TimeMarket.sol\":3251:3260  _tradeMes */\n      0x02\n        /* \"contracts/TimeMarket.sol\":3251:3265  _tradeMes[_id] */\n      0x00\n        /* \"contracts/TimeMarket.sol\":3261:3264  _id */\n      dup4\n        /* \"contracts/TimeMarket.sol\":3251:3265  _tradeMes[_id] */\n      0xffffffffffffffff\n      and\n      0xffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/TimeMarket.sol\":3251:3280  _tradeMes[_id].buyTotalAmount */\n      0x00\n      add\n      0x10\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/TimeMarket.sol\":3225:3280  uint256 thisAirdropAmount=_tradeMes[_id].buyTotalAmount */\n      0xffffffffffffffffffffffffffffffff\n      and\n      swap1\n      pop\n        /* \"contracts/TimeMarket.sol\":3291:3372  IERC20(airdropToken).safeTransferFrom(msg.sender,address(this),thisAirdropAmount) */\n      tag_64\n        /* \"contracts/TimeMarket.sol\":3329:3339  msg.sender */\n      caller\n        /* \"contracts/TimeMarket.sol\":3348:3352  this */\n      address\n        /* \"contracts/TimeMarket.sol\":3354:3371  thisAirdropAmount */\n      dup4\n        /* \"contracts/TimeMarket.sol\":3298:3310  airdropToken */\n      0x01\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/TimeMarket.sol\":3291:3328  IERC20(airdropToken).safeTransferFrom */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      tag_65\n      swap1\n        /* \"contracts/TimeMarket.sol\":3291:3372  IERC20(airdropToken).safeTransferFrom(msg.sender,address(this),thisAirdropAmount) */\n      swap4\n      swap3\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_64:\n        /* \"contracts/TimeMarket.sol\":3409:3413  true */\n      0x01\n        /* \"contracts/TimeMarket.sol\":3383:3391  ifInject */\n      0x03\n        /* \"contracts/TimeMarket.sol\":3383:3403  ifInject[msg.sender] */\n      0x00\n        /* \"contracts/TimeMarket.sol\":3392:3402  msg.sender */\n      caller\n        /* \"contracts/TimeMarket.sol\":3383:3403  ifInject[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/TimeMarket.sol\":3383:3408  ifInject[msg.sender][_id] */\n      0x00\n        /* \"contracts/TimeMarket.sol\":3404:3407  _id */\n      dup5\n        /* \"contracts/TimeMarket.sol\":3383:3408  ifInject[msg.sender][_id] */\n      0xffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n        /* \"contracts/TimeMarket.sol\":3383:3413  ifInject[msg.sender][_id]=true */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xff\n      mul\n      not\n      and\n      swap1\n      dup4\n      iszero\n      iszero\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"contracts/TimeMarket.sol\":3450:3451  3 */\n      0x03\n        /* \"contracts/TimeMarket.sol\":3424:3433  _tradeMes */\n      0x02\n        /* \"contracts/TimeMarket.sol\":3424:3438  _tradeMes[_id] */\n      0x00\n        /* \"contracts/TimeMarket.sol\":3434:3437  _id */\n      dup5\n        /* \"contracts/TimeMarket.sol\":3424:3438  _tradeMes[_id] */\n      0xffffffffffffffff\n      and\n      0xffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/TimeMarket.sol\":3424:3449  _tradeMes[_id].tradeState */\n      0x00\n      add\n      0x00\n        /* \"contracts/TimeMarket.sol\":3424:3451  _tradeMes[_id].tradeState=3 */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"contracts/TimeMarket.sol\":2898:3459  {... */\n      pop\n        /* \"contracts/TimeMarket.sol\":2852:3459  function injectFutureToken(uint64 _id)external{... */\n      pop\n      jump\t// out\n        /* \"contracts/TimeMarket.sol\":5504:6937  function buyerWithdrawRefund(uint64 _id)external{... */\n    tag_21:\n        /* \"contracts/TimeMarket.sol\":5563:5576  address buyer */\n      0x00\n        /* \"contracts/TimeMarket.sol\":5577:5590  getBuyer(_id) */\n      tag_67\n        /* \"contracts/TimeMarket.sol\":5586:5589  _id */\n      dup3\n        /* \"contracts/TimeMarket.sol\":5577:5585  getBuyer */\n      tag_68\n        /* \"contracts/TimeMarket.sol\":5577:5590  getBuyer(_id) */\n      jump\t// in\n    tag_67:\n        /* \"contracts/TimeMarket.sol\":5563:5590  address buyer=getBuyer(_id) */\n      swap1\n      pop\n        /* \"contracts/TimeMarket.sol\":5601:5615  address solder */\n      0x00\n        /* \"contracts/TimeMarket.sol\":5616:5630  getSolder(_id) */\n      tag_69\n        /* \"contracts/TimeMarket.sol\":5626:5629  _id */\n      dup4\n        /* \"contracts/TimeMarket.sol\":5616:5625  getSolder */\n      tag_62\n        /* \"contracts/TimeMarket.sol\":5616:5630  getSolder(_id) */\n      jump\t// in\n    tag_69:\n        /* \"contracts/TimeMarket.sol\":5601:5630  address solder=getSolder(_id) */\n      swap1\n      pop\n        /* \"contracts/TimeMarket.sol\":5694:5699  buyer */\n      dup2\n        /* \"contracts/TimeMarket.sol\":5682:5699  msg.sender==buyer */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/TimeMarket.sol\":5682:5692  msg.sender */\n      caller\n        /* \"contracts/TimeMarket.sol\":5682:5699  msg.sender==buyer */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"contracts/TimeMarket.sol\":5674:5700  require(msg.sender==buyer) */\n      tag_70\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_70:\n        /* \"contracts/TimeMarket.sol\":5805:5810  false */\n      0x00\n        /* \"contracts/TimeMarket.sol\":5782:5810  ifInject[solder][_id]==false */\n      iszero\n      iszero\n        /* \"contracts/TimeMarket.sol\":5782:5790  ifInject */\n      0x03\n        /* \"contracts/TimeMarket.sol\":5782:5798  ifInject[solder] */\n      0x00\n        /* \"contracts/TimeMarket.sol\":5791:5797  solder */\n      dup4\n        /* \"contracts/TimeMarket.sol\":5782:5798  ifInject[solder] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/TimeMarket.sol\":5782:5803  ifInject[solder][_id] */\n      0x00\n        /* \"contracts/TimeMarket.sol\":5799:5802  _id */\n      dup6\n        /* \"contracts/TimeMarket.sol\":5782:5803  ifInject[solder][_id] */\n      0xffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n        /* \"contracts/TimeMarket.sol\":5782:5810  ifInject[solder][_id]==false */\n      iszero\n      iszero\n      eq\n        /* \"contracts/TimeMarket.sol\":5774:5811  require(ifInject[solder][_id]==false) */\n      tag_71\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_71:\n        /* \"contracts/TimeMarket.sol\":5864:5869  false */\n      0x00\n        /* \"contracts/TimeMarket.sol\":5830:5869  userIfWithdraw3[msg.sender][_id]==false */\n      iszero\n      iszero\n        /* \"contracts/TimeMarket.sol\":5830:5845  userIfWithdraw3 */\n      0x06\n        /* \"contracts/TimeMarket.sol\":5830:5857  userIfWithdraw3[msg.sender] */\n      0x00\n        /* \"contracts/TimeMarket.sol\":5846:5856  msg.sender */\n      caller\n        /* \"contracts/TimeMarket.sol\":5830:5857  userIfWithdraw3[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/TimeMarket.sol\":5830:5862  userIfWithdraw3[msg.sender][_id] */\n      0x00\n        /* \"contracts/TimeMarket.sol\":5858:5861  _id */\n      dup6\n        /* \"contracts/TimeMarket.sol\":5830:5862  userIfWithdraw3[msg.sender][_id] */\n      0xffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n        /* \"contracts/TimeMarket.sol\":5830:5869  userIfWithdraw3[msg.sender][_id]==false */\n      iszero\n      iszero\n      eq\n        /* \"contracts/TimeMarket.sol\":5822:5870  require(userIfWithdraw3[msg.sender][_id]==false) */\n      tag_72\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_72:\n        /* \"contracts/TimeMarket.sol\":5934:5939  buyer */\n      dup2\n        /* \"contracts/TimeMarket.sol\":5922:5939  msg.sender==buyer */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/TimeMarket.sol\":5922:5932  msg.sender */\n      caller\n        /* \"contracts/TimeMarket.sol\":5922:5939  msg.sender==buyer */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"contracts/TimeMarket.sol\":5914:5940  require(msg.sender==buyer) */\n      tag_73\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_73:\n        /* \"contracts/TimeMarket.sol\":5953:5979  address promiseStableToken */\n      0x00\n        /* \"contracts/TimeMarket.sol\":5980:5989  _tradeMes */\n      0x02\n        /* \"contracts/TimeMarket.sol\":5980:5994  _tradeMes[_id] */\n      0x00\n        /* \"contracts/TimeMarket.sol\":5990:5993  _id */\n      dup6\n        /* \"contracts/TimeMarket.sol\":5980:5994  _tradeMes[_id] */\n      0xffffffffffffffff\n      and\n      0xffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/TimeMarket.sol\":5980:6007  _tradeMes[_id].tokenAddress */\n      0x02\n      add\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/TimeMarket.sol\":5953:6007  address promiseStableToken=_tradeMes[_id].tokenAddress */\n      swap1\n      pop\n        /* \"contracts/TimeMarket.sol\":6018:6040  uint256 penalSumAmount */\n      0x00\n        /* \"contracts/TimeMarket.sol\":6041:6104  getPenal(_tradeMes[_id].buyPrice,_tradeMes[_id].buyTotalAmount) */\n      tag_74\n        /* \"contracts/TimeMarket.sol\":6050:6059  _tradeMes */\n      0x02\n        /* \"contracts/TimeMarket.sol\":6050:6064  _tradeMes[_id] */\n      0x00\n        /* \"contracts/TimeMarket.sol\":6060:6063  _id */\n      dup8\n        /* \"contracts/TimeMarket.sol\":6050:6064  _tradeMes[_id] */\n      0xffffffffffffffff\n      and\n      0xffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/TimeMarket.sol\":6050:6073  _tradeMes[_id].buyPrice */\n      0x01\n      add\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/TimeMarket.sol\":6074:6083  _tradeMes */\n      0x02\n        /* \"contracts/TimeMarket.sol\":6074:6088  _tradeMes[_id] */\n      0x00\n        /* \"contracts/TimeMarket.sol\":6084:6087  _id */\n      dup9\n        /* \"contracts/TimeMarket.sol\":6074:6088  _tradeMes[_id] */\n      0xffffffffffffffff\n      and\n      0xffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/TimeMarket.sol\":6074:6103  _tradeMes[_id].buyTotalAmount */\n      0x00\n      add\n      0x10\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/TimeMarket.sol\":6041:6049  getPenal */\n      tag_37\n        /* \"contracts/TimeMarket.sol\":6041:6104  getPenal(_tradeMes[_id].buyPrice,_tradeMes[_id].buyTotalAmount) */\n      jump\t// in\n    tag_74:\n        /* \"contracts/TimeMarket.sol\":6018:6104  uint256 penalSumAmount=getPenal(_tradeMes[_id].buyPrice,_tradeMes[_id].buyTotalAmount) */\n      swap1\n      pop\n        /* \"contracts/TimeMarket.sol\":6115:6126  uint256 fee */\n      0x00\n        /* \"contracts/TimeMarket.sol\":6127:6154  TimeFee.fee(penalSumAmount) */\n      tag_75\n        /* \"contracts/TimeMarket.sol\":6139:6153  penalSumAmount */\n      dup3\n        /* \"contracts/TimeMarket.sol\":6127:6138  TimeFee.fee */\n      tag_76\n        /* \"contracts/TimeMarket.sol\":6127:6154  TimeFee.fee(penalSumAmount) */\n      jump\t// in\n    tag_75:\n        /* \"contracts/TimeMarket.sol\":6115:6154  uint256 fee=TimeFee.fee(penalSumAmount) */\n      swap1\n      pop\n        /* \"contracts/TimeMarket.sol\":6183:6279  IERC20(promiseStableToken).safeTransfer(... */\n      tag_77\n        /* \"contracts/TimeMarket.sol\":6245:6249  this */\n      address\n        /* \"contracts/TimeMarket.sol\":6265:6268  fee */\n      dup3\n        /* \"contracts/TimeMarket.sol\":6190:6208  promiseStableToken */\n      dup6\n        /* \"contracts/TimeMarket.sol\":6183:6222  IERC20(promiseStableToken).safeTransfer */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      tag_78\n      swap1\n        /* \"contracts/TimeMarket.sol\":6183:6279  IERC20(promiseStableToken).safeTransfer(... */\n      swap3\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_77:\n        /* \"contracts/TimeMarket.sol\":6335:6438  IERC20(promiseStableToken).safeTransfer(... */\n      tag_79\n        /* \"contracts/TimeMarket.sol\":6389:6394  buyer */\n      dup6\n        /* \"contracts/TimeMarket.sol\":6424:6427  fee */\n      dup3\n        /* \"contracts/TimeMarket.sol\":6409:6423  penalSumAmount */\n      dup5\n        /* \"contracts/TimeMarket.sol\":6409:6427  penalSumAmount-fee */\n      tag_80\n      swap2\n      swap1\n      tag_81\n      jump\t// in\n    tag_80:\n        /* \"contracts/TimeMarket.sol\":6342:6360  promiseStableToken */\n      dup6\n        /* \"contracts/TimeMarket.sol\":6335:6374  IERC20(promiseStableToken).safeTransfer */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      tag_78\n      swap1\n        /* \"contracts/TimeMarket.sol\":6335:6438  IERC20(promiseStableToken).safeTransfer(... */\n      swap3\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_79:\n        /* \"contracts/TimeMarket.sol\":6482:6486  true */\n      0x01\n        /* \"contracts/TimeMarket.sol\":6449:6464  userIfWithdraw3 */\n      0x06\n        /* \"contracts/TimeMarket.sol\":6449:6476  userIfWithdraw3[msg.sender] */\n      0x00\n        /* \"contracts/TimeMarket.sol\":6465:6475  msg.sender */\n      caller\n        /* \"contracts/TimeMarket.sol\":6449:6476  userIfWithdraw3[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/TimeMarket.sol\":6449:6481  userIfWithdraw3[msg.sender][_id] */\n      0x00\n        /* \"contracts/TimeMarket.sol\":6477:6480  _id */\n      dup9\n        /* \"contracts/TimeMarket.sol\":6449:6481  userIfWithdraw3[msg.sender][_id] */\n      0xffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n        /* \"contracts/TimeMarket.sol\":6449:6486  userIfWithdraw3[msg.sender][_id]=true */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xff\n      mul\n      not\n      and\n      swap1\n      dup4\n      iszero\n      iszero\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"contracts/TimeMarket.sol\":6529:6530  1 */\n      0x01\n        /* \"contracts/TimeMarket.sol\":6502:6511  _tradeMes */\n      0x02\n        /* \"contracts/TimeMarket.sol\":6502:6516  _tradeMes[_id] */\n      0x00\n        /* \"contracts/TimeMarket.sol\":6512:6515  _id */\n      dup9\n        /* \"contracts/TimeMarket.sol\":6502:6516  _tradeMes[_id] */\n      0xffffffffffffffff\n      and\n      0xffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/TimeMarket.sol\":6502:6527  _tradeMes[_id].tradeState */\n      0x00\n      add\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n        /* \"contracts/TimeMarket.sol\":6502:6530  _tradeMes[_id].tradeState==1 */\n      0xff\n      and\n      eq\n        /* \"contracts/TimeMarket.sol\":6499:6892  if(_tradeMes[_id].tradeState==1){... */\n      iszero\n      tag_82\n      jumpi\n        /* \"contracts/TimeMarket.sol\":6588:6593  false */\n      0x00\n        /* \"contracts/TimeMarket.sol\":6554:6593  userIfWithdraw4[msg.sender][_id]==false */\n      iszero\n      iszero\n        /* \"contracts/TimeMarket.sol\":6554:6569  userIfWithdraw4 */\n      0x07\n        /* \"contracts/TimeMarket.sol\":6554:6581  userIfWithdraw4[msg.sender] */\n      0x00\n        /* \"contracts/TimeMarket.sol\":6570:6580  msg.sender */\n      caller\n        /* \"contracts/TimeMarket.sol\":6554:6581  userIfWithdraw4[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/TimeMarket.sol\":6554:6586  userIfWithdraw4[msg.sender][_id] */\n      0x00\n        /* \"contracts/TimeMarket.sol\":6582:6585  _id */\n      dup9\n        /* \"contracts/TimeMarket.sol\":6554:6586  userIfWithdraw4[msg.sender][_id] */\n      0xffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n        /* \"contracts/TimeMarket.sol\":6554:6593  userIfWithdraw4[msg.sender][_id]==false */\n      iszero\n      iszero\n      eq\n        /* \"contracts/TimeMarket.sol\":6546:6594  require(userIfWithdraw4[msg.sender][_id]==false) */\n      tag_83\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_83:\n        /* \"contracts/TimeMarket.sol\":6609:6622  uint256 total */\n      0x00\n        /* \"contracts/TimeMarket.sol\":6647:6656  _tradeMes */\n      0x02\n        /* \"contracts/TimeMarket.sol\":6647:6661  _tradeMes[_id] */\n      0x00\n        /* \"contracts/TimeMarket.sol\":6657:6660  _id */\n      dup9\n        /* \"contracts/TimeMarket.sol\":6647:6661  _tradeMes[_id] */\n      0xffffffffffffffff\n      and\n      0xffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/TimeMarket.sol\":6647:6676  _tradeMes[_id].buyTotalAmount */\n      0x00\n      add\n      0x10\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/TimeMarket.sol\":6623:6632  _tradeMes */\n      0x02\n        /* \"contracts/TimeMarket.sol\":6623:6637  _tradeMes[_id] */\n      0x00\n        /* \"contracts/TimeMarket.sol\":6633:6636  _id */\n      dup10\n        /* \"contracts/TimeMarket.sol\":6623:6637  _tradeMes[_id] */\n      0xffffffffffffffff\n      and\n      0xffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/TimeMarket.sol\":6623:6646  _tradeMes[_id].buyPrice */\n      0x01\n      add\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/TimeMarket.sol\":6623:6676  _tradeMes[_id].buyPrice*_tradeMes[_id].buyTotalAmount */\n      tag_84\n      swap2\n      swap1\n      tag_85\n      jump\t// in\n    tag_84:\n        /* \"contracts/TimeMarket.sol\":6609:6676  uint256 total=_tradeMes[_id].buyPrice*_tradeMes[_id].buyTotalAmount */\n      0xffffffffffffffffffffffffffffffff\n      and\n      swap1\n      pop\n        /* \"contracts/TimeMarket.sol\":6718:6828  IERC20(promiseStableToken).safeTransfer(... */\n      tag_86\n        /* \"contracts/TimeMarket.sol\":6776:6789  getBuyer(_id) */\n      tag_87\n        /* \"contracts/TimeMarket.sol\":6785:6788  _id */\n      dup9\n        /* \"contracts/TimeMarket.sol\":6776:6784  getBuyer */\n      tag_68\n        /* \"contracts/TimeMarket.sol\":6776:6789  getBuyer(_id) */\n      jump\t// in\n    tag_87:\n        /* \"contracts/TimeMarket.sol\":6808:6813  total */\n      dup3\n        /* \"contracts/TimeMarket.sol\":6725:6743  promiseStableToken */\n      dup7\n        /* \"contracts/TimeMarket.sol\":6718:6757  IERC20(promiseStableToken).safeTransfer */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      tag_78\n      swap1\n        /* \"contracts/TimeMarket.sol\":6718:6828  IERC20(promiseStableToken).safeTransfer(... */\n      swap3\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_86:\n        /* \"contracts/TimeMarket.sol\":6876:6880  true */\n      0x01\n        /* \"contracts/TimeMarket.sol\":6843:6858  userIfWithdraw4 */\n      0x07\n        /* \"contracts/TimeMarket.sol\":6843:6870  userIfWithdraw4[msg.sender] */\n      0x00\n        /* \"contracts/TimeMarket.sol\":6859:6869  msg.sender */\n      caller\n        /* \"contracts/TimeMarket.sol\":6843:6870  userIfWithdraw4[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/TimeMarket.sol\":6843:6875  userIfWithdraw4[msg.sender][_id] */\n      0x00\n        /* \"contracts/TimeMarket.sol\":6871:6874  _id */\n      dup10\n        /* \"contracts/TimeMarket.sol\":6843:6875  userIfWithdraw4[msg.sender][_id] */\n      0xffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n        /* \"contracts/TimeMarket.sol\":6843:6880  userIfWithdraw4[msg.sender][_id]=true */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xff\n      mul\n      not\n      and\n      swap1\n      dup4\n      iszero\n      iszero\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"contracts/TimeMarket.sol\":6531:6892  {... */\n      pop\n        /* \"contracts/TimeMarket.sol\":6499:6892  if(_tradeMes[_id].tradeState==1){... */\n    tag_82:\n        /* \"contracts/TimeMarket.sol\":6928:6929  5 */\n      0x05\n        /* \"contracts/TimeMarket.sol\":6902:6911  _tradeMes */\n      0x02\n        /* \"contracts/TimeMarket.sol\":6902:6916  _tradeMes[_id] */\n      0x00\n        /* \"contracts/TimeMarket.sol\":6912:6915  _id */\n      dup9\n        /* \"contracts/TimeMarket.sol\":6902:6916  _tradeMes[_id] */\n      0xffffffffffffffff\n      and\n      0xffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/TimeMarket.sol\":6902:6927  _tradeMes[_id].tradeState */\n      0x00\n      add\n      0x00\n        /* \"contracts/TimeMarket.sol\":6902:6929  _tradeMes[_id].tradeState=5 */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"contracts/TimeMarket.sol\":5552:6937  {... */\n      pop\n      pop\n      pop\n      pop\n      pop\n        /* \"contracts/TimeMarket.sol\":5504:6937  function buyerWithdrawRefund(uint64 _id)external{... */\n      pop\n      jump\t// out\n        /* \"contracts/TimeMarket.sol\":929:993  mapping(address => mapping(uint256=>bool))public userIfWithdraw1 */\n    tag_25:\n      mstore(0x20, 0x04)\n      dup2\n      0x00\n      mstore\n      mstore(0x20, keccak256(0x00, 0x40))\n      dup1\n      0x00\n      mstore\n      keccak256(0x00, 0x40)\n      0x00\n      swap2\n      pop\n      swap2\n      pop\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n      dup2\n      jump\t// out\n        /* \"contracts/TimeMarket.sol\":2141:2723  function Sale(uint64 _id) external {... */\n    tag_30:\n        /* \"contracts/TimeMarket.sol\":2187:2214  tradeMes memory maxTradeMes */\n      0x00\n        /* \"contracts/TimeMarket.sol\":2215:2224  _tradeMes */\n      0x02\n        /* \"contracts/TimeMarket.sol\":2215:2229  _tradeMes[_id] */\n      0x00\n        /* \"contracts/TimeMarket.sol\":2225:2228  _id */\n      dup4\n        /* \"contracts/TimeMarket.sol\":2215:2229  _tradeMes[_id] */\n      0xffffffffffffffff\n      and\n      0xffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/TimeMarket.sol\":2187:2229  tradeMes memory maxTradeMes=_tradeMes[_id] */\n      mload(0x40)\n      dup1\n      0x0100\n      add\n      0x40\n      mstore\n      swap1\n      dup2\n      0x00\n      dup3\n      add\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n      0xff\n      and\n      0xff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup3\n      add\n      0x01\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffff\n      and\n      0xffffffffffffffff\n      and\n      0xffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup3\n      add\n      0x09\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffff\n      and\n      0xffffffffffffff\n      and\n      0xffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup3\n      add\n      0x10\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      0x01\n      dup3\n      add\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      0x02\n      dup3\n      add\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      0x03\n      dup3\n      add\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      0x04\n      dup3\n      add\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      pop\n      pop\n      swap1\n      pop\n        /* \"contracts/TimeMarket.sol\":2272:2273  1 */\n      0x01\n        /* \"contracts/TimeMarket.sol\":2248:2259  maxTradeMes */\n      dup2\n        /* \"contracts/TimeMarket.sol\":2248:2270  maxTradeMes.tradeState */\n      0x00\n      add\n      mload\n        /* \"contracts/TimeMarket.sol\":2248:2273  maxTradeMes.tradeState==1 */\n      0xff\n      and\n      eq\n        /* \"contracts/TimeMarket.sol\":2240:2274  require(maxTradeMes.tradeState==1) */\n      tag_89\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_89:\n        /* \"contracts/TimeMarket.sol\":2315:2341  address promiseStableToken */\n      0x00\n        /* \"contracts/TimeMarket.sol\":2342:2353  maxTradeMes */\n      dup2\n        /* \"contracts/TimeMarket.sol\":2342:2366  maxTradeMes.tokenAddress */\n      0xa0\n      add\n      mload\n        /* \"contracts/TimeMarket.sol\":2315:2366  address promiseStableToken=maxTradeMes.tokenAddress */\n      swap1\n      pop\n        /* \"contracts/TimeMarket.sol\":2404:2584  IERC20(promiseStableToken).safeTransferFrom(... */\n      tag_90\n        /* \"contracts/TimeMarket.sol\":2462:2472  msg.sender */\n      caller\n        /* \"contracts/TimeMarket.sol\":2495:2499  this */\n      address\n        /* \"contracts/TimeMarket.sol\":2515:2573  getPenal(maxTradeMes.buyPrice, maxTradeMes.buyTotalAmount) */\n      tag_91\n        /* \"contracts/TimeMarket.sol\":2524:2535  maxTradeMes */\n      dup6\n        /* \"contracts/TimeMarket.sol\":2524:2544  maxTradeMes.buyPrice */\n      0x80\n      add\n      mload\n        /* \"contracts/TimeMarket.sol\":2546:2557  maxTradeMes */\n      dup7\n        /* \"contracts/TimeMarket.sol\":2546:2572  maxTradeMes.buyTotalAmount */\n      0x60\n      add\n      mload\n        /* \"contracts/TimeMarket.sol\":2515:2523  getPenal */\n      tag_37\n        /* \"contracts/TimeMarket.sol\":2515:2573  getPenal(maxTradeMes.buyPrice, maxTradeMes.buyTotalAmount) */\n      jump\t// in\n    tag_91:\n        /* \"contracts/TimeMarket.sol\":2411:2429  promiseStableToken */\n      dup5\n        /* \"contracts/TimeMarket.sol\":2404:2447  IERC20(promiseStableToken).safeTransferFrom */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      tag_65\n      swap1\n        /* \"contracts/TimeMarket.sol\":2404:2584  IERC20(promiseStableToken).safeTransferFrom(... */\n      swap4\n      swap3\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_90:\n        /* \"contracts/TimeMarket.sol\":2624:2634  msg.sender */\n      caller\n        /* \"contracts/TimeMarket.sol\":2595:2604  _tradeMes */\n      0x02\n        /* \"contracts/TimeMarket.sol\":2595:2609  _tradeMes[_id] */\n      0x00\n        /* \"contracts/TimeMarket.sol\":2605:2608  _id */\n      dup6\n        /* \"contracts/TimeMarket.sol\":2595:2609  _tradeMes[_id] */\n      0xffffffffffffffff\n      and\n      0xffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/TimeMarket.sol\":2595:2623  _tradeMes[_id].solderAddress */\n      0x04\n      add\n      0x00\n        /* \"contracts/TimeMarket.sol\":2595:2634  _tradeMes[_id].solderAddress=msg.sender */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xffffffffffffffffffffffffffffffffffffffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"contracts/TimeMarket.sol\":2714:2715  2 */\n      0x02\n        /* \"contracts/TimeMarket.sol\":2688:2697  _tradeMes */\n      dup1\n        /* \"contracts/TimeMarket.sol\":2688:2702  _tradeMes[_id] */\n      0x00\n        /* \"contracts/TimeMarket.sol\":2698:2701  _id */\n      dup6\n        /* \"contracts/TimeMarket.sol\":2688:2702  _tradeMes[_id] */\n      0xffffffffffffffff\n      and\n      0xffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/TimeMarket.sol\":2688:2713  _tradeMes[_id].tradeState */\n      0x00\n      add\n      0x00\n        /* \"contracts/TimeMarket.sol\":2688:2715  _tradeMes[_id].tradeState=2 */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"contracts/TimeMarket.sol\":2176:2723  {... */\n      pop\n      pop\n        /* \"contracts/TimeMarket.sol\":2141:2723  function Sale(uint64 _id) external {... */\n      pop\n      jump\t// out\n        /* \"contracts/TimeMarket.sol\":4280:5417  function solderWithdrawStable(uint64 _id)external{... */\n    tag_33:\n        /* \"contracts/TimeMarket.sol\":4340:4354  address solder */\n      0x00\n        /* \"contracts/TimeMarket.sol\":4355:4369  getSolder(_id) */\n      tag_93\n        /* \"contracts/TimeMarket.sol\":4365:4368  _id */\n      dup3\n        /* \"contracts/TimeMarket.sol\":4355:4364  getSolder */\n      tag_62\n        /* \"contracts/TimeMarket.sol\":4355:4369  getSolder(_id) */\n      jump\t// in\n    tag_93:\n        /* \"contracts/TimeMarket.sol\":4340:4369  address solder=getSolder(_id) */\n      swap1\n      pop\n        /* \"contracts/TimeMarket.sol\":4433:4439  solder */\n      dup1\n        /* \"contracts/TimeMarket.sol\":4421:4439  msg.sender==solder */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/TimeMarket.sol\":4421:4431  msg.sender */\n      caller\n        /* \"contracts/TimeMarket.sol\":4421:4439  msg.sender==solder */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"contracts/TimeMarket.sol\":4413:4440  require(msg.sender==solder) */\n      tag_94\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_94:\n        /* \"contracts/TimeMarket.sol\":4522:4530  ifInject */\n      0x03\n        /* \"contracts/TimeMarket.sol\":4522:4538  ifInject[solder] */\n      0x00\n        /* \"contracts/TimeMarket.sol\":4531:4537  solder */\n      dup3\n        /* \"contracts/TimeMarket.sol\":4522:4538  ifInject[solder] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/TimeMarket.sol\":4522:4543  ifInject[solder][_id] */\n      0x00\n        /* \"contracts/TimeMarket.sol\":4539:4542  _id */\n      dup4\n        /* \"contracts/TimeMarket.sol\":4522:4543  ifInject[solder][_id] */\n      0xffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n        /* \"contracts/TimeMarket.sol\":4514:4544  require(ifInject[solder][_id]) */\n      tag_95\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_95:\n        /* \"contracts/TimeMarket.sol\":4630:4635  false */\n      0x00\n        /* \"contracts/TimeMarket.sol\":4596:4635  userIfWithdraw2[msg.sender][_id]==false */\n      iszero\n      iszero\n        /* \"contracts/TimeMarket.sol\":4596:4611  userIfWithdraw2 */\n      0x05\n        /* \"contracts/TimeMarket.sol\":4596:4623  userIfWithdraw2[msg.sender] */\n      0x00\n        /* \"contracts/TimeMarket.sol\":4612:4622  msg.sender */\n      caller\n        /* \"contracts/TimeMarket.sol\":4596:4623  userIfWithdraw2[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/TimeMarket.sol\":4596:4628  userIfWithdraw2[msg.sender][_id] */\n      0x00\n        /* \"contracts/TimeMarket.sol\":4624:4627  _id */\n      dup5\n        /* \"contracts/TimeMarket.sol\":4596:4628  userIfWithdraw2[msg.sender][_id] */\n      0xffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n        /* \"contracts/TimeMarket.sol\":4596:4635  userIfWithdraw2[msg.sender][_id]==false */\n      iszero\n      iszero\n      eq\n        /* \"contracts/TimeMarket.sol\":4588:4636  require(userIfWithdraw2[msg.sender][_id]==false) */\n      tag_96\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_96:\n        /* \"contracts/TimeMarket.sol\":4647:4673  address promiseStableToken */\n      0x00\n        /* \"contracts/TimeMarket.sol\":4674:4683  _tradeMes */\n      0x02\n        /* \"contracts/TimeMarket.sol\":4674:4688  _tradeMes[_id] */\n      0x00\n        /* \"contracts/TimeMarket.sol\":4684:4687  _id */\n      dup5\n        /* \"contracts/TimeMarket.sol\":4674:4688  _tradeMes[_id] */\n      0xffffffffffffffff\n      and\n      0xffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/TimeMarket.sol\":4674:4701  _tradeMes[_id].tokenAddress */\n      0x02\n      add\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/TimeMarket.sol\":4647:4701  address promiseStableToken=_tradeMes[_id].tokenAddress */\n      swap1\n      pop\n        /* \"contracts/TimeMarket.sol\":4712:4725  uint256 total */\n      0x00\n        /* \"contracts/TimeMarket.sol\":4750:4759  _tradeMes */\n      0x02\n        /* \"contracts/TimeMarket.sol\":4750:4764  _tradeMes[_id] */\n      0x00\n        /* \"contracts/TimeMarket.sol\":4760:4763  _id */\n      dup6\n        /* \"contracts/TimeMarket.sol\":4750:4764  _tradeMes[_id] */\n      0xffffffffffffffff\n      and\n      0xffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/TimeMarket.sol\":4750:4779  _tradeMes[_id].buyTotalAmount */\n      0x00\n      add\n      0x10\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/TimeMarket.sol\":4726:4735  _tradeMes */\n      0x02\n        /* \"contracts/TimeMarket.sol\":4726:4740  _tradeMes[_id] */\n      0x00\n        /* \"contracts/TimeMarket.sol\":4736:4739  _id */\n      dup7\n        /* \"contracts/TimeMarket.sol\":4726:4740  _tradeMes[_id] */\n      0xffffffffffffffff\n      and\n      0xffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/TimeMarket.sol\":4726:4749  _tradeMes[_id].buyPrice */\n      0x01\n      add\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/TimeMarket.sol\":4726:4779  _tradeMes[_id].buyPrice*_tradeMes[_id].buyTotalAmount */\n      tag_97\n      swap2\n      swap1\n      tag_85\n      jump\t// in\n    tag_97:\n        /* \"contracts/TimeMarket.sol\":4712:4779  uint256 total=_tradeMes[_id].buyPrice*_tradeMes[_id].buyTotalAmount */\n      0xffffffffffffffffffffffffffffffff\n      and\n      swap1\n      pop\n        /* \"contracts/TimeMarket.sol\":4790:4812  uint256 penalSumAmount */\n      0x00\n        /* \"contracts/TimeMarket.sol\":4813:4876  getPenal(_tradeMes[_id].buyPrice,_tradeMes[_id].buyTotalAmount) */\n      tag_98\n        /* \"contracts/TimeMarket.sol\":4822:4831  _tradeMes */\n      0x02\n        /* \"contracts/TimeMarket.sol\":4822:4836  _tradeMes[_id] */\n      0x00\n        /* \"contracts/TimeMarket.sol\":4832:4835  _id */\n      dup8\n        /* \"contracts/TimeMarket.sol\":4822:4836  _tradeMes[_id] */\n      0xffffffffffffffff\n      and\n      0xffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/TimeMarket.sol\":4822:4845  _tradeMes[_id].buyPrice */\n      0x01\n      add\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/TimeMarket.sol\":4846:4855  _tradeMes */\n      0x02\n        /* \"contracts/TimeMarket.sol\":4846:4860  _tradeMes[_id] */\n      0x00\n        /* \"contracts/TimeMarket.sol\":4856:4859  _id */\n      dup9\n        /* \"contracts/TimeMarket.sol\":4846:4860  _tradeMes[_id] */\n      0xffffffffffffffff\n      and\n      0xffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/TimeMarket.sol\":4846:4875  _tradeMes[_id].buyTotalAmount */\n      0x00\n      add\n      0x10\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/TimeMarket.sol\":4813:4821  getPenal */\n      tag_37\n        /* \"contracts/TimeMarket.sol\":4813:4876  getPenal(_tradeMes[_id].buyPrice,_tradeMes[_id].buyTotalAmount) */\n      jump\t// in\n    tag_98:\n        /* \"contracts/TimeMarket.sol\":4790:4876  uint256 penalSumAmount=getPenal(_tradeMes[_id].buyPrice,_tradeMes[_id].buyTotalAmount) */\n      swap1\n      pop\n        /* \"contracts/TimeMarket.sol\":4887:4898  uint256 fee */\n      0x00\n        /* \"contracts/TimeMarket.sol\":4899:4917  TimeFee.fee(total) */\n      tag_99\n        /* \"contracts/TimeMarket.sol\":4911:4916  total */\n      dup4\n        /* \"contracts/TimeMarket.sol\":4899:4910  TimeFee.fee */\n      tag_76\n        /* \"contracts/TimeMarket.sol\":4899:4917  TimeFee.fee(total) */\n      jump\t// in\n    tag_99:\n        /* \"contracts/TimeMarket.sol\":4887:4917  uint256 fee=TimeFee.fee(total) */\n      swap1\n      pop\n        /* \"contracts/TimeMarket.sol\":4970:5028  IERC20(promiseStableToken).safeTransfer(address(this),fee) */\n      tag_100\n        /* \"contracts/TimeMarket.sol\":5018:5022  this */\n      address\n        /* \"contracts/TimeMarket.sol\":5024:5027  fee */\n      dup3\n        /* \"contracts/TimeMarket.sol\":4977:4995  promiseStableToken */\n      dup7\n        /* \"contracts/TimeMarket.sol\":4970:5009  IERC20(promiseStableToken).safeTransfer */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      tag_78\n      swap1\n        /* \"contracts/TimeMarket.sol\":4970:5028  IERC20(promiseStableToken).safeTransfer(address(this),fee) */\n      swap3\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_100:\n        /* \"contracts/TimeMarket.sol\":5069:5164  IERC20(promiseStableToken).safeTransfer(... */\n      tag_101\n        /* \"contracts/TimeMarket.sol\":5123:5129  solder */\n      dup6\n        /* \"contracts/TimeMarket.sol\":5150:5153  fee */\n      dup3\n        /* \"contracts/TimeMarket.sol\":5144:5149  total */\n      dup6\n        /* \"contracts/TimeMarket.sol\":5144:5153  total-fee */\n      tag_102\n      swap2\n      swap1\n      tag_81\n      jump\t// in\n    tag_102:\n        /* \"contracts/TimeMarket.sol\":5076:5094  promiseStableToken */\n      dup7\n        /* \"contracts/TimeMarket.sol\":5069:5108  IERC20(promiseStableToken).safeTransfer */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      tag_78\n      swap1\n        /* \"contracts/TimeMarket.sol\":5069:5164  IERC20(promiseStableToken).safeTransfer(... */\n      swap3\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_101:\n        /* \"contracts/TimeMarket.sol\":5223:5323  IERC20(promiseStableToken).safeTransfer(... */\n      tag_103\n        /* \"contracts/TimeMarket.sol\":5277:5283  solder */\n      dup6\n        /* \"contracts/TimeMarket.sol\":5298:5312  penalSumAmount */\n      dup4\n        /* \"contracts/TimeMarket.sol\":5230:5248  promiseStableToken */\n      dup7\n        /* \"contracts/TimeMarket.sol\":5223:5262  IERC20(promiseStableToken).safeTransfer */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      tag_78\n      swap1\n        /* \"contracts/TimeMarket.sol\":5223:5323  IERC20(promiseStableToken).safeTransfer(... */\n      swap3\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_103:\n        /* \"contracts/TimeMarket.sol\":5404:5408  true */\n      0x01\n        /* \"contracts/TimeMarket.sol\":5371:5386  userIfWithdraw2 */\n      0x05\n        /* \"contracts/TimeMarket.sol\":5371:5398  userIfWithdraw2[msg.sender] */\n      0x00\n        /* \"contracts/TimeMarket.sol\":5387:5397  msg.sender */\n      caller\n        /* \"contracts/TimeMarket.sol\":5371:5398  userIfWithdraw2[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/TimeMarket.sol\":5371:5403  userIfWithdraw2[msg.sender][_id] */\n      0x00\n        /* \"contracts/TimeMarket.sol\":5399:5402  _id */\n      dup9\n        /* \"contracts/TimeMarket.sol\":5371:5403  userIfWithdraw2[msg.sender][_id] */\n      0xffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n        /* \"contracts/TimeMarket.sol\":5371:5408  userIfWithdraw2[msg.sender][_id]=true */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xff\n      mul\n      not\n      and\n      swap1\n      dup4\n      iszero\n      iszero\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"contracts/TimeMarket.sol\":4329:5417  {... */\n      pop\n      pop\n      pop\n      pop\n      pop\n        /* \"contracts/TimeMarket.sol\":4280:5417  function solderWithdrawStable(uint64 _id)external{... */\n      pop\n      jump\t// out\n        /* \"contracts/TimeMarket.sol\":7330:7873  function getPenal(uint128 _soldPrice, uint128 _soldAmount)public pure returns (uint256){... */\n    tag_37:\n        /* \"contracts/TimeMarket.sol\":7409:7416  uint256 */\n      0x00\n        /* \"contracts/TimeMarket.sol\":7428:7446  uint256 thisAmount */\n      dup1\n        /* \"contracts/TimeMarket.sol\":7460:7471  _soldAmount */\n      dup3\n        /* \"contracts/TimeMarket.sol\":7449:7459  _soldPrice */\n      dup5\n        /* \"contracts/TimeMarket.sol\":7449:7471  _soldPrice*_soldAmount */\n      tag_105\n      swap2\n      swap1\n      tag_85\n      jump\t// in\n    tag_105:\n        /* \"contracts/TimeMarket.sol\":7428:7471  uint256 thisAmount = _soldPrice*_soldAmount */\n      0xffffffffffffffffffffffffffffffff\n      and\n      swap1\n      pop\n        /* \"contracts/TimeMarket.sol\":7500:7509  100 ether */\n      0x056bc75e2d63100000\n        /* \"contracts/TimeMarket.sol\":7486:7496  thisAmount */\n      dup2\n        /* \"contracts/TimeMarket.sol\":7486:7509  thisAmount >= 100 ether */\n      lt\n      iszero\n        /* \"contracts/TimeMarket.sol\":7486:7536  thisAmount >= 100 ether && thisAmount < 1000 ether */\n      dup1\n      iszero\n      tag_106\n      jumpi\n      pop\n        /* \"contracts/TimeMarket.sol\":7526:7536  1000 ether */\n      0x3635c9adc5dea00000\n        /* \"contracts/TimeMarket.sol\":7513:7523  thisAmount */\n      dup2\n        /* \"contracts/TimeMarket.sol\":7513:7536  thisAmount < 1000 ether */\n      lt\n        /* \"contracts/TimeMarket.sol\":7486:7536  thisAmount >= 100 ether && thisAmount < 1000 ether */\n    tag_106:\n        /* \"contracts/TimeMarket.sol\":7482:7866  if (thisAmount >= 100 ether && thisAmount < 1000 ether) {... */\n      iszero\n      tag_107\n      jumpi\n        /* \"contracts/TimeMarket.sol\":7580:7583  100 */\n      0x64\n        /* \"contracts/TimeMarket.sol\":7574:7576  50 */\n      0x32\n        /* \"contracts/TimeMarket.sol\":7561:7571  thisAmount */\n      dup3\n        /* \"contracts/TimeMarket.sol\":7561:7576  thisAmount * 50 */\n      tag_108\n      swap2\n      swap1\n      tag_109\n      jump\t// in\n    tag_108:\n        /* \"contracts/TimeMarket.sol\":7560:7583  (thisAmount * 50) / 100 */\n      tag_110\n      swap2\n      swap1\n      tag_111\n      jump\t// in\n    tag_110:\n        /* \"contracts/TimeMarket.sol\":7553:7583  return (thisAmount * 50) / 100 */\n      swap2\n      pop\n      pop\n      jump(tag_104)\n        /* \"contracts/TimeMarket.sol\":7482:7866  if (thisAmount >= 100 ether && thisAmount < 1000 ether) {... */\n    tag_107:\n        /* \"contracts/TimeMarket.sol\":7619:7629  1000 ether */\n      0x3635c9adc5dea00000\n        /* \"contracts/TimeMarket.sol\":7605:7615  thisAmount */\n      dup2\n        /* \"contracts/TimeMarket.sol\":7605:7629  thisAmount >= 1000 ether */\n      lt\n      iszero\n        /* \"contracts/TimeMarket.sol\":7605:7657  thisAmount >= 1000 ether && thisAmount < 10000 ether */\n      dup1\n      iszero\n      tag_113\n      jumpi\n      pop\n        /* \"contracts/TimeMarket.sol\":7646:7657  10000 ether */\n      0x021e19e0c9bab2400000\n        /* \"contracts/TimeMarket.sol\":7633:7643  thisAmount */\n      dup2\n        /* \"contracts/TimeMarket.sol\":7633:7657  thisAmount < 10000 ether */\n      lt\n        /* \"contracts/TimeMarket.sol\":7605:7657  thisAmount >= 1000 ether && thisAmount < 10000 ether */\n    tag_113:\n        /* \"contracts/TimeMarket.sol\":7601:7866  if (thisAmount >= 1000 ether && thisAmount < 10000 ether) {... */\n      iszero\n      tag_114\n      jumpi\n        /* \"contracts/TimeMarket.sol\":7701:7704  100 */\n      0x64\n        /* \"contracts/TimeMarket.sol\":7695:7697  40 */\n      0x28\n        /* \"contracts/TimeMarket.sol\":7682:7692  thisAmount */\n      dup3\n        /* \"contracts/TimeMarket.sol\":7682:7697  thisAmount * 40 */\n      tag_115\n      swap2\n      swap1\n      tag_109\n      jump\t// in\n    tag_115:\n        /* \"contracts/TimeMarket.sol\":7681:7704  (thisAmount * 40) / 100 */\n      tag_116\n      swap2\n      swap1\n      tag_111\n      jump\t// in\n    tag_116:\n        /* \"contracts/TimeMarket.sol\":7674:7704  return (thisAmount * 40) / 100 */\n      swap2\n      pop\n      pop\n      jump(tag_104)\n        /* \"contracts/TimeMarket.sol\":7601:7866  if (thisAmount >= 1000 ether && thisAmount < 10000 ether) {... */\n    tag_114:\n        /* \"contracts/TimeMarket.sol\":7739:7750  10000 ether */\n      0x021e19e0c9bab2400000\n        /* \"contracts/TimeMarket.sol\":7726:7736  thisAmount */\n      dup2\n        /* \"contracts/TimeMarket.sol\":7726:7750  thisAmount > 10000 ether */\n      gt\n        /* \"contracts/TimeMarket.sol\":7722:7866  if (thisAmount > 10000 ether) {... */\n      iszero\n      tag_118\n      jumpi\n        /* \"contracts/TimeMarket.sol\":7794:7797  100 */\n      0x64\n        /* \"contracts/TimeMarket.sol\":7788:7790  25 */\n      0x19\n        /* \"contracts/TimeMarket.sol\":7775:7785  thisAmount */\n      dup3\n        /* \"contracts/TimeMarket.sol\":7775:7790  thisAmount * 25 */\n      tag_119\n      swap2\n      swap1\n      tag_109\n      jump\t// in\n    tag_119:\n        /* \"contracts/TimeMarket.sol\":7774:7797  (thisAmount * 25) / 100 */\n      tag_120\n      swap2\n      swap1\n      tag_111\n      jump\t// in\n    tag_120:\n        /* \"contracts/TimeMarket.sol\":7767:7797  return (thisAmount * 25) / 100 */\n      swap2\n      pop\n      pop\n      jump(tag_104)\n        /* \"contracts/TimeMarket.sol\":7722:7866  if (thisAmount > 10000 ether) {... */\n    tag_118:\n        /* \"contracts/TimeMarket.sol\":7837:7854  NotEnoughAmount() */\n      mload(0x40)\n      0xe008b5f900000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/TimeMarket.sol\":7330:7873  function getPenal(uint128 _soldPrice, uint128 _soldAmount)public pure returns (uint256){... */\n    tag_104:\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/TimeMarket.sol\":1177:1241  mapping(address => mapping(uint256=>bool))public userIfWithdraw3 */\n    tag_42:\n      mstore(0x20, 0x06)\n      dup2\n      0x00\n      mstore\n      mstore(0x20, keccak256(0x00, 0x40))\n      dup1\n      0x00\n      mstore\n      keccak256(0x00, 0x40)\n      0x00\n      swap2\n      pop\n      swap2\n      pop\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n      dup2\n      jump\t// out\n        /* \"contracts/TimeMarket.sol\":3467:4227  function buyerWithdrawAirdorp(uint64 _id)external{... */\n    tag_46:\n        /* \"contracts/TimeMarket.sol\":3527:3540  address buyer */\n      0x00\n        /* \"contracts/TimeMarket.sol\":3541:3554  getBuyer(_id) */\n      tag_123\n        /* \"contracts/TimeMarket.sol\":3550:3553  _id */\n      dup3\n        /* \"contracts/TimeMarket.sol\":3541:3549  getBuyer */\n      tag_68\n        /* \"contracts/TimeMarket.sol\":3541:3554  getBuyer(_id) */\n      jump\t// in\n    tag_123:\n        /* \"contracts/TimeMarket.sol\":3527:3554  address buyer=getBuyer(_id) */\n      swap1\n      pop\n        /* \"contracts/TimeMarket.sol\":3613:3618  buyer */\n      dup1\n        /* \"contracts/TimeMarket.sol\":3601:3618  msg.sender!=buyer */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/TimeMarket.sol\":3601:3611  msg.sender */\n      caller\n        /* \"contracts/TimeMarket.sol\":3601:3618  msg.sender!=buyer */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"contracts/TimeMarket.sol\":3598:3639  if(msg.sender!=buyer){revert NotBuyer();} */\n      tag_124\n      jumpi\n        /* \"contracts/TimeMarket.sol\":3627:3637  NotBuyer() */\n      mload(0x40)\n      0x472e017e00000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/TimeMarket.sol\":3598:3639  if(msg.sender!=buyer){revert NotBuyer();} */\n    tag_124:\n        /* \"contracts/TimeMarket.sol\":3742:3743  3 */\n      0x03\n        /* \"contracts/TimeMarket.sol\":3715:3724  _tradeMes */\n      0x02\n        /* \"contracts/TimeMarket.sol\":3715:3729  _tradeMes[_id] */\n      0x00\n        /* \"contracts/TimeMarket.sol\":3725:3728  _id */\n      dup5\n        /* \"contracts/TimeMarket.sol\":3715:3729  _tradeMes[_id] */\n      0xffffffffffffffff\n      and\n      0xffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/TimeMarket.sol\":3715:3740  _tradeMes[_id].tradeState */\n      0x00\n      add\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n        /* \"contracts/TimeMarket.sol\":3715:3743  _tradeMes[_id].tradeState!=3 */\n      0xff\n      and\n      eq\n        /* \"contracts/TimeMarket.sol\":3712:3770  if(_tradeMes[_id].tradeState!=3){revert NotInjectToken();} */\n      tag_125\n      jumpi\n        /* \"contracts/TimeMarket.sol\":3752:3768  NotInjectToken() */\n      mload(0x40)\n      0xde4461cd00000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/TimeMarket.sol\":3712:3770  if(_tradeMes[_id].tradeState!=3){revert NotInjectToken();} */\n    tag_125:\n        /* \"contracts/TimeMarket.sol\":3781:3798  uint128 buyAmount */\n      0x00\n        /* \"contracts/TimeMarket.sol\":3799:3808  _tradeMes */\n      0x02\n        /* \"contracts/TimeMarket.sol\":3799:3813  _tradeMes[_id] */\n      0x00\n        /* \"contracts/TimeMarket.sol\":3809:3812  _id */\n      dup5\n        /* \"contracts/TimeMarket.sol\":3799:3813  _tradeMes[_id] */\n      0xffffffffffffffff\n      and\n      0xffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/TimeMarket.sol\":3799:3828  _tradeMes[_id].buyTotalAmount */\n      0x00\n      add\n      0x10\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/TimeMarket.sol\":3781:3828  uint128 buyAmount=_tradeMes[_id].buyTotalAmount */\n      swap1\n      pop\n        /* \"contracts/TimeMarket.sol\":3839:3857  uint128 buyerPrice */\n      0x00\n        /* \"contracts/TimeMarket.sol\":3858:3867  _tradeMes */\n      0x02\n        /* \"contracts/TimeMarket.sol\":3858:3872  _tradeMes[_id] */\n      0x00\n        /* \"contracts/TimeMarket.sol\":3868:3871  _id */\n      dup6\n        /* \"contracts/TimeMarket.sol\":3858:3872  _tradeMes[_id] */\n      0xffffffffffffffff\n      and\n      0xffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/TimeMarket.sol\":3858:3881  _tradeMes[_id].buyPrice */\n      0x01\n      add\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/TimeMarket.sol\":3839:3881  uint128 buyerPrice=_tradeMes[_id].buyPrice */\n      swap1\n      pop\n        /* \"contracts/TimeMarket.sol\":3936:3947  uint256 fee */\n      0x00\n        /* \"contracts/TimeMarket.sol\":3948:3981  TimeFee.fee(buyAmount*buyerPrice) */\n      tag_126\n        /* \"contracts/TimeMarket.sol\":3970:3980  buyerPrice */\n      dup3\n        /* \"contracts/TimeMarket.sol\":3960:3969  buyAmount */\n      dup5\n        /* \"contracts/TimeMarket.sol\":3960:3980  buyAmount*buyerPrice */\n      tag_127\n      swap2\n      swap1\n      tag_85\n      jump\t// in\n    tag_127:\n        /* \"contracts/TimeMarket.sol\":3948:3981  TimeFee.fee(buyAmount*buyerPrice) */\n      0xffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/TimeMarket.sol\":3948:3959  TimeFee.fee */\n      tag_76\n        /* \"contracts/TimeMarket.sol\":3948:3981  TimeFee.fee(buyAmount*buyerPrice) */\n      jump\t// in\n    tag_126:\n        /* \"contracts/TimeMarket.sol\":3936:3981  uint256 fee=TimeFee.fee(buyAmount*buyerPrice) */\n      swap1\n      pop\n        /* \"contracts/TimeMarket.sol\":4034:4086  IERC20(airdropToken).safeTransfer(address(this),fee) */\n      tag_128\n        /* \"contracts/TimeMarket.sol\":4076:4080  this */\n      address\n        /* \"contracts/TimeMarket.sol\":4082:4085  fee */\n      dup3\n        /* \"contracts/TimeMarket.sol\":4041:4053  airdropToken */\n      0x01\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/TimeMarket.sol\":4034:4067  IERC20(airdropToken).safeTransfer */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      tag_78\n      swap1\n        /* \"contracts/TimeMarket.sol\":4034:4086  IERC20(airdropToken).safeTransfer(address(this),fee) */\n      swap3\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_128:\n        /* \"contracts/TimeMarket.sol\":4127:4181  IERC20(airdropToken).safeTransfer(buyer,buyAmount-fee) */\n      tag_129\n        /* \"contracts/TimeMarket.sol\":4161:4166  buyer */\n      dup5\n        /* \"contracts/TimeMarket.sol\":4177:4180  fee */\n      dup3\n        /* \"contracts/TimeMarket.sol\":4167:4176  buyAmount */\n      dup6\n        /* \"contracts/TimeMarket.sol\":4167:4180  buyAmount-fee */\n      0xffffffffffffffffffffffffffffffff\n      and\n      tag_130\n      swap2\n      swap1\n      tag_81\n      jump\t// in\n    tag_130:\n        /* \"contracts/TimeMarket.sol\":4134:4146  airdropToken */\n      0x01\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/TimeMarket.sol\":4127:4160  IERC20(airdropToken).safeTransfer */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      tag_78\n      swap1\n        /* \"contracts/TimeMarket.sol\":4127:4181  IERC20(airdropToken).safeTransfer(buyer,buyAmount-fee) */\n      swap3\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_129:\n        /* \"contracts/TimeMarket.sol\":4218:4219  4 */\n      0x04\n        /* \"contracts/TimeMarket.sol\":4192:4201  _tradeMes */\n      0x02\n        /* \"contracts/TimeMarket.sol\":4192:4206  _tradeMes[_id] */\n      0x00\n        /* \"contracts/TimeMarket.sol\":4202:4205  _id */\n      dup8\n        /* \"contracts/TimeMarket.sol\":4192:4206  _tradeMes[_id] */\n      0xffffffffffffffff\n      and\n      0xffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/TimeMarket.sol\":4192:4217  _tradeMes[_id].tradeState */\n      0x00\n      add\n      0x00\n        /* \"contracts/TimeMarket.sol\":4192:4219  _tradeMes[_id].tradeState=4 */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"contracts/TimeMarket.sol\":3516:4227  {... */\n      pop\n      pop\n      pop\n      pop\n        /* \"contracts/TimeMarket.sol\":3467:4227  function buyerWithdrawAirdorp(uint64 _id)external{... */\n      pop\n      jump\t// out\n        /* \"contracts/TimeMarket.sol\":1375:2119  function buy(address _tokenAddress,uint128 _buyAmount,uint128 _buyPrice)external{... */\n    tag_50:\n        /* \"contracts/TimeMarket.sol\":1466:1476  uint total */\n      0x00\n        /* \"contracts/TimeMarket.sol\":1488:1497  _buyPrice */\n      dup2\n        /* \"contracts/TimeMarket.sol\":1477:1487  _buyAmount */\n      dup4\n        /* \"contracts/TimeMarket.sol\":1477:1497  _buyAmount*_buyPrice */\n      tag_132\n      swap2\n      swap1\n      tag_85\n      jump\t// in\n    tag_132:\n        /* \"contracts/TimeMarket.sol\":1466:1497  uint total=_buyAmount*_buyPrice */\n      0xffffffffffffffffffffffffffffffff\n      and\n      swap1\n      pop\n        /* \"contracts/TimeMarket.sol\":1517:1526  100 ether */\n      0x056bc75e2d63100000\n        /* \"contracts/TimeMarket.sol\":1511:1516  total */\n      dup2\n        /* \"contracts/TimeMarket.sol\":1511:1526  total<100 ether */\n      lt\n        /* \"contracts/TimeMarket.sol\":1508:1578  if(total<100 ether){... */\n      iszero\n      tag_133\n      jumpi\n        /* \"contracts/TimeMarket.sol\":1549:1566  NotEnoughAmount() */\n      mload(0x40)\n      0xe008b5f900000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/TimeMarket.sol\":1508:1578  if(total<100 ether){... */\n    tag_133:\n        /* \"contracts/TimeMarket.sol\":1588:1615  tradeMes memory newTradeMes */\n      0x00\n        /* \"contracts/TimeMarket.sol\":1616:1929  tradeMes({... */\n      mload(0x40)\n      dup1\n      0x0100\n      add\n      0x40\n      mstore\n      dup1\n        /* \"contracts/TimeMarket.sol\":1651:1652  1 */\n      0x01\n        /* \"contracts/TimeMarket.sol\":1616:1929  tradeMes({... */\n      0xff\n      and\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/TimeMarket.sol\":1675:1677  id */\n      0x00\n      0x07\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffff\n      and\n        /* \"contracts/TimeMarket.sol\":1616:1929  tradeMes({... */\n      0xffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/TimeMarket.sol\":1707:1722  block.timestamp */\n      timestamp\n        /* \"contracts/TimeMarket.sol\":1616:1929  tradeMes({... */\n      0xffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/TimeMarket.sol\":1753:1763  _buyAmount */\n      dup6\n        /* \"contracts/TimeMarket.sol\":1616:1929  tradeMes({... */\n      0xffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/TimeMarket.sol\":1787:1796  _buyPrice */\n      dup5\n        /* \"contracts/TimeMarket.sol\":1616:1929  tradeMes({... */\n      0xffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/TimeMarket.sol\":1824:1837  _tokenAddress */\n      dup7\n        /* \"contracts/TimeMarket.sol\":1616:1929  tradeMes({... */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/TimeMarket.sol\":1865:1875  msg.sender */\n      caller\n        /* \"contracts/TimeMarket.sol\":1616:1929  tradeMes({... */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/TimeMarket.sol\":1912:1916  this */\n      address\n        /* \"contracts/TimeMarket.sol\":1616:1929  tradeMes({... */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      pop\n        /* \"contracts/TimeMarket.sol\":1588:1929  tradeMes memory newTradeMes=tradeMes({... */\n      swap1\n      pop\n        /* \"contracts/TimeMarket.sol\":1954:1965  newTradeMes */\n      dup1\n        /* \"contracts/TimeMarket.sol\":1940:1949  _tradeMes */\n      0x02\n        /* \"contracts/TimeMarket.sol\":1940:1953  _tradeMes[id] */\n      0x00\n        /* \"contracts/TimeMarket.sol\":1950:1952  id */\n      dup1\n      0x07\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffff\n      and\n        /* \"contracts/TimeMarket.sol\":1940:1953  _tradeMes[id] */\n      0xffffffffffffffff\n      and\n      0xffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/TimeMarket.sol\":1940:1965  _tradeMes[id]=newTradeMes */\n      0x00\n      dup3\n      add\n      mload\n      dup2\n      0x00\n      add\n      exp(0x0100, 0x00)\n      dup2\n      sload\n      dup2\n      0xff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n      0x20\n      dup3\n      add\n      mload\n      dup2\n      0x00\n      add\n      exp(0x0100, 0x01)\n      dup2\n      sload\n      dup2\n      0xffffffffffffffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffffffffffffffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n      0x40\n      dup3\n      add\n      mload\n      dup2\n      0x00\n      add\n      exp(0x0100, 0x09)\n      dup2\n      sload\n      dup2\n      0xffffffffffffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffffffffffffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n      0x60\n      dup3\n      add\n      mload\n      dup2\n      0x00\n      add\n      exp(0x0100, 0x10)\n      dup2\n      sload\n      dup2\n      0xffffffffffffffffffffffffffffffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffffffffffffffffffffffffffffffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n      0x80\n      dup3\n      add\n      mload\n      dup2\n      0x01\n      add\n      exp(0x0100, 0x00)\n      dup2\n      sload\n      dup2\n      0xffffffffffffffffffffffffffffffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffffffffffffffffffffffffffffffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n      0xa0\n      dup3\n      add\n      mload\n      dup2\n      0x02\n      add\n      exp(0x0100, 0x00)\n      dup2\n      sload\n      dup2\n      0xffffffffffffffffffffffffffffffffffffffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n      0xc0\n      dup3\n      add\n      mload\n      dup2\n      0x03\n      add\n      exp(0x0100, 0x00)\n      dup2\n      sload\n      dup2\n      0xffffffffffffffffffffffffffffffffffffffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n      0xe0\n      dup3\n      add\n      mload\n      dup2\n      0x04\n      add\n      exp(0x0100, 0x00)\n      dup2\n      sload\n      dup2\n      0xffffffffffffffffffffffffffffffffffffffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n      swap1\n      pop\n      pop\n        /* \"contracts/TimeMarket.sol\":2026:2096  IERC20(_tokenAddress).safeTransferFrom(msg.sender,address(this),total) */\n      tag_134\n        /* \"contracts/TimeMarket.sol\":2065:2075  msg.sender */\n      caller\n        /* \"contracts/TimeMarket.sol\":2084:2088  this */\n      address\n        /* \"contracts/TimeMarket.sol\":2090:2095  total */\n      dup5\n        /* \"contracts/TimeMarket.sol\":2033:2046  _tokenAddress */\n      dup9\n        /* \"contracts/TimeMarket.sol\":2026:2064  IERC20(_tokenAddress).safeTransferFrom */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      tag_65\n      swap1\n        /* \"contracts/TimeMarket.sol\":2026:2096  IERC20(_tokenAddress).safeTransferFrom(msg.sender,address(this),total) */\n      swap4\n      swap3\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_134:\n        /* \"contracts/TimeMarket.sol\":2107:2109  id */\n      0x00\n      0x07\n        /* \"contracts/TimeMarket.sol\":2107:2111  id++ */\n      dup2\n      dup2\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffff\n      and\n      dup1\n      swap3\n      swap2\n      swap1\n      tag_135\n      swap1\n      tag_136\n      jump\t// in\n    tag_135:\n      swap2\n      swap1\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xffffffffffffffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffffffffffffffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n      pop\n        /* \"contracts/TimeMarket.sol\":1455:2119  {... */\n      pop\n      pop\n        /* \"contracts/TimeMarket.sol\":1375:2119  function buy(address _tokenAddress,uint128 _buyAmount,uint128 _buyPrice)external{... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/TimeMarket.sol\":1053:1117  mapping(address => mapping(uint256=>bool))public userIfWithdraw2 */\n    tag_53:\n      mstore(0x20, 0x05)\n      dup2\n      0x00\n      mstore\n      mstore(0x20, keccak256(0x00, 0x40))\n      dup1\n      0x00\n      mstore\n      keccak256(0x00, 0x40)\n      0x00\n      swap2\n      pop\n      swap2\n      pop\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n      dup2\n      jump\t// out\n        /* \"contracts/TimeMarket.sol\":1288:1352  mapping(address => mapping(uint256=>bool))public userIfWithdraw4 */\n    tag_57:\n      mstore(0x20, 0x07)\n      dup2\n      0x00\n      mstore\n      mstore(0x20, keccak256(0x00, 0x40))\n      dup1\n      0x00\n      mstore\n      keccak256(0x00, 0x40)\n      0x00\n      swap2\n      pop\n      swap2\n      pop\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n      dup2\n      jump\t// out\n        /* \"contracts/TimeMarket.sol\":7150:7264  function getSolder(uint64 _id)internal view returns(address){... */\n    tag_62:\n        /* \"contracts/TimeMarket.sol\":7202:7209  address */\n      0x00\n        /* \"contracts/TimeMarket.sol\":7228:7237  _tradeMes */\n      0x02\n        /* \"contracts/TimeMarket.sol\":7228:7242  _tradeMes[_id] */\n      0x00\n        /* \"contracts/TimeMarket.sol\":7238:7241  _id */\n      dup4\n        /* \"contracts/TimeMarket.sol\":7228:7242  _tradeMes[_id] */\n      0xffffffffffffffff\n      and\n      0xffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/TimeMarket.sol\":7228:7256  _tradeMes[_id].solderAddress */\n      0x04\n      add\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/TimeMarket.sol\":7221:7256  return _tradeMes[_id].solderAddress */\n      swap1\n      pop\n        /* \"contracts/TimeMarket.sol\":7150:7264  function getSolder(uint64 _id)internal view returns(address){... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"libraries/SafeERC20.sol\":1447:1652  function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {... */\n    tag_65:\n        /* \"libraries/SafeERC20.sol\":1548:1644  _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value)) */\n      tag_139\n        /* \"libraries/SafeERC20.sol\":1568:1573  token */\n      dup5\n        /* \"libraries/SafeERC20.sol\":1598:1625  token.transferFrom.selector */\n      shl(0xe0, 0x23b872dd)\n        /* \"libraries/SafeERC20.sol\":1627:1631  from */\n      dup6\n        /* \"libraries/SafeERC20.sol\":1633:1635  to */\n      dup6\n        /* \"libraries/SafeERC20.sol\":1637:1642  value */\n      dup6\n        /* \"libraries/SafeERC20.sol\":1575:1643  abi.encodeWithSelector(token.transferFrom.selector, from, to, value) */\n      add(0x24, mload(0x40))\n      tag_140\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_141\n      jump\t// in\n    tag_140:\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n      swap1\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n      0x20\n      dup3\n      add\n      dup1\n      mload\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n      dup4\n      dup2\n      dup4\n      and\n      or\n      dup4\n      mstore\n      pop\n      pop\n      pop\n      pop\n        /* \"libraries/SafeERC20.sol\":1548:1567  _callOptionalReturn */\n      tag_142\n        /* \"libraries/SafeERC20.sol\":1548:1644  _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value)) */\n      jump\t// in\n    tag_139:\n        /* \"libraries/SafeERC20.sol\":1447:1652  function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/TimeMarket.sol\":6990:7102  function getBuyer(uint64 _id)internal view returns(address){... */\n    tag_68:\n        /* \"contracts/TimeMarket.sol\":7041:7048  address */\n      0x00\n        /* \"contracts/TimeMarket.sol\":7067:7076  _tradeMes */\n      0x02\n        /* \"contracts/TimeMarket.sol\":7067:7081  _tradeMes[_id] */\n      0x00\n        /* \"contracts/TimeMarket.sol\":7077:7080  _id */\n      dup4\n        /* \"contracts/TimeMarket.sol\":7067:7081  _tradeMes[_id] */\n      0xffffffffffffffff\n      and\n      0xffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/TimeMarket.sol\":7067:7094  _tradeMes[_id].buyerAddress */\n      0x03\n      add\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/TimeMarket.sol\":7060:7094  return _tradeMes[_id].buyerAddress */\n      swap1\n      pop\n        /* \"contracts/TimeMarket.sol\":6990:7102  function getBuyer(uint64 _id)internal view returns(address){... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"libraries/TimeFee.sol\":250:680  function fee(uint256 stableAmount)internal pure returns(uint256 stableFee){... */\n    tag_76:\n        /* \"libraries/TimeFee.sol\":306:323  uint256 stableFee */\n      0x00\n        /* \"libraries/TimeFee.sol\":352:361  100 ether */\n      0x056bc75e2d63100000\n        /* \"libraries/TimeFee.sol\":338:350  stableAmount */\n      dup3\n        /* \"libraries/TimeFee.sol\":338:361  stableAmount>=100 ether */\n      lt\n      iszero\n        /* \"libraries/TimeFee.sol\":338:388  stableAmount>=100 ether && stableAmount<1000 ether */\n      dup1\n      iszero\n      tag_145\n      jumpi\n      pop\n        /* \"libraries/TimeFee.sol\":378:388  1000 ether */\n      0x3635c9adc5dea00000\n        /* \"libraries/TimeFee.sol\":365:377  stableAmount */\n      dup3\n        /* \"libraries/TimeFee.sol\":365:388  stableAmount<1000 ether */\n      lt\n        /* \"libraries/TimeFee.sol\":338:388  stableAmount>=100 ether && stableAmount<1000 ether */\n    tag_145:\n        /* \"libraries/TimeFee.sol\":335:673  if(stableAmount>=100 ether && stableAmount<1000 ether){... */\n      iszero\n      tag_146\n      jumpi\n        /* \"libraries/TimeFee.sol\":424:427  100 */\n      0x64\n        /* \"libraries/TimeFee.sol\":411:423  stableAmount */\n      dup3\n        /* \"libraries/TimeFee.sol\":411:427  stableAmount/100 */\n      tag_147\n      swap2\n      swap1\n      tag_111\n      jump\t// in\n    tag_147:\n        /* \"libraries/TimeFee.sol\":404:427  return stableAmount/100 */\n      swap1\n      pop\n      jump(tag_144)\n        /* \"libraries/TimeFee.sol\":335:673  if(stableAmount>=100 ether && stableAmount<1000 ether){... */\n    tag_146:\n        /* \"libraries/TimeFee.sol\":461:471  1000 ether */\n      0x3635c9adc5dea00000\n        /* \"libraries/TimeFee.sol\":447:459  stableAmount */\n      dup3\n        /* \"libraries/TimeFee.sol\":447:471  stableAmount>=1000 ether */\n      lt\n      iszero\n        /* \"libraries/TimeFee.sol\":447:499  stableAmount>=1000 ether && stableAmount<10000 ether */\n      dup1\n      iszero\n      tag_149\n      jumpi\n      pop\n        /* \"libraries/TimeFee.sol\":488:499  10000 ether */\n      0x021e19e0c9bab2400000\n        /* \"libraries/TimeFee.sol\":475:487  stableAmount */\n      dup3\n        /* \"libraries/TimeFee.sol\":475:499  stableAmount<10000 ether */\n      lt\n        /* \"libraries/TimeFee.sol\":447:499  stableAmount>=1000 ether && stableAmount<10000 ether */\n    tag_149:\n        /* \"libraries/TimeFee.sol\":444:673  if(stableAmount>=1000 ether && stableAmount<10000 ether){... */\n      iszero\n      tag_150\n      jumpi\n        /* \"libraries/TimeFee.sol\":535:538  200 */\n      0xc8\n        /* \"libraries/TimeFee.sol\":522:534  stableAmount */\n      dup3\n        /* \"libraries/TimeFee.sol\":522:538  stableAmount/200 */\n      tag_151\n      swap2\n      swap1\n      tag_111\n      jump\t// in\n    tag_151:\n        /* \"libraries/TimeFee.sol\":515:538  return stableAmount/200 */\n      swap1\n      pop\n      jump(tag_144)\n        /* \"libraries/TimeFee.sol\":444:673  if(stableAmount>=1000 ether && stableAmount<10000 ether){... */\n    tag_150:\n        /* \"libraries/TimeFee.sol\":572:583  10000 ether */\n      0x021e19e0c9bab2400000\n        /* \"libraries/TimeFee.sol\":558:570  stableAmount */\n      dup3\n        /* \"libraries/TimeFee.sol\":558:583  stableAmount>=10000 ether */\n      lt\n        /* \"libraries/TimeFee.sol\":555:673  if(stableAmount>=10000 ether){... */\n      tag_153\n      jumpi\n        /* \"libraries/TimeFee.sol\":619:622  400 */\n      0x0190\n        /* \"libraries/TimeFee.sol\":606:618  stableAmount */\n      dup3\n        /* \"libraries/TimeFee.sol\":606:622  stableAmount/400 */\n      tag_154\n      swap2\n      swap1\n      tag_111\n      jump\t// in\n    tag_154:\n        /* \"libraries/TimeFee.sol\":599:622  return stableAmount/400 */\n      swap1\n      pop\n      jump(tag_144)\n        /* \"libraries/TimeFee.sol\":555:673  if(stableAmount>=10000 ether){... */\n    tag_153:\n        /* \"libraries/TimeFee.sol\":660:661  0 */\n      0x00\n        /* \"libraries/TimeFee.sol\":653:661  return 0 */\n      swap1\n      pop\n        /* \"libraries/TimeFee.sol\":250:680  function fee(uint256 stableAmount)internal pure returns(uint256 stableFee){... */\n    tag_144:\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"libraries/SafeERC20.sol\":1025:1202  function safeTransfer(IERC20 token, address to, uint256 value) internal {... */\n    tag_78:\n        /* \"libraries/SafeERC20.sol\":1108:1194  _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value)) */\n      tag_157\n        /* \"libraries/SafeERC20.sol\":1128:1133  token */\n      dup4\n        /* \"libraries/SafeERC20.sol\":1158:1181  token.transfer.selector */\n      shl(0xe0, 0xa9059cbb)\n        /* \"libraries/SafeERC20.sol\":1183:1185  to */\n      dup5\n        /* \"libraries/SafeERC20.sol\":1187:1192  value */\n      dup5\n        /* \"libraries/SafeERC20.sol\":1135:1193  abi.encodeWithSelector(token.transfer.selector, to, value) */\n      add(0x24, mload(0x40))\n      tag_158\n      swap3\n      swap2\n      swap1\n      tag_159\n      jump\t// in\n    tag_158:\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n      swap1\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n      0x20\n      dup3\n      add\n      dup1\n      mload\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n      dup4\n      dup2\n      dup4\n      and\n      or\n      dup4\n      mstore\n      pop\n      pop\n      pop\n      pop\n        /* \"libraries/SafeERC20.sol\":1108:1127  _callOptionalReturn */\n      tag_142\n        /* \"libraries/SafeERC20.sol\":1108:1194  _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value)) */\n      jump\t// in\n    tag_157:\n        /* \"libraries/SafeERC20.sol\":1025:1202  function safeTransfer(IERC20 token, address to, uint256 value) internal {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"libraries/SafeERC20.sol\":5371:6020  function _callOptionalReturn(IERC20 token, bytes memory data) private {... */\n    tag_142:\n        /* \"libraries/SafeERC20.sol\":5795:5818  bytes memory returndata */\n      0x00\n        /* \"libraries/SafeERC20.sol\":5821:5890  address(token).functionCall(data, \"SafeERC20: low-level call failed\") */\n      tag_161\n        /* \"libraries/SafeERC20.sol\":5849:5853  data */\n      dup3\n        /* \"libraries/SafeERC20.sol\":5821:5890  address(token).functionCall(data, \"SafeERC20: low-level call failed\") */\n      mload(0x40)\n      dup1\n      0x40\n      add\n      0x40\n      mstore\n      dup1\n      0x20\n      dup2\n      mstore\n      0x20\n      add\n      0x5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564\n      dup2\n      mstore\n      pop\n        /* \"libraries/SafeERC20.sol\":5829:5834  token */\n      dup6\n        /* \"libraries/SafeERC20.sol\":5821:5848  address(token).functionCall */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      tag_162\n      swap1\n        /* \"libraries/SafeERC20.sol\":5821:5890  address(token).functionCall(data, \"SafeERC20: low-level call failed\") */\n      swap3\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_161:\n        /* \"libraries/SafeERC20.sol\":5795:5890  bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\") */\n      swap1\n      pop\n        /* \"libraries/SafeERC20.sol\":5930:5931  0 */\n      0x00\n        /* \"libraries/SafeERC20.sol\":5909:5919  returndata */\n      dup2\n        /* \"libraries/SafeERC20.sol\":5909:5926  returndata.length */\n      mload\n        /* \"libraries/SafeERC20.sol\":5909:5931  returndata.length == 0 */\n      eq\n        /* \"libraries/SafeERC20.sol\":5909:5965  returndata.length == 0 || abi.decode(returndata, (bool)) */\n      dup1\n      tag_163\n      jumpi\n      pop\n        /* \"libraries/SafeERC20.sol\":5946:5956  returndata */\n      dup1\n        /* \"libraries/SafeERC20.sol\":5935:5965  abi.decode(returndata, (bool)) */\n      dup1\n      0x20\n      add\n      swap1\n      mload\n      dup2\n      add\n      swap1\n      tag_164\n      swap2\n      swap1\n      tag_165\n      jump\t// in\n    tag_164:\n        /* \"libraries/SafeERC20.sol\":5909:5965  returndata.length == 0 || abi.decode(returndata, (bool)) */\n    tag_163:\n        /* \"libraries/SafeERC20.sol\":5901:6012  require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\") */\n      tag_166\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_167\n      swap1\n      tag_168\n      jump\t// in\n    tag_167:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_166:\n        /* \"libraries/SafeERC20.sol\":5441:6020  {... */\n      pop\n        /* \"libraries/SafeERC20.sol\":5371:6020  function _callOptionalReturn(IERC20 token, bytes memory data) private {... */\n      pop\n      pop\n      jump\t// out\n        /* \"libraries/Address.sol\":4207:4436  function functionCall(... */\n    tag_162:\n        /* \"libraries/Address.sol\":4344:4356  bytes memory */\n      0x60\n        /* \"libraries/Address.sol\":4376:4428  functionCallWithValue(target, data, 0, errorMessage) */\n      tag_170\n        /* \"libraries/Address.sol\":4398:4404  target */\n      dup5\n        /* \"libraries/Address.sol\":4406:4410  data */\n      dup5\n        /* \"libraries/Address.sol\":4412:4413  0 */\n      0x00\n        /* \"libraries/Address.sol\":4415:4427  errorMessage */\n      dup6\n        /* \"libraries/Address.sol\":4376:4397  functionCallWithValue */\n      tag_171\n        /* \"libraries/Address.sol\":4376:4428  functionCallWithValue(target, data, 0, errorMessage) */\n      jump\t// in\n    tag_170:\n        /* \"libraries/Address.sol\":4369:4428  return functionCallWithValue(target, data, 0, errorMessage) */\n      swap1\n      pop\n        /* \"libraries/Address.sol\":4207:4436  function functionCall(... */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"libraries/Address.sol\":5293:5748  function functionCallWithValue(... */\n    tag_171:\n        /* \"libraries/Address.sol\":5463:5475  bytes memory */\n      0x60\n        /* \"libraries/Address.sol\":5521:5526  value */\n      dup3\n        /* \"libraries/Address.sol\":5496:5517  address(this).balance */\n      selfbalance\n        /* \"libraries/Address.sol\":5496:5526  address(this).balance >= value */\n      lt\n      iszero\n        /* \"libraries/Address.sol\":5488:5569  require(address(this).balance >= value, \"Address: insufficient balance for call\") */\n      tag_173\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_174\n      swap1\n      tag_175\n      jump\t// in\n    tag_174:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_173:\n        /* \"libraries/Address.sol\":5581:5593  bool success */\n      0x00\n        /* \"libraries/Address.sol\":5595:5618  bytes memory returndata */\n      dup1\n        /* \"libraries/Address.sol\":5622:5628  target */\n      dup7\n        /* \"libraries/Address.sol\":5622:5633  target.call */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"libraries/Address.sol\":5641:5646  value */\n      dup6\n        /* \"libraries/Address.sol\":5648:5652  data */\n      dup8\n        /* \"libraries/Address.sol\":5622:5653  target.call{value: value}(data) */\n      mload(0x40)\n      tag_176\n      swap2\n      swap1\n      tag_177\n      jump\t// in\n    tag_176:\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup6\n      dup8\n      gas\n      call\n      swap3\n      pop\n      pop\n      pop\n      returndatasize\n      dup1\n      0x00\n      dup2\n      eq\n      tag_180\n      jumpi\n      mload(0x40)\n      swap2\n      pop\n      and(add(returndatasize, 0x3f), not(0x1f))\n      dup3\n      add\n      0x40\n      mstore\n      returndatasize\n      dup3\n      mstore\n      returndatasize\n      0x00\n      0x20\n      dup5\n      add\n      returndatacopy\n      jump(tag_179)\n    tag_180:\n      0x60\n      swap2\n      pop\n    tag_179:\n      pop\n        /* \"libraries/Address.sol\":5580:5653  (bool success, bytes memory returndata) = target.call{value: value}(data) */\n      swap2\n      pop\n      swap2\n      pop\n        /* \"libraries/Address.sol\":5671:5740  verifyCallResultFromTarget(target, success, returndata, errorMessage) */\n      tag_181\n        /* \"libraries/Address.sol\":5698:5704  target */\n      dup8\n        /* \"libraries/Address.sol\":5706:5713  success */\n      dup4\n        /* \"libraries/Address.sol\":5715:5725  returndata */\n      dup4\n        /* \"libraries/Address.sol\":5727:5739  errorMessage */\n      dup8\n        /* \"libraries/Address.sol\":5671:5697  verifyCallResultFromTarget */\n      tag_182\n        /* \"libraries/Address.sol\":5671:5740  verifyCallResultFromTarget(target, success, returndata, errorMessage) */\n      jump\t// in\n    tag_181:\n        /* \"libraries/Address.sol\":5664:5740  return verifyCallResultFromTarget(target, success, returndata, errorMessage) */\n      swap3\n      pop\n      pop\n      pop\n        /* \"libraries/Address.sol\":5293:5748  function functionCallWithValue(... */\n      swap5\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"libraries/Address.sol\":7866:8510  function verifyCallResultFromTarget(... */\n    tag_182:\n        /* \"libraries/Address.sol\":8051:8063  bytes memory */\n      0x60\n        /* \"libraries/Address.sol\":8080:8087  success */\n      dup4\n        /* \"libraries/Address.sol\":8076:8503  if (success) {... */\n      iszero\n      tag_184\n      jumpi\n        /* \"libraries/Address.sol\":8129:8130  0 */\n      0x00\n        /* \"libraries/Address.sol\":8108:8118  returndata */\n      dup4\n        /* \"libraries/Address.sol\":8108:8125  returndata.length */\n      mload\n        /* \"libraries/Address.sol\":8108:8130  returndata.length == 0 */\n      eq\n        /* \"libraries/Address.sol\":8104:8394  if (returndata.length == 0) {... */\n      iszero\n      tag_185\n      jumpi\n        /* \"libraries/Address.sol\":8326:8344  isContract(target) */\n      tag_186\n        /* \"libraries/Address.sol\":8337:8343  target */\n      dup6\n        /* \"libraries/Address.sol\":8326:8336  isContract */\n      tag_187\n        /* \"libraries/Address.sol\":8326:8344  isContract(target) */\n      jump\t// in\n    tag_186:\n        /* \"libraries/Address.sol\":8318:8378  require(isContract(target), \"Address: call to non-contract\") */\n      tag_188\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_189\n      swap1\n      tag_190\n      jump\t// in\n    tag_189:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_188:\n        /* \"libraries/Address.sol\":8104:8394  if (returndata.length == 0) {... */\n    tag_185:\n        /* \"libraries/Address.sol\":8415:8425  returndata */\n      dup3\n        /* \"libraries/Address.sol\":8408:8425  return returndata */\n      swap1\n      pop\n      jump(tag_183)\n        /* \"libraries/Address.sol\":8076:8503  if (success) {... */\n    tag_184:\n        /* \"libraries/Address.sol\":8458:8491  _revert(returndata, errorMessage) */\n      tag_192\n        /* \"libraries/Address.sol\":8466:8476  returndata */\n      dup4\n        /* \"libraries/Address.sol\":8478:8490  errorMessage */\n      dup4\n        /* \"libraries/Address.sol\":8458:8465  _revert */\n      tag_193\n        /* \"libraries/Address.sol\":8458:8491  _revert(returndata, errorMessage) */\n      jump\t// in\n    tag_192:\n        /* \"libraries/Address.sol\":7866:8510  function verifyCallResultFromTarget(... */\n    tag_183:\n      swap5\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"libraries/Address.sol\":1452:1778  function isContract(address account) internal view returns (bool) {... */\n    tag_187:\n        /* \"libraries/Address.sol\":1512:1516  bool */\n      0x00\n        /* \"libraries/Address.sol\":1769:1770  0 */\n      dup1\n        /* \"libraries/Address.sol\":1747:1754  account */\n      dup3\n        /* \"libraries/Address.sol\":1747:1766  account.code.length */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      extcodesize\n        /* \"libraries/Address.sol\":1747:1770  account.code.length > 0 */\n      gt\n        /* \"libraries/Address.sol\":1740:1770  return account.code.length > 0 */\n      swap1\n      pop\n        /* \"libraries/Address.sol\":1452:1778  function isContract(address account) internal view returns (bool) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"libraries/Address.sol\":9052:9604  function _revert(bytes memory returndata, string memory errorMessage) private pure {... */\n    tag_193:\n        /* \"libraries/Address.sol\":9233:9234  0 */\n      0x00\n        /* \"libraries/Address.sol\":9213:9223  returndata */\n      dup3\n        /* \"libraries/Address.sol\":9213:9230  returndata.length */\n      mload\n        /* \"libraries/Address.sol\":9213:9234  returndata.length > 0 */\n      gt\n        /* \"libraries/Address.sol\":9209:9597  if (returndata.length > 0) {... */\n      iszero\n      tag_196\n      jumpi\n        /* \"libraries/Address.sol\":9445:9455  returndata */\n      dup2\n        /* \"libraries/Address.sol\":9439:9456  mload(returndata) */\n      mload\n        /* \"libraries/Address.sol\":9502:9517  returndata_size */\n      dup1\n        /* \"libraries/Address.sol\":9489:9499  returndata */\n      dup4\n        /* \"libraries/Address.sol\":9485:9487  32 */\n      0x20\n        /* \"libraries/Address.sol\":9481:9500  add(32, returndata) */\n      add\n        /* \"libraries/Address.sol\":9474:9518  revert(add(32, returndata), returndata_size) */\n      revert\n        /* \"libraries/Address.sol\":9209:9597  if (returndata.length > 0) {... */\n    tag_196:\n        /* \"libraries/Address.sol\":9572:9584  errorMessage */\n      dup1\n        /* \"libraries/Address.sol\":9565:9585  revert(errorMessage) */\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_198\n      swap2\n      swap1\n      tag_199\n      jump\t// in\n    tag_198:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"#utility.yul\":88:205   */\n    tag_201:\n        /* \"#utility.yul\":197:198   */\n      0x00\n        /* \"#utility.yul\":194:195   */\n      dup1\n        /* \"#utility.yul\":187:199   */\n      revert\n        /* \"#utility.yul\":334:435   */\n    tag_203:\n        /* \"#utility.yul\":370:377   */\n      0x00\n        /* \"#utility.yul\":410:428   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":403:408   */\n      dup3\n        /* \"#utility.yul\":399:429   */\n      and\n        /* \"#utility.yul\":388:429   */\n      swap1\n      pop\n        /* \"#utility.yul\":334:435   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":441:561   */\n    tag_204:\n        /* \"#utility.yul\":513:536   */\n      tag_244\n        /* \"#utility.yul\":530:535   */\n      dup2\n        /* \"#utility.yul\":513:536   */\n      tag_203\n      jump\t// in\n    tag_244:\n        /* \"#utility.yul\":506:511   */\n      dup2\n        /* \"#utility.yul\":503:537   */\n      eq\n        /* \"#utility.yul\":493:555   */\n      tag_245\n      jumpi\n        /* \"#utility.yul\":551:552   */\n      0x00\n        /* \"#utility.yul\":548:549   */\n      dup1\n        /* \"#utility.yul\":541:553   */\n      revert\n        /* \"#utility.yul\":493:555   */\n    tag_245:\n        /* \"#utility.yul\":441:561   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":567:704   */\n    tag_205:\n        /* \"#utility.yul\":612:617   */\n      0x00\n        /* \"#utility.yul\":650:656   */\n      dup2\n        /* \"#utility.yul\":637:657   */\n      calldataload\n        /* \"#utility.yul\":628:657   */\n      swap1\n      pop\n        /* \"#utility.yul\":666:698   */\n      tag_247\n        /* \"#utility.yul\":692:697   */\n      dup2\n        /* \"#utility.yul\":666:698   */\n      tag_204\n      jump\t// in\n    tag_247:\n        /* \"#utility.yul\":567:704   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":710:1037   */\n    tag_17:\n        /* \"#utility.yul\":768:774   */\n      0x00\n        /* \"#utility.yul\":817:819   */\n      0x20\n        /* \"#utility.yul\":805:814   */\n      dup3\n        /* \"#utility.yul\":796:803   */\n      dup5\n        /* \"#utility.yul\":792:815   */\n      sub\n        /* \"#utility.yul\":788:820   */\n      slt\n        /* \"#utility.yul\":785:904   */\n      iszero\n      tag_249\n      jumpi\n        /* \"#utility.yul\":823:902   */\n      tag_250\n      tag_201\n      jump\t// in\n    tag_250:\n        /* \"#utility.yul\":785:904   */\n    tag_249:\n        /* \"#utility.yul\":943:944   */\n      0x00\n        /* \"#utility.yul\":968:1020   */\n      tag_251\n        /* \"#utility.yul\":1012:1019   */\n      dup5\n        /* \"#utility.yul\":1003:1009   */\n      dup3\n        /* \"#utility.yul\":992:1001   */\n      dup6\n        /* \"#utility.yul\":988:1010   */\n      add\n        /* \"#utility.yul\":968:1020   */\n      tag_205\n      jump\t// in\n    tag_251:\n        /* \"#utility.yul\":958:1020   */\n      swap2\n      pop\n        /* \"#utility.yul\":914:1030   */\n      pop\n        /* \"#utility.yul\":710:1037   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1043:1169   */\n    tag_206:\n        /* \"#utility.yul\":1080:1087   */\n      0x00\n        /* \"#utility.yul\":1120:1162   */\n      0xffffffffffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":1113:1118   */\n      dup3\n        /* \"#utility.yul\":1109:1163   */\n      and\n        /* \"#utility.yul\":1098:1163   */\n      swap1\n      pop\n        /* \"#utility.yul\":1043:1169   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1175:1271   */\n    tag_207:\n        /* \"#utility.yul\":1212:1219   */\n      0x00\n        /* \"#utility.yul\":1241:1265   */\n      tag_254\n        /* \"#utility.yul\":1259:1264   */\n      dup3\n        /* \"#utility.yul\":1241:1265   */\n      tag_206\n      jump\t// in\n    tag_254:\n        /* \"#utility.yul\":1230:1265   */\n      swap1\n      pop\n        /* \"#utility.yul\":1175:1271   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1277:1399   */\n    tag_208:\n        /* \"#utility.yul\":1350:1374   */\n      tag_256\n        /* \"#utility.yul\":1368:1373   */\n      dup2\n        /* \"#utility.yul\":1350:1374   */\n      tag_207\n      jump\t// in\n    tag_256:\n        /* \"#utility.yul\":1343:1348   */\n      dup2\n        /* \"#utility.yul\":1340:1375   */\n      eq\n        /* \"#utility.yul\":1330:1393   */\n      tag_257\n      jumpi\n        /* \"#utility.yul\":1389:1390   */\n      0x00\n        /* \"#utility.yul\":1386:1387   */\n      dup1\n        /* \"#utility.yul\":1379:1391   */\n      revert\n        /* \"#utility.yul\":1330:1393   */\n    tag_257:\n        /* \"#utility.yul\":1277:1399   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1405:1544   */\n    tag_209:\n        /* \"#utility.yul\":1451:1456   */\n      0x00\n        /* \"#utility.yul\":1489:1495   */\n      dup2\n        /* \"#utility.yul\":1476:1496   */\n      calldataload\n        /* \"#utility.yul\":1467:1496   */\n      swap1\n      pop\n        /* \"#utility.yul\":1505:1538   */\n      tag_259\n        /* \"#utility.yul\":1532:1537   */\n      dup2\n        /* \"#utility.yul\":1505:1538   */\n      tag_208\n      jump\t// in\n    tag_259:\n        /* \"#utility.yul\":1405:1544   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1550:1627   */\n    tag_210:\n        /* \"#utility.yul\":1587:1594   */\n      0x00\n        /* \"#utility.yul\":1616:1621   */\n      dup2\n        /* \"#utility.yul\":1605:1621   */\n      swap1\n      pop\n        /* \"#utility.yul\":1550:1627   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1633:1755   */\n    tag_211:\n        /* \"#utility.yul\":1706:1730   */\n      tag_262\n        /* \"#utility.yul\":1724:1729   */\n      dup2\n        /* \"#utility.yul\":1706:1730   */\n      tag_210\n      jump\t// in\n    tag_262:\n        /* \"#utility.yul\":1699:1704   */\n      dup2\n        /* \"#utility.yul\":1696:1731   */\n      eq\n        /* \"#utility.yul\":1686:1749   */\n      tag_263\n      jumpi\n        /* \"#utility.yul\":1745:1746   */\n      0x00\n        /* \"#utility.yul\":1742:1743   */\n      dup1\n        /* \"#utility.yul\":1735:1747   */\n      revert\n        /* \"#utility.yul\":1686:1749   */\n    tag_263:\n        /* \"#utility.yul\":1633:1755   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1761:1900   */\n    tag_212:\n        /* \"#utility.yul\":1807:1812   */\n      0x00\n        /* \"#utility.yul\":1845:1851   */\n      dup2\n        /* \"#utility.yul\":1832:1852   */\n      calldataload\n        /* \"#utility.yul\":1823:1852   */\n      swap1\n      pop\n        /* \"#utility.yul\":1861:1894   */\n      tag_265\n        /* \"#utility.yul\":1888:1893   */\n      dup2\n        /* \"#utility.yul\":1861:1894   */\n      tag_211\n      jump\t// in\n    tag_265:\n        /* \"#utility.yul\":1761:1900   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1906:2380   */\n    tag_24:\n        /* \"#utility.yul\":1974:1980   */\n      0x00\n        /* \"#utility.yul\":1982:1988   */\n      dup1\n        /* \"#utility.yul\":2031:2033   */\n      0x40\n        /* \"#utility.yul\":2019:2028   */\n      dup4\n        /* \"#utility.yul\":2010:2017   */\n      dup6\n        /* \"#utility.yul\":2006:2029   */\n      sub\n        /* \"#utility.yul\":2002:2034   */\n      slt\n        /* \"#utility.yul\":1999:2118   */\n      iszero\n      tag_267\n      jumpi\n        /* \"#utility.yul\":2037:2116   */\n      tag_268\n      tag_201\n      jump\t// in\n    tag_268:\n        /* \"#utility.yul\":1999:2118   */\n    tag_267:\n        /* \"#utility.yul\":2157:2158   */\n      0x00\n        /* \"#utility.yul\":2182:2235   */\n      tag_269\n        /* \"#utility.yul\":2227:2234   */\n      dup6\n        /* \"#utility.yul\":2218:2224   */\n      dup3\n        /* \"#utility.yul\":2207:2216   */\n      dup7\n        /* \"#utility.yul\":2203:2225   */\n      add\n        /* \"#utility.yul\":2182:2235   */\n      tag_209\n      jump\t// in\n    tag_269:\n        /* \"#utility.yul\":2172:2235   */\n      swap3\n      pop\n        /* \"#utility.yul\":2128:2245   */\n      pop\n        /* \"#utility.yul\":2284:2286   */\n      0x20\n        /* \"#utility.yul\":2310:2363   */\n      tag_270\n        /* \"#utility.yul\":2355:2362   */\n      dup6\n        /* \"#utility.yul\":2346:2352   */\n      dup3\n        /* \"#utility.yul\":2335:2344   */\n      dup7\n        /* \"#utility.yul\":2331:2353   */\n      add\n        /* \"#utility.yul\":2310:2363   */\n      tag_212\n      jump\t// in\n    tag_270:\n        /* \"#utility.yul\":2300:2363   */\n      swap2\n      pop\n        /* \"#utility.yul\":2255:2373   */\n      pop\n        /* \"#utility.yul\":1906:2380   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2386:2476   */\n    tag_213:\n        /* \"#utility.yul\":2420:2427   */\n      0x00\n        /* \"#utility.yul\":2463:2468   */\n      dup2\n        /* \"#utility.yul\":2456:2469   */\n      iszero\n        /* \"#utility.yul\":2449:2470   */\n      iszero\n        /* \"#utility.yul\":2438:2470   */\n      swap1\n      pop\n        /* \"#utility.yul\":2386:2476   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2482:2591   */\n    tag_214:\n        /* \"#utility.yul\":2563:2584   */\n      tag_273\n        /* \"#utility.yul\":2578:2583   */\n      dup2\n        /* \"#utility.yul\":2563:2584   */\n      tag_213\n      jump\t// in\n    tag_273:\n        /* \"#utility.yul\":2558:2561   */\n      dup3\n        /* \"#utility.yul\":2551:2585   */\n      mstore\n        /* \"#utility.yul\":2482:2591   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2597:2807   */\n    tag_27:\n        /* \"#utility.yul\":2684:2688   */\n      0x00\n        /* \"#utility.yul\":2722:2724   */\n      0x20\n        /* \"#utility.yul\":2711:2720   */\n      dup3\n        /* \"#utility.yul\":2707:2725   */\n      add\n        /* \"#utility.yul\":2699:2725   */\n      swap1\n      pop\n        /* \"#utility.yul\":2735:2800   */\n      tag_275\n        /* \"#utility.yul\":2797:2798   */\n      0x00\n        /* \"#utility.yul\":2786:2795   */\n      dup4\n        /* \"#utility.yul\":2782:2799   */\n      add\n        /* \"#utility.yul\":2773:2779   */\n      dup5\n        /* \"#utility.yul\":2735:2800   */\n      tag_214\n      jump\t// in\n    tag_275:\n        /* \"#utility.yul\":2597:2807   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2813:2931   */\n    tag_215:\n        /* \"#utility.yul\":2850:2857   */\n      0x00\n        /* \"#utility.yul\":2890:2924   */\n      0xffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":2883:2888   */\n      dup3\n        /* \"#utility.yul\":2879:2925   */\n      and\n        /* \"#utility.yul\":2868:2925   */\n      swap1\n      pop\n        /* \"#utility.yul\":2813:2931   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2937:3059   */\n    tag_216:\n        /* \"#utility.yul\":3010:3034   */\n      tag_278\n        /* \"#utility.yul\":3028:3033   */\n      dup2\n        /* \"#utility.yul\":3010:3034   */\n      tag_215\n      jump\t// in\n    tag_278:\n        /* \"#utility.yul\":3003:3008   */\n      dup2\n        /* \"#utility.yul\":3000:3035   */\n      eq\n        /* \"#utility.yul\":2990:3053   */\n      tag_279\n      jumpi\n        /* \"#utility.yul\":3049:3050   */\n      0x00\n        /* \"#utility.yul\":3046:3047   */\n      dup1\n        /* \"#utility.yul\":3039:3051   */\n      revert\n        /* \"#utility.yul\":2990:3053   */\n    tag_279:\n        /* \"#utility.yul\":2937:3059   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3065:3204   */\n    tag_217:\n        /* \"#utility.yul\":3111:3116   */\n      0x00\n        /* \"#utility.yul\":3149:3155   */\n      dup2\n        /* \"#utility.yul\":3136:3156   */\n      calldataload\n        /* \"#utility.yul\":3127:3156   */\n      swap1\n      pop\n        /* \"#utility.yul\":3165:3198   */\n      tag_281\n        /* \"#utility.yul\":3192:3197   */\n      dup2\n        /* \"#utility.yul\":3165:3198   */\n      tag_216\n      jump\t// in\n    tag_281:\n        /* \"#utility.yul\":3065:3204   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3210:3684   */\n    tag_36:\n        /* \"#utility.yul\":3278:3284   */\n      0x00\n        /* \"#utility.yul\":3286:3292   */\n      dup1\n        /* \"#utility.yul\":3335:3337   */\n      0x40\n        /* \"#utility.yul\":3323:3332   */\n      dup4\n        /* \"#utility.yul\":3314:3321   */\n      dup6\n        /* \"#utility.yul\":3310:3333   */\n      sub\n        /* \"#utility.yul\":3306:3338   */\n      slt\n        /* \"#utility.yul\":3303:3422   */\n      iszero\n      tag_283\n      jumpi\n        /* \"#utility.yul\":3341:3420   */\n      tag_284\n      tag_201\n      jump\t// in\n    tag_284:\n        /* \"#utility.yul\":3303:3422   */\n    tag_283:\n        /* \"#utility.yul\":3461:3462   */\n      0x00\n        /* \"#utility.yul\":3486:3539   */\n      tag_285\n        /* \"#utility.yul\":3531:3538   */\n      dup6\n        /* \"#utility.yul\":3522:3528   */\n      dup3\n        /* \"#utility.yul\":3511:3520   */\n      dup7\n        /* \"#utility.yul\":3507:3529   */\n      add\n        /* \"#utility.yul\":3486:3539   */\n      tag_217\n      jump\t// in\n    tag_285:\n        /* \"#utility.yul\":3476:3539   */\n      swap3\n      pop\n        /* \"#utility.yul\":3432:3549   */\n      pop\n        /* \"#utility.yul\":3588:3590   */\n      0x20\n        /* \"#utility.yul\":3614:3667   */\n      tag_286\n        /* \"#utility.yul\":3659:3666   */\n      dup6\n        /* \"#utility.yul\":3650:3656   */\n      dup3\n        /* \"#utility.yul\":3639:3648   */\n      dup7\n        /* \"#utility.yul\":3635:3657   */\n      add\n        /* \"#utility.yul\":3614:3667   */\n      tag_217\n      jump\t// in\n    tag_286:\n        /* \"#utility.yul\":3604:3667   */\n      swap2\n      pop\n        /* \"#utility.yul\":3559:3677   */\n      pop\n        /* \"#utility.yul\":3210:3684   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3690:3808   */\n    tag_218:\n        /* \"#utility.yul\":3777:3801   */\n      tag_288\n        /* \"#utility.yul\":3795:3800   */\n      dup2\n        /* \"#utility.yul\":3777:3801   */\n      tag_210\n      jump\t// in\n    tag_288:\n        /* \"#utility.yul\":3772:3775   */\n      dup3\n        /* \"#utility.yul\":3765:3802   */\n      mstore\n        /* \"#utility.yul\":3690:3808   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3814:4036   */\n    tag_39:\n        /* \"#utility.yul\":3907:3911   */\n      0x00\n        /* \"#utility.yul\":3945:3947   */\n      0x20\n        /* \"#utility.yul\":3934:3943   */\n      dup3\n        /* \"#utility.yul\":3930:3948   */\n      add\n        /* \"#utility.yul\":3922:3948   */\n      swap1\n      pop\n        /* \"#utility.yul\":3958:4029   */\n      tag_290\n        /* \"#utility.yul\":4026:4027   */\n      0x00\n        /* \"#utility.yul\":4015:4024   */\n      dup4\n        /* \"#utility.yul\":4011:4028   */\n      add\n        /* \"#utility.yul\":4002:4008   */\n      dup5\n        /* \"#utility.yul\":3958:4029   */\n      tag_218\n      jump\t// in\n    tag_290:\n        /* \"#utility.yul\":3814:4036   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4042:4661   */\n    tag_49:\n        /* \"#utility.yul\":4119:4125   */\n      0x00\n        /* \"#utility.yul\":4127:4133   */\n      dup1\n        /* \"#utility.yul\":4135:4141   */\n      0x00\n        /* \"#utility.yul\":4184:4186   */\n      0x60\n        /* \"#utility.yul\":4172:4181   */\n      dup5\n        /* \"#utility.yul\":4163:4170   */\n      dup7\n        /* \"#utility.yul\":4159:4182   */\n      sub\n        /* \"#utility.yul\":4155:4187   */\n      slt\n        /* \"#utility.yul\":4152:4271   */\n      iszero\n      tag_292\n      jumpi\n        /* \"#utility.yul\":4190:4269   */\n      tag_293\n      tag_201\n      jump\t// in\n    tag_293:\n        /* \"#utility.yul\":4152:4271   */\n    tag_292:\n        /* \"#utility.yul\":4310:4311   */\n      0x00\n        /* \"#utility.yul\":4335:4388   */\n      tag_294\n        /* \"#utility.yul\":4380:4387   */\n      dup7\n        /* \"#utility.yul\":4371:4377   */\n      dup3\n        /* \"#utility.yul\":4360:4369   */\n      dup8\n        /* \"#utility.yul\":4356:4378   */\n      add\n        /* \"#utility.yul\":4335:4388   */\n      tag_209\n      jump\t// in\n    tag_294:\n        /* \"#utility.yul\":4325:4388   */\n      swap4\n      pop\n        /* \"#utility.yul\":4281:4398   */\n      pop\n        /* \"#utility.yul\":4437:4439   */\n      0x20\n        /* \"#utility.yul\":4463:4516   */\n      tag_295\n        /* \"#utility.yul\":4508:4515   */\n      dup7\n        /* \"#utility.yul\":4499:4505   */\n      dup3\n        /* \"#utility.yul\":4488:4497   */\n      dup8\n        /* \"#utility.yul\":4484:4506   */\n      add\n        /* \"#utility.yul\":4463:4516   */\n      tag_217\n      jump\t// in\n    tag_295:\n        /* \"#utility.yul\":4453:4516   */\n      swap3\n      pop\n        /* \"#utility.yul\":4408:4526   */\n      pop\n        /* \"#utility.yul\":4565:4567   */\n      0x40\n        /* \"#utility.yul\":4591:4644   */\n      tag_296\n        /* \"#utility.yul\":4636:4643   */\n      dup7\n        /* \"#utility.yul\":4627:4633   */\n      dup3\n        /* \"#utility.yul\":4616:4625   */\n      dup8\n        /* \"#utility.yul\":4612:4634   */\n      add\n        /* \"#utility.yul\":4591:4644   */\n      tag_217\n      jump\t// in\n    tag_296:\n        /* \"#utility.yul\":4581:4644   */\n      swap2\n      pop\n        /* \"#utility.yul\":4536:4654   */\n      pop\n        /* \"#utility.yul\":4042:4661   */\n      swap3\n      pop\n      swap3\n      pop\n      swap3\n      jump\t// out\n        /* \"#utility.yul\":4667:4847   */\n    tag_219:\n        /* \"#utility.yul\":4715:4792   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":4712:4713   */\n      0x00\n        /* \"#utility.yul\":4705:4793   */\n      mstore\n        /* \"#utility.yul\":4812:4816   */\n      0x11\n        /* \"#utility.yul\":4809:4810   */\n      0x04\n        /* \"#utility.yul\":4802:4817   */\n      mstore\n        /* \"#utility.yul\":4836:4840   */\n      0x24\n        /* \"#utility.yul\":4833:4834   */\n      0x00\n        /* \"#utility.yul\":4826:4841   */\n      revert\n        /* \"#utility.yul\":4853:5044   */\n    tag_81:\n        /* \"#utility.yul\":4893:4897   */\n      0x00\n        /* \"#utility.yul\":4913:4933   */\n      tag_299\n        /* \"#utility.yul\":4931:4932   */\n      dup3\n        /* \"#utility.yul\":4913:4933   */\n      tag_210\n      jump\t// in\n    tag_299:\n        /* \"#utility.yul\":4908:4933   */\n      swap2\n      pop\n        /* \"#utility.yul\":4947:4967   */\n      tag_300\n        /* \"#utility.yul\":4965:4966   */\n      dup4\n        /* \"#utility.yul\":4947:4967   */\n      tag_210\n      jump\t// in\n    tag_300:\n        /* \"#utility.yul\":4942:4967   */\n      swap3\n      pop\n        /* \"#utility.yul\":4986:4987   */\n      dup3\n        /* \"#utility.yul\":4983:4984   */\n      dup3\n        /* \"#utility.yul\":4980:4988   */\n      lt\n        /* \"#utility.yul\":4977:5011   */\n      iszero\n      tag_301\n      jumpi\n        /* \"#utility.yul\":4991:5009   */\n      tag_302\n      tag_219\n      jump\t// in\n    tag_302:\n        /* \"#utility.yul\":4977:5011   */\n    tag_301:\n        /* \"#utility.yul\":5036:5037   */\n      dup3\n        /* \"#utility.yul\":5033:5034   */\n      dup3\n        /* \"#utility.yul\":5029:5038   */\n      sub\n        /* \"#utility.yul\":5021:5038   */\n      swap1\n      pop\n        /* \"#utility.yul\":4853:5044   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5050:5366   */\n    tag_85:\n        /* \"#utility.yul\":5090:5097   */\n      0x00\n        /* \"#utility.yul\":5113:5133   */\n      tag_304\n        /* \"#utility.yul\":5131:5132   */\n      dup3\n        /* \"#utility.yul\":5113:5133   */\n      tag_215\n      jump\t// in\n    tag_304:\n        /* \"#utility.yul\":5108:5133   */\n      swap2\n      pop\n        /* \"#utility.yul\":5147:5167   */\n      tag_305\n        /* \"#utility.yul\":5165:5166   */\n      dup4\n        /* \"#utility.yul\":5147:5167   */\n      tag_215\n      jump\t// in\n    tag_305:\n        /* \"#utility.yul\":5142:5167   */\n      swap3\n      pop\n        /* \"#utility.yul\":5303:5304   */\n      dup2\n        /* \"#utility.yul\":5267:5301   */\n      0xffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":5263:5305   */\n      div\n        /* \"#utility.yul\":5260:5261   */\n      dup4\n        /* \"#utility.yul\":5257:5306   */\n      gt\n        /* \"#utility.yul\":5252:5253   */\n      dup3\n        /* \"#utility.yul\":5245:5254   */\n      iszero\n        /* \"#utility.yul\":5238:5255   */\n      iszero\n        /* \"#utility.yul\":5234:5307   */\n      and\n        /* \"#utility.yul\":5231:5330   */\n      iszero\n      tag_306\n      jumpi\n        /* \"#utility.yul\":5310:5328   */\n      tag_307\n      tag_219\n      jump\t// in\n    tag_307:\n        /* \"#utility.yul\":5231:5330   */\n    tag_306:\n        /* \"#utility.yul\":5358:5359   */\n      dup3\n        /* \"#utility.yul\":5355:5356   */\n      dup3\n        /* \"#utility.yul\":5351:5360   */\n      mul\n        /* \"#utility.yul\":5340:5360   */\n      swap1\n      pop\n        /* \"#utility.yul\":5050:5366   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5372:5720   */\n    tag_109:\n        /* \"#utility.yul\":5412:5419   */\n      0x00\n        /* \"#utility.yul\":5435:5455   */\n      tag_309\n        /* \"#utility.yul\":5453:5454   */\n      dup3\n        /* \"#utility.yul\":5435:5455   */\n      tag_210\n      jump\t// in\n    tag_309:\n        /* \"#utility.yul\":5430:5455   */\n      swap2\n      pop\n        /* \"#utility.yul\":5469:5489   */\n      tag_310\n        /* \"#utility.yul\":5487:5488   */\n      dup4\n        /* \"#utility.yul\":5469:5489   */\n      tag_210\n      jump\t// in\n    tag_310:\n        /* \"#utility.yul\":5464:5489   */\n      swap3\n      pop\n        /* \"#utility.yul\":5657:5658   */\n      dup2\n        /* \"#utility.yul\":5589:5655   */\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":5585:5659   */\n      div\n        /* \"#utility.yul\":5582:5583   */\n      dup4\n        /* \"#utility.yul\":5579:5660   */\n      gt\n        /* \"#utility.yul\":5574:5575   */\n      dup3\n        /* \"#utility.yul\":5567:5576   */\n      iszero\n        /* \"#utility.yul\":5560:5577   */\n      iszero\n        /* \"#utility.yul\":5556:5661   */\n      and\n        /* \"#utility.yul\":5553:5684   */\n      iszero\n      tag_311\n      jumpi\n        /* \"#utility.yul\":5664:5682   */\n      tag_312\n      tag_219\n      jump\t// in\n    tag_312:\n        /* \"#utility.yul\":5553:5684   */\n    tag_311:\n        /* \"#utility.yul\":5712:5713   */\n      dup3\n        /* \"#utility.yul\":5709:5710   */\n      dup3\n        /* \"#utility.yul\":5705:5714   */\n      mul\n        /* \"#utility.yul\":5694:5714   */\n      swap1\n      pop\n        /* \"#utility.yul\":5372:5720   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5726:5906   */\n    tag_220:\n        /* \"#utility.yul\":5774:5851   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":5771:5772   */\n      0x00\n        /* \"#utility.yul\":5764:5852   */\n      mstore\n        /* \"#utility.yul\":5871:5875   */\n      0x12\n        /* \"#utility.yul\":5868:5869   */\n      0x04\n        /* \"#utility.yul\":5861:5876   */\n      mstore\n        /* \"#utility.yul\":5895:5899   */\n      0x24\n        /* \"#utility.yul\":5892:5893   */\n      0x00\n        /* \"#utility.yul\":5885:5900   */\n      revert\n        /* \"#utility.yul\":5912:6097   */\n    tag_111:\n        /* \"#utility.yul\":5952:5953   */\n      0x00\n        /* \"#utility.yul\":5969:5989   */\n      tag_315\n        /* \"#utility.yul\":5987:5988   */\n      dup3\n        /* \"#utility.yul\":5969:5989   */\n      tag_210\n      jump\t// in\n    tag_315:\n        /* \"#utility.yul\":5964:5989   */\n      swap2\n      pop\n        /* \"#utility.yul\":6003:6023   */\n      tag_316\n        /* \"#utility.yul\":6021:6022   */\n      dup4\n        /* \"#utility.yul\":6003:6023   */\n      tag_210\n      jump\t// in\n    tag_316:\n        /* \"#utility.yul\":5998:6023   */\n      swap3\n      pop\n        /* \"#utility.yul\":6042:6043   */\n      dup3\n        /* \"#utility.yul\":6032:6067   */\n      tag_317\n      jumpi\n        /* \"#utility.yul\":6047:6065   */\n      tag_318\n      tag_220\n      jump\t// in\n    tag_318:\n        /* \"#utility.yul\":6032:6067   */\n    tag_317:\n        /* \"#utility.yul\":6089:6090   */\n      dup3\n        /* \"#utility.yul\":6086:6087   */\n      dup3\n        /* \"#utility.yul\":6082:6091   */\n      div\n        /* \"#utility.yul\":6077:6091   */\n      swap1\n      pop\n        /* \"#utility.yul\":5912:6097   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6103:6286   */\n    tag_136:\n        /* \"#utility.yul\":6141:6144   */\n      0x00\n        /* \"#utility.yul\":6164:6187   */\n      tag_320\n        /* \"#utility.yul\":6181:6186   */\n      dup3\n        /* \"#utility.yul\":6164:6187   */\n      tag_203\n      jump\t// in\n    tag_320:\n        /* \"#utility.yul\":6155:6187   */\n      swap2\n      pop\n        /* \"#utility.yul\":6209:6227   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":6202:6207   */\n      dup3\n        /* \"#utility.yul\":6199:6228   */\n      eq\n        /* \"#utility.yul\":6196:6251   */\n      iszero\n      tag_321\n      jumpi\n        /* \"#utility.yul\":6231:6249   */\n      tag_322\n      tag_219\n      jump\t// in\n    tag_322:\n        /* \"#utility.yul\":6196:6251   */\n    tag_321:\n        /* \"#utility.yul\":6278:6279   */\n      0x01\n        /* \"#utility.yul\":6271:6276   */\n      dup3\n        /* \"#utility.yul\":6267:6280   */\n      add\n        /* \"#utility.yul\":6260:6280   */\n      swap1\n      pop\n        /* \"#utility.yul\":6103:6286   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6292:6410   */\n    tag_221:\n        /* \"#utility.yul\":6379:6403   */\n      tag_324\n        /* \"#utility.yul\":6397:6402   */\n      dup2\n        /* \"#utility.yul\":6379:6403   */\n      tag_207\n      jump\t// in\n    tag_324:\n        /* \"#utility.yul\":6374:6377   */\n      dup3\n        /* \"#utility.yul\":6367:6404   */\n      mstore\n        /* \"#utility.yul\":6292:6410   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6416:6858   */\n    tag_141:\n        /* \"#utility.yul\":6565:6569   */\n      0x00\n        /* \"#utility.yul\":6603:6605   */\n      0x60\n        /* \"#utility.yul\":6592:6601   */\n      dup3\n        /* \"#utility.yul\":6588:6606   */\n      add\n        /* \"#utility.yul\":6580:6606   */\n      swap1\n      pop\n        /* \"#utility.yul\":6616:6687   */\n      tag_326\n        /* \"#utility.yul\":6684:6685   */\n      0x00\n        /* \"#utility.yul\":6673:6682   */\n      dup4\n        /* \"#utility.yul\":6669:6686   */\n      add\n        /* \"#utility.yul\":6660:6666   */\n      dup7\n        /* \"#utility.yul\":6616:6687   */\n      tag_221\n      jump\t// in\n    tag_326:\n        /* \"#utility.yul\":6697:6769   */\n      tag_327\n        /* \"#utility.yul\":6765:6767   */\n      0x20\n        /* \"#utility.yul\":6754:6763   */\n      dup4\n        /* \"#utility.yul\":6750:6768   */\n      add\n        /* \"#utility.yul\":6741:6747   */\n      dup6\n        /* \"#utility.yul\":6697:6769   */\n      tag_221\n      jump\t// in\n    tag_327:\n        /* \"#utility.yul\":6779:6851   */\n      tag_328\n        /* \"#utility.yul\":6847:6849   */\n      0x40\n        /* \"#utility.yul\":6836:6845   */\n      dup4\n        /* \"#utility.yul\":6832:6850   */\n      add\n        /* \"#utility.yul\":6823:6829   */\n      dup5\n        /* \"#utility.yul\":6779:6851   */\n      tag_218\n      jump\t// in\n    tag_328:\n        /* \"#utility.yul\":6416:6858   */\n      swap5\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6864:7196   */\n    tag_159:\n        /* \"#utility.yul\":6985:6989   */\n      0x00\n        /* \"#utility.yul\":7023:7025   */\n      0x40\n        /* \"#utility.yul\":7012:7021   */\n      dup3\n        /* \"#utility.yul\":7008:7026   */\n      add\n        /* \"#utility.yul\":7000:7026   */\n      swap1\n      pop\n        /* \"#utility.yul\":7036:7107   */\n      tag_330\n        /* \"#utility.yul\":7104:7105   */\n      0x00\n        /* \"#utility.yul\":7093:7102   */\n      dup4\n        /* \"#utility.yul\":7089:7106   */\n      add\n        /* \"#utility.yul\":7080:7086   */\n      dup6\n        /* \"#utility.yul\":7036:7107   */\n      tag_221\n      jump\t// in\n    tag_330:\n        /* \"#utility.yul\":7117:7189   */\n      tag_331\n        /* \"#utility.yul\":7185:7187   */\n      0x20\n        /* \"#utility.yul\":7174:7183   */\n      dup4\n        /* \"#utility.yul\":7170:7188   */\n      add\n        /* \"#utility.yul\":7161:7167   */\n      dup5\n        /* \"#utility.yul\":7117:7189   */\n      tag_218\n      jump\t// in\n    tag_331:\n        /* \"#utility.yul\":6864:7196   */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7202:7318   */\n    tag_222:\n        /* \"#utility.yul\":7272:7293   */\n      tag_333\n        /* \"#utility.yul\":7287:7292   */\n      dup2\n        /* \"#utility.yul\":7272:7293   */\n      tag_213\n      jump\t// in\n    tag_333:\n        /* \"#utility.yul\":7265:7270   */\n      dup2\n        /* \"#utility.yul\":7262:7294   */\n      eq\n        /* \"#utility.yul\":7252:7312   */\n      tag_334\n      jumpi\n        /* \"#utility.yul\":7308:7309   */\n      0x00\n        /* \"#utility.yul\":7305:7306   */\n      dup1\n        /* \"#utility.yul\":7298:7310   */\n      revert\n        /* \"#utility.yul\":7252:7312   */\n    tag_334:\n        /* \"#utility.yul\":7202:7318   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7324:7461   */\n    tag_223:\n        /* \"#utility.yul\":7378:7383   */\n      0x00\n        /* \"#utility.yul\":7409:7415   */\n      dup2\n        /* \"#utility.yul\":7403:7416   */\n      mload\n        /* \"#utility.yul\":7394:7416   */\n      swap1\n      pop\n        /* \"#utility.yul\":7425:7455   */\n      tag_336\n        /* \"#utility.yul\":7449:7454   */\n      dup2\n        /* \"#utility.yul\":7425:7455   */\n      tag_222\n      jump\t// in\n    tag_336:\n        /* \"#utility.yul\":7324:7461   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7467:7812   */\n    tag_165:\n        /* \"#utility.yul\":7534:7540   */\n      0x00\n        /* \"#utility.yul\":7583:7585   */\n      0x20\n        /* \"#utility.yul\":7571:7580   */\n      dup3\n        /* \"#utility.yul\":7562:7569   */\n      dup5\n        /* \"#utility.yul\":7558:7581   */\n      sub\n        /* \"#utility.yul\":7554:7586   */\n      slt\n        /* \"#utility.yul\":7551:7670   */\n      iszero\n      tag_338\n      jumpi\n        /* \"#utility.yul\":7589:7668   */\n      tag_339\n      tag_201\n      jump\t// in\n    tag_339:\n        /* \"#utility.yul\":7551:7670   */\n    tag_338:\n        /* \"#utility.yul\":7709:7710   */\n      0x00\n        /* \"#utility.yul\":7734:7795   */\n      tag_340\n        /* \"#utility.yul\":7787:7794   */\n      dup5\n        /* \"#utility.yul\":7778:7784   */\n      dup3\n        /* \"#utility.yul\":7767:7776   */\n      dup6\n        /* \"#utility.yul\":7763:7785   */\n      add\n        /* \"#utility.yul\":7734:7795   */\n      tag_223\n      jump\t// in\n    tag_340:\n        /* \"#utility.yul\":7724:7795   */\n      swap2\n      pop\n        /* \"#utility.yul\":7680:7805   */\n      pop\n        /* \"#utility.yul\":7467:7812   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7818:7987   */\n    tag_224:\n        /* \"#utility.yul\":7902:7913   */\n      0x00\n        /* \"#utility.yul\":7936:7942   */\n      dup3\n        /* \"#utility.yul\":7931:7934   */\n      dup3\n        /* \"#utility.yul\":7924:7943   */\n      mstore\n        /* \"#utility.yul\":7976:7980   */\n      0x20\n        /* \"#utility.yul\":7971:7974   */\n      dup3\n        /* \"#utility.yul\":7967:7981   */\n      add\n        /* \"#utility.yul\":7952:7981   */\n      swap1\n      pop\n        /* \"#utility.yul\":7818:7987   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7993:8222   */\n    tag_225:\n        /* \"#utility.yul\":8133:8167   */\n      0x5361666545524332303a204552433230206f7065726174696f6e20646964206e\n        /* \"#utility.yul\":8129:8130   */\n      0x00\n        /* \"#utility.yul\":8121:8127   */\n      dup3\n        /* \"#utility.yul\":8117:8131   */\n      add\n        /* \"#utility.yul\":8110:8168   */\n      mstore\n        /* \"#utility.yul\":8202:8214   */\n      0x6f74207375636365656400000000000000000000000000000000000000000000\n        /* \"#utility.yul\":8197:8199   */\n      0x20\n        /* \"#utility.yul\":8189:8195   */\n      dup3\n        /* \"#utility.yul\":8185:8200   */\n      add\n        /* \"#utility.yul\":8178:8215   */\n      mstore\n        /* \"#utility.yul\":7993:8222   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8228:8594   */\n    tag_226:\n        /* \"#utility.yul\":8370:8373   */\n      0x00\n        /* \"#utility.yul\":8391:8458   */\n      tag_344\n        /* \"#utility.yul\":8455:8457   */\n      0x2a\n        /* \"#utility.yul\":8450:8453   */\n      dup4\n        /* \"#utility.yul\":8391:8458   */\n      tag_224\n      jump\t// in\n    tag_344:\n        /* \"#utility.yul\":8384:8458   */\n      swap2\n      pop\n        /* \"#utility.yul\":8467:8560   */\n      tag_345\n        /* \"#utility.yul\":8556:8559   */\n      dup3\n        /* \"#utility.yul\":8467:8560   */\n      tag_225\n      jump\t// in\n    tag_345:\n        /* \"#utility.yul\":8585:8587   */\n      0x40\n        /* \"#utility.yul\":8580:8583   */\n      dup3\n        /* \"#utility.yul\":8576:8588   */\n      add\n        /* \"#utility.yul\":8569:8588   */\n      swap1\n      pop\n        /* \"#utility.yul\":8228:8594   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8600:9019   */\n    tag_168:\n        /* \"#utility.yul\":8766:8770   */\n      0x00\n        /* \"#utility.yul\":8804:8806   */\n      0x20\n        /* \"#utility.yul\":8793:8802   */\n      dup3\n        /* \"#utility.yul\":8789:8807   */\n      add\n        /* \"#utility.yul\":8781:8807   */\n      swap1\n      pop\n        /* \"#utility.yul\":8853:8862   */\n      dup2\n        /* \"#utility.yul\":8847:8851   */\n      dup2\n        /* \"#utility.yul\":8843:8863   */\n      sub\n        /* \"#utility.yul\":8839:8840   */\n      0x00\n        /* \"#utility.yul\":8828:8837   */\n      dup4\n        /* \"#utility.yul\":8824:8841   */\n      add\n        /* \"#utility.yul\":8817:8864   */\n      mstore\n        /* \"#utility.yul\":8881:9012   */\n      tag_347\n        /* \"#utility.yul\":9007:9011   */\n      dup2\n        /* \"#utility.yul\":8881:9012   */\n      tag_226\n      jump\t// in\n    tag_347:\n        /* \"#utility.yul\":8873:9012   */\n      swap1\n      pop\n        /* \"#utility.yul\":8600:9019   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9025:9250   */\n    tag_227:\n        /* \"#utility.yul\":9165:9199   */\n      0x416464726573733a20696e73756666696369656e742062616c616e636520666f\n        /* \"#utility.yul\":9161:9162   */\n      0x00\n        /* \"#utility.yul\":9153:9159   */\n      dup3\n        /* \"#utility.yul\":9149:9163   */\n      add\n        /* \"#utility.yul\":9142:9200   */\n      mstore\n        /* \"#utility.yul\":9234:9242   */\n      0x722063616c6c0000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":9229:9231   */\n      0x20\n        /* \"#utility.yul\":9221:9227   */\n      dup3\n        /* \"#utility.yul\":9217:9232   */\n      add\n        /* \"#utility.yul\":9210:9243   */\n      mstore\n        /* \"#utility.yul\":9025:9250   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9256:9622   */\n    tag_228:\n        /* \"#utility.yul\":9398:9401   */\n      0x00\n        /* \"#utility.yul\":9419:9486   */\n      tag_350\n        /* \"#utility.yul\":9483:9485   */\n      0x26\n        /* \"#utility.yul\":9478:9481   */\n      dup4\n        /* \"#utility.yul\":9419:9486   */\n      tag_224\n      jump\t// in\n    tag_350:\n        /* \"#utility.yul\":9412:9486   */\n      swap2\n      pop\n        /* \"#utility.yul\":9495:9588   */\n      tag_351\n        /* \"#utility.yul\":9584:9587   */\n      dup3\n        /* \"#utility.yul\":9495:9588   */\n      tag_227\n      jump\t// in\n    tag_351:\n        /* \"#utility.yul\":9613:9615   */\n      0x40\n        /* \"#utility.yul\":9608:9611   */\n      dup3\n        /* \"#utility.yul\":9604:9616   */\n      add\n        /* \"#utility.yul\":9597:9616   */\n      swap1\n      pop\n        /* \"#utility.yul\":9256:9622   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9628:10047   */\n    tag_175:\n        /* \"#utility.yul\":9794:9798   */\n      0x00\n        /* \"#utility.yul\":9832:9834   */\n      0x20\n        /* \"#utility.yul\":9821:9830   */\n      dup3\n        /* \"#utility.yul\":9817:9835   */\n      add\n        /* \"#utility.yul\":9809:9835   */\n      swap1\n      pop\n        /* \"#utility.yul\":9881:9890   */\n      dup2\n        /* \"#utility.yul\":9875:9879   */\n      dup2\n        /* \"#utility.yul\":9871:9891   */\n      sub\n        /* \"#utility.yul\":9867:9868   */\n      0x00\n        /* \"#utility.yul\":9856:9865   */\n      dup4\n        /* \"#utility.yul\":9852:9869   */\n      add\n        /* \"#utility.yul\":9845:9892   */\n      mstore\n        /* \"#utility.yul\":9909:10040   */\n      tag_353\n        /* \"#utility.yul\":10035:10039   */\n      dup2\n        /* \"#utility.yul\":9909:10040   */\n      tag_228\n      jump\t// in\n    tag_353:\n        /* \"#utility.yul\":9901:10040   */\n      swap1\n      pop\n        /* \"#utility.yul\":9628:10047   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10053:10151   */\n    tag_229:\n        /* \"#utility.yul\":10104:10110   */\n      0x00\n        /* \"#utility.yul\":10138:10143   */\n      dup2\n        /* \"#utility.yul\":10132:10144   */\n      mload\n        /* \"#utility.yul\":10122:10144   */\n      swap1\n      pop\n        /* \"#utility.yul\":10053:10151   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10157:10304   */\n    tag_230:\n        /* \"#utility.yul\":10258:10269   */\n      0x00\n        /* \"#utility.yul\":10295:10298   */\n      dup2\n        /* \"#utility.yul\":10280:10298   */\n      swap1\n      pop\n        /* \"#utility.yul\":10157:10304   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10310:10617   */\n    tag_231:\n        /* \"#utility.yul\":10378:10379   */\n      0x00\n        /* \"#utility.yul\":10388:10501   */\n    tag_357:\n        /* \"#utility.yul\":10402:10408   */\n      dup4\n        /* \"#utility.yul\":10399:10400   */\n      dup2\n        /* \"#utility.yul\":10396:10409   */\n      lt\n        /* \"#utility.yul\":10388:10501   */\n      iszero\n      tag_359\n      jumpi\n        /* \"#utility.yul\":10487:10488   */\n      dup1\n        /* \"#utility.yul\":10482:10485   */\n      dup3\n        /* \"#utility.yul\":10478:10489   */\n      add\n        /* \"#utility.yul\":10472:10490   */\n      mload\n        /* \"#utility.yul\":10468:10469   */\n      dup2\n        /* \"#utility.yul\":10463:10466   */\n      dup5\n        /* \"#utility.yul\":10459:10470   */\n      add\n        /* \"#utility.yul\":10452:10491   */\n      mstore\n        /* \"#utility.yul\":10424:10426   */\n      0x20\n        /* \"#utility.yul\":10421:10422   */\n      dup2\n        /* \"#utility.yul\":10417:10427   */\n      add\n        /* \"#utility.yul\":10412:10427   */\n      swap1\n      pop\n        /* \"#utility.yul\":10388:10501   */\n      jump(tag_357)\n    tag_359:\n        /* \"#utility.yul\":10519:10525   */\n      dup4\n        /* \"#utility.yul\":10516:10517   */\n      dup2\n        /* \"#utility.yul\":10513:10526   */\n      gt\n        /* \"#utility.yul\":10510:10611   */\n      iszero\n      tag_360\n      jumpi\n        /* \"#utility.yul\":10599:10600   */\n      0x00\n        /* \"#utility.yul\":10590:10596   */\n      dup5\n        /* \"#utility.yul\":10585:10588   */\n      dup5\n        /* \"#utility.yul\":10581:10597   */\n      add\n        /* \"#utility.yul\":10574:10601   */\n      mstore\n        /* \"#utility.yul\":10510:10611   */\n    tag_360:\n        /* \"#utility.yul\":10359:10617   */\n      pop\n        /* \"#utility.yul\":10310:10617   */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10623:10996   */\n    tag_232:\n        /* \"#utility.yul\":10727:10730   */\n      0x00\n        /* \"#utility.yul\":10755:10793   */\n      tag_362\n        /* \"#utility.yul\":10787:10792   */\n      dup3\n        /* \"#utility.yul\":10755:10793   */\n      tag_229\n      jump\t// in\n    tag_362:\n        /* \"#utility.yul\":10809:10897   */\n      tag_363\n        /* \"#utility.yul\":10890:10896   */\n      dup2\n        /* \"#utility.yul\":10885:10888   */\n      dup6\n        /* \"#utility.yul\":10809:10897   */\n      tag_230\n      jump\t// in\n    tag_363:\n        /* \"#utility.yul\":10802:10897   */\n      swap4\n      pop\n        /* \"#utility.yul\":10906:10958   */\n      tag_364\n        /* \"#utility.yul\":10951:10957   */\n      dup2\n        /* \"#utility.yul\":10946:10949   */\n      dup6\n        /* \"#utility.yul\":10939:10943   */\n      0x20\n        /* \"#utility.yul\":10932:10937   */\n      dup7\n        /* \"#utility.yul\":10928:10944   */\n      add\n        /* \"#utility.yul\":10906:10958   */\n      tag_231\n      jump\t// in\n    tag_364:\n        /* \"#utility.yul\":10983:10989   */\n      dup1\n        /* \"#utility.yul\":10978:10981   */\n      dup5\n        /* \"#utility.yul\":10974:10990   */\n      add\n        /* \"#utility.yul\":10967:10990   */\n      swap2\n      pop\n        /* \"#utility.yul\":10731:10996   */\n      pop\n        /* \"#utility.yul\":10623:10996   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11002:11273   */\n    tag_177:\n        /* \"#utility.yul\":11132:11135   */\n      0x00\n        /* \"#utility.yul\":11154:11247   */\n      tag_366\n        /* \"#utility.yul\":11243:11246   */\n      dup3\n        /* \"#utility.yul\":11234:11240   */\n      dup5\n        /* \"#utility.yul\":11154:11247   */\n      tag_232\n      jump\t// in\n    tag_366:\n        /* \"#utility.yul\":11147:11247   */\n      swap2\n      pop\n        /* \"#utility.yul\":11264:11267   */\n      dup2\n        /* \"#utility.yul\":11257:11267   */\n      swap1\n      pop\n        /* \"#utility.yul\":11002:11273   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11279:11458   */\n    tag_233:\n        /* \"#utility.yul\":11419:11450   */\n      0x416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000\n        /* \"#utility.yul\":11415:11416   */\n      0x00\n        /* \"#utility.yul\":11407:11413   */\n      dup3\n        /* \"#utility.yul\":11403:11417   */\n      add\n        /* \"#utility.yul\":11396:11451   */\n      mstore\n        /* \"#utility.yul\":11279:11458   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11464:11830   */\n    tag_234:\n        /* \"#utility.yul\":11606:11609   */\n      0x00\n        /* \"#utility.yul\":11627:11694   */\n      tag_369\n        /* \"#utility.yul\":11691:11693   */\n      0x1d\n        /* \"#utility.yul\":11686:11689   */\n      dup4\n        /* \"#utility.yul\":11627:11694   */\n      tag_224\n      jump\t// in\n    tag_369:\n        /* \"#utility.yul\":11620:11694   */\n      swap2\n      pop\n        /* \"#utility.yul\":11703:11796   */\n      tag_370\n        /* \"#utility.yul\":11792:11795   */\n      dup3\n        /* \"#utility.yul\":11703:11796   */\n      tag_233\n      jump\t// in\n    tag_370:\n        /* \"#utility.yul\":11821:11823   */\n      0x20\n        /* \"#utility.yul\":11816:11819   */\n      dup3\n        /* \"#utility.yul\":11812:11824   */\n      add\n        /* \"#utility.yul\":11805:11824   */\n      swap1\n      pop\n        /* \"#utility.yul\":11464:11830   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11836:12255   */\n    tag_190:\n        /* \"#utility.yul\":12002:12006   */\n      0x00\n        /* \"#utility.yul\":12040:12042   */\n      0x20\n        /* \"#utility.yul\":12029:12038   */\n      dup3\n        /* \"#utility.yul\":12025:12043   */\n      add\n        /* \"#utility.yul\":12017:12043   */\n      swap1\n      pop\n        /* \"#utility.yul\":12089:12098   */\n      dup2\n        /* \"#utility.yul\":12083:12087   */\n      dup2\n        /* \"#utility.yul\":12079:12099   */\n      sub\n        /* \"#utility.yul\":12075:12076   */\n      0x00\n        /* \"#utility.yul\":12064:12073   */\n      dup4\n        /* \"#utility.yul\":12060:12077   */\n      add\n        /* \"#utility.yul\":12053:12100   */\n      mstore\n        /* \"#utility.yul\":12117:12248   */\n      tag_372\n        /* \"#utility.yul\":12243:12247   */\n      dup2\n        /* \"#utility.yul\":12117:12248   */\n      tag_234\n      jump\t// in\n    tag_372:\n        /* \"#utility.yul\":12109:12248   */\n      swap1\n      pop\n        /* \"#utility.yul\":11836:12255   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":12261:12360   */\n    tag_235:\n        /* \"#utility.yul\":12313:12319   */\n      0x00\n        /* \"#utility.yul\":12347:12352   */\n      dup2\n        /* \"#utility.yul\":12341:12353   */\n      mload\n        /* \"#utility.yul\":12331:12353   */\n      swap1\n      pop\n        /* \"#utility.yul\":12261:12360   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":12366:12468   */\n    tag_236:\n        /* \"#utility.yul\":12407:12413   */\n      0x00\n        /* \"#utility.yul\":12458:12460   */\n      0x1f\n        /* \"#utility.yul\":12454:12461   */\n      not\n        /* \"#utility.yul\":12449:12451   */\n      0x1f\n        /* \"#utility.yul\":12442:12447   */\n      dup4\n        /* \"#utility.yul\":12438:12452   */\n      add\n        /* \"#utility.yul\":12434:12462   */\n      and\n        /* \"#utility.yul\":12424:12462   */\n      swap1\n      pop\n        /* \"#utility.yul\":12366:12468   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":12474:12838   */\n    tag_237:\n        /* \"#utility.yul\":12562:12565   */\n      0x00\n        /* \"#utility.yul\":12590:12629   */\n      tag_376\n        /* \"#utility.yul\":12623:12628   */\n      dup3\n        /* \"#utility.yul\":12590:12629   */\n      tag_235\n      jump\t// in\n    tag_376:\n        /* \"#utility.yul\":12645:12716   */\n      tag_377\n        /* \"#utility.yul\":12709:12715   */\n      dup2\n        /* \"#utility.yul\":12704:12707   */\n      dup6\n        /* \"#utility.yul\":12645:12716   */\n      tag_224\n      jump\t// in\n    tag_377:\n        /* \"#utility.yul\":12638:12716   */\n      swap4\n      pop\n        /* \"#utility.yul\":12725:12777   */\n      tag_378\n        /* \"#utility.yul\":12770:12776   */\n      dup2\n        /* \"#utility.yul\":12765:12768   */\n      dup6\n        /* \"#utility.yul\":12758:12762   */\n      0x20\n        /* \"#utility.yul\":12751:12756   */\n      dup7\n        /* \"#utility.yul\":12747:12763   */\n      add\n        /* \"#utility.yul\":12725:12777   */\n      tag_231\n      jump\t// in\n    tag_378:\n        /* \"#utility.yul\":12802:12831   */\n      tag_379\n        /* \"#utility.yul\":12824:12830   */\n      dup2\n        /* \"#utility.yul\":12802:12831   */\n      tag_236\n      jump\t// in\n    tag_379:\n        /* \"#utility.yul\":12797:12800   */\n      dup5\n        /* \"#utility.yul\":12793:12832   */\n      add\n        /* \"#utility.yul\":12786:12832   */\n      swap2\n      pop\n        /* \"#utility.yul\":12566:12838   */\n      pop\n        /* \"#utility.yul\":12474:12838   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":12844:13157   */\n    tag_199:\n        /* \"#utility.yul\":12957:12961   */\n      0x00\n        /* \"#utility.yul\":12995:12997   */\n      0x20\n        /* \"#utility.yul\":12984:12993   */\n      dup3\n        /* \"#utility.yul\":12980:12998   */\n      add\n        /* \"#utility.yul\":12972:12998   */\n      swap1\n      pop\n        /* \"#utility.yul\":13044:13053   */\n      dup2\n        /* \"#utility.yul\":13038:13042   */\n      dup2\n        /* \"#utility.yul\":13034:13054   */\n      sub\n        /* \"#utility.yul\":13030:13031   */\n      0x00\n        /* \"#utility.yul\":13019:13028   */\n      dup4\n        /* \"#utility.yul\":13015:13032   */\n      add\n        /* \"#utility.yul\":13008:13055   */\n      mstore\n        /* \"#utility.yul\":13072:13150   */\n      tag_381\n        /* \"#utility.yul\":13145:13149   */\n      dup2\n        /* \"#utility.yul\":13136:13142   */\n      dup5\n        /* \"#utility.yul\":13072:13150   */\n      tag_237\n      jump\t// in\n    tag_381:\n        /* \"#utility.yul\":13064:13150   */\n      swap1\n      pop\n        /* \"#utility.yul\":12844:13157   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n\n    auxdata: 0xa2646970667358221220fb40853da6b16a3af4af5e68d4c9402a880d0e5f80a99f7530f6e39845aad83c64736f6c63430008090033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"@_50": {
									"entryPoint": null,
									"id": 50,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_decode_t_address_fromMemory": {
									"entryPoint": 249,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_uint256_fromMemory": {
									"entryPoint": 308,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_addresst_uint256_fromMemory": {
									"entryPoint": 331,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"allocate_unbounded": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"cleanup_t_address": {
									"entryPoint": 203,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint160": {
									"entryPoint": 171,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint256": {
									"entryPoint": 272,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
									"entryPoint": 166,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"validator_revert_t_address": {
									"entryPoint": 223,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_uint256": {
									"entryPoint": 282,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:1715:20",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "47:35:20",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "57:19:20",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "73:2:20",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "67:5:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "67:9:20"
															},
															"variableNames": [
																{
																	"name": "memPtr",
																	"nodeType": "YulIdentifier",
																	"src": "57:6:20"
																}
															]
														}
													]
												},
												"name": "allocate_unbounded",
												"nodeType": "YulFunctionDefinition",
												"returnVariables": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "40:6:20",
														"type": ""
													}
												],
												"src": "7:75:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "177:28:20",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "194:1:20",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "197:1:20",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "187:6:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "187:12:20"
															},
															"nodeType": "YulExpressionStatement",
															"src": "187:12:20"
														}
													]
												},
												"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
												"nodeType": "YulFunctionDefinition",
												"src": "88:117:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "300:28:20",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "317:1:20",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "320:1:20",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "310:6:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "310:12:20"
															},
															"nodeType": "YulExpressionStatement",
															"src": "310:12:20"
														}
													]
												},
												"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
												"nodeType": "YulFunctionDefinition",
												"src": "211:117:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "379:81:20",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "389:65:20",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "404:5:20"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "411:42:20",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "400:3:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "400:54:20"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "389:7:20"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint160",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "361:5:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "371:7:20",
														"type": ""
													}
												],
												"src": "334:126:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "511:51:20",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "521:35:20",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "550:5:20"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint160",
																	"nodeType": "YulIdentifier",
																	"src": "532:17:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "532:24:20"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "521:7:20"
																}
															]
														}
													]
												},
												"name": "cleanup_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "493:5:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "503:7:20",
														"type": ""
													}
												],
												"src": "466:96:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "611:79:20",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "668:16:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "677:1:20",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "680:1:20",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "670:6:20"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "670:12:20"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "670:12:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "634:5:20"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "659:5:20"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_address",
																					"nodeType": "YulIdentifier",
																					"src": "641:17:20"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "641:24:20"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "631:2:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "631:35:20"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "624:6:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "624:43:20"
															},
															"nodeType": "YulIf",
															"src": "621:63:20"
														}
													]
												},
												"name": "validator_revert_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "604:5:20",
														"type": ""
													}
												],
												"src": "568:122:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "759:80:20",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "769:22:20",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "784:6:20"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "778:5:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "778:13:20"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "769:5:20"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "827:5:20"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "800:26:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "800:33:20"
															},
															"nodeType": "YulExpressionStatement",
															"src": "800:33:20"
														}
													]
												},
												"name": "abi_decode_t_address_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "737:6:20",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "745:3:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "753:5:20",
														"type": ""
													}
												],
												"src": "696:143:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "890:32:20",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "900:16:20",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "911:5:20"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "900:7:20"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "872:5:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "882:7:20",
														"type": ""
													}
												],
												"src": "845:77:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "971:79:20",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1028:16:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1037:1:20",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1040:1:20",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1030:6:20"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1030:12:20"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1030:12:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "994:5:20"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "1019:5:20"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_uint256",
																					"nodeType": "YulIdentifier",
																					"src": "1001:17:20"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1001:24:20"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "991:2:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "991:35:20"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "984:6:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "984:43:20"
															},
															"nodeType": "YulIf",
															"src": "981:63:20"
														}
													]
												},
												"name": "validator_revert_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "964:5:20",
														"type": ""
													}
												],
												"src": "928:122:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1119:80:20",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1129:22:20",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "1144:6:20"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1138:5:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "1138:13:20"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "1129:5:20"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "1187:5:20"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "1160:26:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "1160:33:20"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1160:33:20"
														}
													]
												},
												"name": "abi_decode_t_uint256_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "1097:6:20",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "1105:3:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1113:5:20",
														"type": ""
													}
												],
												"src": "1056:143:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1299:413:20",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1345:83:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "1347:77:20"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1347:79:20"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1347:79:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1320:7:20"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1329:9:20"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1316:3:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1316:23:20"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1341:2:20",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1312:3:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "1312:32:20"
															},
															"nodeType": "YulIf",
															"src": "1309:119:20"
														},
														{
															"nodeType": "YulBlock",
															"src": "1438:128:20",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "1453:15:20",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1467:1:20",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "1457:6:20",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "1482:74:20",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "1528:9:20"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "1539:6:20"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1524:3:20"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1524:22:20"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1548:7:20"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address_fromMemory",
																			"nodeType": "YulIdentifier",
																			"src": "1492:31:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1492:64:20"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "1482:6:20"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "1576:129:20",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "1591:16:20",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1605:2:20",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "1595:6:20",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "1621:74:20",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "1667:9:20"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "1678:6:20"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1663:3:20"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1663:22:20"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1687:7:20"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256_fromMemory",
																			"nodeType": "YulIdentifier",
																			"src": "1631:31:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1631:64:20"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nodeType": "YulIdentifier",
																			"src": "1621:6:20"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1261:9:20",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1272:7:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1284:6:20",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1292:6:20",
														"type": ""
													}
												],
												"src": "1205:507:20"
											}
										]
									},
									"contents": "{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_addresst_uint256_fromMemory(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n}\n",
									"id": 20,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"linkReferences": {},
							"object": "60806040523480156200001157600080fd5b50604051620028323803806200283283398181016040528101906200003791906200014b565b81600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806000806101000a81548166ffffffffffffff021916908366ffffffffffffff160217905550505062000192565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000d882620000ab565b9050919050565b620000ea81620000cb565b8114620000f657600080fd5b50565b6000815190506200010a81620000df565b92915050565b6000819050919050565b620001258162000110565b81146200013157600080fd5b50565b60008151905062000145816200011a565b92915050565b60008060408385031215620001655762000164620000a6565b5b60006200017585828601620000f9565b9250506020620001888582860162000134565b9150509250929050565b61269080620001a26000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c806398c50fdd1161007157806398c50fdd1461014e578063b8d7f9801461017e578063c0102de4146101ae578063d14485a2146101ca578063df0905c6146101e6578063fc993ea814610216576100a9565b806325ac3a73146100ae5780632895cb7b146100ca57806359de2f60146100e6578063762e9d301461011657806377bcd8a614610132575b600080fd5b6100c860048036038101906100c39190611f15565b610246565b005b6100e460048036038101906100df9190611f15565b6104c3565b005b61010060048036038101906100fb9190611fd6565b610a64565b60405161010d9190612031565b60405180910390f35b610130600480360381019061012b9190611f15565b610a93565b005b61014c60048036038101906101479190611f15565b610dea565b005b61016860048036038101906101639190612094565b6111c3565b60405161017591906120e3565b60405180910390f35b61019860048036038101906101939190611fd6565b6112e0565b6040516101a59190612031565b60405180910390f35b6101c860048036038101906101c39190611f15565b61130f565b005b6101e460048036038101906101df91906120fe565b6115b7565b005b61020060048036038101906101fb9190611fd6565b61197e565b60405161020d9190612031565b60405180910390f35b610230600480360381019061022b9190611fd6565b6119ad565b60405161023d9190612031565b60405180910390f35b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008367ffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055156102ef576040517f4232716900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff1661030f826119dc565b73ffffffffffffffffffffffffffffffffffffffff161461035c576040517fd7c498bf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600260008367ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff169050610408333083600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611a30909392919063ffffffff16565b6001600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008467ffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506003600260008467ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160006101000a81548160ff021916908360ff1602179055505050565b60006104ce82611ab9565b905060006104db836119dc565b90508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461051557600080fd5b60001515600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008567ffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151461058d57600080fd5b60001515600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008567ffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151461060557600080fd5b8173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461063d57600080fd5b6000600260008567ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000610724600260008767ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060010160009054906101000a90046fffffffffffffffffffffffffffffffff16600260008867ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160109054906101000a90046fffffffffffffffffffffffffffffffff166111c3565b9050600061073182611b0d565b905061075e30828573ffffffffffffffffffffffffffffffffffffffff16611bb49092919063ffffffff16565b61079485828461076e9190612180565b8573ffffffffffffffffffffffffffffffffffffffff16611bb49092919063ffffffff16565b6001600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008867ffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506001600260008867ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff1660ff161415610a185760001515600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008867ffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515146108c257600080fd5b6000600260008867ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160109054906101000a90046fffffffffffffffffffffffffffffffff16600260008967ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060010160009054906101000a90046fffffffffffffffffffffffffffffffff1661095c91906121b4565b6fffffffffffffffffffffffffffffffff1690506109a361097c88611ab9565b828673ffffffffffffffffffffffffffffffffffffffff16611bb49092919063ffffffff16565b6001600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008967ffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550505b6005600260008867ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160006101000a81548160ff021916908360ff160217905550505050505050565b60046020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b6000600260008367ffffffffffffffff1667ffffffffffffffff168152602001908152602001600020604051806101000160405290816000820160009054906101000a900460ff1660ff1660ff1681526020016000820160019054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016000820160099054906101000a900466ffffffffffffff1666ffffffffffffff1666ffffffffffffff1681526020016000820160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505090506001816000015160ff1614610cf257600080fd5b60008160a001519050610d393330610d12856080015186606001516111c3565b8473ffffffffffffffffffffffffffffffffffffffff16611a30909392919063ffffffff16565b33600260008567ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060028060008567ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160006101000a81548160ff021916908360ff160217905550505050565b6000610df5826119dc565b90508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610e2f57600080fd5b600360008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008367ffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610ea057600080fd5b60001515600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008467ffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514610f1857600080fd5b6000600260008467ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600260008567ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160109054906101000a90046fffffffffffffffffffffffffffffffff16600260008667ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060010160009054906101000a90046fffffffffffffffffffffffffffffffff1661100191906121b4565b6fffffffffffffffffffffffffffffffff16905060006110ad600260008767ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060010160009054906101000a90046fffffffffffffffffffffffffffffffff16600260008867ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160109054906101000a90046fffffffffffffffffffffffffffffffff166111c3565b905060006110ba83611b0d565b90506110e730828673ffffffffffffffffffffffffffffffffffffffff16611bb49092919063ffffffff16565b61111d8582856110f79190612180565b8673ffffffffffffffffffffffffffffffffffffffff16611bb49092919063ffffffff16565b61114885838673ffffffffffffffffffffffffffffffffffffffff16611bb49092919063ffffffff16565b6001600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008867ffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550505050505050565b60008082846111d291906121b4565b6fffffffffffffffffffffffffffffffff16905068056bc75e2d6310000081101580156112075750683635c9adc5dea0000081105b1561122d57606460328261121b91906121fe565b6112259190612287565b9150506112da565b683635c9adc5dea00000811015801561124f575069021e19e0c9bab240000081105b1561127557606460288261126391906121fe565b61126d9190612287565b9150506112da565b69021e19e0c9bab24000008111156112a857606460198261129691906121fe565b6112a09190612287565b9150506112da565b6040517fe008b5f900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b92915050565b60066020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b600061131a82611ab9565b90508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611381576040517f472e017e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6003600260008467ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff1660ff16146113f5576040517fde4461cd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600260008467ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160109054906101000a90046fffffffffffffffffffffffffffffffff1690506000600260008567ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060010160009054906101000a90046fffffffffffffffffffffffffffffffff16905060006114b3828461149c91906121b4565b6fffffffffffffffffffffffffffffffff16611b0d565b90506115023082600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611bb49092919063ffffffff16565b61156c8482856fffffffffffffffffffffffffffffffff166115249190612180565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611bb49092919063ffffffff16565b6004600260008767ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160006101000a81548160ff021916908360ff1602179055505050505050565b600081836115c591906121b4565b6fffffffffffffffffffffffffffffffff16905068056bc75e2d6310000081101561161c576040517fe008b5f900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000604051806101000160405280600160ff168152602001600060079054906101000a900467ffffffffffffffff1667ffffffffffffffff1681526020014266ffffffffffffff168152602001856fffffffffffffffffffffffffffffffff168152602001846fffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff1681526020013073ffffffffffffffffffffffffffffffffffffffff16815250905080600260008060079054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060408201518160000160096101000a81548166ffffffffffffff021916908366ffffffffffffff16021790555060608201518160000160106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060808201518160010160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060a08201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060c08201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060e08201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555090505061192a3330848873ffffffffffffffffffffffffffffffffffffffff16611a30909392919063ffffffff16565b6000600781819054906101000a900467ffffffffffffffff1680929190611950906122b8565b91906101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550505050505050565b60056020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b60076020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b6000600260008367ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b611ab3846323b872dd60e01b858585604051602401611a51939291906122f8565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611c3a565b50505050565b6000600260008367ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600068056bc75e2d631000008210158015611b305750683635c9adc5dea0000082105b15611b4957606482611b429190612287565b9050611baf565b683635c9adc5dea000008210158015611b6b575069021e19e0c9bab240000082105b15611b845760c882611b7d9190612287565b9050611baf565b69021e19e0c9bab24000008210611baa5761019082611ba39190612287565b9050611baf565b600090505b919050565b611c358363a9059cbb60e01b8484604051602401611bd392919061232f565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611c3a565b505050565b6000611c9c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16611d029092919063ffffffff16565b9050600081511480611cbe575080806020019051810190611cbd9190612384565b5b611cfd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cf490612434565b60405180910390fd5b505050565b6060611d118484600085611d1a565b90509392505050565b606082471015611d5f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d56906124c6565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051611d889190612560565b60006040518083038185875af1925050503d8060008114611dc5576040519150601f19603f3d011682016040523d82523d6000602084013e611dca565b606091505b5091509150611ddb87838387611de7565b92505050949350505050565b60608315611e4a57600083511415611e4257611e0285611e5d565b611e41576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e38906125c3565b60405180910390fd5b5b829050611e55565b611e548383611e80565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600082511115611e935781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ec79190612638565b60405180910390fd5b600080fd5b600067ffffffffffffffff82169050919050565b611ef281611ed5565b8114611efd57600080fd5b50565b600081359050611f0f81611ee9565b92915050565b600060208284031215611f2b57611f2a611ed0565b5b6000611f3984828501611f00565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611f6d82611f42565b9050919050565b611f7d81611f62565b8114611f8857600080fd5b50565b600081359050611f9a81611f74565b92915050565b6000819050919050565b611fb381611fa0565b8114611fbe57600080fd5b50565b600081359050611fd081611faa565b92915050565b60008060408385031215611fed57611fec611ed0565b5b6000611ffb85828601611f8b565b925050602061200c85828601611fc1565b9150509250929050565b60008115159050919050565b61202b81612016565b82525050565b60006020820190506120466000830184612022565b92915050565b60006fffffffffffffffffffffffffffffffff82169050919050565b6120718161204c565b811461207c57600080fd5b50565b60008135905061208e81612068565b92915050565b600080604083850312156120ab576120aa611ed0565b5b60006120b98582860161207f565b92505060206120ca8582860161207f565b9150509250929050565b6120dd81611fa0565b82525050565b60006020820190506120f860008301846120d4565b92915050565b60008060006060848603121561211757612116611ed0565b5b600061212586828701611f8b565b93505060206121368682870161207f565b92505060406121478682870161207f565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061218b82611fa0565b915061219683611fa0565b9250828210156121a9576121a8612151565b5b828203905092915050565b60006121bf8261204c565b91506121ca8361204c565b9250816fffffffffffffffffffffffffffffffff04831182151516156121f3576121f2612151565b5b828202905092915050565b600061220982611fa0565b915061221483611fa0565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561224d5761224c612151565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061229282611fa0565b915061229d83611fa0565b9250826122ad576122ac612258565b5b828204905092915050565b60006122c382611ed5565b915067ffffffffffffffff8214156122de576122dd612151565b5b600182019050919050565b6122f281611f62565b82525050565b600060608201905061230d60008301866122e9565b61231a60208301856122e9565b61232760408301846120d4565b949350505050565b600060408201905061234460008301856122e9565b61235160208301846120d4565b9392505050565b61236181612016565b811461236c57600080fd5b50565b60008151905061237e81612358565b92915050565b60006020828403121561239a57612399611ed0565b5b60006123a88482850161236f565b91505092915050565b600082825260208201905092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b600061241e602a836123b1565b9150612429826123c2565b604082019050919050565b6000602082019050818103600083015261244d81612411565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b60006124b06026836123b1565b91506124bb82612454565b604082019050919050565b600060208201905081810360008301526124df816124a3565b9050919050565b600081519050919050565b600081905092915050565b60005b8381101561251a5780820151818401526020810190506124ff565b83811115612529576000848401525b50505050565b600061253a826124e6565b61254481856124f1565b93506125548185602086016124fc565b80840191505092915050565b600061256c828461252f565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b60006125ad601d836123b1565b91506125b882612577565b602082019050919050565b600060208201905081810360008301526125dc816125a0565b9050919050565b600081519050919050565b6000601f19601f8301169050919050565b600061260a826125e3565b61261481856123b1565b93506126248185602086016124fc565b61262d816125ee565b840191505092915050565b6000602082019050818103600083015261265281846125ff565b90509291505056fea2646970667358221220fb40853da6b16a3af4af5e68d4c9402a880d0e5f80a99f7530f6e39845aad83c64736f6c63430008090033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x2832 CODESIZE SUB DUP1 PUSH3 0x2832 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH3 0x37 SWAP2 SWAP1 PUSH3 0x14B JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH7 0xFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH7 0xFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP POP PUSH3 0x192 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0xD8 DUP3 PUSH3 0xAB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0xEA DUP2 PUSH3 0xCB JUMP JUMPDEST DUP2 EQ PUSH3 0xF6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x10A DUP2 PUSH3 0xDF JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x125 DUP2 PUSH3 0x110 JUMP JUMPDEST DUP2 EQ PUSH3 0x131 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x145 DUP2 PUSH3 0x11A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x165 JUMPI PUSH3 0x164 PUSH3 0xA6 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH3 0x175 DUP6 DUP3 DUP7 ADD PUSH3 0xF9 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH3 0x188 DUP6 DUP3 DUP7 ADD PUSH3 0x134 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x2690 DUP1 PUSH3 0x1A2 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x98C50FDD GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x98C50FDD EQ PUSH2 0x14E JUMPI DUP1 PUSH4 0xB8D7F980 EQ PUSH2 0x17E JUMPI DUP1 PUSH4 0xC0102DE4 EQ PUSH2 0x1AE JUMPI DUP1 PUSH4 0xD14485A2 EQ PUSH2 0x1CA JUMPI DUP1 PUSH4 0xDF0905C6 EQ PUSH2 0x1E6 JUMPI DUP1 PUSH4 0xFC993EA8 EQ PUSH2 0x216 JUMPI PUSH2 0xA9 JUMP JUMPDEST DUP1 PUSH4 0x25AC3A73 EQ PUSH2 0xAE JUMPI DUP1 PUSH4 0x2895CB7B EQ PUSH2 0xCA JUMPI DUP1 PUSH4 0x59DE2F60 EQ PUSH2 0xE6 JUMPI DUP1 PUSH4 0x762E9D30 EQ PUSH2 0x116 JUMPI DUP1 PUSH4 0x77BCD8A6 EQ PUSH2 0x132 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xC8 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xC3 SWAP2 SWAP1 PUSH2 0x1F15 JUMP JUMPDEST PUSH2 0x246 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xE4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xDF SWAP2 SWAP1 PUSH2 0x1F15 JUMP JUMPDEST PUSH2 0x4C3 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x100 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xFB SWAP2 SWAP1 PUSH2 0x1FD6 JUMP JUMPDEST PUSH2 0xA64 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x10D SWAP2 SWAP1 PUSH2 0x2031 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x130 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x12B SWAP2 SWAP1 PUSH2 0x1F15 JUMP JUMPDEST PUSH2 0xA93 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x14C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x147 SWAP2 SWAP1 PUSH2 0x1F15 JUMP JUMPDEST PUSH2 0xDEA JUMP JUMPDEST STOP JUMPDEST PUSH2 0x168 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x163 SWAP2 SWAP1 PUSH2 0x2094 JUMP JUMPDEST PUSH2 0x11C3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x175 SWAP2 SWAP1 PUSH2 0x20E3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x198 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x193 SWAP2 SWAP1 PUSH2 0x1FD6 JUMP JUMPDEST PUSH2 0x12E0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1A5 SWAP2 SWAP1 PUSH2 0x2031 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1C8 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1C3 SWAP2 SWAP1 PUSH2 0x1F15 JUMP JUMPDEST PUSH2 0x130F JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1E4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1DF SWAP2 SWAP1 PUSH2 0x20FE JUMP JUMPDEST PUSH2 0x15B7 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x200 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1FB SWAP2 SWAP1 PUSH2 0x1FD6 JUMP JUMPDEST PUSH2 0x197E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x20D SWAP2 SWAP1 PUSH2 0x2031 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x230 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x22B SWAP2 SWAP1 PUSH2 0x1FD6 JUMP JUMPDEST PUSH2 0x19AD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x23D SWAP2 SWAP1 PUSH2 0x2031 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH1 0x3 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE ISZERO PUSH2 0x2EF JUMPI PUSH1 0x40 MLOAD PUSH32 0x4232716900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x30F DUP3 PUSH2 0x19DC JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x35C JUMPI PUSH1 0x40 MLOAD PUSH32 0xD7C498BF00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x10 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH2 0x408 CALLER ADDRESS DUP4 PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1A30 SWAP1 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x3 PUSH1 0x2 PUSH1 0x0 DUP5 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0xFF AND MUL OR SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4CE DUP3 PUSH2 0x1AB9 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x4DB DUP4 PUSH2 0x19DC JUMP JUMPDEST SWAP1 POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x515 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 ISZERO ISZERO PUSH1 0x3 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP6 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO EQ PUSH2 0x58D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 ISZERO ISZERO PUSH1 0x6 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP6 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO EQ PUSH2 0x605 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x63D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP6 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 PUSH2 0x724 PUSH1 0x2 PUSH1 0x0 DUP8 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x2 PUSH1 0x0 DUP9 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x10 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x11C3 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x731 DUP3 PUSH2 0x1B0D JUMP JUMPDEST SWAP1 POP PUSH2 0x75E ADDRESS DUP3 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1BB4 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x794 DUP6 DUP3 DUP5 PUSH2 0x76E SWAP2 SWAP1 PUSH2 0x2180 JUMP JUMPDEST DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1BB4 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0x6 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP9 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x2 PUSH1 0x0 DUP9 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND EQ ISZERO PUSH2 0xA18 JUMPI PUSH1 0x0 ISZERO ISZERO PUSH1 0x7 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP9 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO EQ PUSH2 0x8C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP9 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x10 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x2 PUSH1 0x0 DUP10 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x95C SWAP2 SWAP1 PUSH2 0x21B4 JUMP JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH2 0x9A3 PUSH2 0x97C DUP9 PUSH2 0x1AB9 JUMP JUMPDEST DUP3 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1BB4 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0x7 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP10 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP POP JUMPDEST PUSH1 0x5 PUSH1 0x2 PUSH1 0x0 DUP9 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0xFF AND MUL OR SWAP1 SSTORE POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x4 PUSH1 0x20 MSTORE DUP2 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP2 POP SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH2 0x100 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP3 ADD PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP3 ADD PUSH1 0x9 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH7 0xFFFFFFFFFFFFFF AND PUSH7 0xFFFFFFFFFFFFFF AND PUSH7 0xFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP3 ADD PUSH1 0x10 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x4 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP POP SWAP1 POP PUSH1 0x1 DUP2 PUSH1 0x0 ADD MLOAD PUSH1 0xFF AND EQ PUSH2 0xCF2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP2 PUSH1 0xA0 ADD MLOAD SWAP1 POP PUSH2 0xD39 CALLER ADDRESS PUSH2 0xD12 DUP6 PUSH1 0x80 ADD MLOAD DUP7 PUSH1 0x60 ADD MLOAD PUSH2 0x11C3 JUMP JUMPDEST DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1A30 SWAP1 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST CALLER PUSH1 0x2 PUSH1 0x0 DUP6 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x4 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x2 DUP1 PUSH1 0x0 DUP6 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0xFF AND MUL OR SWAP1 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xDF5 DUP3 PUSH2 0x19DC JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xE2F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0xEA0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 ISZERO ISZERO PUSH1 0x5 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO EQ PUSH2 0xF18 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP5 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP6 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x10 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x2 PUSH1 0x0 DUP7 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1001 SWAP2 SWAP1 PUSH2 0x21B4 JUMP JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 PUSH2 0x10AD PUSH1 0x2 PUSH1 0x0 DUP8 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x2 PUSH1 0x0 DUP9 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x10 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x11C3 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x10BA DUP4 PUSH2 0x1B0D JUMP JUMPDEST SWAP1 POP PUSH2 0x10E7 ADDRESS DUP3 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1BB4 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x111D DUP6 DUP3 DUP6 PUSH2 0x10F7 SWAP2 SWAP1 PUSH2 0x2180 JUMP JUMPDEST DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1BB4 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x1148 DUP6 DUP4 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1BB4 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0x5 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP9 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 PUSH2 0x11D2 SWAP2 SWAP1 PUSH2 0x21B4 JUMP JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH9 0x56BC75E2D63100000 DUP2 LT ISZERO DUP1 ISZERO PUSH2 0x1207 JUMPI POP PUSH9 0x3635C9ADC5DEA00000 DUP2 LT JUMPDEST ISZERO PUSH2 0x122D JUMPI PUSH1 0x64 PUSH1 0x32 DUP3 PUSH2 0x121B SWAP2 SWAP1 PUSH2 0x21FE JUMP JUMPDEST PUSH2 0x1225 SWAP2 SWAP1 PUSH2 0x2287 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x12DA JUMP JUMPDEST PUSH9 0x3635C9ADC5DEA00000 DUP2 LT ISZERO DUP1 ISZERO PUSH2 0x124F JUMPI POP PUSH10 0x21E19E0C9BAB2400000 DUP2 LT JUMPDEST ISZERO PUSH2 0x1275 JUMPI PUSH1 0x64 PUSH1 0x28 DUP3 PUSH2 0x1263 SWAP2 SWAP1 PUSH2 0x21FE JUMP JUMPDEST PUSH2 0x126D SWAP2 SWAP1 PUSH2 0x2287 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x12DA JUMP JUMPDEST PUSH10 0x21E19E0C9BAB2400000 DUP2 GT ISZERO PUSH2 0x12A8 JUMPI PUSH1 0x64 PUSH1 0x19 DUP3 PUSH2 0x1296 SWAP2 SWAP1 PUSH2 0x21FE JUMP JUMPDEST PUSH2 0x12A0 SWAP2 SWAP1 PUSH2 0x2287 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x12DA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xE008B5F900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x6 PUSH1 0x20 MSTORE DUP2 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP2 POP SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x131A DUP3 PUSH2 0x1AB9 JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1381 JUMPI PUSH1 0x40 MLOAD PUSH32 0x472E017E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x2 PUSH1 0x0 DUP5 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND EQ PUSH2 0x13F5 JUMPI PUSH1 0x40 MLOAD PUSH32 0xDE4461CD00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP5 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x10 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP6 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 PUSH2 0x14B3 DUP3 DUP5 PUSH2 0x149C SWAP2 SWAP1 PUSH2 0x21B4 JUMP JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1B0D JUMP JUMPDEST SWAP1 POP PUSH2 0x1502 ADDRESS DUP3 PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1BB4 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x156C DUP5 DUP3 DUP6 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1524 SWAP2 SWAP1 PUSH2 0x2180 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1BB4 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x4 PUSH1 0x2 PUSH1 0x0 DUP8 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0xFF AND MUL OR SWAP1 SSTORE POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 PUSH2 0x15C5 SWAP2 SWAP1 PUSH2 0x21B4 JUMP JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH9 0x56BC75E2D63100000 DUP2 LT ISZERO PUSH2 0x161C JUMPI PUSH1 0x40 MLOAD PUSH32 0xE008B5F900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH2 0x100 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1 PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x7 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD TIMESTAMP PUSH7 0xFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP SWAP1 POP DUP1 PUSH1 0x2 PUSH1 0x0 DUP1 PUSH1 0x7 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0xFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH8 0xFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x9 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH7 0xFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH7 0xFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x60 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x10 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x80 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0xA0 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0xC0 DUP3 ADD MLOAD DUP2 PUSH1 0x3 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0xE0 DUP3 ADD MLOAD DUP2 PUSH1 0x4 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP SWAP1 POP POP PUSH2 0x192A CALLER ADDRESS DUP5 DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1A30 SWAP1 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 PUSH1 0x7 DUP2 DUP2 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND DUP1 SWAP3 SWAP2 SWAP1 PUSH2 0x1950 SWAP1 PUSH2 0x22B8 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH8 0xFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x5 PUSH1 0x20 MSTORE DUP2 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP2 POP SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x7 PUSH1 0x20 MSTORE DUP2 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP2 POP SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x4 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1AB3 DUP5 PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1A51 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x22F8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0x1C3A JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH9 0x56BC75E2D63100000 DUP3 LT ISZERO DUP1 ISZERO PUSH2 0x1B30 JUMPI POP PUSH9 0x3635C9ADC5DEA00000 DUP3 LT JUMPDEST ISZERO PUSH2 0x1B49 JUMPI PUSH1 0x64 DUP3 PUSH2 0x1B42 SWAP2 SWAP1 PUSH2 0x2287 JUMP JUMPDEST SWAP1 POP PUSH2 0x1BAF JUMP JUMPDEST PUSH9 0x3635C9ADC5DEA00000 DUP3 LT ISZERO DUP1 ISZERO PUSH2 0x1B6B JUMPI POP PUSH10 0x21E19E0C9BAB2400000 DUP3 LT JUMPDEST ISZERO PUSH2 0x1B84 JUMPI PUSH1 0xC8 DUP3 PUSH2 0x1B7D SWAP2 SWAP1 PUSH2 0x2287 JUMP JUMPDEST SWAP1 POP PUSH2 0x1BAF JUMP JUMPDEST PUSH10 0x21E19E0C9BAB2400000 DUP3 LT PUSH2 0x1BAA JUMPI PUSH2 0x190 DUP3 PUSH2 0x1BA3 SWAP2 SWAP1 PUSH2 0x2287 JUMP JUMPDEST SWAP1 POP PUSH2 0x1BAF JUMP JUMPDEST PUSH1 0x0 SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1C35 DUP4 PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1BD3 SWAP3 SWAP2 SWAP1 PUSH2 0x232F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0x1C3A JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C9C DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1D02 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD EQ DUP1 PUSH2 0x1CBE JUMPI POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x1CBD SWAP2 SWAP1 PUSH2 0x2384 JUMP JUMPDEST JUMPDEST PUSH2 0x1CFD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1CF4 SWAP1 PUSH2 0x2434 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1D11 DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x1D1A JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x1D5F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1D56 SWAP1 PUSH2 0x24C6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x1D88 SWAP2 SWAP1 PUSH2 0x2560 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1DC5 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1DCA JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x1DDB DUP8 DUP4 DUP4 DUP8 PUSH2 0x1DE7 JUMP JUMPDEST SWAP3 POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x1E4A JUMPI PUSH1 0x0 DUP4 MLOAD EQ ISZERO PUSH2 0x1E42 JUMPI PUSH2 0x1E02 DUP6 PUSH2 0x1E5D JUMP JUMPDEST PUSH2 0x1E41 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1E38 SWAP1 PUSH2 0x25C3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST DUP3 SWAP1 POP PUSH2 0x1E55 JUMP JUMPDEST PUSH2 0x1E54 DUP4 DUP4 PUSH2 0x1E80 JUMP JUMPDEST JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD GT ISZERO PUSH2 0x1E93 JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1EC7 SWAP2 SWAP1 PUSH2 0x2638 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1EF2 DUP2 PUSH2 0x1ED5 JUMP JUMPDEST DUP2 EQ PUSH2 0x1EFD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1F0F DUP2 PUSH2 0x1EE9 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1F2B JUMPI PUSH2 0x1F2A PUSH2 0x1ED0 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1F39 DUP5 DUP3 DUP6 ADD PUSH2 0x1F00 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1F6D DUP3 PUSH2 0x1F42 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1F7D DUP2 PUSH2 0x1F62 JUMP JUMPDEST DUP2 EQ PUSH2 0x1F88 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1F9A DUP2 PUSH2 0x1F74 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1FB3 DUP2 PUSH2 0x1FA0 JUMP JUMPDEST DUP2 EQ PUSH2 0x1FBE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1FD0 DUP2 PUSH2 0x1FAA JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1FED JUMPI PUSH2 0x1FEC PUSH2 0x1ED0 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1FFB DUP6 DUP3 DUP7 ADD PUSH2 0x1F8B JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x200C DUP6 DUP3 DUP7 ADD PUSH2 0x1FC1 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x202B DUP2 PUSH2 0x2016 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2046 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2022 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2071 DUP2 PUSH2 0x204C JUMP JUMPDEST DUP2 EQ PUSH2 0x207C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x208E DUP2 PUSH2 0x2068 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x20AB JUMPI PUSH2 0x20AA PUSH2 0x1ED0 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x20B9 DUP6 DUP3 DUP7 ADD PUSH2 0x207F JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x20CA DUP6 DUP3 DUP7 ADD PUSH2 0x207F JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x20DD DUP2 PUSH2 0x1FA0 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x20F8 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x20D4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2117 JUMPI PUSH2 0x2116 PUSH2 0x1ED0 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2125 DUP7 DUP3 DUP8 ADD PUSH2 0x1F8B JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x2136 DUP7 DUP3 DUP8 ADD PUSH2 0x207F JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x2147 DUP7 DUP3 DUP8 ADD PUSH2 0x207F JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x218B DUP3 PUSH2 0x1FA0 JUMP JUMPDEST SWAP2 POP PUSH2 0x2196 DUP4 PUSH2 0x1FA0 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 LT ISZERO PUSH2 0x21A9 JUMPI PUSH2 0x21A8 PUSH2 0x2151 JUMP JUMPDEST JUMPDEST DUP3 DUP3 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x21BF DUP3 PUSH2 0x204C JUMP JUMPDEST SWAP2 POP PUSH2 0x21CA DUP4 PUSH2 0x204C JUMP JUMPDEST SWAP3 POP DUP2 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x21F3 JUMPI PUSH2 0x21F2 PUSH2 0x2151 JUMP JUMPDEST JUMPDEST DUP3 DUP3 MUL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2209 DUP3 PUSH2 0x1FA0 JUMP JUMPDEST SWAP2 POP PUSH2 0x2214 DUP4 PUSH2 0x1FA0 JUMP JUMPDEST SWAP3 POP DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x224D JUMPI PUSH2 0x224C PUSH2 0x2151 JUMP JUMPDEST JUMPDEST DUP3 DUP3 MUL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2292 DUP3 PUSH2 0x1FA0 JUMP JUMPDEST SWAP2 POP PUSH2 0x229D DUP4 PUSH2 0x1FA0 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x22AD JUMPI PUSH2 0x22AC PUSH2 0x2258 JUMP JUMPDEST JUMPDEST DUP3 DUP3 DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x22C3 DUP3 PUSH2 0x1ED5 JUMP JUMPDEST SWAP2 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP3 EQ ISZERO PUSH2 0x22DE JUMPI PUSH2 0x22DD PUSH2 0x2151 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x22F2 DUP2 PUSH2 0x1F62 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x230D PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x22E9 JUMP JUMPDEST PUSH2 0x231A PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x22E9 JUMP JUMPDEST PUSH2 0x2327 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x20D4 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x2344 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x22E9 JUMP JUMPDEST PUSH2 0x2351 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x20D4 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x2361 DUP2 PUSH2 0x2016 JUMP JUMPDEST DUP2 EQ PUSH2 0x236C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x237E DUP2 PUSH2 0x2358 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x239A JUMPI PUSH2 0x2399 PUSH2 0x1ED0 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x23A8 DUP5 DUP3 DUP6 ADD PUSH2 0x236F JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F74207375636365656400000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x241E PUSH1 0x2A DUP4 PUSH2 0x23B1 JUMP JUMPDEST SWAP2 POP PUSH2 0x2429 DUP3 PUSH2 0x23C2 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x244D DUP2 PUSH2 0x2411 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x722063616C6C0000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x24B0 PUSH1 0x26 DUP4 PUSH2 0x23B1 JUMP JUMPDEST SWAP2 POP PUSH2 0x24BB DUP3 PUSH2 0x2454 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x24DF DUP2 PUSH2 0x24A3 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x251A JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x24FF JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x2529 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x253A DUP3 PUSH2 0x24E6 JUMP JUMPDEST PUSH2 0x2544 DUP2 DUP6 PUSH2 0x24F1 JUMP JUMPDEST SWAP4 POP PUSH2 0x2554 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x24FC JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x256C DUP3 DUP5 PUSH2 0x252F JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x25AD PUSH1 0x1D DUP4 PUSH2 0x23B1 JUMP JUMPDEST SWAP2 POP PUSH2 0x25B8 DUP3 PUSH2 0x2577 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x25DC DUP2 PUSH2 0x25A0 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x260A DUP3 PUSH2 0x25E3 JUMP JUMPDEST PUSH2 0x2614 DUP2 DUP6 PUSH2 0x23B1 JUMP JUMPDEST SWAP4 POP PUSH2 0x2624 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x24FC JUMP JUMPDEST PUSH2 0x262D DUP2 PUSH2 0x25EE JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2652 DUP2 DUP5 PUSH2 0x25FF JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xFB BLOCKHASH DUP6 RETURNDATASIZE 0xA6 0xB1 PUSH11 0x3AF4AF5E68D4C9402A880D 0xE 0x5F DUP1 0xA9 SWAP16 PUSH22 0x30F6E39845AAD83C64736F6C63430008090033000000 ",
							"sourceMap": "356:7522:1:-:0;;;525:143;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;602:13;589:12;;:26;;;;;;;;;;;;;;;;;;646:13;626:12;;:34;;;;;;;;;;;;;;;;;;525:143;;356:7522;;88:117:20;197:1;194;187:12;334:126;371:7;411:42;404:5;400:54;389:65;;334:126;;;:::o;466:96::-;503:7;532:24;550:5;532:24;:::i;:::-;521:35;;466:96;;;:::o;568:122::-;641:24;659:5;641:24;:::i;:::-;634:5;631:35;621:63;;680:1;677;670:12;621:63;568:122;:::o;696:143::-;753:5;784:6;778:13;769:22;;800:33;827:5;800:33;:::i;:::-;696:143;;;;:::o;845:77::-;882:7;911:5;900:16;;845:77;;;:::o;928:122::-;1001:24;1019:5;1001:24;:::i;:::-;994:5;991:35;981:63;;1040:1;1037;1030:12;981:63;928:122;:::o;1056:143::-;1113:5;1144:6;1138:13;1129:22;;1160:33;1187:5;1160:33;:::i;:::-;1056:143;;;;:::o;1205:507::-;1284:6;1292;1341:2;1329:9;1320:7;1316:23;1312:32;1309:119;;;1347:79;;:::i;:::-;1309:119;1467:1;1492:64;1548:7;1539:6;1528:9;1524:22;1492:64;:::i;:::-;1482:74;;1438:128;1605:2;1631:64;1687:7;1678:6;1667:9;1663:22;1631:64;:::i;:::-;1621:74;;1576:129;1205:507;;;;;:::o;356:7522:1:-;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@Sale_211": {
									"entryPoint": 2707,
									"id": 211,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_callOptionalReturn_2140": {
									"entryPoint": 7226,
									"id": 2140,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_revert_1709": {
									"entryPoint": 7808,
									"id": 1709,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@buy_153": {
									"entryPoint": 5559,
									"id": 153,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@buyerWithdrawAirdorp_360": {
									"entryPoint": 4879,
									"id": 360,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@buyerWithdrawRefund_642": {
									"entryPoint": 1219,
									"id": 642,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@fee_2237": {
									"entryPoint": 6925,
									"id": 2237,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@functionCallWithValue_1534": {
									"entryPoint": 7450,
									"id": 1534,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"@functionCall_1470": {
									"entryPoint": 7426,
									"id": 1470,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@getBuyer_655": {
									"entryPoint": 6841,
									"id": 655,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@getPenal_732": {
									"entryPoint": 4547,
									"id": 732,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@getSolder_668": {
									"entryPoint": 6620,
									"id": 668,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@injectFutureToken_277": {
									"entryPoint": 582,
									"id": 277,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@isContract_1398": {
									"entryPoint": 7773,
									"id": 1398,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@safeTransferFrom_1873": {
									"entryPoint": 6704,
									"id": 1873,
									"parameterSlots": 4,
									"returnSlots": 0
								},
								"@safeTransfer_1846": {
									"entryPoint": 7092,
									"id": 1846,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@solderWithdrawStable_475": {
									"entryPoint": 3562,
									"id": 475,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@userIfWithdraw1_67": {
									"entryPoint": 2660,
									"id": 67,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@userIfWithdraw2_73": {
									"entryPoint": 6526,
									"id": 73,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@userIfWithdraw3_79": {
									"entryPoint": 4832,
									"id": 79,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@userIfWithdraw4_85": {
									"entryPoint": 6573,
									"id": 85,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@verifyCallResultFromTarget_1665": {
									"entryPoint": 7655,
									"id": 1665,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"abi_decode_t_address": {
									"entryPoint": 8075,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_bool_fromMemory": {
									"entryPoint": 9071,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_uint128": {
									"entryPoint": 8319,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_uint256": {
									"entryPoint": 8129,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_uint64": {
									"entryPoint": 7936,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_addresst_uint128t_uint128": {
									"entryPoint": 8446,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 3
								},
								"abi_decode_tuple_t_addresst_uint256": {
									"entryPoint": 8150,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_bool_fromMemory": {
									"entryPoint": 9092,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_uint128t_uint128": {
									"entryPoint": 8340,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_uint64": {
									"entryPoint": 7957,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_t_address_to_t_address_fromStack": {
									"entryPoint": 8937,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_bool_to_t_bool_fromStack": {
									"entryPoint": 8226,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack": {
									"entryPoint": 9519,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 9727,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 9379,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 9632,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 9233,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_uint256_to_t_uint256_fromStack": {
									"entryPoint": 8404,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed": {
									"entryPoint": 9568,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed": {
									"entryPoint": 8952,
									"id": null,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed": {
									"entryPoint": 9007,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
									"entryPoint": 8241,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 9784,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 9414,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 9667,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 9268,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": 8419,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"allocate_unbounded": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"array_length_t_bytes_memory_ptr": {
									"entryPoint": 9446,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_length_t_string_memory_ptr": {
									"entryPoint": 9699,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack": {
									"entryPoint": 9457,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"array_storeLengthForEncoding_t_string_memory_ptr_fromStack": {
									"entryPoint": 9137,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_div_t_uint256": {
									"entryPoint": 8839,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_mul_t_uint128": {
									"entryPoint": 8628,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_mul_t_uint256": {
									"entryPoint": 8702,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_sub_t_uint256": {
									"entryPoint": 8576,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"cleanup_t_address": {
									"entryPoint": 8034,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_bool": {
									"entryPoint": 8214,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint128": {
									"entryPoint": 8268,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint160": {
									"entryPoint": 8002,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint256": {
									"entryPoint": 8096,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint64": {
									"entryPoint": 7893,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"copy_memory_to_memory": {
									"entryPoint": 9468,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"increment_t_uint64": {
									"entryPoint": 8888,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"panic_error_0x11": {
									"entryPoint": 8529,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x12": {
									"entryPoint": 8792,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
									"entryPoint": 7888,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"round_up_to_mul_of_32": {
									"entryPoint": 9710,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"store_literal_in_memory_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c": {
									"entryPoint": 9300,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad": {
									"entryPoint": 9591,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"store_literal_in_memory_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd": {
									"entryPoint": 9154,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_address": {
									"entryPoint": 8052,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_bool": {
									"entryPoint": 9048,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_uint128": {
									"entryPoint": 8296,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_uint256": {
									"entryPoint": 8106,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_uint64": {
									"entryPoint": 7913,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:13160:20",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "47:35:20",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "57:19:20",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "73:2:20",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "67:5:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "67:9:20"
															},
															"variableNames": [
																{
																	"name": "memPtr",
																	"nodeType": "YulIdentifier",
																	"src": "57:6:20"
																}
															]
														}
													]
												},
												"name": "allocate_unbounded",
												"nodeType": "YulFunctionDefinition",
												"returnVariables": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "40:6:20",
														"type": ""
													}
												],
												"src": "7:75:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "177:28:20",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "194:1:20",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "197:1:20",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "187:6:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "187:12:20"
															},
															"nodeType": "YulExpressionStatement",
															"src": "187:12:20"
														}
													]
												},
												"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
												"nodeType": "YulFunctionDefinition",
												"src": "88:117:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "300:28:20",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "317:1:20",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "320:1:20",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "310:6:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "310:12:20"
															},
															"nodeType": "YulExpressionStatement",
															"src": "310:12:20"
														}
													]
												},
												"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
												"nodeType": "YulFunctionDefinition",
												"src": "211:117:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "378:57:20",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "388:41:20",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "403:5:20"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "410:18:20",
																		"type": "",
																		"value": "0xffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "399:3:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "399:30:20"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "388:7:20"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint64",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "360:5:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "370:7:20",
														"type": ""
													}
												],
												"src": "334:101:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "483:78:20",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "539:16:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "548:1:20",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "551:1:20",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "541:6:20"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "541:12:20"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "541:12:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "506:5:20"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "530:5:20"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_uint64",
																					"nodeType": "YulIdentifier",
																					"src": "513:16:20"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "513:23:20"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "503:2:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "503:34:20"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "496:6:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "496:42:20"
															},
															"nodeType": "YulIf",
															"src": "493:62:20"
														}
													]
												},
												"name": "validator_revert_t_uint64",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "476:5:20",
														"type": ""
													}
												],
												"src": "441:120:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "618:86:20",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "628:29:20",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "650:6:20"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "637:12:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "637:20:20"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "628:5:20"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "692:5:20"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_uint64",
																	"nodeType": "YulIdentifier",
																	"src": "666:25:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "666:32:20"
															},
															"nodeType": "YulExpressionStatement",
															"src": "666:32:20"
														}
													]
												},
												"name": "abi_decode_t_uint64",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "596:6:20",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "604:3:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "612:5:20",
														"type": ""
													}
												],
												"src": "567:137:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "775:262:20",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "821:83:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "823:77:20"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "823:79:20"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "823:79:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "796:7:20"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "805:9:20"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "792:3:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "792:23:20"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "817:2:20",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "788:3:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "788:32:20"
															},
															"nodeType": "YulIf",
															"src": "785:119:20"
														},
														{
															"nodeType": "YulBlock",
															"src": "914:116:20",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "929:15:20",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "943:1:20",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "933:6:20",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "958:62:20",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "992:9:20"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "1003:6:20"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "988:3:20"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "988:22:20"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1012:7:20"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint64",
																			"nodeType": "YulIdentifier",
																			"src": "968:19:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "968:52:20"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "958:6:20"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint64",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "745:9:20",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "756:7:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "768:6:20",
														"type": ""
													}
												],
												"src": "710:327:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1088:81:20",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1098:65:20",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "1113:5:20"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1120:42:20",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "1109:3:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "1109:54:20"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "1098:7:20"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint160",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1070:5:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "1080:7:20",
														"type": ""
													}
												],
												"src": "1043:126:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1220:51:20",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1230:35:20",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "1259:5:20"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint160",
																	"nodeType": "YulIdentifier",
																	"src": "1241:17:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "1241:24:20"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "1230:7:20"
																}
															]
														}
													]
												},
												"name": "cleanup_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1202:5:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "1212:7:20",
														"type": ""
													}
												],
												"src": "1175:96:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1320:79:20",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1377:16:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1386:1:20",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1389:1:20",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1379:6:20"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1379:12:20"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1379:12:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "1343:5:20"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "1368:5:20"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_address",
																					"nodeType": "YulIdentifier",
																					"src": "1350:17:20"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1350:24:20"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "1340:2:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1340:35:20"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "1333:6:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "1333:43:20"
															},
															"nodeType": "YulIf",
															"src": "1330:63:20"
														}
													]
												},
												"name": "validator_revert_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1313:5:20",
														"type": ""
													}
												],
												"src": "1277:122:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1457:87:20",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1467:29:20",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "1489:6:20"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1476:12:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "1476:20:20"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "1467:5:20"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "1532:5:20"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "1505:26:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "1505:33:20"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1505:33:20"
														}
													]
												},
												"name": "abi_decode_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "1435:6:20",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "1443:3:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1451:5:20",
														"type": ""
													}
												],
												"src": "1405:139:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1595:32:20",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1605:16:20",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "1616:5:20"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "1605:7:20"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1577:5:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "1587:7:20",
														"type": ""
													}
												],
												"src": "1550:77:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1676:79:20",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1733:16:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1742:1:20",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1745:1:20",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1735:6:20"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1735:12:20"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1735:12:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "1699:5:20"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "1724:5:20"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_uint256",
																					"nodeType": "YulIdentifier",
																					"src": "1706:17:20"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1706:24:20"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "1696:2:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1696:35:20"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "1689:6:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "1689:43:20"
															},
															"nodeType": "YulIf",
															"src": "1686:63:20"
														}
													]
												},
												"name": "validator_revert_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1669:5:20",
														"type": ""
													}
												],
												"src": "1633:122:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1813:87:20",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1823:29:20",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "1845:6:20"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1832:12:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "1832:20:20"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "1823:5:20"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "1888:5:20"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "1861:26:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "1861:33:20"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1861:33:20"
														}
													]
												},
												"name": "abi_decode_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "1791:6:20",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "1799:3:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1807:5:20",
														"type": ""
													}
												],
												"src": "1761:139:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1989:391:20",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2035:83:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "2037:77:20"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2037:79:20"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2037:79:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2010:7:20"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2019:9:20"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2006:3:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2006:23:20"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2031:2:20",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2002:3:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "2002:32:20"
															},
															"nodeType": "YulIf",
															"src": "1999:119:20"
														},
														{
															"nodeType": "YulBlock",
															"src": "2128:117:20",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "2143:15:20",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2157:1:20",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "2147:6:20",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "2172:63:20",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "2207:9:20"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "2218:6:20"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "2203:3:20"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2203:22:20"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2227:7:20"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "2182:20:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2182:53:20"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "2172:6:20"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "2255:118:20",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "2270:16:20",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2284:2:20",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "2274:6:20",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "2300:63:20",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "2335:9:20"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "2346:6:20"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "2331:3:20"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2331:22:20"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2355:7:20"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "2310:20:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2310:53:20"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nodeType": "YulIdentifier",
																			"src": "2300:6:20"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1951:9:20",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1962:7:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1974:6:20",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1982:6:20",
														"type": ""
													}
												],
												"src": "1906:474:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2428:48:20",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2438:32:20",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "2463:5:20"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "2456:6:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2456:13:20"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "2449:6:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "2449:21:20"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "2438:7:20"
																}
															]
														}
													]
												},
												"name": "cleanup_t_bool",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2410:5:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "2420:7:20",
														"type": ""
													}
												],
												"src": "2386:90:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2541:50:20",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "2558:3:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "2578:5:20"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_bool",
																			"nodeType": "YulIdentifier",
																			"src": "2563:14:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2563:21:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2551:6:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "2551:34:20"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2551:34:20"
														}
													]
												},
												"name": "abi_encode_t_bool_to_t_bool_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2529:5:20",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "2536:3:20",
														"type": ""
													}
												],
												"src": "2482:109:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2689:118:20",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2699:26:20",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2711:9:20"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2722:2:20",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2707:3:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "2707:18:20"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2699:4:20"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "2773:6:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2786:9:20"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2797:1:20",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2782:3:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2782:17:20"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bool_to_t_bool_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "2735:37:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "2735:65:20"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2735:65:20"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2661:9:20",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2673:6:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2684:4:20",
														"type": ""
													}
												],
												"src": "2597:210:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2858:73:20",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2868:57:20",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "2883:5:20"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2890:34:20",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "2879:3:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "2879:46:20"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "2868:7:20"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint128",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2840:5:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "2850:7:20",
														"type": ""
													}
												],
												"src": "2813:118:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2980:79:20",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3037:16:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3046:1:20",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3049:1:20",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3039:6:20"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3039:12:20"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3039:12:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "3003:5:20"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "3028:5:20"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_uint128",
																					"nodeType": "YulIdentifier",
																					"src": "3010:17:20"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3010:24:20"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "3000:2:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3000:35:20"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "2993:6:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "2993:43:20"
															},
															"nodeType": "YulIf",
															"src": "2990:63:20"
														}
													]
												},
												"name": "validator_revert_t_uint128",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2973:5:20",
														"type": ""
													}
												],
												"src": "2937:122:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3117:87:20",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3127:29:20",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "3149:6:20"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "3136:12:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "3136:20:20"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "3127:5:20"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "3192:5:20"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_uint128",
																	"nodeType": "YulIdentifier",
																	"src": "3165:26:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "3165:33:20"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3165:33:20"
														}
													]
												},
												"name": "abi_decode_t_uint128",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "3095:6:20",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "3103:3:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3111:5:20",
														"type": ""
													}
												],
												"src": "3065:139:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3293:391:20",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3339:83:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "3341:77:20"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3341:79:20"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3341:79:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3314:7:20"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3323:9:20"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "3310:3:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3310:23:20"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3335:2:20",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "3306:3:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "3306:32:20"
															},
															"nodeType": "YulIf",
															"src": "3303:119:20"
														},
														{
															"nodeType": "YulBlock",
															"src": "3432:117:20",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "3447:15:20",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3461:1:20",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "3451:6:20",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "3476:63:20",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "3511:9:20"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "3522:6:20"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "3507:3:20"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3507:22:20"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3531:7:20"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint128",
																			"nodeType": "YulIdentifier",
																			"src": "3486:20:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3486:53:20"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "3476:6:20"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "3559:118:20",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "3574:16:20",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3588:2:20",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "3578:6:20",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "3604:63:20",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "3639:9:20"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "3650:6:20"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "3635:3:20"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3635:22:20"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3659:7:20"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint128",
																			"nodeType": "YulIdentifier",
																			"src": "3614:20:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3614:53:20"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nodeType": "YulIdentifier",
																			"src": "3604:6:20"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint128t_uint128",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3255:9:20",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "3266:7:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3278:6:20",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "3286:6:20",
														"type": ""
													}
												],
												"src": "3210:474:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3755:53:20",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "3772:3:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "3795:5:20"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "3777:17:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3777:24:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3765:6:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "3765:37:20"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3765:37:20"
														}
													]
												},
												"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3743:5:20",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "3750:3:20",
														"type": ""
													}
												],
												"src": "3690:118:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3912:124:20",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3922:26:20",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3934:9:20"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3945:2:20",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3930:3:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "3930:18:20"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3922:4:20"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "4002:6:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4015:9:20"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4026:1:20",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4011:3:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4011:17:20"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "3958:43:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "3958:71:20"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3958:71:20"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3884:9:20",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3896:6:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3907:4:20",
														"type": ""
													}
												],
												"src": "3814:222:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4142:519:20",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4188:83:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "4190:77:20"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4190:79:20"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4190:79:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "4163:7:20"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4172:9:20"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "4159:3:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4159:23:20"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4184:2:20",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "4155:3:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "4155:32:20"
															},
															"nodeType": "YulIf",
															"src": "4152:119:20"
														},
														{
															"nodeType": "YulBlock",
															"src": "4281:117:20",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "4296:15:20",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4310:1:20",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "4300:6:20",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "4325:63:20",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "4360:9:20"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "4371:6:20"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "4356:3:20"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4356:22:20"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "4380:7:20"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "4335:20:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4335:53:20"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "4325:6:20"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "4408:118:20",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "4423:16:20",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4437:2:20",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "4427:6:20",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "4453:63:20",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "4488:9:20"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "4499:6:20"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "4484:3:20"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4484:22:20"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "4508:7:20"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint128",
																			"nodeType": "YulIdentifier",
																			"src": "4463:20:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4463:53:20"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nodeType": "YulIdentifier",
																			"src": "4453:6:20"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "4536:118:20",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "4551:16:20",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4565:2:20",
																		"type": "",
																		"value": "64"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "4555:6:20",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "4581:63:20",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "4616:9:20"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "4627:6:20"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "4612:3:20"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4612:22:20"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "4636:7:20"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint128",
																			"nodeType": "YulIdentifier",
																			"src": "4591:20:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4591:53:20"
																	},
																	"variableNames": [
																		{
																			"name": "value2",
																			"nodeType": "YulIdentifier",
																			"src": "4581:6:20"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint128t_uint128",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4096:9:20",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "4107:7:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4119:6:20",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "4127:6:20",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "4135:6:20",
														"type": ""
													}
												],
												"src": "4042:619:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4695:152:20",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4712:1:20",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4715:77:20",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4705:6:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "4705:88:20"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4705:88:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4809:1:20",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4812:4:20",
																		"type": "",
																		"value": "0x11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4802:6:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "4802:15:20"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4802:15:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4833:1:20",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4836:4:20",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "4826:6:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "4826:15:20"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4826:15:20"
														}
													]
												},
												"name": "panic_error_0x11",
												"nodeType": "YulFunctionDefinition",
												"src": "4667:180:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4898:146:20",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4908:25:20",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "4931:1:20"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "4913:17:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "4913:20:20"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nodeType": "YulIdentifier",
																	"src": "4908:1:20"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "4942:25:20",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "4965:1:20"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "4947:17:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "4947:20:20"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nodeType": "YulIdentifier",
																	"src": "4942:1:20"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4989:22:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "4991:16:20"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4991:18:20"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4991:18:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "4983:1:20"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "4986:1:20"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "4980:2:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "4980:8:20"
															},
															"nodeType": "YulIf",
															"src": "4977:34:20"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5021:17:20",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "5033:1:20"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "5036:1:20"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "5029:3:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "5029:9:20"
															},
															"variableNames": [
																{
																	"name": "diff",
																	"nodeType": "YulIdentifier",
																	"src": "5021:4:20"
																}
															]
														}
													]
												},
												"name": "checked_sub_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "4884:1:20",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "4887:1:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "diff",
														"nodeType": "YulTypedName",
														"src": "4893:4:20",
														"type": ""
													}
												],
												"src": "4853:191:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5098:268:20",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5108:25:20",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "5131:1:20"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint128",
																	"nodeType": "YulIdentifier",
																	"src": "5113:17:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "5113:20:20"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nodeType": "YulIdentifier",
																	"src": "5108:1:20"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5142:25:20",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "5165:1:20"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint128",
																	"nodeType": "YulIdentifier",
																	"src": "5147:17:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "5147:20:20"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nodeType": "YulIdentifier",
																	"src": "5142:1:20"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5308:22:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "5310:16:20"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5310:18:20"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5310:18:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "x",
																						"nodeType": "YulIdentifier",
																						"src": "5252:1:20"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "5245:6:20"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5245:9:20"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "5238:6:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5238:17:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "5260:1:20"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "5267:34:20",
																						"type": "",
																						"value": "0xffffffffffffffffffffffffffffffff"
																					},
																					{
																						"name": "x",
																						"nodeType": "YulIdentifier",
																						"src": "5303:1:20"
																					}
																				],
																				"functionName": {
																					"name": "div",
																					"nodeType": "YulIdentifier",
																					"src": "5263:3:20"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5263:42:20"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "5257:2:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5257:49:20"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "5234:3:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "5234:73:20"
															},
															"nodeType": "YulIf",
															"src": "5231:99:20"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5340:20:20",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "5355:1:20"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "5358:1:20"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nodeType": "YulIdentifier",
																	"src": "5351:3:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "5351:9:20"
															},
															"variableNames": [
																{
																	"name": "product",
																	"nodeType": "YulIdentifier",
																	"src": "5340:7:20"
																}
															]
														}
													]
												},
												"name": "checked_mul_t_uint128",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "5081:1:20",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "5084:1:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "product",
														"nodeType": "YulTypedName",
														"src": "5090:7:20",
														"type": ""
													}
												],
												"src": "5050:316:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5420:300:20",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5430:25:20",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "5453:1:20"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "5435:17:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "5435:20:20"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nodeType": "YulIdentifier",
																	"src": "5430:1:20"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5464:25:20",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "5487:1:20"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "5469:17:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "5469:20:20"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nodeType": "YulIdentifier",
																	"src": "5464:1:20"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5662:22:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "5664:16:20"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5664:18:20"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5664:18:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "x",
																						"nodeType": "YulIdentifier",
																						"src": "5574:1:20"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "5567:6:20"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5567:9:20"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "5560:6:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5560:17:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "5582:1:20"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "5589:66:20",
																						"type": "",
																						"value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
																					},
																					{
																						"name": "x",
																						"nodeType": "YulIdentifier",
																						"src": "5657:1:20"
																					}
																				],
																				"functionName": {
																					"name": "div",
																					"nodeType": "YulIdentifier",
																					"src": "5585:3:20"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5585:74:20"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "5579:2:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5579:81:20"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "5556:3:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "5556:105:20"
															},
															"nodeType": "YulIf",
															"src": "5553:131:20"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5694:20:20",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "5709:1:20"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "5712:1:20"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nodeType": "YulIdentifier",
																	"src": "5705:3:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "5705:9:20"
															},
															"variableNames": [
																{
																	"name": "product",
																	"nodeType": "YulIdentifier",
																	"src": "5694:7:20"
																}
															]
														}
													]
												},
												"name": "checked_mul_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "5403:1:20",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "5406:1:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "product",
														"nodeType": "YulTypedName",
														"src": "5412:7:20",
														"type": ""
													}
												],
												"src": "5372:348:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5754:152:20",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5771:1:20",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5774:77:20",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5764:6:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "5764:88:20"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5764:88:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5868:1:20",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5871:4:20",
																		"type": "",
																		"value": "0x12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5861:6:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "5861:15:20"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5861:15:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5892:1:20",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5895:4:20",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "5885:6:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "5885:15:20"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5885:15:20"
														}
													]
												},
												"name": "panic_error_0x12",
												"nodeType": "YulFunctionDefinition",
												"src": "5726:180:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5954:143:20",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5964:25:20",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "5987:1:20"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "5969:17:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "5969:20:20"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nodeType": "YulIdentifier",
																	"src": "5964:1:20"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5998:25:20",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "6021:1:20"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "6003:17:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "6003:20:20"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nodeType": "YulIdentifier",
																	"src": "5998:1:20"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "6045:22:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x12",
																				"nodeType": "YulIdentifier",
																				"src": "6047:16:20"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6047:18:20"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "6047:18:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "6042:1:20"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "6035:6:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "6035:9:20"
															},
															"nodeType": "YulIf",
															"src": "6032:35:20"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6077:14:20",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "6086:1:20"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "6089:1:20"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nodeType": "YulIdentifier",
																	"src": "6082:3:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "6082:9:20"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6077:1:20"
																}
															]
														}
													]
												},
												"name": "checked_div_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "5943:1:20",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "5946:1:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "r",
														"nodeType": "YulTypedName",
														"src": "5952:1:20",
														"type": ""
													}
												],
												"src": "5912:185:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6145:141:20",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6155:32:20",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "6181:5:20"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint64",
																	"nodeType": "YulIdentifier",
																	"src": "6164:16:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "6164:23:20"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "6155:5:20"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "6229:22:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "6231:16:20"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6231:18:20"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "6231:18:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "6202:5:20"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6209:18:20",
																		"type": "",
																		"value": "0xffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "6199:2:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "6199:29:20"
															},
															"nodeType": "YulIf",
															"src": "6196:55:20"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6260:20:20",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "6271:5:20"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6278:1:20",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6267:3:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "6267:13:20"
															},
															"variableNames": [
																{
																	"name": "ret",
																	"nodeType": "YulIdentifier",
																	"src": "6260:3:20"
																}
															]
														}
													]
												},
												"name": "increment_t_uint64",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "6131:5:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "ret",
														"nodeType": "YulTypedName",
														"src": "6141:3:20",
														"type": ""
													}
												],
												"src": "6103:183:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6357:53:20",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "6374:3:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "6397:5:20"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "6379:17:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6379:24:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6367:6:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "6367:37:20"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6367:37:20"
														}
													]
												},
												"name": "abi_encode_t_address_to_t_address_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "6345:5:20",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "6352:3:20",
														"type": ""
													}
												],
												"src": "6292:118:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6570:288:20",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6580:26:20",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6592:9:20"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6603:2:20",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6588:3:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "6588:18:20"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6580:4:20"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "6660:6:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6673:9:20"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6684:1:20",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6669:3:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6669:17:20"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "6616:43:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "6616:71:20"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6616:71:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "6741:6:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6754:9:20"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6765:2:20",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6750:3:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6750:18:20"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "6697:43:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "6697:72:20"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6697:72:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "6823:6:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6836:9:20"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6847:2:20",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6832:3:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6832:18:20"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "6779:43:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "6779:72:20"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6779:72:20"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6526:9:20",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "6538:6:20",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "6546:6:20",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "6554:6:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6565:4:20",
														"type": ""
													}
												],
												"src": "6416:442:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6990:206:20",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7000:26:20",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7012:9:20"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7023:2:20",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7008:3:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "7008:18:20"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7000:4:20"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "7080:6:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7093:9:20"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7104:1:20",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7089:3:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7089:17:20"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "7036:43:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "7036:71:20"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7036:71:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "7161:6:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7174:9:20"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7185:2:20",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7170:3:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7170:18:20"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "7117:43:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "7117:72:20"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7117:72:20"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6954:9:20",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "6966:6:20",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "6974:6:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6985:4:20",
														"type": ""
													}
												],
												"src": "6864:332:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7242:76:20",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "7296:16:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "7305:1:20",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "7308:1:20",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "7298:6:20"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7298:12:20"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "7298:12:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "7265:5:20"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "7287:5:20"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_bool",
																					"nodeType": "YulIdentifier",
																					"src": "7272:14:20"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "7272:21:20"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "7262:2:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7262:32:20"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "7255:6:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "7255:40:20"
															},
															"nodeType": "YulIf",
															"src": "7252:60:20"
														}
													]
												},
												"name": "validator_revert_t_bool",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "7235:5:20",
														"type": ""
													}
												],
												"src": "7202:116:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7384:77:20",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7394:22:20",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "7409:6:20"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "7403:5:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "7403:13:20"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "7394:5:20"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "7449:5:20"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_bool",
																	"nodeType": "YulIdentifier",
																	"src": "7425:23:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "7425:30:20"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7425:30:20"
														}
													]
												},
												"name": "abi_decode_t_bool_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "7362:6:20",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "7370:3:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "7378:5:20",
														"type": ""
													}
												],
												"src": "7324:137:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7541:271:20",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "7587:83:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "7589:77:20"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7589:79:20"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "7589:79:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "7562:7:20"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7571:9:20"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "7558:3:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7558:23:20"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7583:2:20",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "7554:3:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "7554:32:20"
															},
															"nodeType": "YulIf",
															"src": "7551:119:20"
														},
														{
															"nodeType": "YulBlock",
															"src": "7680:125:20",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "7695:15:20",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7709:1:20",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "7699:6:20",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "7724:71:20",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "7767:9:20"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "7778:6:20"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "7763:3:20"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "7763:22:20"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "7787:7:20"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_bool_fromMemory",
																			"nodeType": "YulIdentifier",
																			"src": "7734:28:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7734:61:20"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "7724:6:20"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bool_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7511:9:20",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "7522:7:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "7534:6:20",
														"type": ""
													}
												],
												"src": "7467:345:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7914:73:20",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "7931:3:20"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "7936:6:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7924:6:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "7924:19:20"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7924:19:20"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7952:29:20",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "7971:3:20"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7976:4:20",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7967:3:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "7967:14:20"
															},
															"variableNames": [
																{
																	"name": "updated_pos",
																	"nodeType": "YulIdentifier",
																	"src": "7952:11:20"
																}
															]
														}
													]
												},
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "7886:3:20",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "7891:6:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "updated_pos",
														"nodeType": "YulTypedName",
														"src": "7902:11:20",
														"type": ""
													}
												],
												"src": "7818:169:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8099:123:20",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "8121:6:20"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8129:1:20",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8117:3:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8117:14:20"
																	},
																	{
																		"hexValue": "5361666545524332303a204552433230206f7065726174696f6e20646964206e",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "8133:34:20",
																		"type": "",
																		"value": "SafeERC20: ERC20 operation did n"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8110:6:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "8110:58:20"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8110:58:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "8189:6:20"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8197:2:20",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8185:3:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8185:15:20"
																	},
																	{
																		"hexValue": "6f742073756363656564",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "8202:12:20",
																		"type": "",
																		"value": "ot succeed"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8178:6:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "8178:37:20"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8178:37:20"
														}
													]
												},
												"name": "store_literal_in_memory_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "8091:6:20",
														"type": ""
													}
												],
												"src": "7993:229:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8374:220:20",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "8384:74:20",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "8450:3:20"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8455:2:20",
																		"type": "",
																		"value": "42"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "8391:58:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "8391:67:20"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "8384:3:20"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "8556:3:20"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd",
																	"nodeType": "YulIdentifier",
																	"src": "8467:88:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "8467:93:20"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8467:93:20"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8569:19:20",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "8580:3:20"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8585:2:20",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8576:3:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "8576:12:20"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "8569:3:20"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "8362:3:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "8370:3:20",
														"type": ""
													}
												],
												"src": "8228:366:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8771:248:20",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "8781:26:20",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8793:9:20"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8804:2:20",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8789:3:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "8789:18:20"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8781:4:20"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8828:9:20"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8839:1:20",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8824:3:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8824:17:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "8847:4:20"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8853:9:20"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "8843:3:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8843:20:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8817:6:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "8817:47:20"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8817:47:20"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8873:139:20",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "9007:4:20"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "8881:124:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "8881:131:20"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8873:4:20"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "8751:9:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "8766:4:20",
														"type": ""
													}
												],
												"src": "8600:419:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9131:119:20",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "9153:6:20"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9161:1:20",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9149:3:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9149:14:20"
																	},
																	{
																		"hexValue": "416464726573733a20696e73756666696369656e742062616c616e636520666f",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "9165:34:20",
																		"type": "",
																		"value": "Address: insufficient balance fo"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9142:6:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "9142:58:20"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9142:58:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "9221:6:20"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9229:2:20",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9217:3:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9217:15:20"
																	},
																	{
																		"hexValue": "722063616c6c",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "9234:8:20",
																		"type": "",
																		"value": "r call"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9210:6:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "9210:33:20"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9210:33:20"
														}
													]
												},
												"name": "store_literal_in_memory_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "9123:6:20",
														"type": ""
													}
												],
												"src": "9025:225:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9402:220:20",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "9412:74:20",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "9478:3:20"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9483:2:20",
																		"type": "",
																		"value": "38"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "9419:58:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "9419:67:20"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "9412:3:20"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "9584:3:20"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																	"nodeType": "YulIdentifier",
																	"src": "9495:88:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "9495:93:20"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9495:93:20"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9597:19:20",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "9608:3:20"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9613:2:20",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9604:3:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "9604:12:20"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "9597:3:20"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "9390:3:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "9398:3:20",
														"type": ""
													}
												],
												"src": "9256:366:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9799:248:20",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "9809:26:20",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9821:9:20"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9832:2:20",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9817:3:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "9817:18:20"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "9809:4:20"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9856:9:20"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9867:1:20",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9852:3:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9852:17:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "9875:4:20"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9881:9:20"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "9871:3:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9871:20:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9845:6:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "9845:47:20"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9845:47:20"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9901:139:20",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "10035:4:20"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "9909:124:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "9909:131:20"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "9901:4:20"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "9779:9:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "9794:4:20",
														"type": ""
													}
												],
												"src": "9628:419:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10111:40:20",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "10122:22:20",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "10138:5:20"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "10132:5:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "10132:12:20"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "10122:6:20"
																}
															]
														}
													]
												},
												"name": "array_length_t_bytes_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "10094:5:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "10104:6:20",
														"type": ""
													}
												],
												"src": "10053:98:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10270:34:20",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "10280:18:20",
															"value": {
																"name": "pos",
																"nodeType": "YulIdentifier",
																"src": "10295:3:20"
															},
															"variableNames": [
																{
																	"name": "updated_pos",
																	"nodeType": "YulIdentifier",
																	"src": "10280:11:20"
																}
															]
														}
													]
												},
												"name": "array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "10242:3:20",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "10247:6:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "updated_pos",
														"nodeType": "YulTypedName",
														"src": "10258:11:20",
														"type": ""
													}
												],
												"src": "10157:147:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10359:258:20",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "10369:10:20",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "10378:1:20",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "10373:1:20",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "10438:63:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "10463:3:20"
																						},
																						{
																							"name": "i",
																							"nodeType": "YulIdentifier",
																							"src": "10468:1:20"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "10459:3:20"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "10459:11:20"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "src",
																									"nodeType": "YulIdentifier",
																									"src": "10482:3:20"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "10487:1:20"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "10478:3:20"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "10478:11:20"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "10472:5:20"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "10472:18:20"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "10452:6:20"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "10452:39:20"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "10452:39:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "10399:1:20"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "10402:6:20"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "10396:2:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "10396:13:20"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "10410:19:20",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "10412:15:20",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "10421:1:20"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "10424:2:20",
																					"type": "",
																					"value": "32"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "10417:3:20"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "10417:10:20"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "10412:1:20"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "10392:3:20",
																"statements": []
															},
															"src": "10388:113:20"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "10535:76:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "10585:3:20"
																						},
																						{
																							"name": "length",
																							"nodeType": "YulIdentifier",
																							"src": "10590:6:20"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "10581:3:20"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "10581:16:20"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "10599:1:20",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "10574:6:20"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "10574:27:20"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "10574:27:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "10516:1:20"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "10519:6:20"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "10513:2:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "10513:13:20"
															},
															"nodeType": "YulIf",
															"src": "10510:101:20"
														}
													]
												},
												"name": "copy_memory_to_memory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "10341:3:20",
														"type": ""
													},
													{
														"name": "dst",
														"nodeType": "YulTypedName",
														"src": "10346:3:20",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "10351:6:20",
														"type": ""
													}
												],
												"src": "10310:307:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10731:265:20",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "10741:52:20",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "10787:5:20"
																	}
																],
																"functionName": {
																	"name": "array_length_t_bytes_memory_ptr",
																	"nodeType": "YulIdentifier",
																	"src": "10755:31:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "10755:38:20"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "10745:6:20",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "10802:95:20",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "10885:3:20"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "10890:6:20"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "10809:75:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "10809:88:20"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "10802:3:20"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "10932:5:20"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10939:4:20",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10928:3:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10928:16:20"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "10946:3:20"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "10951:6:20"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "10906:21:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "10906:52:20"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10906:52:20"
														},
														{
															"nodeType": "YulAssignment",
															"src": "10967:23:20",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "10978:3:20"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "10983:6:20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "10974:3:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "10974:16:20"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "10967:3:20"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "10712:5:20",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "10719:3:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "10727:3:20",
														"type": ""
													}
												],
												"src": "10623:373:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11136:137:20",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "11147:100:20",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "11234:6:20"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "11243:3:20"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "11154:79:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "11154:93:20"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "11147:3:20"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "11257:10:20",
															"value": {
																"name": "pos",
																"nodeType": "YulIdentifier",
																"src": "11264:3:20"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "11257:3:20"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "11115:3:20",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "11121:6:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "11132:3:20",
														"type": ""
													}
												],
												"src": "11002:271:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11385:73:20",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "11407:6:20"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11415:1:20",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11403:3:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11403:14:20"
																	},
																	{
																		"hexValue": "416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "11419:31:20",
																		"type": "",
																		"value": "Address: call to non-contract"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11396:6:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "11396:55:20"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11396:55:20"
														}
													]
												},
												"name": "store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "11377:6:20",
														"type": ""
													}
												],
												"src": "11279:179:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11610:220:20",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "11620:74:20",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "11686:3:20"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11691:2:20",
																		"type": "",
																		"value": "29"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "11627:58:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "11627:67:20"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "11620:3:20"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "11792:3:20"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																	"nodeType": "YulIdentifier",
																	"src": "11703:88:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "11703:93:20"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11703:93:20"
														},
														{
															"nodeType": "YulAssignment",
															"src": "11805:19:20",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "11816:3:20"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11821:2:20",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "11812:3:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "11812:12:20"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "11805:3:20"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "11598:3:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "11606:3:20",
														"type": ""
													}
												],
												"src": "11464:366:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12007:248:20",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "12017:26:20",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "12029:9:20"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12040:2:20",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "12025:3:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "12025:18:20"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "12017:4:20"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12064:9:20"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12075:1:20",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12060:3:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12060:17:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "12083:4:20"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12089:9:20"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "12079:3:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12079:20:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12053:6:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "12053:47:20"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12053:47:20"
														},
														{
															"nodeType": "YulAssignment",
															"src": "12109:139:20",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "12243:4:20"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "12117:124:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "12117:131:20"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "12109:4:20"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "11987:9:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "12002:4:20",
														"type": ""
													}
												],
												"src": "11836:419:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12320:40:20",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "12331:22:20",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "12347:5:20"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "12341:5:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "12341:12:20"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "12331:6:20"
																}
															]
														}
													]
												},
												"name": "array_length_t_string_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "12303:5:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "12313:6:20",
														"type": ""
													}
												],
												"src": "12261:99:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12414:54:20",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "12424:38:20",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "12442:5:20"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12449:2:20",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12438:3:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12438:14:20"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12458:2:20",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "12454:3:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12454:7:20"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "12434:3:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "12434:28:20"
															},
															"variableNames": [
																{
																	"name": "result",
																	"nodeType": "YulIdentifier",
																	"src": "12424:6:20"
																}
															]
														}
													]
												},
												"name": "round_up_to_mul_of_32",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "12397:5:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "result",
														"nodeType": "YulTypedName",
														"src": "12407:6:20",
														"type": ""
													}
												],
												"src": "12366:102:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12566:272:20",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "12576:53:20",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "12623:5:20"
																	}
																],
																"functionName": {
																	"name": "array_length_t_string_memory_ptr",
																	"nodeType": "YulIdentifier",
																	"src": "12590:32:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "12590:39:20"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "12580:6:20",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "12638:78:20",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "12704:3:20"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "12709:6:20"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "12645:58:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "12645:71:20"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "12638:3:20"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "12751:5:20"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12758:4:20",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12747:3:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12747:16:20"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "12765:3:20"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "12770:6:20"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "12725:21:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "12725:52:20"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12725:52:20"
														},
														{
															"nodeType": "YulAssignment",
															"src": "12786:46:20",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "12797:3:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "12824:6:20"
																			}
																		],
																		"functionName": {
																			"name": "round_up_to_mul_of_32",
																			"nodeType": "YulIdentifier",
																			"src": "12802:21:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12802:29:20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "12793:3:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "12793:39:20"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "12786:3:20"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "12547:5:20",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "12554:3:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "12562:3:20",
														"type": ""
													}
												],
												"src": "12474:364:20"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12962:195:20",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "12972:26:20",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "12984:9:20"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12995:2:20",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "12980:3:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "12980:18:20"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "12972:4:20"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13019:9:20"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13030:1:20",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13015:3:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13015:17:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "13038:4:20"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13044:9:20"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "13034:3:20"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13034:20:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13008:6:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "13008:47:20"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13008:47:20"
														},
														{
															"nodeType": "YulAssignment",
															"src": "13064:86:20",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "13136:6:20"
																	},
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "13145:4:20"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "13072:63:20"
																},
																"nodeType": "YulFunctionCall",
																"src": "13072:78:20"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "13064:4:20"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "12934:9:20",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "12946:6:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "12957:4:20",
														"type": ""
													}
												],
												"src": "12844:313:20"
											}
										]
									},
									"contents": "{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint64(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffff)\n    }\n\n    function validator_revert_t_uint64(value) {\n        if iszero(eq(value, cleanup_t_uint64(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint64(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint64(value)\n    }\n\n    function abi_decode_tuple_t_uint64(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint64(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function cleanup_t_uint128(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffff)\n    }\n\n    function validator_revert_t_uint128(value) {\n        if iszero(eq(value, cleanup_t_uint128(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint128(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint128(value)\n    }\n\n    function abi_decode_tuple_t_uint128t_uint128(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint128(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint128(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_addresst_uint128t_uint128(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint128(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint128(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function checked_sub_t_uint256(x, y) -> diff {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        if lt(x, y) { panic_error_0x11() }\n\n        diff := sub(x, y)\n    }\n\n    function checked_mul_t_uint128(x, y) -> product {\n        x := cleanup_t_uint128(x)\n        y := cleanup_t_uint128(y)\n\n        // overflow, if x != 0 and y > (maxValue / x)\n        if and(iszero(iszero(x)), gt(y, div(0xffffffffffffffffffffffffffffffff, x))) { panic_error_0x11() }\n\n        product := mul(x, y)\n    }\n\n    function checked_mul_t_uint256(x, y) -> product {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        // overflow, if x != 0 and y > (maxValue / x)\n        if and(iszero(iszero(x)), gt(y, div(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, x))) { panic_error_0x11() }\n\n        product := mul(x, y)\n    }\n\n    function panic_error_0x12() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n\n    function checked_div_t_uint256(x, y) -> r {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        if iszero(y) { panic_error_0x12() }\n\n        r := div(x, y)\n    }\n\n    function increment_t_uint64(value) -> ret {\n        value := cleanup_t_uint64(value)\n        if eq(value, 0xffffffffffffffff) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function validator_revert_t_bool(value) {\n        if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bool_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bool_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function store_literal_in_memory_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd(memPtr) {\n\n        mstore(add(memPtr, 0), \"SafeERC20: ERC20 operation did n\")\n\n        mstore(add(memPtr, 32), \"ot succeed\")\n\n    }\n\n    function abi_encode_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 42)\n        store_literal_in_memory_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c(memPtr) {\n\n        mstore(add(memPtr, 0), \"Address: insufficient balance fo\")\n\n        mstore(add(memPtr, 32), \"r call\")\n\n    }\n\n    function abi_encode_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 38)\n        store_literal_in_memory_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function array_length_t_bytes_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function copy_memory_to_memory(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length)\n        {\n            // clear end\n            mstore(add(dst, length), 0)\n        }\n    }\n\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {\n        let length := array_length_t_bytes_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, length)\n    }\n\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value0) -> end {\n\n        pos := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        end := pos\n    }\n\n    function store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad(memPtr) {\n\n        mstore(add(memPtr, 0), \"Address: call to non-contract\")\n\n    }\n\n    function abi_encode_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 29)\n        store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n}\n",
									"id": 20,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50600436106100a95760003560e01c806398c50fdd1161007157806398c50fdd1461014e578063b8d7f9801461017e578063c0102de4146101ae578063d14485a2146101ca578063df0905c6146101e6578063fc993ea814610216576100a9565b806325ac3a73146100ae5780632895cb7b146100ca57806359de2f60146100e6578063762e9d301461011657806377bcd8a614610132575b600080fd5b6100c860048036038101906100c39190611f15565b610246565b005b6100e460048036038101906100df9190611f15565b6104c3565b005b61010060048036038101906100fb9190611fd6565b610a64565b60405161010d9190612031565b60405180910390f35b610130600480360381019061012b9190611f15565b610a93565b005b61014c60048036038101906101479190611f15565b610dea565b005b61016860048036038101906101639190612094565b6111c3565b60405161017591906120e3565b60405180910390f35b61019860048036038101906101939190611fd6565b6112e0565b6040516101a59190612031565b60405180910390f35b6101c860048036038101906101c39190611f15565b61130f565b005b6101e460048036038101906101df91906120fe565b6115b7565b005b61020060048036038101906101fb9190611fd6565b61197e565b60405161020d9190612031565b60405180910390f35b610230600480360381019061022b9190611fd6565b6119ad565b60405161023d9190612031565b60405180910390f35b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008367ffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055156102ef576040517f4232716900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff1661030f826119dc565b73ffffffffffffffffffffffffffffffffffffffff161461035c576040517fd7c498bf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600260008367ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff169050610408333083600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611a30909392919063ffffffff16565b6001600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008467ffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506003600260008467ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160006101000a81548160ff021916908360ff1602179055505050565b60006104ce82611ab9565b905060006104db836119dc565b90508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461051557600080fd5b60001515600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008567ffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151461058d57600080fd5b60001515600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008567ffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151461060557600080fd5b8173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461063d57600080fd5b6000600260008567ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000610724600260008767ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060010160009054906101000a90046fffffffffffffffffffffffffffffffff16600260008867ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160109054906101000a90046fffffffffffffffffffffffffffffffff166111c3565b9050600061073182611b0d565b905061075e30828573ffffffffffffffffffffffffffffffffffffffff16611bb49092919063ffffffff16565b61079485828461076e9190612180565b8573ffffffffffffffffffffffffffffffffffffffff16611bb49092919063ffffffff16565b6001600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008867ffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506001600260008867ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff1660ff161415610a185760001515600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008867ffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515146108c257600080fd5b6000600260008867ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160109054906101000a90046fffffffffffffffffffffffffffffffff16600260008967ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060010160009054906101000a90046fffffffffffffffffffffffffffffffff1661095c91906121b4565b6fffffffffffffffffffffffffffffffff1690506109a361097c88611ab9565b828673ffffffffffffffffffffffffffffffffffffffff16611bb49092919063ffffffff16565b6001600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008967ffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550505b6005600260008867ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160006101000a81548160ff021916908360ff160217905550505050505050565b60046020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b6000600260008367ffffffffffffffff1667ffffffffffffffff168152602001908152602001600020604051806101000160405290816000820160009054906101000a900460ff1660ff1660ff1681526020016000820160019054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016000820160099054906101000a900466ffffffffffffff1666ffffffffffffff1666ffffffffffffff1681526020016000820160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505090506001816000015160ff1614610cf257600080fd5b60008160a001519050610d393330610d12856080015186606001516111c3565b8473ffffffffffffffffffffffffffffffffffffffff16611a30909392919063ffffffff16565b33600260008567ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060028060008567ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160006101000a81548160ff021916908360ff160217905550505050565b6000610df5826119dc565b90508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610e2f57600080fd5b600360008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008367ffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610ea057600080fd5b60001515600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008467ffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514610f1857600080fd5b6000600260008467ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600260008567ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160109054906101000a90046fffffffffffffffffffffffffffffffff16600260008667ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060010160009054906101000a90046fffffffffffffffffffffffffffffffff1661100191906121b4565b6fffffffffffffffffffffffffffffffff16905060006110ad600260008767ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060010160009054906101000a90046fffffffffffffffffffffffffffffffff16600260008867ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160109054906101000a90046fffffffffffffffffffffffffffffffff166111c3565b905060006110ba83611b0d565b90506110e730828673ffffffffffffffffffffffffffffffffffffffff16611bb49092919063ffffffff16565b61111d8582856110f79190612180565b8673ffffffffffffffffffffffffffffffffffffffff16611bb49092919063ffffffff16565b61114885838673ffffffffffffffffffffffffffffffffffffffff16611bb49092919063ffffffff16565b6001600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008867ffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550505050505050565b60008082846111d291906121b4565b6fffffffffffffffffffffffffffffffff16905068056bc75e2d6310000081101580156112075750683635c9adc5dea0000081105b1561122d57606460328261121b91906121fe565b6112259190612287565b9150506112da565b683635c9adc5dea00000811015801561124f575069021e19e0c9bab240000081105b1561127557606460288261126391906121fe565b61126d9190612287565b9150506112da565b69021e19e0c9bab24000008111156112a857606460198261129691906121fe565b6112a09190612287565b9150506112da565b6040517fe008b5f900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b92915050565b60066020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b600061131a82611ab9565b90508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611381576040517f472e017e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6003600260008467ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff1660ff16146113f5576040517fde4461cd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600260008467ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160109054906101000a90046fffffffffffffffffffffffffffffffff1690506000600260008567ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060010160009054906101000a90046fffffffffffffffffffffffffffffffff16905060006114b3828461149c91906121b4565b6fffffffffffffffffffffffffffffffff16611b0d565b90506115023082600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611bb49092919063ffffffff16565b61156c8482856fffffffffffffffffffffffffffffffff166115249190612180565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611bb49092919063ffffffff16565b6004600260008767ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160006101000a81548160ff021916908360ff1602179055505050505050565b600081836115c591906121b4565b6fffffffffffffffffffffffffffffffff16905068056bc75e2d6310000081101561161c576040517fe008b5f900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000604051806101000160405280600160ff168152602001600060079054906101000a900467ffffffffffffffff1667ffffffffffffffff1681526020014266ffffffffffffff168152602001856fffffffffffffffffffffffffffffffff168152602001846fffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff1681526020013073ffffffffffffffffffffffffffffffffffffffff16815250905080600260008060079054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060408201518160000160096101000a81548166ffffffffffffff021916908366ffffffffffffff16021790555060608201518160000160106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060808201518160010160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060a08201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060c08201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060e08201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555090505061192a3330848873ffffffffffffffffffffffffffffffffffffffff16611a30909392919063ffffffff16565b6000600781819054906101000a900467ffffffffffffffff1680929190611950906122b8565b91906101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550505050505050565b60056020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b60076020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b6000600260008367ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b611ab3846323b872dd60e01b858585604051602401611a51939291906122f8565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611c3a565b50505050565b6000600260008367ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600068056bc75e2d631000008210158015611b305750683635c9adc5dea0000082105b15611b4957606482611b429190612287565b9050611baf565b683635c9adc5dea000008210158015611b6b575069021e19e0c9bab240000082105b15611b845760c882611b7d9190612287565b9050611baf565b69021e19e0c9bab24000008210611baa5761019082611ba39190612287565b9050611baf565b600090505b919050565b611c358363a9059cbb60e01b8484604051602401611bd392919061232f565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611c3a565b505050565b6000611c9c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16611d029092919063ffffffff16565b9050600081511480611cbe575080806020019051810190611cbd9190612384565b5b611cfd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cf490612434565b60405180910390fd5b505050565b6060611d118484600085611d1a565b90509392505050565b606082471015611d5f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d56906124c6565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051611d889190612560565b60006040518083038185875af1925050503d8060008114611dc5576040519150601f19603f3d011682016040523d82523d6000602084013e611dca565b606091505b5091509150611ddb87838387611de7565b92505050949350505050565b60608315611e4a57600083511415611e4257611e0285611e5d565b611e41576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e38906125c3565b60405180910390fd5b5b829050611e55565b611e548383611e80565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600082511115611e935781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ec79190612638565b60405180910390fd5b600080fd5b600067ffffffffffffffff82169050919050565b611ef281611ed5565b8114611efd57600080fd5b50565b600081359050611f0f81611ee9565b92915050565b600060208284031215611f2b57611f2a611ed0565b5b6000611f3984828501611f00565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611f6d82611f42565b9050919050565b611f7d81611f62565b8114611f8857600080fd5b50565b600081359050611f9a81611f74565b92915050565b6000819050919050565b611fb381611fa0565b8114611fbe57600080fd5b50565b600081359050611fd081611faa565b92915050565b60008060408385031215611fed57611fec611ed0565b5b6000611ffb85828601611f8b565b925050602061200c85828601611fc1565b9150509250929050565b60008115159050919050565b61202b81612016565b82525050565b60006020820190506120466000830184612022565b92915050565b60006fffffffffffffffffffffffffffffffff82169050919050565b6120718161204c565b811461207c57600080fd5b50565b60008135905061208e81612068565b92915050565b600080604083850312156120ab576120aa611ed0565b5b60006120b98582860161207f565b92505060206120ca8582860161207f565b9150509250929050565b6120dd81611fa0565b82525050565b60006020820190506120f860008301846120d4565b92915050565b60008060006060848603121561211757612116611ed0565b5b600061212586828701611f8b565b93505060206121368682870161207f565b92505060406121478682870161207f565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061218b82611fa0565b915061219683611fa0565b9250828210156121a9576121a8612151565b5b828203905092915050565b60006121bf8261204c565b91506121ca8361204c565b9250816fffffffffffffffffffffffffffffffff04831182151516156121f3576121f2612151565b5b828202905092915050565b600061220982611fa0565b915061221483611fa0565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561224d5761224c612151565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061229282611fa0565b915061229d83611fa0565b9250826122ad576122ac612258565b5b828204905092915050565b60006122c382611ed5565b915067ffffffffffffffff8214156122de576122dd612151565b5b600182019050919050565b6122f281611f62565b82525050565b600060608201905061230d60008301866122e9565b61231a60208301856122e9565b61232760408301846120d4565b949350505050565b600060408201905061234460008301856122e9565b61235160208301846120d4565b9392505050565b61236181612016565b811461236c57600080fd5b50565b60008151905061237e81612358565b92915050565b60006020828403121561239a57612399611ed0565b5b60006123a88482850161236f565b91505092915050565b600082825260208201905092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b600061241e602a836123b1565b9150612429826123c2565b604082019050919050565b6000602082019050818103600083015261244d81612411565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b60006124b06026836123b1565b91506124bb82612454565b604082019050919050565b600060208201905081810360008301526124df816124a3565b9050919050565b600081519050919050565b600081905092915050565b60005b8381101561251a5780820151818401526020810190506124ff565b83811115612529576000848401525b50505050565b600061253a826124e6565b61254481856124f1565b93506125548185602086016124fc565b80840191505092915050565b600061256c828461252f565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b60006125ad601d836123b1565b91506125b882612577565b602082019050919050565b600060208201905081810360008301526125dc816125a0565b9050919050565b600081519050919050565b6000601f19601f8301169050919050565b600061260a826125e3565b61261481856123b1565b93506126248185602086016124fc565b61262d816125ee565b840191505092915050565b6000602082019050818103600083015261265281846125ff565b90509291505056fea2646970667358221220fb40853da6b16a3af4af5e68d4c9402a880d0e5f80a99f7530f6e39845aad83c64736f6c63430008090033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x98C50FDD GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x98C50FDD EQ PUSH2 0x14E JUMPI DUP1 PUSH4 0xB8D7F980 EQ PUSH2 0x17E JUMPI DUP1 PUSH4 0xC0102DE4 EQ PUSH2 0x1AE JUMPI DUP1 PUSH4 0xD14485A2 EQ PUSH2 0x1CA JUMPI DUP1 PUSH4 0xDF0905C6 EQ PUSH2 0x1E6 JUMPI DUP1 PUSH4 0xFC993EA8 EQ PUSH2 0x216 JUMPI PUSH2 0xA9 JUMP JUMPDEST DUP1 PUSH4 0x25AC3A73 EQ PUSH2 0xAE JUMPI DUP1 PUSH4 0x2895CB7B EQ PUSH2 0xCA JUMPI DUP1 PUSH4 0x59DE2F60 EQ PUSH2 0xE6 JUMPI DUP1 PUSH4 0x762E9D30 EQ PUSH2 0x116 JUMPI DUP1 PUSH4 0x77BCD8A6 EQ PUSH2 0x132 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xC8 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xC3 SWAP2 SWAP1 PUSH2 0x1F15 JUMP JUMPDEST PUSH2 0x246 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xE4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xDF SWAP2 SWAP1 PUSH2 0x1F15 JUMP JUMPDEST PUSH2 0x4C3 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x100 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xFB SWAP2 SWAP1 PUSH2 0x1FD6 JUMP JUMPDEST PUSH2 0xA64 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x10D SWAP2 SWAP1 PUSH2 0x2031 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x130 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x12B SWAP2 SWAP1 PUSH2 0x1F15 JUMP JUMPDEST PUSH2 0xA93 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x14C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x147 SWAP2 SWAP1 PUSH2 0x1F15 JUMP JUMPDEST PUSH2 0xDEA JUMP JUMPDEST STOP JUMPDEST PUSH2 0x168 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x163 SWAP2 SWAP1 PUSH2 0x2094 JUMP JUMPDEST PUSH2 0x11C3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x175 SWAP2 SWAP1 PUSH2 0x20E3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x198 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x193 SWAP2 SWAP1 PUSH2 0x1FD6 JUMP JUMPDEST PUSH2 0x12E0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1A5 SWAP2 SWAP1 PUSH2 0x2031 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1C8 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1C3 SWAP2 SWAP1 PUSH2 0x1F15 JUMP JUMPDEST PUSH2 0x130F JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1E4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1DF SWAP2 SWAP1 PUSH2 0x20FE JUMP JUMPDEST PUSH2 0x15B7 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x200 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1FB SWAP2 SWAP1 PUSH2 0x1FD6 JUMP JUMPDEST PUSH2 0x197E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x20D SWAP2 SWAP1 PUSH2 0x2031 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x230 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x22B SWAP2 SWAP1 PUSH2 0x1FD6 JUMP JUMPDEST PUSH2 0x19AD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x23D SWAP2 SWAP1 PUSH2 0x2031 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH1 0x3 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE ISZERO PUSH2 0x2EF JUMPI PUSH1 0x40 MLOAD PUSH32 0x4232716900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x30F DUP3 PUSH2 0x19DC JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x35C JUMPI PUSH1 0x40 MLOAD PUSH32 0xD7C498BF00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x10 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH2 0x408 CALLER ADDRESS DUP4 PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1A30 SWAP1 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x3 PUSH1 0x2 PUSH1 0x0 DUP5 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0xFF AND MUL OR SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4CE DUP3 PUSH2 0x1AB9 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x4DB DUP4 PUSH2 0x19DC JUMP JUMPDEST SWAP1 POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x515 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 ISZERO ISZERO PUSH1 0x3 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP6 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO EQ PUSH2 0x58D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 ISZERO ISZERO PUSH1 0x6 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP6 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO EQ PUSH2 0x605 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x63D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP6 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 PUSH2 0x724 PUSH1 0x2 PUSH1 0x0 DUP8 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x2 PUSH1 0x0 DUP9 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x10 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x11C3 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x731 DUP3 PUSH2 0x1B0D JUMP JUMPDEST SWAP1 POP PUSH2 0x75E ADDRESS DUP3 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1BB4 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x794 DUP6 DUP3 DUP5 PUSH2 0x76E SWAP2 SWAP1 PUSH2 0x2180 JUMP JUMPDEST DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1BB4 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0x6 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP9 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x2 PUSH1 0x0 DUP9 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND EQ ISZERO PUSH2 0xA18 JUMPI PUSH1 0x0 ISZERO ISZERO PUSH1 0x7 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP9 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO EQ PUSH2 0x8C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP9 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x10 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x2 PUSH1 0x0 DUP10 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x95C SWAP2 SWAP1 PUSH2 0x21B4 JUMP JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH2 0x9A3 PUSH2 0x97C DUP9 PUSH2 0x1AB9 JUMP JUMPDEST DUP3 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1BB4 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0x7 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP10 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP POP JUMPDEST PUSH1 0x5 PUSH1 0x2 PUSH1 0x0 DUP9 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0xFF AND MUL OR SWAP1 SSTORE POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x4 PUSH1 0x20 MSTORE DUP2 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP2 POP SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH2 0x100 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP3 ADD PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP3 ADD PUSH1 0x9 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH7 0xFFFFFFFFFFFFFF AND PUSH7 0xFFFFFFFFFFFFFF AND PUSH7 0xFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP3 ADD PUSH1 0x10 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x4 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP POP SWAP1 POP PUSH1 0x1 DUP2 PUSH1 0x0 ADD MLOAD PUSH1 0xFF AND EQ PUSH2 0xCF2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP2 PUSH1 0xA0 ADD MLOAD SWAP1 POP PUSH2 0xD39 CALLER ADDRESS PUSH2 0xD12 DUP6 PUSH1 0x80 ADD MLOAD DUP7 PUSH1 0x60 ADD MLOAD PUSH2 0x11C3 JUMP JUMPDEST DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1A30 SWAP1 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST CALLER PUSH1 0x2 PUSH1 0x0 DUP6 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x4 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x2 DUP1 PUSH1 0x0 DUP6 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0xFF AND MUL OR SWAP1 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xDF5 DUP3 PUSH2 0x19DC JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xE2F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0xEA0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 ISZERO ISZERO PUSH1 0x5 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO EQ PUSH2 0xF18 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP5 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP6 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x10 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x2 PUSH1 0x0 DUP7 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1001 SWAP2 SWAP1 PUSH2 0x21B4 JUMP JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 PUSH2 0x10AD PUSH1 0x2 PUSH1 0x0 DUP8 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x2 PUSH1 0x0 DUP9 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x10 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x11C3 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x10BA DUP4 PUSH2 0x1B0D JUMP JUMPDEST SWAP1 POP PUSH2 0x10E7 ADDRESS DUP3 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1BB4 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x111D DUP6 DUP3 DUP6 PUSH2 0x10F7 SWAP2 SWAP1 PUSH2 0x2180 JUMP JUMPDEST DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1BB4 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x1148 DUP6 DUP4 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1BB4 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0x5 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP9 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 PUSH2 0x11D2 SWAP2 SWAP1 PUSH2 0x21B4 JUMP JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH9 0x56BC75E2D63100000 DUP2 LT ISZERO DUP1 ISZERO PUSH2 0x1207 JUMPI POP PUSH9 0x3635C9ADC5DEA00000 DUP2 LT JUMPDEST ISZERO PUSH2 0x122D JUMPI PUSH1 0x64 PUSH1 0x32 DUP3 PUSH2 0x121B SWAP2 SWAP1 PUSH2 0x21FE JUMP JUMPDEST PUSH2 0x1225 SWAP2 SWAP1 PUSH2 0x2287 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x12DA JUMP JUMPDEST PUSH9 0x3635C9ADC5DEA00000 DUP2 LT ISZERO DUP1 ISZERO PUSH2 0x124F JUMPI POP PUSH10 0x21E19E0C9BAB2400000 DUP2 LT JUMPDEST ISZERO PUSH2 0x1275 JUMPI PUSH1 0x64 PUSH1 0x28 DUP3 PUSH2 0x1263 SWAP2 SWAP1 PUSH2 0x21FE JUMP JUMPDEST PUSH2 0x126D SWAP2 SWAP1 PUSH2 0x2287 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x12DA JUMP JUMPDEST PUSH10 0x21E19E0C9BAB2400000 DUP2 GT ISZERO PUSH2 0x12A8 JUMPI PUSH1 0x64 PUSH1 0x19 DUP3 PUSH2 0x1296 SWAP2 SWAP1 PUSH2 0x21FE JUMP JUMPDEST PUSH2 0x12A0 SWAP2 SWAP1 PUSH2 0x2287 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x12DA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xE008B5F900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x6 PUSH1 0x20 MSTORE DUP2 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP2 POP SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x131A DUP3 PUSH2 0x1AB9 JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1381 JUMPI PUSH1 0x40 MLOAD PUSH32 0x472E017E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x2 PUSH1 0x0 DUP5 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND EQ PUSH2 0x13F5 JUMPI PUSH1 0x40 MLOAD PUSH32 0xDE4461CD00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP5 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x10 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP6 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 PUSH2 0x14B3 DUP3 DUP5 PUSH2 0x149C SWAP2 SWAP1 PUSH2 0x21B4 JUMP JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1B0D JUMP JUMPDEST SWAP1 POP PUSH2 0x1502 ADDRESS DUP3 PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1BB4 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x156C DUP5 DUP3 DUP6 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1524 SWAP2 SWAP1 PUSH2 0x2180 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1BB4 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x4 PUSH1 0x2 PUSH1 0x0 DUP8 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0xFF AND MUL OR SWAP1 SSTORE POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 PUSH2 0x15C5 SWAP2 SWAP1 PUSH2 0x21B4 JUMP JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH9 0x56BC75E2D63100000 DUP2 LT ISZERO PUSH2 0x161C JUMPI PUSH1 0x40 MLOAD PUSH32 0xE008B5F900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH2 0x100 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1 PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x7 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD TIMESTAMP PUSH7 0xFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP SWAP1 POP DUP1 PUSH1 0x2 PUSH1 0x0 DUP1 PUSH1 0x7 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0xFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH8 0xFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x9 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH7 0xFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH7 0xFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x60 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x10 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x80 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0xA0 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0xC0 DUP3 ADD MLOAD DUP2 PUSH1 0x3 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0xE0 DUP3 ADD MLOAD DUP2 PUSH1 0x4 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP SWAP1 POP POP PUSH2 0x192A CALLER ADDRESS DUP5 DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1A30 SWAP1 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 PUSH1 0x7 DUP2 DUP2 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND DUP1 SWAP3 SWAP2 SWAP1 PUSH2 0x1950 SWAP1 PUSH2 0x22B8 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH8 0xFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x5 PUSH1 0x20 MSTORE DUP2 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP2 POP SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x7 PUSH1 0x20 MSTORE DUP2 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP2 POP SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x4 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1AB3 DUP5 PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1A51 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x22F8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0x1C3A JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH9 0x56BC75E2D63100000 DUP3 LT ISZERO DUP1 ISZERO PUSH2 0x1B30 JUMPI POP PUSH9 0x3635C9ADC5DEA00000 DUP3 LT JUMPDEST ISZERO PUSH2 0x1B49 JUMPI PUSH1 0x64 DUP3 PUSH2 0x1B42 SWAP2 SWAP1 PUSH2 0x2287 JUMP JUMPDEST SWAP1 POP PUSH2 0x1BAF JUMP JUMPDEST PUSH9 0x3635C9ADC5DEA00000 DUP3 LT ISZERO DUP1 ISZERO PUSH2 0x1B6B JUMPI POP PUSH10 0x21E19E0C9BAB2400000 DUP3 LT JUMPDEST ISZERO PUSH2 0x1B84 JUMPI PUSH1 0xC8 DUP3 PUSH2 0x1B7D SWAP2 SWAP1 PUSH2 0x2287 JUMP JUMPDEST SWAP1 POP PUSH2 0x1BAF JUMP JUMPDEST PUSH10 0x21E19E0C9BAB2400000 DUP3 LT PUSH2 0x1BAA JUMPI PUSH2 0x190 DUP3 PUSH2 0x1BA3 SWAP2 SWAP1 PUSH2 0x2287 JUMP JUMPDEST SWAP1 POP PUSH2 0x1BAF JUMP JUMPDEST PUSH1 0x0 SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1C35 DUP4 PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1BD3 SWAP3 SWAP2 SWAP1 PUSH2 0x232F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0x1C3A JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C9C DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1D02 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD EQ DUP1 PUSH2 0x1CBE JUMPI POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x1CBD SWAP2 SWAP1 PUSH2 0x2384 JUMP JUMPDEST JUMPDEST PUSH2 0x1CFD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1CF4 SWAP1 PUSH2 0x2434 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1D11 DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x1D1A JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x1D5F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1D56 SWAP1 PUSH2 0x24C6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x1D88 SWAP2 SWAP1 PUSH2 0x2560 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1DC5 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1DCA JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x1DDB DUP8 DUP4 DUP4 DUP8 PUSH2 0x1DE7 JUMP JUMPDEST SWAP3 POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x1E4A JUMPI PUSH1 0x0 DUP4 MLOAD EQ ISZERO PUSH2 0x1E42 JUMPI PUSH2 0x1E02 DUP6 PUSH2 0x1E5D JUMP JUMPDEST PUSH2 0x1E41 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1E38 SWAP1 PUSH2 0x25C3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST DUP3 SWAP1 POP PUSH2 0x1E55 JUMP JUMPDEST PUSH2 0x1E54 DUP4 DUP4 PUSH2 0x1E80 JUMP JUMPDEST JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD GT ISZERO PUSH2 0x1E93 JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1EC7 SWAP2 SWAP1 PUSH2 0x2638 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1EF2 DUP2 PUSH2 0x1ED5 JUMP JUMPDEST DUP2 EQ PUSH2 0x1EFD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1F0F DUP2 PUSH2 0x1EE9 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1F2B JUMPI PUSH2 0x1F2A PUSH2 0x1ED0 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1F39 DUP5 DUP3 DUP6 ADD PUSH2 0x1F00 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1F6D DUP3 PUSH2 0x1F42 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1F7D DUP2 PUSH2 0x1F62 JUMP JUMPDEST DUP2 EQ PUSH2 0x1F88 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1F9A DUP2 PUSH2 0x1F74 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1FB3 DUP2 PUSH2 0x1FA0 JUMP JUMPDEST DUP2 EQ PUSH2 0x1FBE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1FD0 DUP2 PUSH2 0x1FAA JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1FED JUMPI PUSH2 0x1FEC PUSH2 0x1ED0 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1FFB DUP6 DUP3 DUP7 ADD PUSH2 0x1F8B JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x200C DUP6 DUP3 DUP7 ADD PUSH2 0x1FC1 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x202B DUP2 PUSH2 0x2016 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2046 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2022 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2071 DUP2 PUSH2 0x204C JUMP JUMPDEST DUP2 EQ PUSH2 0x207C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x208E DUP2 PUSH2 0x2068 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x20AB JUMPI PUSH2 0x20AA PUSH2 0x1ED0 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x20B9 DUP6 DUP3 DUP7 ADD PUSH2 0x207F JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x20CA DUP6 DUP3 DUP7 ADD PUSH2 0x207F JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x20DD DUP2 PUSH2 0x1FA0 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x20F8 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x20D4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2117 JUMPI PUSH2 0x2116 PUSH2 0x1ED0 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2125 DUP7 DUP3 DUP8 ADD PUSH2 0x1F8B JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x2136 DUP7 DUP3 DUP8 ADD PUSH2 0x207F JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x2147 DUP7 DUP3 DUP8 ADD PUSH2 0x207F JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x218B DUP3 PUSH2 0x1FA0 JUMP JUMPDEST SWAP2 POP PUSH2 0x2196 DUP4 PUSH2 0x1FA0 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 LT ISZERO PUSH2 0x21A9 JUMPI PUSH2 0x21A8 PUSH2 0x2151 JUMP JUMPDEST JUMPDEST DUP3 DUP3 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x21BF DUP3 PUSH2 0x204C JUMP JUMPDEST SWAP2 POP PUSH2 0x21CA DUP4 PUSH2 0x204C JUMP JUMPDEST SWAP3 POP DUP2 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x21F3 JUMPI PUSH2 0x21F2 PUSH2 0x2151 JUMP JUMPDEST JUMPDEST DUP3 DUP3 MUL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2209 DUP3 PUSH2 0x1FA0 JUMP JUMPDEST SWAP2 POP PUSH2 0x2214 DUP4 PUSH2 0x1FA0 JUMP JUMPDEST SWAP3 POP DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x224D JUMPI PUSH2 0x224C PUSH2 0x2151 JUMP JUMPDEST JUMPDEST DUP3 DUP3 MUL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2292 DUP3 PUSH2 0x1FA0 JUMP JUMPDEST SWAP2 POP PUSH2 0x229D DUP4 PUSH2 0x1FA0 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x22AD JUMPI PUSH2 0x22AC PUSH2 0x2258 JUMP JUMPDEST JUMPDEST DUP3 DUP3 DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x22C3 DUP3 PUSH2 0x1ED5 JUMP JUMPDEST SWAP2 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP3 EQ ISZERO PUSH2 0x22DE JUMPI PUSH2 0x22DD PUSH2 0x2151 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x22F2 DUP2 PUSH2 0x1F62 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x230D PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x22E9 JUMP JUMPDEST PUSH2 0x231A PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x22E9 JUMP JUMPDEST PUSH2 0x2327 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x20D4 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x2344 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x22E9 JUMP JUMPDEST PUSH2 0x2351 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x20D4 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x2361 DUP2 PUSH2 0x2016 JUMP JUMPDEST DUP2 EQ PUSH2 0x236C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x237E DUP2 PUSH2 0x2358 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x239A JUMPI PUSH2 0x2399 PUSH2 0x1ED0 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x23A8 DUP5 DUP3 DUP6 ADD PUSH2 0x236F JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F74207375636365656400000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x241E PUSH1 0x2A DUP4 PUSH2 0x23B1 JUMP JUMPDEST SWAP2 POP PUSH2 0x2429 DUP3 PUSH2 0x23C2 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x244D DUP2 PUSH2 0x2411 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x722063616C6C0000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x24B0 PUSH1 0x26 DUP4 PUSH2 0x23B1 JUMP JUMPDEST SWAP2 POP PUSH2 0x24BB DUP3 PUSH2 0x2454 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x24DF DUP2 PUSH2 0x24A3 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x251A JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x24FF JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x2529 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x253A DUP3 PUSH2 0x24E6 JUMP JUMPDEST PUSH2 0x2544 DUP2 DUP6 PUSH2 0x24F1 JUMP JUMPDEST SWAP4 POP PUSH2 0x2554 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x24FC JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x256C DUP3 DUP5 PUSH2 0x252F JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x25AD PUSH1 0x1D DUP4 PUSH2 0x23B1 JUMP JUMPDEST SWAP2 POP PUSH2 0x25B8 DUP3 PUSH2 0x2577 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x25DC DUP2 PUSH2 0x25A0 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x260A DUP3 PUSH2 0x25E3 JUMP JUMPDEST PUSH2 0x2614 DUP2 DUP6 PUSH2 0x23B1 JUMP JUMPDEST SWAP4 POP PUSH2 0x2624 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x24FC JUMP JUMPDEST PUSH2 0x262D DUP2 PUSH2 0x25EE JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2652 DUP2 DUP5 PUSH2 0x25FF JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xFB BLOCKHASH DUP6 RETURNDATASIZE 0xA6 0xB1 PUSH11 0x3AF4AF5E68D4C9402A880D 0xE 0x5F DUP1 0xA9 SWAP16 PUSH22 0x30F6E39845AAD83C64736F6C63430008090033000000 ",
							"sourceMap": "356:7522:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2852:607;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;5504:1433;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;929:64;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2141:582;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;4280:1137;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;7330:543;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1177:64;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3467:760;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1375:744;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1053:64;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1288;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2852:607;2992:5;2966:8;:20;2975:10;2966:20;;;;;;;;;;;;;;;:25;2987:3;2966:25;;;;;;;;;;;;;;:31;;;;;;;;;;;;;;;;;2963:65;;;3006:20;;;;;;;;;;;;;;2963:65;3136:10;3120:26;;:14;3130:3;3120:9;:14::i;:::-;:26;;;3117:51;;3155:11;;;;;;;;;;;;;;3117:51;3225:25;3251:9;:14;3261:3;3251:14;;;;;;;;;;;;;;;:29;;;;;;;;;;;;3225:55;;;;3291:81;3329:10;3348:4;3354:17;3298:12;;;;;;;;;;;3291:37;;;;:81;;;;;;:::i;:::-;3409:4;3383:8;:20;3392:10;3383:20;;;;;;;;;;;;;;;:25;3404:3;3383:25;;;;;;;;;;;;;;:30;;;;;;;;;;;;;;;;;;3450:1;3424:9;:14;3434:3;3424:14;;;;;;;;;;;;;;;:25;;;:27;;;;;;;;;;;;;;;;;;2898:561;2852:607;:::o;5504:1433::-;5563:13;5577;5586:3;5577:8;:13::i;:::-;5563:27;;5601:14;5616;5626:3;5616:9;:14::i;:::-;5601:29;;5694:5;5682:17;;:10;:17;;;5674:26;;;;;;5805:5;5782:28;;:8;:16;5791:6;5782:16;;;;;;;;;;;;;;;:21;5799:3;5782:21;;;;;;;;;;;;;;;;;;;;;;;:28;;;5774:37;;;;;;5864:5;5830:39;;:15;:27;5846:10;5830:27;;;;;;;;;;;;;;;:32;5858:3;5830:32;;;;;;;;;;;;;;;;;;;;;;;:39;;;5822:48;;;;;;5934:5;5922:17;;:10;:17;;;5914:26;;;;;;5953;5980:9;:14;5990:3;5980:14;;;;;;;;;;;;;;;:27;;;;;;;;;;;;5953:54;;6018:22;6041:63;6050:9;:14;6060:3;6050:14;;;;;;;;;;;;;;;:23;;;;;;;;;;;;6074:9;:14;6084:3;6074:14;;;;;;;;;;;;;;;:29;;;;;;;;;;;;6041:8;:63::i;:::-;6018:86;;6115:11;6127:27;6139:14;6127:11;:27::i;:::-;6115:39;;6183:96;6245:4;6265:3;6190:18;6183:39;;;;:96;;;;;:::i;:::-;6335:103;6389:5;6424:3;6409:14;:18;;;;:::i;:::-;6342;6335:39;;;;:103;;;;;:::i;:::-;6482:4;6449:15;:27;6465:10;6449:27;;;;;;;;;;;;;;;:32;6477:3;6449:32;;;;;;;;;;;;;;:37;;;;;;;;;;;;;;;;;;6529:1;6502:9;:14;6512:3;6502:14;;;;;;;;;;;;;;;:25;;;;;;;;;;;;:28;;;6499:393;;;6588:5;6554:39;;:15;:27;6570:10;6554:27;;;;;;;;;;;;;;;:32;6582:3;6554:32;;;;;;;;;;;;;;;;;;;;;;;:39;;;6546:48;;;;;;6609:13;6647:9;:14;6657:3;6647:14;;;;;;;;;;;;;;;:29;;;;;;;;;;;;6623:9;:14;6633:3;6623:14;;;;;;;;;;;;;;;:23;;;;;;;;;;;;:53;;;;:::i;:::-;6609:67;;;;6718:110;6776:13;6785:3;6776:8;:13::i;:::-;6808:5;6725:18;6718:39;;;;:110;;;;;:::i;:::-;6876:4;6843:15;:27;6859:10;6843:27;;;;;;;;;;;;;;;:32;6871:3;6843:32;;;;;;;;;;;;;;:37;;;;;;;;;;;;;;;;;;6531:361;6499:393;6928:1;6902:9;:14;6912:3;6902:14;;;;;;;;;;;;;;;:25;;;:27;;;;;;;;;;;;;;;;;;5552:1385;;;;;5504:1433;:::o;929:64::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;2141:582::-;2187:27;2215:9;:14;2225:3;2215:14;;;;;;;;;;;;;;;2187:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2272:1;2248:11;:22;;;:25;;;2240:34;;;;;;2315:26;2342:11;:24;;;2315:51;;2404:180;2462:10;2495:4;2515:58;2524:11;:20;;;2546:11;:26;;;2515:8;:58::i;:::-;2411:18;2404:43;;;;:180;;;;;;:::i;:::-;2624:10;2595:9;:14;2605:3;2595:14;;;;;;;;;;;;;;;:28;;;:39;;;;;;;;;;;;;;;;;;2714:1;2688:9;:14;2698:3;2688:14;;;;;;;;;;;;;;;:25;;;:27;;;;;;;;;;;;;;;;;;2176:547;;2141:582;:::o;4280:1137::-;4340:14;4355;4365:3;4355:9;:14::i;:::-;4340:29;;4433:6;4421:18;;:10;:18;;;4413:27;;;;;;4522:8;:16;4531:6;4522:16;;;;;;;;;;;;;;;:21;4539:3;4522:21;;;;;;;;;;;;;;;;;;;;;;;4514:30;;;;;;4630:5;4596:39;;:15;:27;4612:10;4596:27;;;;;;;;;;;;;;;:32;4624:3;4596:32;;;;;;;;;;;;;;;;;;;;;;;:39;;;4588:48;;;;;;4647:26;4674:9;:14;4684:3;4674:14;;;;;;;;;;;;;;;:27;;;;;;;;;;;;4647:54;;4712:13;4750:9;:14;4760:3;4750:14;;;;;;;;;;;;;;;:29;;;;;;;;;;;;4726:9;:14;4736:3;4726:14;;;;;;;;;;;;;;;:23;;;;;;;;;;;;:53;;;;:::i;:::-;4712:67;;;;4790:22;4813:63;4822:9;:14;4832:3;4822:14;;;;;;;;;;;;;;;:23;;;;;;;;;;;;4846:9;:14;4856:3;4846:14;;;;;;;;;;;;;;;:29;;;;;;;;;;;;4813:8;:63::i;:::-;4790:86;;4887:11;4899:18;4911:5;4899:11;:18::i;:::-;4887:30;;4970:58;5018:4;5024:3;4977:18;4970:39;;;;:58;;;;;:::i;:::-;5069:95;5123:6;5150:3;5144:5;:9;;;;:::i;:::-;5076:18;5069:39;;;;:95;;;;;:::i;:::-;5223:100;5277:6;5298:14;5230:18;5223:39;;;;:100;;;;;:::i;:::-;5404:4;5371:15;:27;5387:10;5371:27;;;;;;;;;;;;;;;:32;5399:3;5371:32;;;;;;;;;;;;;;:37;;;;;;;;;;;;;;;;;;4329:1088;;;;;4280:1137;:::o;7330:543::-;7409:7;7428:18;7460:11;7449:10;:22;;;;:::i;:::-;7428:43;;;;7500:9;7486:10;:23;;:50;;;;;7526:10;7513;:23;7486:50;7482:384;;;7580:3;7574:2;7561:10;:15;;;;:::i;:::-;7560:23;;;;:::i;:::-;7553:30;;;;;7482:384;7619:10;7605;:24;;:52;;;;;7646:11;7633:10;:24;7605:52;7601:265;;;7701:3;7695:2;7682:10;:15;;;;:::i;:::-;7681:23;;;;:::i;:::-;7674:30;;;;;7601:265;7739:11;7726:10;:24;7722:144;;;7794:3;7788:2;7775:10;:15;;;;:::i;:::-;7774:23;;;;:::i;:::-;7767:30;;;;;7722:144;7837:17;;;;;;;;;;;;;;7330:543;;;;;:::o;1177:64::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;3467:760::-;3527:13;3541;3550:3;3541:8;:13::i;:::-;3527:27;;3613:5;3601:17;;:10;:17;;;3598:41;;3627:10;;;;;;;;;;;;;;3598:41;3742:1;3715:9;:14;3725:3;3715:14;;;;;;;;;;;;;;;:25;;;;;;;;;;;;:28;;;3712:58;;3752:16;;;;;;;;;;;;;;3712:58;3781:17;3799:9;:14;3809:3;3799:14;;;;;;;;;;;;;;;:29;;;;;;;;;;;;3781:47;;3839:18;3858:9;:14;3868:3;3858:14;;;;;;;;;;;;;;;:23;;;;;;;;;;;;3839:42;;3936:11;3948:33;3970:10;3960:9;:20;;;;:::i;:::-;3948:33;;:11;:33::i;:::-;3936:45;;4034:52;4076:4;4082:3;4041:12;;;;;;;;;;;4034:33;;;;:52;;;;;:::i;:::-;4127:54;4161:5;4177:3;4167:9;:13;;;;;;:::i;:::-;4134:12;;;;;;;;;;;4127:33;;;;:54;;;;;:::i;:::-;4218:1;4192:9;:14;4202:3;4192:14;;;;;;;;;;;;;;;:25;;;:27;;;;;;;;;;;;;;;;;;3516:711;;;;3467:760;:::o;1375:744::-;1466:10;1488:9;1477:10;:20;;;;:::i;:::-;1466:31;;;;1517:9;1511:5;:15;1508:70;;;1549:17;;;;;;;;;;;;;;1508:70;1588:27;1616:313;;;;;;;;1651:1;1616:313;;;;;;1675:2;;;;;;;;;;;1616:313;;;;;;1707:15;1616:313;;;;;;1753:10;1616:313;;;;;;1787:9;1616:313;;;;;;1824:13;1616:313;;;;;;1865:10;1616:313;;;;;;1912:4;1616:313;;;;;1588:341;;1954:11;1940:9;:13;1950:2;;;;;;;;;;;1940:13;;;;;;;;;;;;;;;:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2026:70;2065:10;2084:4;2090:5;2033:13;2026:38;;;;:70;;;;;;:::i;:::-;2107:2;;:4;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;1455:664;;1375:744;;;:::o;1053:64::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;1288:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;7150:114::-;7202:7;7228:9;:14;7238:3;7228:14;;;;;;;;;;;;;;;:28;;;;;;;;;;;;7221:35;;7150:114;;;:::o;1447:205:18:-;1548:96;1568:5;1598:27;;;1627:4;1633:2;1637:5;1575:68;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1548:19;:96::i;:::-;1447:205;;;;:::o;6990:112:1:-;7041:7;7067:9;:14;7077:3;7067:14;;;;;;;;;;;;;;;:27;;;;;;;;;;;;7060:34;;6990:112;;;:::o;250:430:19:-;306:17;352:9;338:12;:23;;:50;;;;;378:10;365:12;:23;338:50;335:338;;;424:3;411:12;:16;;;;:::i;:::-;404:23;;;;335:338;461:10;447:12;:24;;:52;;;;;488:11;475:12;:24;447:52;444:229;;;535:3;522:12;:16;;;;:::i;:::-;515:23;;;;444:229;572:11;558:12;:25;555:118;;619:3;606:12;:16;;;;:::i;:::-;599:23;;;;555:118;660:1;653:8;;250:430;;;;:::o;1025:177:18:-;1108:86;1128:5;1158:23;;;1183:2;1187:5;1135:58;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1108:19;:86::i;:::-;1025:177;;;:::o;5371:649::-;5795:23;5821:69;5849:4;5821:69;;;;;;;;;;;;;;;;;5829:5;5821:27;;;;:69;;;;;:::i;:::-;5795:95;;5930:1;5909:10;:17;:22;:56;;;;5946:10;5935:30;;;;;;;;;;;;:::i;:::-;5909:56;5901:111;;;;;;;;;;;;:::i;:::-;;;;;;;;;5441:579;5371:649;;:::o;4207:229:16:-;4344:12;4376:52;4398:6;4406:4;4412:1;4415:12;4376:21;:52::i;:::-;4369:59;;4207:229;;;;;:::o;5293:455::-;5463:12;5521:5;5496:21;:30;;5488:81;;;;;;;;;;;;:::i;:::-;;;;;;;;;5581:12;5595:23;5622:6;:11;;5641:5;5648:4;5622:31;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5580:73;;;;5671:69;5698:6;5706:7;5715:10;5727:12;5671:26;:69::i;:::-;5664:76;;;;5293:455;;;;;;:::o;7866:644::-;8051:12;8080:7;8076:427;;;8129:1;8108:10;:17;:22;8104:290;;;8326:18;8337:6;8326:10;:18::i;:::-;8318:60;;;;;;;;;;;;:::i;:::-;;;;;;;;;8104:290;8415:10;8408:17;;;;8076:427;8458:33;8466:10;8478:12;8458:7;:33::i;:::-;7866:644;;;;;;;:::o;1452:326::-;1512:4;1769:1;1747:7;:19;;;:23;1740:30;;1452:326;;;:::o;9052:552::-;9233:1;9213:10;:17;:21;9209:388;;;9445:10;9439:17;9502:15;9489:10;9485:2;9481:19;9474:44;9209:388;9572:12;9565:20;;;;;;;;;;;:::i;:::-;;;;;;;;88:117:20;197:1;194;187:12;334:101;370:7;410:18;403:5;399:30;388:41;;334:101;;;:::o;441:120::-;513:23;530:5;513:23;:::i;:::-;506:5;503:34;493:62;;551:1;548;541:12;493:62;441:120;:::o;567:137::-;612:5;650:6;637:20;628:29;;666:32;692:5;666:32;:::i;:::-;567:137;;;;:::o;710:327::-;768:6;817:2;805:9;796:7;792:23;788:32;785:119;;;823:79;;:::i;:::-;785:119;943:1;968:52;1012:7;1003:6;992:9;988:22;968:52;:::i;:::-;958:62;;914:116;710:327;;;;:::o;1043:126::-;1080:7;1120:42;1113:5;1109:54;1098:65;;1043:126;;;:::o;1175:96::-;1212:7;1241:24;1259:5;1241:24;:::i;:::-;1230:35;;1175:96;;;:::o;1277:122::-;1350:24;1368:5;1350:24;:::i;:::-;1343:5;1340:35;1330:63;;1389:1;1386;1379:12;1330:63;1277:122;:::o;1405:139::-;1451:5;1489:6;1476:20;1467:29;;1505:33;1532:5;1505:33;:::i;:::-;1405:139;;;;:::o;1550:77::-;1587:7;1616:5;1605:16;;1550:77;;;:::o;1633:122::-;1706:24;1724:5;1706:24;:::i;:::-;1699:5;1696:35;1686:63;;1745:1;1742;1735:12;1686:63;1633:122;:::o;1761:139::-;1807:5;1845:6;1832:20;1823:29;;1861:33;1888:5;1861:33;:::i;:::-;1761:139;;;;:::o;1906:474::-;1974:6;1982;2031:2;2019:9;2010:7;2006:23;2002:32;1999:119;;;2037:79;;:::i;:::-;1999:119;2157:1;2182:53;2227:7;2218:6;2207:9;2203:22;2182:53;:::i;:::-;2172:63;;2128:117;2284:2;2310:53;2355:7;2346:6;2335:9;2331:22;2310:53;:::i;:::-;2300:63;;2255:118;1906:474;;;;;:::o;2386:90::-;2420:7;2463:5;2456:13;2449:21;2438:32;;2386:90;;;:::o;2482:109::-;2563:21;2578:5;2563:21;:::i;:::-;2558:3;2551:34;2482:109;;:::o;2597:210::-;2684:4;2722:2;2711:9;2707:18;2699:26;;2735:65;2797:1;2786:9;2782:17;2773:6;2735:65;:::i;:::-;2597:210;;;;:::o;2813:118::-;2850:7;2890:34;2883:5;2879:46;2868:57;;2813:118;;;:::o;2937:122::-;3010:24;3028:5;3010:24;:::i;:::-;3003:5;3000:35;2990:63;;3049:1;3046;3039:12;2990:63;2937:122;:::o;3065:139::-;3111:5;3149:6;3136:20;3127:29;;3165:33;3192:5;3165:33;:::i;:::-;3065:139;;;;:::o;3210:474::-;3278:6;3286;3335:2;3323:9;3314:7;3310:23;3306:32;3303:119;;;3341:79;;:::i;:::-;3303:119;3461:1;3486:53;3531:7;3522:6;3511:9;3507:22;3486:53;:::i;:::-;3476:63;;3432:117;3588:2;3614:53;3659:7;3650:6;3639:9;3635:22;3614:53;:::i;:::-;3604:63;;3559:118;3210:474;;;;;:::o;3690:118::-;3777:24;3795:5;3777:24;:::i;:::-;3772:3;3765:37;3690:118;;:::o;3814:222::-;3907:4;3945:2;3934:9;3930:18;3922:26;;3958:71;4026:1;4015:9;4011:17;4002:6;3958:71;:::i;:::-;3814:222;;;;:::o;4042:619::-;4119:6;4127;4135;4184:2;4172:9;4163:7;4159:23;4155:32;4152:119;;;4190:79;;:::i;:::-;4152:119;4310:1;4335:53;4380:7;4371:6;4360:9;4356:22;4335:53;:::i;:::-;4325:63;;4281:117;4437:2;4463:53;4508:7;4499:6;4488:9;4484:22;4463:53;:::i;:::-;4453:63;;4408:118;4565:2;4591:53;4636:7;4627:6;4616:9;4612:22;4591:53;:::i;:::-;4581:63;;4536:118;4042:619;;;;;:::o;4667:180::-;4715:77;4712:1;4705:88;4812:4;4809:1;4802:15;4836:4;4833:1;4826:15;4853:191;4893:4;4913:20;4931:1;4913:20;:::i;:::-;4908:25;;4947:20;4965:1;4947:20;:::i;:::-;4942:25;;4986:1;4983;4980:8;4977:34;;;4991:18;;:::i;:::-;4977:34;5036:1;5033;5029:9;5021:17;;4853:191;;;;:::o;5050:316::-;5090:7;5113:20;5131:1;5113:20;:::i;:::-;5108:25;;5147:20;5165:1;5147:20;:::i;:::-;5142:25;;5303:1;5267:34;5263:42;5260:1;5257:49;5252:1;5245:9;5238:17;5234:73;5231:99;;;5310:18;;:::i;:::-;5231:99;5358:1;5355;5351:9;5340:20;;5050:316;;;;:::o;5372:348::-;5412:7;5435:20;5453:1;5435:20;:::i;:::-;5430:25;;5469:20;5487:1;5469:20;:::i;:::-;5464:25;;5657:1;5589:66;5585:74;5582:1;5579:81;5574:1;5567:9;5560:17;5556:105;5553:131;;;5664:18;;:::i;:::-;5553:131;5712:1;5709;5705:9;5694:20;;5372:348;;;;:::o;5726:180::-;5774:77;5771:1;5764:88;5871:4;5868:1;5861:15;5895:4;5892:1;5885:15;5912:185;5952:1;5969:20;5987:1;5969:20;:::i;:::-;5964:25;;6003:20;6021:1;6003:20;:::i;:::-;5998:25;;6042:1;6032:35;;6047:18;;:::i;:::-;6032:35;6089:1;6086;6082:9;6077:14;;5912:185;;;;:::o;6103:183::-;6141:3;6164:23;6181:5;6164:23;:::i;:::-;6155:32;;6209:18;6202:5;6199:29;6196:55;;;6231:18;;:::i;:::-;6196:55;6278:1;6271:5;6267:13;6260:20;;6103:183;;;:::o;6292:118::-;6379:24;6397:5;6379:24;:::i;:::-;6374:3;6367:37;6292:118;;:::o;6416:442::-;6565:4;6603:2;6592:9;6588:18;6580:26;;6616:71;6684:1;6673:9;6669:17;6660:6;6616:71;:::i;:::-;6697:72;6765:2;6754:9;6750:18;6741:6;6697:72;:::i;:::-;6779;6847:2;6836:9;6832:18;6823:6;6779:72;:::i;:::-;6416:442;;;;;;:::o;6864:332::-;6985:4;7023:2;7012:9;7008:18;7000:26;;7036:71;7104:1;7093:9;7089:17;7080:6;7036:71;:::i;:::-;7117:72;7185:2;7174:9;7170:18;7161:6;7117:72;:::i;:::-;6864:332;;;;;:::o;7202:116::-;7272:21;7287:5;7272:21;:::i;:::-;7265:5;7262:32;7252:60;;7308:1;7305;7298:12;7252:60;7202:116;:::o;7324:137::-;7378:5;7409:6;7403:13;7394:22;;7425:30;7449:5;7425:30;:::i;:::-;7324:137;;;;:::o;7467:345::-;7534:6;7583:2;7571:9;7562:7;7558:23;7554:32;7551:119;;;7589:79;;:::i;:::-;7551:119;7709:1;7734:61;7787:7;7778:6;7767:9;7763:22;7734:61;:::i;:::-;7724:71;;7680:125;7467:345;;;;:::o;7818:169::-;7902:11;7936:6;7931:3;7924:19;7976:4;7971:3;7967:14;7952:29;;7818:169;;;;:::o;7993:229::-;8133:34;8129:1;8121:6;8117:14;8110:58;8202:12;8197:2;8189:6;8185:15;8178:37;7993:229;:::o;8228:366::-;8370:3;8391:67;8455:2;8450:3;8391:67;:::i;:::-;8384:74;;8467:93;8556:3;8467:93;:::i;:::-;8585:2;8580:3;8576:12;8569:19;;8228:366;;;:::o;8600:419::-;8766:4;8804:2;8793:9;8789:18;8781:26;;8853:9;8847:4;8843:20;8839:1;8828:9;8824:17;8817:47;8881:131;9007:4;8881:131;:::i;:::-;8873:139;;8600:419;;;:::o;9025:225::-;9165:34;9161:1;9153:6;9149:14;9142:58;9234:8;9229:2;9221:6;9217:15;9210:33;9025:225;:::o;9256:366::-;9398:3;9419:67;9483:2;9478:3;9419:67;:::i;:::-;9412:74;;9495:93;9584:3;9495:93;:::i;:::-;9613:2;9608:3;9604:12;9597:19;;9256:366;;;:::o;9628:419::-;9794:4;9832:2;9821:9;9817:18;9809:26;;9881:9;9875:4;9871:20;9867:1;9856:9;9852:17;9845:47;9909:131;10035:4;9909:131;:::i;:::-;9901:139;;9628:419;;;:::o;10053:98::-;10104:6;10138:5;10132:12;10122:22;;10053:98;;;:::o;10157:147::-;10258:11;10295:3;10280:18;;10157:147;;;;:::o;10310:307::-;10378:1;10388:113;10402:6;10399:1;10396:13;10388:113;;;10487:1;10482:3;10478:11;10472:18;10468:1;10463:3;10459:11;10452:39;10424:2;10421:1;10417:10;10412:15;;10388:113;;;10519:6;10516:1;10513:13;10510:101;;;10599:1;10590:6;10585:3;10581:16;10574:27;10510:101;10359:258;10310:307;;;:::o;10623:373::-;10727:3;10755:38;10787:5;10755:38;:::i;:::-;10809:88;10890:6;10885:3;10809:88;:::i;:::-;10802:95;;10906:52;10951:6;10946:3;10939:4;10932:5;10928:16;10906:52;:::i;:::-;10983:6;10978:3;10974:16;10967:23;;10731:265;10623:373;;;;:::o;11002:271::-;11132:3;11154:93;11243:3;11234:6;11154:93;:::i;:::-;11147:100;;11264:3;11257:10;;11002:271;;;;:::o;11279:179::-;11419:31;11415:1;11407:6;11403:14;11396:55;11279:179;:::o;11464:366::-;11606:3;11627:67;11691:2;11686:3;11627:67;:::i;:::-;11620:74;;11703:93;11792:3;11703:93;:::i;:::-;11821:2;11816:3;11812:12;11805:19;;11464:366;;;:::o;11836:419::-;12002:4;12040:2;12029:9;12025:18;12017:26;;12089:9;12083:4;12079:20;12075:1;12064:9;12060:17;12053:47;12117:131;12243:4;12117:131;:::i;:::-;12109:139;;11836:419;;;:::o;12261:99::-;12313:6;12347:5;12341:12;12331:22;;12261:99;;;:::o;12366:102::-;12407:6;12458:2;12454:7;12449:2;12442:5;12438:14;12434:28;12424:38;;12366:102;;;:::o;12474:364::-;12562:3;12590:39;12623:5;12590:39;:::i;:::-;12645:71;12709:6;12704:3;12645:71;:::i;:::-;12638:78;;12725:52;12770:6;12765:3;12758:4;12751:5;12747:16;12725:52;:::i;:::-;12802:29;12824:6;12802:29;:::i;:::-;12797:3;12793:39;12786:46;;12566:272;12474:364;;;;:::o;12844:313::-;12957:4;12995:2;12984:9;12980:18;12972:26;;13044:9;13038:4;13034:20;13030:1;13019:9;13015:17;13008:47;13072:78;13145:4;13136:6;13072:78;:::i;:::-;13064:86;;12844:313;;;;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "1974400",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"Sale(uint64)": "infinite",
								"buy(address,uint128,uint128)": "infinite",
								"buyerWithdrawAirdorp(uint64)": "infinite",
								"buyerWithdrawRefund(uint64)": "infinite",
								"getPenal(uint128,uint128)": "infinite",
								"injectFutureToken(uint64)": "infinite",
								"solderWithdrawStable(uint64)": "infinite",
								"userIfWithdraw1(address,uint256)": "3132",
								"userIfWithdraw2(address,uint256)": "3175",
								"userIfWithdraw3(address,uint256)": "3109",
								"userIfWithdraw4(address,uint256)": "3197"
							},
							"internal": {
								"getBuyer(uint64)": "2266",
								"getSolder(uint64)": "2266"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 356,
									"end": 7878,
									"name": "PUSH",
									"source": 1,
									"value": "80"
								},
								{
									"begin": 356,
									"end": 7878,
									"name": "PUSH",
									"source": 1,
									"value": "40"
								},
								{
									"begin": 356,
									"end": 7878,
									"name": "MSTORE",
									"source": 1
								},
								{
									"begin": 525,
									"end": 668,
									"name": "CALLVALUE",
									"source": 1
								},
								{
									"begin": 525,
									"end": 668,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 525,
									"end": 668,
									"name": "ISZERO",
									"source": 1
								},
								{
									"begin": 525,
									"end": 668,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 525,
									"end": 668,
									"name": "JUMPI",
									"source": 1
								},
								{
									"begin": 525,
									"end": 668,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 525,
									"end": 668,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 525,
									"end": 668,
									"name": "REVERT",
									"source": 1
								},
								{
									"begin": 525,
									"end": 668,
									"name": "tag",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 525,
									"end": 668,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 525,
									"end": 668,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 525,
									"end": 668,
									"name": "PUSH",
									"source": 1,
									"value": "40"
								},
								{
									"begin": 525,
									"end": 668,
									"name": "MLOAD",
									"source": 1
								},
								{
									"begin": 525,
									"end": 668,
									"name": "PUSHSIZE",
									"source": 1
								},
								{
									"begin": 525,
									"end": 668,
									"name": "CODESIZE",
									"source": 1
								},
								{
									"begin": 525,
									"end": 668,
									"name": "SUB",
									"source": 1
								},
								{
									"begin": 525,
									"end": 668,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 525,
									"end": 668,
									"name": "PUSHSIZE",
									"source": 1
								},
								{
									"begin": 525,
									"end": 668,
									"name": "DUP4",
									"source": 1
								},
								{
									"begin": 525,
									"end": 668,
									"name": "CODECOPY",
									"source": 1
								},
								{
									"begin": 525,
									"end": 668,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 525,
									"end": 668,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 525,
									"end": 668,
									"name": "ADD",
									"source": 1
								},
								{
									"begin": 525,
									"end": 668,
									"name": "PUSH",
									"source": 1,
									"value": "40"
								},
								{
									"begin": 525,
									"end": 668,
									"name": "MSTORE",
									"source": 1
								},
								{
									"begin": 525,
									"end": 668,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 525,
									"end": 668,
									"name": "ADD",
									"source": 1
								},
								{
									"begin": 525,
									"end": 668,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 525,
									"end": 668,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "2"
								},
								{
									"begin": 525,
									"end": 668,
									"name": "SWAP2",
									"source": 1
								},
								{
									"begin": 525,
									"end": 668,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 525,
									"end": 668,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "3"
								},
								{
									"begin": 525,
									"end": 668,
									"name": "JUMP",
									"source": 1,
									"value": "[in]"
								},
								{
									"begin": 525,
									"end": 668,
									"name": "tag",
									"source": 1,
									"value": "2"
								},
								{
									"begin": 525,
									"end": 668,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 602,
									"end": 615,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 589,
									"end": 601,
									"name": "PUSH",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 589,
									"end": 601,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 589,
									"end": 615,
									"name": "PUSH",
									"source": 1,
									"value": "100"
								},
								{
									"begin": 589,
									"end": 615,
									"name": "EXP",
									"source": 1
								},
								{
									"begin": 589,
									"end": 615,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 589,
									"end": 615,
									"name": "SLOAD",
									"source": 1
								},
								{
									"begin": 589,
									"end": 615,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 589,
									"end": 615,
									"name": "PUSH",
									"source": 1,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 589,
									"end": 615,
									"name": "MUL",
									"source": 1
								},
								{
									"begin": 589,
									"end": 615,
									"name": "NOT",
									"source": 1
								},
								{
									"begin": 589,
									"end": 615,
									"name": "AND",
									"source": 1
								},
								{
									"begin": 589,
									"end": 615,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 589,
									"end": 615,
									"name": "DUP4",
									"source": 1
								},
								{
									"begin": 589,
									"end": 615,
									"name": "PUSH",
									"source": 1,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 589,
									"end": 615,
									"name": "AND",
									"source": 1
								},
								{
									"begin": 589,
									"end": 615,
									"name": "MUL",
									"source": 1
								},
								{
									"begin": 589,
									"end": 615,
									"name": "OR",
									"source": 1
								},
								{
									"begin": 589,
									"end": 615,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 589,
									"end": 615,
									"name": "SSTORE",
									"source": 1
								},
								{
									"begin": 589,
									"end": 615,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 646,
									"end": 659,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 626,
									"end": 638,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 626,
									"end": 638,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 626,
									"end": 660,
									"name": "PUSH",
									"source": 1,
									"value": "100"
								},
								{
									"begin": 626,
									"end": 660,
									"name": "EXP",
									"source": 1
								},
								{
									"begin": 626,
									"end": 660,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 626,
									"end": 660,
									"name": "SLOAD",
									"source": 1
								},
								{
									"begin": 626,
									"end": 660,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 626,
									"end": 660,
									"name": "PUSH",
									"source": 1,
									"value": "FFFFFFFFFFFFFF"
								},
								{
									"begin": 626,
									"end": 660,
									"name": "MUL",
									"source": 1
								},
								{
									"begin": 626,
									"end": 660,
									"name": "NOT",
									"source": 1
								},
								{
									"begin": 626,
									"end": 660,
									"name": "AND",
									"source": 1
								},
								{
									"begin": 626,
									"end": 660,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 626,
									"end": 660,
									"name": "DUP4",
									"source": 1
								},
								{
									"begin": 626,
									"end": 660,
									"name": "PUSH",
									"source": 1,
									"value": "FFFFFFFFFFFFFF"
								},
								{
									"begin": 626,
									"end": 660,
									"name": "AND",
									"source": 1
								},
								{
									"begin": 626,
									"end": 660,
									"name": "MUL",
									"source": 1
								},
								{
									"begin": 626,
									"end": 660,
									"name": "OR",
									"source": 1
								},
								{
									"begin": 626,
									"end": 660,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 626,
									"end": 660,
									"name": "SSTORE",
									"source": 1
								},
								{
									"begin": 626,
									"end": 660,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 525,
									"end": 668,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 525,
									"end": 668,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 356,
									"end": 7878,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "6"
								},
								{
									"begin": 356,
									"end": 7878,
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 88,
									"end": 205,
									"name": "tag",
									"source": 20,
									"value": "8"
								},
								{
									"begin": 88,
									"end": 205,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 197,
									"end": 198,
									"name": "PUSH",
									"source": 20,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 195,
									"name": "DUP1",
									"source": 20
								},
								{
									"begin": 187,
									"end": 199,
									"name": "REVERT",
									"source": 20
								},
								{
									"begin": 334,
									"end": 460,
									"name": "tag",
									"source": 20,
									"value": "10"
								},
								{
									"begin": 334,
									"end": 460,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 371,
									"end": 378,
									"name": "PUSH",
									"source": 20,
									"value": "0"
								},
								{
									"begin": 411,
									"end": 453,
									"name": "PUSH",
									"source": 20,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 404,
									"end": 409,
									"name": "DUP3",
									"source": 20
								},
								{
									"begin": 400,
									"end": 454,
									"name": "AND",
									"source": 20
								},
								{
									"begin": 389,
									"end": 454,
									"name": "SWAP1",
									"source": 20
								},
								{
									"begin": 389,
									"end": 454,
									"name": "POP",
									"source": 20
								},
								{
									"begin": 334,
									"end": 460,
									"name": "SWAP2",
									"source": 20
								},
								{
									"begin": 334,
									"end": 460,
									"name": "SWAP1",
									"source": 20
								},
								{
									"begin": 334,
									"end": 460,
									"name": "POP",
									"source": 20
								},
								{
									"begin": 334,
									"end": 460,
									"name": "JUMP",
									"source": 20,
									"value": "[out]"
								},
								{
									"begin": 466,
									"end": 562,
									"name": "tag",
									"source": 20,
									"value": "11"
								},
								{
									"begin": 466,
									"end": 562,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 503,
									"end": 510,
									"name": "PUSH",
									"source": 20,
									"value": "0"
								},
								{
									"begin": 532,
									"end": 556,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "23"
								},
								{
									"begin": 550,
									"end": 555,
									"name": "DUP3",
									"source": 20
								},
								{
									"begin": 532,
									"end": 556,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "10"
								},
								{
									"begin": 532,
									"end": 556,
									"name": "JUMP",
									"source": 20,
									"value": "[in]"
								},
								{
									"begin": 532,
									"end": 556,
									"name": "tag",
									"source": 20,
									"value": "23"
								},
								{
									"begin": 532,
									"end": 556,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 521,
									"end": 556,
									"name": "SWAP1",
									"source": 20
								},
								{
									"begin": 521,
									"end": 556,
									"name": "POP",
									"source": 20
								},
								{
									"begin": 466,
									"end": 562,
									"name": "SWAP2",
									"source": 20
								},
								{
									"begin": 466,
									"end": 562,
									"name": "SWAP1",
									"source": 20
								},
								{
									"begin": 466,
									"end": 562,
									"name": "POP",
									"source": 20
								},
								{
									"begin": 466,
									"end": 562,
									"name": "JUMP",
									"source": 20,
									"value": "[out]"
								},
								{
									"begin": 568,
									"end": 690,
									"name": "tag",
									"source": 20,
									"value": "12"
								},
								{
									"begin": 568,
									"end": 690,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 641,
									"end": 665,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "25"
								},
								{
									"begin": 659,
									"end": 664,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 641,
									"end": 665,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "11"
								},
								{
									"begin": 641,
									"end": 665,
									"name": "JUMP",
									"source": 20,
									"value": "[in]"
								},
								{
									"begin": 641,
									"end": 665,
									"name": "tag",
									"source": 20,
									"value": "25"
								},
								{
									"begin": 641,
									"end": 665,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 634,
									"end": 639,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 631,
									"end": 666,
									"name": "EQ",
									"source": 20
								},
								{
									"begin": 621,
									"end": 684,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "26"
								},
								{
									"begin": 621,
									"end": 684,
									"name": "JUMPI",
									"source": 20
								},
								{
									"begin": 680,
									"end": 681,
									"name": "PUSH",
									"source": 20,
									"value": "0"
								},
								{
									"begin": 677,
									"end": 678,
									"name": "DUP1",
									"source": 20
								},
								{
									"begin": 670,
									"end": 682,
									"name": "REVERT",
									"source": 20
								},
								{
									"begin": 621,
									"end": 684,
									"name": "tag",
									"source": 20,
									"value": "26"
								},
								{
									"begin": 621,
									"end": 684,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 568,
									"end": 690,
									"name": "POP",
									"source": 20
								},
								{
									"begin": 568,
									"end": 690,
									"name": "JUMP",
									"source": 20,
									"value": "[out]"
								},
								{
									"begin": 696,
									"end": 839,
									"name": "tag",
									"source": 20,
									"value": "13"
								},
								{
									"begin": 696,
									"end": 839,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 753,
									"end": 758,
									"name": "PUSH",
									"source": 20,
									"value": "0"
								},
								{
									"begin": 784,
									"end": 790,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 778,
									"end": 791,
									"name": "MLOAD",
									"source": 20
								},
								{
									"begin": 769,
									"end": 791,
									"name": "SWAP1",
									"source": 20
								},
								{
									"begin": 769,
									"end": 791,
									"name": "POP",
									"source": 20
								},
								{
									"begin": 800,
									"end": 833,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "28"
								},
								{
									"begin": 827,
									"end": 832,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 800,
									"end": 833,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "12"
								},
								{
									"begin": 800,
									"end": 833,
									"name": "JUMP",
									"source": 20,
									"value": "[in]"
								},
								{
									"begin": 800,
									"end": 833,
									"name": "tag",
									"source": 20,
									"value": "28"
								},
								{
									"begin": 800,
									"end": 833,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 696,
									"end": 839,
									"name": "SWAP3",
									"source": 20
								},
								{
									"begin": 696,
									"end": 839,
									"name": "SWAP2",
									"source": 20
								},
								{
									"begin": 696,
									"end": 839,
									"name": "POP",
									"source": 20
								},
								{
									"begin": 696,
									"end": 839,
									"name": "POP",
									"source": 20
								},
								{
									"begin": 696,
									"end": 839,
									"name": "JUMP",
									"source": 20,
									"value": "[out]"
								},
								{
									"begin": 845,
									"end": 922,
									"name": "tag",
									"source": 20,
									"value": "14"
								},
								{
									"begin": 845,
									"end": 922,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 882,
									"end": 889,
									"name": "PUSH",
									"source": 20,
									"value": "0"
								},
								{
									"begin": 911,
									"end": 916,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 900,
									"end": 916,
									"name": "SWAP1",
									"source": 20
								},
								{
									"begin": 900,
									"end": 916,
									"name": "POP",
									"source": 20
								},
								{
									"begin": 845,
									"end": 922,
									"name": "SWAP2",
									"source": 20
								},
								{
									"begin": 845,
									"end": 922,
									"name": "SWAP1",
									"source": 20
								},
								{
									"begin": 845,
									"end": 922,
									"name": "POP",
									"source": 20
								},
								{
									"begin": 845,
									"end": 922,
									"name": "JUMP",
									"source": 20,
									"value": "[out]"
								},
								{
									"begin": 928,
									"end": 1050,
									"name": "tag",
									"source": 20,
									"value": "15"
								},
								{
									"begin": 928,
									"end": 1050,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 1001,
									"end": 1025,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "31"
								},
								{
									"begin": 1019,
									"end": 1024,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 1001,
									"end": 1025,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "14"
								},
								{
									"begin": 1001,
									"end": 1025,
									"name": "JUMP",
									"source": 20,
									"value": "[in]"
								},
								{
									"begin": 1001,
									"end": 1025,
									"name": "tag",
									"source": 20,
									"value": "31"
								},
								{
									"begin": 1001,
									"end": 1025,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 994,
									"end": 999,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 991,
									"end": 1026,
									"name": "EQ",
									"source": 20
								},
								{
									"begin": 981,
									"end": 1044,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "32"
								},
								{
									"begin": 981,
									"end": 1044,
									"name": "JUMPI",
									"source": 20
								},
								{
									"begin": 1040,
									"end": 1041,
									"name": "PUSH",
									"source": 20,
									"value": "0"
								},
								{
									"begin": 1037,
									"end": 1038,
									"name": "DUP1",
									"source": 20
								},
								{
									"begin": 1030,
									"end": 1042,
									"name": "REVERT",
									"source": 20
								},
								{
									"begin": 981,
									"end": 1044,
									"name": "tag",
									"source": 20,
									"value": "32"
								},
								{
									"begin": 981,
									"end": 1044,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 928,
									"end": 1050,
									"name": "POP",
									"source": 20
								},
								{
									"begin": 928,
									"end": 1050,
									"name": "JUMP",
									"source": 20,
									"value": "[out]"
								},
								{
									"begin": 1056,
									"end": 1199,
									"name": "tag",
									"source": 20,
									"value": "16"
								},
								{
									"begin": 1056,
									"end": 1199,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 1113,
									"end": 1118,
									"name": "PUSH",
									"source": 20,
									"value": "0"
								},
								{
									"begin": 1144,
									"end": 1150,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 1138,
									"end": 1151,
									"name": "MLOAD",
									"source": 20
								},
								{
									"begin": 1129,
									"end": 1151,
									"name": "SWAP1",
									"source": 20
								},
								{
									"begin": 1129,
									"end": 1151,
									"name": "POP",
									"source": 20
								},
								{
									"begin": 1160,
									"end": 1193,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "34"
								},
								{
									"begin": 1187,
									"end": 1192,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 1160,
									"end": 1193,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "15"
								},
								{
									"begin": 1160,
									"end": 1193,
									"name": "JUMP",
									"source": 20,
									"value": "[in]"
								},
								{
									"begin": 1160,
									"end": 1193,
									"name": "tag",
									"source": 20,
									"value": "34"
								},
								{
									"begin": 1160,
									"end": 1193,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 1056,
									"end": 1199,
									"name": "SWAP3",
									"source": 20
								},
								{
									"begin": 1056,
									"end": 1199,
									"name": "SWAP2",
									"source": 20
								},
								{
									"begin": 1056,
									"end": 1199,
									"name": "POP",
									"source": 20
								},
								{
									"begin": 1056,
									"end": 1199,
									"name": "POP",
									"source": 20
								},
								{
									"begin": 1056,
									"end": 1199,
									"name": "JUMP",
									"source": 20,
									"value": "[out]"
								},
								{
									"begin": 1205,
									"end": 1712,
									"name": "tag",
									"source": 20,
									"value": "3"
								},
								{
									"begin": 1205,
									"end": 1712,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 1284,
									"end": 1290,
									"name": "PUSH",
									"source": 20,
									"value": "0"
								},
								{
									"begin": 1292,
									"end": 1298,
									"name": "DUP1",
									"source": 20
								},
								{
									"begin": 1341,
									"end": 1343,
									"name": "PUSH",
									"source": 20,
									"value": "40"
								},
								{
									"begin": 1329,
									"end": 1338,
									"name": "DUP4",
									"source": 20
								},
								{
									"begin": 1320,
									"end": 1327,
									"name": "DUP6",
									"source": 20
								},
								{
									"begin": 1316,
									"end": 1339,
									"name": "SUB",
									"source": 20
								},
								{
									"begin": 1312,
									"end": 1344,
									"name": "SLT",
									"source": 20
								},
								{
									"begin": 1309,
									"end": 1428,
									"name": "ISZERO",
									"source": 20
								},
								{
									"begin": 1309,
									"end": 1428,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "36"
								},
								{
									"begin": 1309,
									"end": 1428,
									"name": "JUMPI",
									"source": 20
								},
								{
									"begin": 1347,
									"end": 1426,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "37"
								},
								{
									"begin": 1347,
									"end": 1426,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "8"
								},
								{
									"begin": 1347,
									"end": 1426,
									"name": "JUMP",
									"source": 20,
									"value": "[in]"
								},
								{
									"begin": 1347,
									"end": 1426,
									"name": "tag",
									"source": 20,
									"value": "37"
								},
								{
									"begin": 1347,
									"end": 1426,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 1309,
									"end": 1428,
									"name": "tag",
									"source": 20,
									"value": "36"
								},
								{
									"begin": 1309,
									"end": 1428,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 1467,
									"end": 1468,
									"name": "PUSH",
									"source": 20,
									"value": "0"
								},
								{
									"begin": 1492,
									"end": 1556,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "38"
								},
								{
									"begin": 1548,
									"end": 1555,
									"name": "DUP6",
									"source": 20
								},
								{
									"begin": 1539,
									"end": 1545,
									"name": "DUP3",
									"source": 20
								},
								{
									"begin": 1528,
									"end": 1537,
									"name": "DUP7",
									"source": 20
								},
								{
									"begin": 1524,
									"end": 1546,
									"name": "ADD",
									"source": 20
								},
								{
									"begin": 1492,
									"end": 1556,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "13"
								},
								{
									"begin": 1492,
									"end": 1556,
									"name": "JUMP",
									"source": 20,
									"value": "[in]"
								},
								{
									"begin": 1492,
									"end": 1556,
									"name": "tag",
									"source": 20,
									"value": "38"
								},
								{
									"begin": 1492,
									"end": 1556,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 1482,
									"end": 1556,
									"name": "SWAP3",
									"source": 20
								},
								{
									"begin": 1482,
									"end": 1556,
									"name": "POP",
									"source": 20
								},
								{
									"begin": 1438,
									"end": 1566,
									"name": "POP",
									"source": 20
								},
								{
									"begin": 1605,
									"end": 1607,
									"name": "PUSH",
									"source": 20,
									"value": "20"
								},
								{
									"begin": 1631,
									"end": 1695,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "39"
								},
								{
									"begin": 1687,
									"end": 1694,
									"name": "DUP6",
									"source": 20
								},
								{
									"begin": 1678,
									"end": 1684,
									"name": "DUP3",
									"source": 20
								},
								{
									"begin": 1667,
									"end": 1676,
									"name": "DUP7",
									"source": 20
								},
								{
									"begin": 1663,
									"end": 1685,
									"name": "ADD",
									"source": 20
								},
								{
									"begin": 1631,
									"end": 1695,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "16"
								},
								{
									"begin": 1631,
									"end": 1695,
									"name": "JUMP",
									"source": 20,
									"value": "[in]"
								},
								{
									"begin": 1631,
									"end": 1695,
									"name": "tag",
									"source": 20,
									"value": "39"
								},
								{
									"begin": 1631,
									"end": 1695,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 1621,
									"end": 1695,
									"name": "SWAP2",
									"source": 20
								},
								{
									"begin": 1621,
									"end": 1695,
									"name": "POP",
									"source": 20
								},
								{
									"begin": 1576,
									"end": 1705,
									"name": "POP",
									"source": 20
								},
								{
									"begin": 1205,
									"end": 1712,
									"name": "SWAP3",
									"source": 20
								},
								{
									"begin": 1205,
									"end": 1712,
									"name": "POP",
									"source": 20
								},
								{
									"begin": 1205,
									"end": 1712,
									"name": "SWAP3",
									"source": 20
								},
								{
									"begin": 1205,
									"end": 1712,
									"name": "SWAP1",
									"source": 20
								},
								{
									"begin": 1205,
									"end": 1712,
									"name": "POP",
									"source": 20
								},
								{
									"begin": 1205,
									"end": 1712,
									"name": "JUMP",
									"source": 20,
									"value": "[out]"
								},
								{
									"begin": 356,
									"end": 7878,
									"name": "tag",
									"source": 1,
									"value": "6"
								},
								{
									"begin": 356,
									"end": 7878,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 356,
									"end": 7878,
									"name": "PUSH #[$]",
									"source": 1,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 356,
									"end": 7878,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 356,
									"end": 7878,
									"name": "PUSH [$]",
									"source": 1,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 356,
									"end": 7878,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 356,
									"end": 7878,
									"name": "CODECOPY",
									"source": 1
								},
								{
									"begin": 356,
									"end": 7878,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 356,
									"end": 7878,
									"name": "RETURN",
									"source": 1
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220fb40853da6b16a3af4af5e68d4c9402a880d0e5f80a99f7530f6e39845aad83c64736f6c63430008090033",
									".code": [
										{
											"begin": 356,
											"end": 7878,
											"name": "PUSH",
											"source": 1,
											"value": "80"
										},
										{
											"begin": 356,
											"end": 7878,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 356,
											"end": 7878,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 356,
											"end": 7878,
											"name": "CALLVALUE",
											"source": 1
										},
										{
											"begin": 356,
											"end": 7878,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 356,
											"end": 7878,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 356,
											"end": 7878,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 356,
											"end": 7878,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 356,
											"end": 7878,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 356,
											"end": 7878,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 356,
											"end": 7878,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 356,
											"end": 7878,
											"name": "tag",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 356,
											"end": 7878,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 356,
											"end": 7878,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 356,
											"end": 7878,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 356,
											"end": 7878,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 356,
											"end": 7878,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 356,
											"end": 7878,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 356,
											"end": 7878,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 356,
											"end": 7878,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 356,
											"end": 7878,
											"name": "CALLDATALOAD",
											"source": 1
										},
										{
											"begin": 356,
											"end": 7878,
											"name": "PUSH",
											"source": 1,
											"value": "E0"
										},
										{
											"begin": 356,
											"end": 7878,
											"name": "SHR",
											"source": 1
										},
										{
											"begin": 356,
											"end": 7878,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 356,
											"end": 7878,
											"name": "PUSH",
											"source": 1,
											"value": "98C50FDD"
										},
										{
											"begin": 356,
											"end": 7878,
											"name": "GT",
											"source": 1
										},
										{
											"begin": 356,
											"end": 7878,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "14"
										},
										{
											"begin": 356,
											"end": 7878,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 356,
											"end": 7878,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 356,
											"end": 7878,
											"name": "PUSH",
											"source": 1,
											"value": "98C50FDD"
										},
										{
											"begin": 356,
											"end": 7878,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 356,
											"end": 7878,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "8"
										},
										{
											"begin": 356,
											"end": 7878,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 356,
											"end": 7878,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 356,
											"end": 7878,
											"name": "PUSH",
											"source": 1,
											"value": "B8D7F980"
										},
										{
											"begin": 356,
											"end": 7878,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 356,
											"end": 7878,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "9"
										},
										{
											"begin": 356,
											"end": 7878,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 356,
											"end": 7878,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 356,
											"end": 7878,
											"name": "PUSH",
											"source": 1,
											"value": "C0102DE4"
										},
										{
											"begin": 356,
											"end": 7878,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 356,
											"end": 7878,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "10"
										},
										{
											"begin": 356,
											"end": 7878,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 356,
											"end": 7878,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 356,
											"end": 7878,
											"name": "PUSH",
											"source": 1,
											"value": "D14485A2"
										},
										{
											"begin": 356,
											"end": 7878,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 356,
											"end": 7878,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "11"
										},
										{
											"begin": 356,
											"end": 7878,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 356,
											"end": 7878,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 356,
											"end": 7878,
											"name": "PUSH",
											"source": 1,
											"value": "DF0905C6"
										},
										{
											"begin": 356,
											"end": 7878,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 356,
											"end": 7878,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "12"
										},
										{
											"begin": 356,
											"end": 7878,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 356,
											"end": 7878,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 356,
											"end": 7878,
											"name": "PUSH",
											"source": 1,
											"value": "FC993EA8"
										},
										{
											"begin": 356,
											"end": 7878,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 356,
											"end": 7878,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "13"
										},
										{
											"begin": 356,
											"end": 7878,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 356,
											"end": 7878,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 356,
											"end": 7878,
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 356,
											"end": 7878,
											"name": "tag",
											"source": 1,
											"value": "14"
										},
										{
											"begin": 356,
											"end": 7878,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 356,
											"end": 7878,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 356,
											"end": 7878,
											"name": "PUSH",
											"source": 1,
											"value": "25AC3A73"
										},
										{
											"begin": 356,
											"end": 7878,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 356,
											"end": 7878,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "3"
										},
										{
											"begin": 356,
											"end": 7878,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 356,
											"end": 7878,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 356,
											"end": 7878,
											"name": "PUSH",
											"source": 1,
											"value": "2895CB7B"
										},
										{
											"begin": 356,
											"end": 7878,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 356,
											"end": 7878,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 356,
											"end": 7878,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 356,
											"end": 7878,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 356,
											"end": 7878,
											"name": "PUSH",
											"source": 1,
											"value": "59DE2F60"
										},
										{
											"begin": 356,
											"end": 7878,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 356,
											"end": 7878,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "5"
										},
										{
											"begin": 356,
											"end": 7878,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 356,
											"end": 7878,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 356,
											"end": 7878,
											"name": "PUSH",
											"source": 1,
											"value": "762E9D30"
										},
										{
											"begin": 356,
											"end": 7878,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 356,
											"end": 7878,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "6"
										},
										{
											"begin": 356,
											"end": 7878,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 356,
											"end": 7878,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 356,
											"end": 7878,
											"name": "PUSH",
											"source": 1,
											"value": "77BCD8A6"
										},
										{
											"begin": 356,
											"end": 7878,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 356,
											"end": 7878,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "7"
										},
										{
											"begin": 356,
											"end": 7878,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 356,
											"end": 7878,
											"name": "tag",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 356,
											"end": 7878,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 356,
											"end": 7878,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 356,
											"end": 7878,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 356,
											"end": 7878,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 2852,
											"end": 3459,
											"name": "tag",
											"source": 1,
											"value": "3"
										},
										{
											"begin": 2852,
											"end": 3459,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2852,
											"end": 3459,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "15"
										},
										{
											"begin": 2852,
											"end": 3459,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 2852,
											"end": 3459,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2852,
											"end": 3459,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 2852,
											"end": 3459,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 2852,
											"end": 3459,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2852,
											"end": 3459,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2852,
											"end": 3459,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2852,
											"end": 3459,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "16"
										},
										{
											"begin": 2852,
											"end": 3459,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2852,
											"end": 3459,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2852,
											"end": 3459,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "17"
										},
										{
											"begin": 2852,
											"end": 3459,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 2852,
											"end": 3459,
											"name": "tag",
											"source": 1,
											"value": "16"
										},
										{
											"begin": 2852,
											"end": 3459,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2852,
											"end": 3459,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "18"
										},
										{
											"begin": 2852,
											"end": 3459,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 2852,
											"end": 3459,
											"name": "tag",
											"source": 1,
											"value": "15"
										},
										{
											"begin": 2852,
											"end": 3459,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2852,
											"end": 3459,
											"name": "STOP",
											"source": 1
										},
										{
											"begin": 5504,
											"end": 6937,
											"name": "tag",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 5504,
											"end": 6937,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5504,
											"end": 6937,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "19"
										},
										{
											"begin": 5504,
											"end": 6937,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 5504,
											"end": 6937,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 5504,
											"end": 6937,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 5504,
											"end": 6937,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 5504,
											"end": 6937,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5504,
											"end": 6937,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5504,
											"end": 6937,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5504,
											"end": 6937,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 5504,
											"end": 6937,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 5504,
											"end": 6937,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5504,
											"end": 6937,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "17"
										},
										{
											"begin": 5504,
											"end": 6937,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 5504,
											"end": 6937,
											"name": "tag",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 5504,
											"end": 6937,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5504,
											"end": 6937,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "21"
										},
										{
											"begin": 5504,
											"end": 6937,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 5504,
											"end": 6937,
											"name": "tag",
											"source": 1,
											"value": "19"
										},
										{
											"begin": 5504,
											"end": 6937,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5504,
											"end": 6937,
											"name": "STOP",
											"source": 1
										},
										{
											"begin": 929,
											"end": 993,
											"name": "tag",
											"source": 1,
											"value": "5"
										},
										{
											"begin": 929,
											"end": 993,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 929,
											"end": 993,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "22"
										},
										{
											"begin": 929,
											"end": 993,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 929,
											"end": 993,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 929,
											"end": 993,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 929,
											"end": 993,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 929,
											"end": 993,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 929,
											"end": 993,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 929,
											"end": 993,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 929,
											"end": 993,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "23"
										},
										{
											"begin": 929,
											"end": 993,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 929,
											"end": 993,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 929,
											"end": 993,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "24"
										},
										{
											"begin": 929,
											"end": 993,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 929,
											"end": 993,
											"name": "tag",
											"source": 1,
											"value": "23"
										},
										{
											"begin": 929,
											"end": 993,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 929,
											"end": 993,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "25"
										},
										{
											"begin": 929,
											"end": 993,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 929,
											"end": 993,
											"name": "tag",
											"source": 1,
											"value": "22"
										},
										{
											"begin": 929,
											"end": 993,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 929,
											"end": 993,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 929,
											"end": 993,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 929,
											"end": 993,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "26"
										},
										{
											"begin": 929,
											"end": 993,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 929,
											"end": 993,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 929,
											"end": 993,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "27"
										},
										{
											"begin": 929,
											"end": 993,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 929,
											"end": 993,
											"name": "tag",
											"source": 1,
											"value": "26"
										},
										{
											"begin": 929,
											"end": 993,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 929,
											"end": 993,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 929,
											"end": 993,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 929,
											"end": 993,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 929,
											"end": 993,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 929,
											"end": 993,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 929,
											"end": 993,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 929,
											"end": 993,
											"name": "RETURN",
											"source": 1
										},
										{
											"begin": 2141,
											"end": 2723,
											"name": "tag",
											"source": 1,
											"value": "6"
										},
										{
											"begin": 2141,
											"end": 2723,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2141,
											"end": 2723,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "28"
										},
										{
											"begin": 2141,
											"end": 2723,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 2141,
											"end": 2723,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2141,
											"end": 2723,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 2141,
											"end": 2723,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 2141,
											"end": 2723,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2141,
											"end": 2723,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2141,
											"end": 2723,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2141,
											"end": 2723,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "29"
										},
										{
											"begin": 2141,
											"end": 2723,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2141,
											"end": 2723,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2141,
											"end": 2723,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "17"
										},
										{
											"begin": 2141,
											"end": 2723,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 2141,
											"end": 2723,
											"name": "tag",
											"source": 1,
											"value": "29"
										},
										{
											"begin": 2141,
											"end": 2723,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2141,
											"end": 2723,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "30"
										},
										{
											"begin": 2141,
											"end": 2723,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 2141,
											"end": 2723,
											"name": "tag",
											"source": 1,
											"value": "28"
										},
										{
											"begin": 2141,
											"end": 2723,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2141,
											"end": 2723,
											"name": "STOP",
											"source": 1
										},
										{
											"begin": 4280,
											"end": 5417,
											"name": "tag",
											"source": 1,
											"value": "7"
										},
										{
											"begin": 4280,
											"end": 5417,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4280,
											"end": 5417,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "31"
										},
										{
											"begin": 4280,
											"end": 5417,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 4280,
											"end": 5417,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 4280,
											"end": 5417,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 4280,
											"end": 5417,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 4280,
											"end": 5417,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4280,
											"end": 5417,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4280,
											"end": 5417,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4280,
											"end": 5417,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "32"
										},
										{
											"begin": 4280,
											"end": 5417,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 4280,
											"end": 5417,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4280,
											"end": 5417,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "17"
										},
										{
											"begin": 4280,
											"end": 5417,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 4280,
											"end": 5417,
											"name": "tag",
											"source": 1,
											"value": "32"
										},
										{
											"begin": 4280,
											"end": 5417,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4280,
											"end": 5417,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "33"
										},
										{
											"begin": 4280,
											"end": 5417,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 4280,
											"end": 5417,
											"name": "tag",
											"source": 1,
											"value": "31"
										},
										{
											"begin": 4280,
											"end": 5417,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4280,
											"end": 5417,
											"name": "STOP",
											"source": 1
										},
										{
											"begin": 7330,
											"end": 7873,
											"name": "tag",
											"source": 1,
											"value": "8"
										},
										{
											"begin": 7330,
											"end": 7873,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 7330,
											"end": 7873,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "34"
										},
										{
											"begin": 7330,
											"end": 7873,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 7330,
											"end": 7873,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 7330,
											"end": 7873,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 7330,
											"end": 7873,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 7330,
											"end": 7873,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 7330,
											"end": 7873,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 7330,
											"end": 7873,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 7330,
											"end": 7873,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "35"
										},
										{
											"begin": 7330,
											"end": 7873,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 7330,
											"end": 7873,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 7330,
											"end": 7873,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "36"
										},
										{
											"begin": 7330,
											"end": 7873,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 7330,
											"end": 7873,
											"name": "tag",
											"source": 1,
											"value": "35"
										},
										{
											"begin": 7330,
											"end": 7873,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 7330,
											"end": 7873,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "37"
										},
										{
											"begin": 7330,
											"end": 7873,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 7330,
											"end": 7873,
											"name": "tag",
											"source": 1,
											"value": "34"
										},
										{
											"begin": 7330,
											"end": 7873,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 7330,
											"end": 7873,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 7330,
											"end": 7873,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 7330,
											"end": 7873,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "38"
										},
										{
											"begin": 7330,
											"end": 7873,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 7330,
											"end": 7873,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 7330,
											"end": 7873,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "39"
										},
										{
											"begin": 7330,
											"end": 7873,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 7330,
											"end": 7873,
											"name": "tag",
											"source": 1,
											"value": "38"
										},
										{
											"begin": 7330,
											"end": 7873,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 7330,
											"end": 7873,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 7330,
											"end": 7873,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 7330,
											"end": 7873,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 7330,
											"end": 7873,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 7330,
											"end": 7873,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 7330,
											"end": 7873,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 7330,
											"end": 7873,
											"name": "RETURN",
											"source": 1
										},
										{
											"begin": 1177,
											"end": 1241,
											"name": "tag",
											"source": 1,
											"value": "9"
										},
										{
											"begin": 1177,
											"end": 1241,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1177,
											"end": 1241,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 1177,
											"end": 1241,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 1177,
											"end": 1241,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1177,
											"end": 1241,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 1177,
											"end": 1241,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 1177,
											"end": 1241,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 1177,
											"end": 1241,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 1177,
											"end": 1241,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 1177,
											"end": 1241,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "41"
										},
										{
											"begin": 1177,
											"end": 1241,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 1177,
											"end": 1241,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 1177,
											"end": 1241,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "24"
										},
										{
											"begin": 1177,
											"end": 1241,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 1177,
											"end": 1241,
											"name": "tag",
											"source": 1,
											"value": "41"
										},
										{
											"begin": 1177,
											"end": 1241,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1177,
											"end": 1241,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "42"
										},
										{
											"begin": 1177,
											"end": 1241,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 1177,
											"end": 1241,
											"name": "tag",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 1177,
											"end": 1241,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1177,
											"end": 1241,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 1177,
											"end": 1241,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 1177,
											"end": 1241,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "43"
										},
										{
											"begin": 1177,
											"end": 1241,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 1177,
											"end": 1241,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 1177,
											"end": 1241,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "27"
										},
										{
											"begin": 1177,
											"end": 1241,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 1177,
											"end": 1241,
											"name": "tag",
											"source": 1,
											"value": "43"
										},
										{
											"begin": 1177,
											"end": 1241,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1177,
											"end": 1241,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 1177,
											"end": 1241,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 1177,
											"end": 1241,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1177,
											"end": 1241,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 1177,
											"end": 1241,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 1177,
											"end": 1241,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 1177,
											"end": 1241,
											"name": "RETURN",
											"source": 1
										},
										{
											"begin": 3467,
											"end": 4227,
											"name": "tag",
											"source": 1,
											"value": "10"
										},
										{
											"begin": 3467,
											"end": 4227,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3467,
											"end": 4227,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "44"
										},
										{
											"begin": 3467,
											"end": 4227,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 3467,
											"end": 4227,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3467,
											"end": 4227,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 3467,
											"end": 4227,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 3467,
											"end": 4227,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3467,
											"end": 4227,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 3467,
											"end": 4227,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3467,
											"end": 4227,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "45"
										},
										{
											"begin": 3467,
											"end": 4227,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 3467,
											"end": 4227,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3467,
											"end": 4227,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "17"
										},
										{
											"begin": 3467,
											"end": 4227,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 3467,
											"end": 4227,
											"name": "tag",
											"source": 1,
											"value": "45"
										},
										{
											"begin": 3467,
											"end": 4227,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3467,
											"end": 4227,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "46"
										},
										{
											"begin": 3467,
											"end": 4227,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 3467,
											"end": 4227,
											"name": "tag",
											"source": 1,
											"value": "44"
										},
										{
											"begin": 3467,
											"end": 4227,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3467,
											"end": 4227,
											"name": "STOP",
											"source": 1
										},
										{
											"begin": 1375,
											"end": 2119,
											"name": "tag",
											"source": 1,
											"value": "11"
										},
										{
											"begin": 1375,
											"end": 2119,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1375,
											"end": 2119,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "47"
										},
										{
											"begin": 1375,
											"end": 2119,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 1375,
											"end": 2119,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1375,
											"end": 2119,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 1375,
											"end": 2119,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 1375,
											"end": 2119,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 1375,
											"end": 2119,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 1375,
											"end": 2119,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 1375,
											"end": 2119,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "48"
										},
										{
											"begin": 1375,
											"end": 2119,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 1375,
											"end": 2119,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 1375,
											"end": 2119,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "49"
										},
										{
											"begin": 1375,
											"end": 2119,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 1375,
											"end": 2119,
											"name": "tag",
											"source": 1,
											"value": "48"
										},
										{
											"begin": 1375,
											"end": 2119,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1375,
											"end": 2119,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "50"
										},
										{
											"begin": 1375,
											"end": 2119,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 1375,
											"end": 2119,
											"name": "tag",
											"source": 1,
											"value": "47"
										},
										{
											"begin": 1375,
											"end": 2119,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1375,
											"end": 2119,
											"name": "STOP",
											"source": 1
										},
										{
											"begin": 1053,
											"end": 1117,
											"name": "tag",
											"source": 1,
											"value": "12"
										},
										{
											"begin": 1053,
											"end": 1117,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1053,
											"end": 1117,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "51"
										},
										{
											"begin": 1053,
											"end": 1117,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 1053,
											"end": 1117,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1053,
											"end": 1117,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 1053,
											"end": 1117,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 1053,
											"end": 1117,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 1053,
											"end": 1117,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 1053,
											"end": 1117,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 1053,
											"end": 1117,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "52"
										},
										{
											"begin": 1053,
											"end": 1117,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 1053,
											"end": 1117,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 1053,
											"end": 1117,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "24"
										},
										{
											"begin": 1053,
											"end": 1117,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 1053,
											"end": 1117,
											"name": "tag",
											"source": 1,
											"value": "52"
										},
										{
											"begin": 1053,
											"end": 1117,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1053,
											"end": 1117,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "53"
										},
										{
											"begin": 1053,
											"end": 1117,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 1053,
											"end": 1117,
											"name": "tag",
											"source": 1,
											"value": "51"
										},
										{
											"begin": 1053,
											"end": 1117,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1053,
											"end": 1117,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 1053,
											"end": 1117,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 1053,
											"end": 1117,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "54"
										},
										{
											"begin": 1053,
											"end": 1117,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 1053,
											"end": 1117,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 1053,
											"end": 1117,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "27"
										},
										{
											"begin": 1053,
											"end": 1117,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 1053,
											"end": 1117,
											"name": "tag",
											"source": 1,
											"value": "54"
										},
										{
											"begin": 1053,
											"end": 1117,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1053,
											"end": 1117,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 1053,
											"end": 1117,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 1053,
											"end": 1117,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1053,
											"end": 1117,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 1053,
											"end": 1117,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 1053,
											"end": 1117,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 1053,
											"end": 1117,
											"name": "RETURN",
											"source": 1
										},
										{
											"begin": 1288,
											"end": 1352,
											"name": "tag",
											"source": 1,
											"value": "13"
										},
										{
											"begin": 1288,
											"end": 1352,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1288,
											"end": 1352,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "55"
										},
										{
											"begin": 1288,
											"end": 1352,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 1288,
											"end": 1352,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1288,
											"end": 1352,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 1288,
											"end": 1352,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 1288,
											"end": 1352,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 1288,
											"end": 1352,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 1288,
											"end": 1352,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 1288,
											"end": 1352,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "56"
										},
										{
											"begin": 1288,
											"end": 1352,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 1288,
											"end": 1352,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 1288,
											"end": 1352,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "24"
										},
										{
											"begin": 1288,
											"end": 1352,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 1288,
											"end": 1352,
											"name": "tag",
											"source": 1,
											"value": "56"
										},
										{
											"begin": 1288,
											"end": 1352,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1288,
											"end": 1352,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "57"
										},
										{
											"begin": 1288,
											"end": 1352,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 1288,
											"end": 1352,
											"name": "tag",
											"source": 1,
											"value": "55"
										},
										{
											"begin": 1288,
											"end": 1352,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1288,
											"end": 1352,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 1288,
											"end": 1352,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 1288,
											"end": 1352,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "58"
										},
										{
											"begin": 1288,
											"end": 1352,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 1288,
											"end": 1352,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 1288,
											"end": 1352,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "27"
										},
										{
											"begin": 1288,
											"end": 1352,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 1288,
											"end": 1352,
											"name": "tag",
											"source": 1,
											"value": "58"
										},
										{
											"begin": 1288,
											"end": 1352,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1288,
											"end": 1352,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 1288,
											"end": 1352,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 1288,
											"end": 1352,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1288,
											"end": 1352,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 1288,
											"end": 1352,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 1288,
											"end": 1352,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 1288,
											"end": 1352,
											"name": "RETURN",
											"source": 1
										},
										{
											"begin": 2852,
											"end": 3459,
											"name": "tag",
											"source": 1,
											"value": "18"
										},
										{
											"begin": 2852,
											"end": 3459,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2992,
											"end": 2997,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2966,
											"end": 2974,
											"name": "PUSH",
											"source": 1,
											"value": "3"
										},
										{
											"begin": 2966,
											"end": 2986,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2975,
											"end": 2985,
											"name": "CALLER",
											"source": 1
										},
										{
											"begin": 2966,
											"end": 2986,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2966,
											"end": 2986,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 2966,
											"end": 2986,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2966,
											"end": 2986,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 2966,
											"end": 2986,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2966,
											"end": 2986,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2966,
											"end": 2986,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 2966,
											"end": 2986,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2966,
											"end": 2986,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2966,
											"end": 2986,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2966,
											"end": 2986,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2966,
											"end": 2986,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 2966,
											"end": 2986,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2966,
											"end": 2986,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2966,
											"end": 2986,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 2966,
											"end": 2991,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2987,
											"end": 2990,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 2966,
											"end": 2991,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2966,
											"end": 2991,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 2966,
											"end": 2991,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2966,
											"end": 2991,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2966,
											"end": 2991,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 2966,
											"end": 2991,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2966,
											"end": 2991,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2966,
											"end": 2991,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2966,
											"end": 2991,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2966,
											"end": 2991,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 2966,
											"end": 2991,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2966,
											"end": 2991,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2966,
											"end": 2991,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 2966,
											"end": 2991,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2966,
											"end": 2997,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 2966,
											"end": 2997,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 2966,
											"end": 2997,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2966,
											"end": 2997,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 2966,
											"end": 2997,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2966,
											"end": 2997,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 2966,
											"end": 2997,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 2966,
											"end": 2997,
											"name": "NOT",
											"source": 1
										},
										{
											"begin": 2966,
											"end": 2997,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 2966,
											"end": 2997,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2966,
											"end": 2997,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 2966,
											"end": 2997,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 2966,
											"end": 2997,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 2966,
											"end": 2997,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 2966,
											"end": 2997,
											"name": "OR",
											"source": 1
										},
										{
											"begin": 2966,
											"end": 2997,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2966,
											"end": 2997,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 2963,
											"end": 3028,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 2963,
											"end": 3028,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "60"
										},
										{
											"begin": 2963,
											"end": 3028,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 3006,
											"end": 3026,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 3006,
											"end": 3026,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 3006,
											"end": 3026,
											"name": "PUSH",
											"source": 1,
											"value": "4232716900000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 3006,
											"end": 3026,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3006,
											"end": 3026,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 3006,
											"end": 3026,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 3006,
											"end": 3026,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 3006,
											"end": 3026,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 3006,
											"end": 3026,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 3006,
											"end": 3026,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3006,
											"end": 3026,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 3006,
											"end": 3026,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 3006,
											"end": 3026,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3006,
											"end": 3026,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 2963,
											"end": 3028,
											"name": "tag",
											"source": 1,
											"value": "60"
										},
										{
											"begin": 2963,
											"end": 3028,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3136,
											"end": 3146,
											"name": "CALLER",
											"source": 1
										},
										{
											"begin": 3120,
											"end": 3146,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3120,
											"end": 3146,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 3120,
											"end": 3134,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "61"
										},
										{
											"begin": 3130,
											"end": 3133,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 3120,
											"end": 3129,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "62"
										},
										{
											"begin": 3120,
											"end": 3134,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 3120,
											"end": 3134,
											"name": "tag",
											"source": 1,
											"value": "61"
										},
										{
											"begin": 3120,
											"end": 3134,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3120,
											"end": 3146,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3120,
											"end": 3146,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 3120,
											"end": 3146,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 3117,
											"end": 3168,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "63"
										},
										{
											"begin": 3117,
											"end": 3168,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 3155,
											"end": 3166,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 3155,
											"end": 3166,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 3155,
											"end": 3166,
											"name": "PUSH",
											"source": 1,
											"value": "D7C498BF00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 3155,
											"end": 3166,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3155,
											"end": 3166,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 3155,
											"end": 3166,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 3155,
											"end": 3166,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 3155,
											"end": 3166,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 3155,
											"end": 3166,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 3155,
											"end": 3166,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3155,
											"end": 3166,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 3155,
											"end": 3166,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 3155,
											"end": 3166,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3155,
											"end": 3166,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 3117,
											"end": 3168,
											"name": "tag",
											"source": 1,
											"value": "63"
										},
										{
											"begin": 3117,
											"end": 3168,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3225,
											"end": 3250,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3251,
											"end": 3260,
											"name": "PUSH",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 3251,
											"end": 3265,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3261,
											"end": 3264,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 3251,
											"end": 3265,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3251,
											"end": 3265,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 3251,
											"end": 3265,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3251,
											"end": 3265,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 3251,
											"end": 3265,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3251,
											"end": 3265,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 3251,
											"end": 3265,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 3251,
											"end": 3265,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 3251,
											"end": 3265,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3251,
											"end": 3265,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3251,
											"end": 3265,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 3251,
											"end": 3265,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 3251,
											"end": 3265,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 3251,
											"end": 3265,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3251,
											"end": 3265,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 3251,
											"end": 3280,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3251,
											"end": 3280,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 3251,
											"end": 3280,
											"name": "PUSH",
											"source": 1,
											"value": "10"
										},
										{
											"begin": 3251,
											"end": 3280,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3251,
											"end": 3280,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 3251,
											"end": 3280,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3251,
											"end": 3280,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 3251,
											"end": 3280,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 3251,
											"end": 3280,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3251,
											"end": 3280,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 3251,
											"end": 3280,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3251,
											"end": 3280,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 3225,
											"end": 3280,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3225,
											"end": 3280,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 3225,
											"end": 3280,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3225,
											"end": 3280,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 3291,
											"end": 3372,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "64"
										},
										{
											"begin": 3329,
											"end": 3339,
											"name": "CALLER",
											"source": 1
										},
										{
											"begin": 3348,
											"end": 3352,
											"name": "ADDRESS",
											"source": 1
										},
										{
											"begin": 3354,
											"end": 3371,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 3298,
											"end": 3310,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 3298,
											"end": 3310,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3298,
											"end": 3310,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3298,
											"end": 3310,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 3298,
											"end": 3310,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3298,
											"end": 3310,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 3298,
											"end": 3310,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 3298,
											"end": 3310,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3298,
											"end": 3310,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 3298,
											"end": 3310,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3298,
											"end": 3310,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 3291,
											"end": 3328,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3291,
											"end": 3328,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 3291,
											"end": 3328,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "65"
										},
										{
											"begin": 3291,
											"end": 3328,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3291,
											"end": 3372,
											"name": "SWAP4",
											"source": 1
										},
										{
											"begin": 3291,
											"end": 3372,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 3291,
											"end": 3372,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 3291,
											"end": 3372,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3291,
											"end": 3372,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFF"
										},
										{
											"begin": 3291,
											"end": 3372,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 3291,
											"end": 3372,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 3291,
											"end": 3372,
											"name": "tag",
											"source": 1,
											"value": "64"
										},
										{
											"begin": 3291,
											"end": 3372,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3409,
											"end": 3413,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 3383,
											"end": 3391,
											"name": "PUSH",
											"source": 1,
											"value": "3"
										},
										{
											"begin": 3383,
											"end": 3403,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3392,
											"end": 3402,
											"name": "CALLER",
											"source": 1
										},
										{
											"begin": 3383,
											"end": 3403,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3383,
											"end": 3403,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 3383,
											"end": 3403,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3383,
											"end": 3403,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 3383,
											"end": 3403,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3383,
											"end": 3403,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 3383,
											"end": 3403,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 3383,
											"end": 3403,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 3383,
											"end": 3403,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3383,
											"end": 3403,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3383,
											"end": 3403,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 3383,
											"end": 3403,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 3383,
											"end": 3403,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 3383,
											"end": 3403,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3383,
											"end": 3403,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 3383,
											"end": 3408,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3404,
											"end": 3407,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 3383,
											"end": 3408,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3383,
											"end": 3408,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 3383,
											"end": 3408,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3383,
											"end": 3408,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 3383,
											"end": 3408,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 3383,
											"end": 3408,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 3383,
											"end": 3408,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3383,
											"end": 3408,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3383,
											"end": 3408,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 3383,
											"end": 3408,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 3383,
											"end": 3408,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 3383,
											"end": 3408,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3383,
											"end": 3408,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 3383,
											"end": 3408,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3383,
											"end": 3413,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 3383,
											"end": 3413,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 3383,
											"end": 3413,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3383,
											"end": 3413,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 3383,
											"end": 3413,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3383,
											"end": 3413,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 3383,
											"end": 3413,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 3383,
											"end": 3413,
											"name": "NOT",
											"source": 1
										},
										{
											"begin": 3383,
											"end": 3413,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 3383,
											"end": 3413,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3383,
											"end": 3413,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 3383,
											"end": 3413,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 3383,
											"end": 3413,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 3383,
											"end": 3413,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 3383,
											"end": 3413,
											"name": "OR",
											"source": 1
										},
										{
											"begin": 3383,
											"end": 3413,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3383,
											"end": 3413,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 3383,
											"end": 3413,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 3450,
											"end": 3451,
											"name": "PUSH",
											"source": 1,
											"value": "3"
										},
										{
											"begin": 3424,
											"end": 3433,
											"name": "PUSH",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 3424,
											"end": 3438,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3434,
											"end": 3437,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 3424,
											"end": 3438,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3424,
											"end": 3438,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 3424,
											"end": 3438,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3424,
											"end": 3438,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 3424,
											"end": 3438,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3424,
											"end": 3438,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 3424,
											"end": 3438,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 3424,
											"end": 3438,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 3424,
											"end": 3438,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3424,
											"end": 3438,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3424,
											"end": 3438,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 3424,
											"end": 3438,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 3424,
											"end": 3438,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 3424,
											"end": 3438,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3424,
											"end": 3438,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 3424,
											"end": 3449,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3424,
											"end": 3449,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 3424,
											"end": 3449,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3424,
											"end": 3451,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 3424,
											"end": 3451,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 3424,
											"end": 3451,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3424,
											"end": 3451,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 3424,
											"end": 3451,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3424,
											"end": 3451,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 3424,
											"end": 3451,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 3424,
											"end": 3451,
											"name": "NOT",
											"source": 1
										},
										{
											"begin": 3424,
											"end": 3451,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 3424,
											"end": 3451,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3424,
											"end": 3451,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 3424,
											"end": 3451,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 3424,
											"end": 3451,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 3424,
											"end": 3451,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 3424,
											"end": 3451,
											"name": "OR",
											"source": 1
										},
										{
											"begin": 3424,
											"end": 3451,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3424,
											"end": 3451,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 3424,
											"end": 3451,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2898,
											"end": 3459,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2852,
											"end": 3459,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2852,
											"end": 3459,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 5504,
											"end": 6937,
											"name": "tag",
											"source": 1,
											"value": "21"
										},
										{
											"begin": 5504,
											"end": 6937,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5563,
											"end": 5576,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 5577,
											"end": 5590,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "67"
										},
										{
											"begin": 5586,
											"end": 5589,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 5577,
											"end": 5585,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "68"
										},
										{
											"begin": 5577,
											"end": 5590,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 5577,
											"end": 5590,
											"name": "tag",
											"source": 1,
											"value": "67"
										},
										{
											"begin": 5577,
											"end": 5590,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5563,
											"end": 5590,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5563,
											"end": 5590,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5601,
											"end": 5615,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 5616,
											"end": 5630,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "69"
										},
										{
											"begin": 5626,
											"end": 5629,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 5616,
											"end": 5625,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "62"
										},
										{
											"begin": 5616,
											"end": 5630,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 5616,
											"end": 5630,
											"name": "tag",
											"source": 1,
											"value": "69"
										},
										{
											"begin": 5616,
											"end": 5630,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5601,
											"end": 5630,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5601,
											"end": 5630,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5694,
											"end": 5699,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5682,
											"end": 5699,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5682,
											"end": 5699,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 5682,
											"end": 5692,
											"name": "CALLER",
											"source": 1
										},
										{
											"begin": 5682,
											"end": 5699,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5682,
											"end": 5699,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 5682,
											"end": 5699,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 5674,
											"end": 5700,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "70"
										},
										{
											"begin": 5674,
											"end": 5700,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 5674,
											"end": 5700,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 5674,
											"end": 5700,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 5674,
											"end": 5700,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 5674,
											"end": 5700,
											"name": "tag",
											"source": 1,
											"value": "70"
										},
										{
											"begin": 5674,
											"end": 5700,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5805,
											"end": 5810,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 5782,
											"end": 5810,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 5782,
											"end": 5810,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 5782,
											"end": 5790,
											"name": "PUSH",
											"source": 1,
											"value": "3"
										},
										{
											"begin": 5782,
											"end": 5798,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 5791,
											"end": 5797,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 5782,
											"end": 5798,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5782,
											"end": 5798,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 5782,
											"end": 5798,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5782,
											"end": 5798,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 5782,
											"end": 5798,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5782,
											"end": 5798,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 5782,
											"end": 5798,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 5782,
											"end": 5798,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5782,
											"end": 5798,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5782,
											"end": 5798,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5782,
											"end": 5798,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 5782,
											"end": 5798,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 5782,
											"end": 5798,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5782,
											"end": 5798,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 5782,
											"end": 5798,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 5782,
											"end": 5803,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 5799,
											"end": 5802,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 5782,
											"end": 5803,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5782,
											"end": 5803,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 5782,
											"end": 5803,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5782,
											"end": 5803,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 5782,
											"end": 5803,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 5782,
											"end": 5803,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5782,
											"end": 5803,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5782,
											"end": 5803,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5782,
											"end": 5803,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 5782,
											"end": 5803,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 5782,
											"end": 5803,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5782,
											"end": 5803,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 5782,
											"end": 5803,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 5782,
											"end": 5803,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 5782,
											"end": 5803,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5782,
											"end": 5803,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 5782,
											"end": 5803,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5782,
											"end": 5803,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 5782,
											"end": 5803,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 5782,
											"end": 5803,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5782,
											"end": 5803,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 5782,
											"end": 5803,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 5782,
											"end": 5803,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 5782,
											"end": 5810,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 5782,
											"end": 5810,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 5782,
											"end": 5810,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 5774,
											"end": 5811,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "71"
										},
										{
											"begin": 5774,
											"end": 5811,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 5774,
											"end": 5811,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 5774,
											"end": 5811,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 5774,
											"end": 5811,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 5774,
											"end": 5811,
											"name": "tag",
											"source": 1,
											"value": "71"
										},
										{
											"begin": 5774,
											"end": 5811,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5864,
											"end": 5869,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 5830,
											"end": 5869,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 5830,
											"end": 5869,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 5830,
											"end": 5845,
											"name": "PUSH",
											"source": 1,
											"value": "6"
										},
										{
											"begin": 5830,
											"end": 5857,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 5846,
											"end": 5856,
											"name": "CALLER",
											"source": 1
										},
										{
											"begin": 5830,
											"end": 5857,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5830,
											"end": 5857,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 5830,
											"end": 5857,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5830,
											"end": 5857,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 5830,
											"end": 5857,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5830,
											"end": 5857,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 5830,
											"end": 5857,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 5830,
											"end": 5857,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5830,
											"end": 5857,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5830,
											"end": 5857,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5830,
											"end": 5857,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 5830,
											"end": 5857,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 5830,
											"end": 5857,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5830,
											"end": 5857,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 5830,
											"end": 5857,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 5830,
											"end": 5862,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 5858,
											"end": 5861,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 5830,
											"end": 5862,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5830,
											"end": 5862,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 5830,
											"end": 5862,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5830,
											"end": 5862,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 5830,
											"end": 5862,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 5830,
											"end": 5862,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5830,
											"end": 5862,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5830,
											"end": 5862,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5830,
											"end": 5862,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 5830,
											"end": 5862,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 5830,
											"end": 5862,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5830,
											"end": 5862,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 5830,
											"end": 5862,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 5830,
											"end": 5862,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 5830,
											"end": 5862,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5830,
											"end": 5862,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 5830,
											"end": 5862,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5830,
											"end": 5862,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 5830,
											"end": 5862,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 5830,
											"end": 5862,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5830,
											"end": 5862,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 5830,
											"end": 5862,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 5830,
											"end": 5862,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 5830,
											"end": 5869,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 5830,
											"end": 5869,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 5830,
											"end": 5869,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 5822,
											"end": 5870,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "72"
										},
										{
											"begin": 5822,
											"end": 5870,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 5822,
											"end": 5870,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 5822,
											"end": 5870,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 5822,
											"end": 5870,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 5822,
											"end": 5870,
											"name": "tag",
											"source": 1,
											"value": "72"
										},
										{
											"begin": 5822,
											"end": 5870,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5934,
											"end": 5939,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5922,
											"end": 5939,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5922,
											"end": 5939,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 5922,
											"end": 5932,
											"name": "CALLER",
											"source": 1
										},
										{
											"begin": 5922,
											"end": 5939,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5922,
											"end": 5939,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 5922,
											"end": 5939,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 5914,
											"end": 5940,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "73"
										},
										{
											"begin": 5914,
											"end": 5940,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 5914,
											"end": 5940,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 5914,
											"end": 5940,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 5914,
											"end": 5940,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 5914,
											"end": 5940,
											"name": "tag",
											"source": 1,
											"value": "73"
										},
										{
											"begin": 5914,
											"end": 5940,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5953,
											"end": 5979,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 5980,
											"end": 5989,
											"name": "PUSH",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 5980,
											"end": 5994,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 5990,
											"end": 5993,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 5980,
											"end": 5994,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5980,
											"end": 5994,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 5980,
											"end": 5994,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5980,
											"end": 5994,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 5980,
											"end": 5994,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5980,
											"end": 5994,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 5980,
											"end": 5994,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 5980,
											"end": 5994,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5980,
											"end": 5994,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5980,
											"end": 5994,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5980,
											"end": 5994,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 5980,
											"end": 5994,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 5980,
											"end": 5994,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5980,
											"end": 5994,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 5980,
											"end": 5994,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 5980,
											"end": 6007,
											"name": "PUSH",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 5980,
											"end": 6007,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5980,
											"end": 6007,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 5980,
											"end": 6007,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5980,
											"end": 6007,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 5980,
											"end": 6007,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5980,
											"end": 6007,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 5980,
											"end": 6007,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 5980,
											"end": 6007,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5980,
											"end": 6007,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 5980,
											"end": 6007,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5980,
											"end": 6007,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 5953,
											"end": 6007,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5953,
											"end": 6007,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 6018,
											"end": 6040,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 6041,
											"end": 6104,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "74"
										},
										{
											"begin": 6050,
											"end": 6059,
											"name": "PUSH",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 6050,
											"end": 6064,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 6060,
											"end": 6063,
											"name": "DUP8",
											"source": 1
										},
										{
											"begin": 6050,
											"end": 6064,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6050,
											"end": 6064,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 6050,
											"end": 6064,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6050,
											"end": 6064,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 6050,
											"end": 6064,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 6050,
											"end": 6064,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 6050,
											"end": 6064,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 6050,
											"end": 6064,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 6050,
											"end": 6064,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6050,
											"end": 6064,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 6050,
											"end": 6064,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 6050,
											"end": 6064,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 6050,
											"end": 6064,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 6050,
											"end": 6064,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 6050,
											"end": 6064,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 6050,
											"end": 6073,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 6050,
											"end": 6073,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 6050,
											"end": 6073,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 6050,
											"end": 6073,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6050,
											"end": 6073,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 6050,
											"end": 6073,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6050,
											"end": 6073,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 6050,
											"end": 6073,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 6050,
											"end": 6073,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6050,
											"end": 6073,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 6050,
											"end": 6073,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6050,
											"end": 6073,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 6074,
											"end": 6083,
											"name": "PUSH",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 6074,
											"end": 6088,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 6084,
											"end": 6087,
											"name": "DUP9",
											"source": 1
										},
										{
											"begin": 6074,
											"end": 6088,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6074,
											"end": 6088,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 6074,
											"end": 6088,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6074,
											"end": 6088,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 6074,
											"end": 6088,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 6074,
											"end": 6088,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 6074,
											"end": 6088,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 6074,
											"end": 6088,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 6074,
											"end": 6088,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6074,
											"end": 6088,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 6074,
											"end": 6088,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 6074,
											"end": 6088,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 6074,
											"end": 6088,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 6074,
											"end": 6088,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 6074,
											"end": 6088,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 6074,
											"end": 6103,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 6074,
											"end": 6103,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 6074,
											"end": 6103,
											"name": "PUSH",
											"source": 1,
											"value": "10"
										},
										{
											"begin": 6074,
											"end": 6103,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6074,
											"end": 6103,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 6074,
											"end": 6103,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6074,
											"end": 6103,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 6074,
											"end": 6103,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 6074,
											"end": 6103,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6074,
											"end": 6103,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 6074,
											"end": 6103,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6074,
											"end": 6103,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 6041,
											"end": 6049,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "37"
										},
										{
											"begin": 6041,
											"end": 6104,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 6041,
											"end": 6104,
											"name": "tag",
											"source": 1,
											"value": "74"
										},
										{
											"begin": 6041,
											"end": 6104,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 6018,
											"end": 6104,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6018,
											"end": 6104,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 6115,
											"end": 6126,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 6127,
											"end": 6154,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "75"
										},
										{
											"begin": 6139,
											"end": 6153,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 6127,
											"end": 6138,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "76"
										},
										{
											"begin": 6127,
											"end": 6154,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 6127,
											"end": 6154,
											"name": "tag",
											"source": 1,
											"value": "75"
										},
										{
											"begin": 6127,
											"end": 6154,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 6115,
											"end": 6154,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6115,
											"end": 6154,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 6183,
											"end": 6279,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "77"
										},
										{
											"begin": 6245,
											"end": 6249,
											"name": "ADDRESS",
											"source": 1
										},
										{
											"begin": 6265,
											"end": 6268,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 6190,
											"end": 6208,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 6183,
											"end": 6222,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6183,
											"end": 6222,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 6183,
											"end": 6222,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "78"
										},
										{
											"begin": 6183,
											"end": 6222,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6183,
											"end": 6279,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 6183,
											"end": 6279,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 6183,
											"end": 6279,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6183,
											"end": 6279,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFF"
										},
										{
											"begin": 6183,
											"end": 6279,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 6183,
											"end": 6279,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 6183,
											"end": 6279,
											"name": "tag",
											"source": 1,
											"value": "77"
										},
										{
											"begin": 6183,
											"end": 6279,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 6335,
											"end": 6438,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "79"
										},
										{
											"begin": 6389,
											"end": 6394,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 6424,
											"end": 6427,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 6409,
											"end": 6423,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 6409,
											"end": 6427,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "80"
										},
										{
											"begin": 6409,
											"end": 6427,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 6409,
											"end": 6427,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6409,
											"end": 6427,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "81"
										},
										{
											"begin": 6409,
											"end": 6427,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 6409,
											"end": 6427,
											"name": "tag",
											"source": 1,
											"value": "80"
										},
										{
											"begin": 6409,
											"end": 6427,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 6342,
											"end": 6360,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 6335,
											"end": 6374,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6335,
											"end": 6374,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 6335,
											"end": 6374,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "78"
										},
										{
											"begin": 6335,
											"end": 6374,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6335,
											"end": 6438,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 6335,
											"end": 6438,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 6335,
											"end": 6438,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6335,
											"end": 6438,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFF"
										},
										{
											"begin": 6335,
											"end": 6438,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 6335,
											"end": 6438,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 6335,
											"end": 6438,
											"name": "tag",
											"source": 1,
											"value": "79"
										},
										{
											"begin": 6335,
											"end": 6438,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 6482,
											"end": 6486,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 6449,
											"end": 6464,
											"name": "PUSH",
											"source": 1,
											"value": "6"
										},
										{
											"begin": 6449,
											"end": 6476,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 6465,
											"end": 6475,
											"name": "CALLER",
											"source": 1
										},
										{
											"begin": 6449,
											"end": 6476,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6449,
											"end": 6476,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 6449,
											"end": 6476,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6449,
											"end": 6476,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 6449,
											"end": 6476,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 6449,
											"end": 6476,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 6449,
											"end": 6476,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 6449,
											"end": 6476,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 6449,
											"end": 6476,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6449,
											"end": 6476,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 6449,
											"end": 6476,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 6449,
											"end": 6476,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 6449,
											"end": 6476,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 6449,
											"end": 6476,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 6449,
											"end": 6476,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 6449,
											"end": 6481,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 6477,
											"end": 6480,
											"name": "DUP9",
											"source": 1
										},
										{
											"begin": 6449,
											"end": 6481,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6449,
											"end": 6481,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 6449,
											"end": 6481,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 6449,
											"end": 6481,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 6449,
											"end": 6481,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 6449,
											"end": 6481,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 6449,
											"end": 6481,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6449,
											"end": 6481,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 6449,
											"end": 6481,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 6449,
											"end": 6481,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 6449,
											"end": 6481,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 6449,
											"end": 6481,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 6449,
											"end": 6481,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 6449,
											"end": 6481,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 6449,
											"end": 6486,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 6449,
											"end": 6486,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 6449,
											"end": 6486,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 6449,
											"end": 6486,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 6449,
											"end": 6486,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 6449,
											"end": 6486,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 6449,
											"end": 6486,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 6449,
											"end": 6486,
											"name": "NOT",
											"source": 1
										},
										{
											"begin": 6449,
											"end": 6486,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 6449,
											"end": 6486,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6449,
											"end": 6486,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 6449,
											"end": 6486,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 6449,
											"end": 6486,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 6449,
											"end": 6486,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 6449,
											"end": 6486,
											"name": "OR",
											"source": 1
										},
										{
											"begin": 6449,
											"end": 6486,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6449,
											"end": 6486,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 6449,
											"end": 6486,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 6529,
											"end": 6530,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 6502,
											"end": 6511,
											"name": "PUSH",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 6502,
											"end": 6516,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 6512,
											"end": 6515,
											"name": "DUP9",
											"source": 1
										},
										{
											"begin": 6502,
											"end": 6516,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6502,
											"end": 6516,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 6502,
											"end": 6516,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6502,
											"end": 6516,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 6502,
											"end": 6516,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 6502,
											"end": 6516,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 6502,
											"end": 6516,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 6502,
											"end": 6516,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 6502,
											"end": 6516,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6502,
											"end": 6516,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 6502,
											"end": 6516,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 6502,
											"end": 6516,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 6502,
											"end": 6516,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 6502,
											"end": 6516,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 6502,
											"end": 6516,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 6502,
											"end": 6527,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 6502,
											"end": 6527,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 6502,
											"end": 6527,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 6502,
											"end": 6527,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6502,
											"end": 6527,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 6502,
											"end": 6527,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6502,
											"end": 6527,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 6502,
											"end": 6527,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 6502,
											"end": 6527,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6502,
											"end": 6527,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 6502,
											"end": 6527,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 6502,
											"end": 6527,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 6502,
											"end": 6530,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 6502,
											"end": 6530,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 6502,
											"end": 6530,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 6499,
											"end": 6892,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 6499,
											"end": 6892,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "82"
										},
										{
											"begin": 6499,
											"end": 6892,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 6588,
											"end": 6593,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 6554,
											"end": 6593,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 6554,
											"end": 6593,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 6554,
											"end": 6569,
											"name": "PUSH",
											"source": 1,
											"value": "7"
										},
										{
											"begin": 6554,
											"end": 6581,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 6570,
											"end": 6580,
											"name": "CALLER",
											"source": 1
										},
										{
											"begin": 6554,
											"end": 6581,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6554,
											"end": 6581,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 6554,
											"end": 6581,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6554,
											"end": 6581,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 6554,
											"end": 6581,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 6554,
											"end": 6581,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 6554,
											"end": 6581,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 6554,
											"end": 6581,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 6554,
											"end": 6581,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6554,
											"end": 6581,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 6554,
											"end": 6581,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 6554,
											"end": 6581,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 6554,
											"end": 6581,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 6554,
											"end": 6581,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 6554,
											"end": 6581,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 6554,
											"end": 6586,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 6582,
											"end": 6585,
											"name": "DUP9",
											"source": 1
										},
										{
											"begin": 6554,
											"end": 6586,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6554,
											"end": 6586,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 6554,
											"end": 6586,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 6554,
											"end": 6586,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 6554,
											"end": 6586,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 6554,
											"end": 6586,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 6554,
											"end": 6586,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6554,
											"end": 6586,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 6554,
											"end": 6586,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 6554,
											"end": 6586,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 6554,
											"end": 6586,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 6554,
											"end": 6586,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 6554,
											"end": 6586,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 6554,
											"end": 6586,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 6554,
											"end": 6586,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6554,
											"end": 6586,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 6554,
											"end": 6586,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6554,
											"end": 6586,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 6554,
											"end": 6586,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 6554,
											"end": 6586,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6554,
											"end": 6586,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 6554,
											"end": 6586,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 6554,
											"end": 6586,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 6554,
											"end": 6593,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 6554,
											"end": 6593,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 6554,
											"end": 6593,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 6546,
											"end": 6594,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "83"
										},
										{
											"begin": 6546,
											"end": 6594,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 6546,
											"end": 6594,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 6546,
											"end": 6594,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 6546,
											"end": 6594,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 6546,
											"end": 6594,
											"name": "tag",
											"source": 1,
											"value": "83"
										},
										{
											"begin": 6546,
											"end": 6594,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 6609,
											"end": 6622,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 6647,
											"end": 6656,
											"name": "PUSH",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 6647,
											"end": 6661,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 6657,
											"end": 6660,
											"name": "DUP9",
											"source": 1
										},
										{
											"begin": 6647,
											"end": 6661,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6647,
											"end": 6661,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 6647,
											"end": 6661,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6647,
											"end": 6661,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 6647,
											"end": 6661,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 6647,
											"end": 6661,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 6647,
											"end": 6661,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 6647,
											"end": 6661,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 6647,
											"end": 6661,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6647,
											"end": 6661,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 6647,
											"end": 6661,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 6647,
											"end": 6661,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 6647,
											"end": 6661,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 6647,
											"end": 6661,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 6647,
											"end": 6661,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 6647,
											"end": 6676,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 6647,
											"end": 6676,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 6647,
											"end": 6676,
											"name": "PUSH",
											"source": 1,
											"value": "10"
										},
										{
											"begin": 6647,
											"end": 6676,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6647,
											"end": 6676,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 6647,
											"end": 6676,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6647,
											"end": 6676,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 6647,
											"end": 6676,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 6647,
											"end": 6676,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6647,
											"end": 6676,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 6647,
											"end": 6676,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6647,
											"end": 6676,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 6623,
											"end": 6632,
											"name": "PUSH",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 6623,
											"end": 6637,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 6633,
											"end": 6636,
											"name": "DUP10",
											"source": 1
										},
										{
											"begin": 6623,
											"end": 6637,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6623,
											"end": 6637,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 6623,
											"end": 6637,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6623,
											"end": 6637,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 6623,
											"end": 6637,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 6623,
											"end": 6637,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 6623,
											"end": 6637,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 6623,
											"end": 6637,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 6623,
											"end": 6637,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6623,
											"end": 6637,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 6623,
											"end": 6637,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 6623,
											"end": 6637,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 6623,
											"end": 6637,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 6623,
											"end": 6637,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 6623,
											"end": 6637,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 6623,
											"end": 6646,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 6623,
											"end": 6646,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 6623,
											"end": 6646,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 6623,
											"end": 6646,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6623,
											"end": 6646,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 6623,
											"end": 6646,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6623,
											"end": 6646,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 6623,
											"end": 6646,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 6623,
											"end": 6646,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6623,
											"end": 6646,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 6623,
											"end": 6646,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6623,
											"end": 6646,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 6623,
											"end": 6676,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "84"
										},
										{
											"begin": 6623,
											"end": 6676,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 6623,
											"end": 6676,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6623,
											"end": 6676,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "85"
										},
										{
											"begin": 6623,
											"end": 6676,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 6623,
											"end": 6676,
											"name": "tag",
											"source": 1,
											"value": "84"
										},
										{
											"begin": 6623,
											"end": 6676,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 6609,
											"end": 6676,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6609,
											"end": 6676,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 6609,
											"end": 6676,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6609,
											"end": 6676,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 6718,
											"end": 6828,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "86"
										},
										{
											"begin": 6776,
											"end": 6789,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "87"
										},
										{
											"begin": 6785,
											"end": 6788,
											"name": "DUP9",
											"source": 1
										},
										{
											"begin": 6776,
											"end": 6784,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "68"
										},
										{
											"begin": 6776,
											"end": 6789,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 6776,
											"end": 6789,
											"name": "tag",
											"source": 1,
											"value": "87"
										},
										{
											"begin": 6776,
											"end": 6789,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 6808,
											"end": 6813,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 6725,
											"end": 6743,
											"name": "DUP7",
											"source": 1
										},
										{
											"begin": 6718,
											"end": 6757,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6718,
											"end": 6757,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 6718,
											"end": 6757,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "78"
										},
										{
											"begin": 6718,
											"end": 6757,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6718,
											"end": 6828,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 6718,
											"end": 6828,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 6718,
											"end": 6828,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6718,
											"end": 6828,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFF"
										},
										{
											"begin": 6718,
											"end": 6828,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 6718,
											"end": 6828,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 6718,
											"end": 6828,
											"name": "tag",
											"source": 1,
											"value": "86"
										},
										{
											"begin": 6718,
											"end": 6828,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 6876,
											"end": 6880,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 6843,
											"end": 6858,
											"name": "PUSH",
											"source": 1,
											"value": "7"
										},
										{
											"begin": 6843,
											"end": 6870,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 6859,
											"end": 6869,
											"name": "CALLER",
											"source": 1
										},
										{
											"begin": 6843,
											"end": 6870,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6843,
											"end": 6870,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 6843,
											"end": 6870,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6843,
											"end": 6870,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 6843,
											"end": 6870,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 6843,
											"end": 6870,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 6843,
											"end": 6870,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 6843,
											"end": 6870,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 6843,
											"end": 6870,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6843,
											"end": 6870,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 6843,
											"end": 6870,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 6843,
											"end": 6870,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 6843,
											"end": 6870,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 6843,
											"end": 6870,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 6843,
											"end": 6870,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 6843,
											"end": 6875,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 6871,
											"end": 6874,
											"name": "DUP10",
											"source": 1
										},
										{
											"begin": 6843,
											"end": 6875,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6843,
											"end": 6875,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 6843,
											"end": 6875,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 6843,
											"end": 6875,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 6843,
											"end": 6875,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 6843,
											"end": 6875,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 6843,
											"end": 6875,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6843,
											"end": 6875,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 6843,
											"end": 6875,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 6843,
											"end": 6875,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 6843,
											"end": 6875,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 6843,
											"end": 6875,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 6843,
											"end": 6875,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 6843,
											"end": 6875,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 6843,
											"end": 6880,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 6843,
											"end": 6880,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 6843,
											"end": 6880,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 6843,
											"end": 6880,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 6843,
											"end": 6880,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 6843,
											"end": 6880,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 6843,
											"end": 6880,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 6843,
											"end": 6880,
											"name": "NOT",
											"source": 1
										},
										{
											"begin": 6843,
											"end": 6880,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 6843,
											"end": 6880,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6843,
											"end": 6880,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 6843,
											"end": 6880,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 6843,
											"end": 6880,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 6843,
											"end": 6880,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 6843,
											"end": 6880,
											"name": "OR",
											"source": 1
										},
										{
											"begin": 6843,
											"end": 6880,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6843,
											"end": 6880,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 6843,
											"end": 6880,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 6531,
											"end": 6892,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 6499,
											"end": 6892,
											"name": "tag",
											"source": 1,
											"value": "82"
										},
										{
											"begin": 6499,
											"end": 6892,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 6928,
											"end": 6929,
											"name": "PUSH",
											"source": 1,
											"value": "5"
										},
										{
											"begin": 6902,
											"end": 6911,
											"name": "PUSH",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 6902,
											"end": 6916,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 6912,
											"end": 6915,
											"name": "DUP9",
											"source": 1
										},
										{
											"begin": 6902,
											"end": 6916,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6902,
											"end": 6916,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 6902,
											"end": 6916,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6902,
											"end": 6916,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 6902,
											"end": 6916,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 6902,
											"end": 6916,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 6902,
											"end": 6916,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 6902,
											"end": 6916,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 6902,
											"end": 6916,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6902,
											"end": 6916,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 6902,
											"end": 6916,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 6902,
											"end": 6916,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 6902,
											"end": 6916,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 6902,
											"end": 6916,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 6902,
											"end": 6916,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 6902,
											"end": 6927,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 6902,
											"end": 6927,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 6902,
											"end": 6927,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 6902,
											"end": 6929,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 6902,
											"end": 6929,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 6902,
											"end": 6929,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 6902,
											"end": 6929,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 6902,
											"end": 6929,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 6902,
											"end": 6929,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 6902,
											"end": 6929,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 6902,
											"end": 6929,
											"name": "NOT",
											"source": 1
										},
										{
											"begin": 6902,
											"end": 6929,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 6902,
											"end": 6929,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6902,
											"end": 6929,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 6902,
											"end": 6929,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 6902,
											"end": 6929,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 6902,
											"end": 6929,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 6902,
											"end": 6929,
											"name": "OR",
											"source": 1
										},
										{
											"begin": 6902,
											"end": 6929,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6902,
											"end": 6929,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 6902,
											"end": 6929,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5552,
											"end": 6937,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5552,
											"end": 6937,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5552,
											"end": 6937,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5552,
											"end": 6937,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5552,
											"end": 6937,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5504,
											"end": 6937,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5504,
											"end": 6937,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 929,
											"end": 993,
											"name": "tag",
											"source": 1,
											"value": "25"
										},
										{
											"begin": 929,
											"end": 993,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 929,
											"end": 993,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 929,
											"end": 993,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 929,
											"end": 993,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 929,
											"end": 993,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 929,
											"end": 993,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 929,
											"end": 993,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 929,
											"end": 993,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 929,
											"end": 993,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 929,
											"end": 993,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 929,
											"end": 993,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 929,
											"end": 993,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 929,
											"end": 993,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 929,
											"end": 993,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 929,
											"end": 993,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 929,
											"end": 993,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 929,
											"end": 993,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 929,
											"end": 993,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 929,
											"end": 993,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 929,
											"end": 993,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 929,
											"end": 993,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 929,
											"end": 993,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 929,
											"end": 993,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 929,
											"end": 993,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 929,
											"end": 993,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 929,
											"end": 993,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 929,
											"end": 993,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 929,
											"end": 993,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 929,
											"end": 993,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 929,
											"end": 993,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 929,
											"end": 993,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 929,
											"end": 993,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 929,
											"end": 993,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 929,
											"end": 993,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 2141,
											"end": 2723,
											"name": "tag",
											"source": 1,
											"value": "30"
										},
										{
											"begin": 2141,
											"end": 2723,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2214,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2215,
											"end": 2224,
											"name": "PUSH",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 2215,
											"end": 2229,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2225,
											"end": 2228,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 2215,
											"end": 2229,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2215,
											"end": 2229,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 2215,
											"end": 2229,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2215,
											"end": 2229,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 2215,
											"end": 2229,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2215,
											"end": 2229,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2215,
											"end": 2229,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 2215,
											"end": 2229,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2215,
											"end": 2229,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2215,
											"end": 2229,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2215,
											"end": 2229,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2215,
											"end": 2229,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 2215,
											"end": 2229,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2215,
											"end": 2229,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2215,
											"end": 2229,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "PUSH",
											"source": 1,
											"value": "9"
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFF"
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFF"
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFF"
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "PUSH",
											"source": 1,
											"value": "10"
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "PUSH",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "PUSH",
											"source": 1,
											"value": "3"
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2187,
											"end": 2229,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2272,
											"end": 2273,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 2248,
											"end": 2259,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2248,
											"end": 2270,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2248,
											"end": 2270,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2248,
											"end": 2270,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 2248,
											"end": 2273,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 2248,
											"end": 2273,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 2248,
											"end": 2273,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 2240,
											"end": 2274,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "89"
										},
										{
											"begin": 2240,
											"end": 2274,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 2240,
											"end": 2274,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2240,
											"end": 2274,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2240,
											"end": 2274,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 2240,
											"end": 2274,
											"name": "tag",
											"source": 1,
											"value": "89"
										},
										{
											"begin": 2240,
											"end": 2274,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2315,
											"end": 2341,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2342,
											"end": 2353,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2342,
											"end": 2366,
											"name": "PUSH",
											"source": 1,
											"value": "A0"
										},
										{
											"begin": 2342,
											"end": 2366,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2342,
											"end": 2366,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 2315,
											"end": 2366,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2315,
											"end": 2366,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2404,
											"end": 2584,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "90"
										},
										{
											"begin": 2462,
											"end": 2472,
											"name": "CALLER",
											"source": 1
										},
										{
											"begin": 2495,
											"end": 2499,
											"name": "ADDRESS",
											"source": 1
										},
										{
											"begin": 2515,
											"end": 2573,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "91"
										},
										{
											"begin": 2524,
											"end": 2535,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 2524,
											"end": 2544,
											"name": "PUSH",
											"source": 1,
											"value": "80"
										},
										{
											"begin": 2524,
											"end": 2544,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2524,
											"end": 2544,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 2546,
											"end": 2557,
											"name": "DUP7",
											"source": 1
										},
										{
											"begin": 2546,
											"end": 2572,
											"name": "PUSH",
											"source": 1,
											"value": "60"
										},
										{
											"begin": 2546,
											"end": 2572,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2546,
											"end": 2572,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 2515,
											"end": 2523,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "37"
										},
										{
											"begin": 2515,
											"end": 2573,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 2515,
											"end": 2573,
											"name": "tag",
											"source": 1,
											"value": "91"
										},
										{
											"begin": 2515,
											"end": 2573,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2411,
											"end": 2429,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 2404,
											"end": 2447,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2404,
											"end": 2447,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 2404,
											"end": 2447,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "65"
										},
										{
											"begin": 2404,
											"end": 2447,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2404,
											"end": 2584,
											"name": "SWAP4",
											"source": 1
										},
										{
											"begin": 2404,
											"end": 2584,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 2404,
											"end": 2584,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2404,
											"end": 2584,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2404,
											"end": 2584,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFF"
										},
										{
											"begin": 2404,
											"end": 2584,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 2404,
											"end": 2584,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 2404,
											"end": 2584,
											"name": "tag",
											"source": 1,
											"value": "90"
										},
										{
											"begin": 2404,
											"end": 2584,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2624,
											"end": 2634,
											"name": "CALLER",
											"source": 1
										},
										{
											"begin": 2595,
											"end": 2604,
											"name": "PUSH",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 2595,
											"end": 2609,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2605,
											"end": 2608,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 2595,
											"end": 2609,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2595,
											"end": 2609,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 2595,
											"end": 2609,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2595,
											"end": 2609,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 2595,
											"end": 2609,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2595,
											"end": 2609,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2595,
											"end": 2609,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 2595,
											"end": 2609,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2595,
											"end": 2609,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2595,
											"end": 2609,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2595,
											"end": 2609,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2595,
											"end": 2609,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 2595,
											"end": 2609,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2595,
											"end": 2609,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2595,
											"end": 2609,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 2595,
											"end": 2623,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 2595,
											"end": 2623,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2595,
											"end": 2623,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2595,
											"end": 2634,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 2595,
											"end": 2634,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 2595,
											"end": 2634,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2595,
											"end": 2634,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 2595,
											"end": 2634,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2595,
											"end": 2634,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2595,
											"end": 2634,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 2595,
											"end": 2634,
											"name": "NOT",
											"source": 1
										},
										{
											"begin": 2595,
											"end": 2634,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 2595,
											"end": 2634,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2595,
											"end": 2634,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 2595,
											"end": 2634,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2595,
											"end": 2634,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 2595,
											"end": 2634,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 2595,
											"end": 2634,
											"name": "OR",
											"source": 1
										},
										{
											"begin": 2595,
											"end": 2634,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2595,
											"end": 2634,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 2595,
											"end": 2634,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2714,
											"end": 2715,
											"name": "PUSH",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 2688,
											"end": 2697,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2688,
											"end": 2702,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2698,
											"end": 2701,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 2688,
											"end": 2702,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2688,
											"end": 2702,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 2688,
											"end": 2702,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2688,
											"end": 2702,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 2688,
											"end": 2702,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2688,
											"end": 2702,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2688,
											"end": 2702,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 2688,
											"end": 2702,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2688,
											"end": 2702,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2688,
											"end": 2702,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2688,
											"end": 2702,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2688,
											"end": 2702,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 2688,
											"end": 2702,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2688,
											"end": 2702,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2688,
											"end": 2702,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 2688,
											"end": 2713,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2688,
											"end": 2713,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2688,
											"end": 2713,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2688,
											"end": 2715,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 2688,
											"end": 2715,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 2688,
											"end": 2715,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2688,
											"end": 2715,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 2688,
											"end": 2715,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2688,
											"end": 2715,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 2688,
											"end": 2715,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 2688,
											"end": 2715,
											"name": "NOT",
											"source": 1
										},
										{
											"begin": 2688,
											"end": 2715,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 2688,
											"end": 2715,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2688,
											"end": 2715,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 2688,
											"end": 2715,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 2688,
											"end": 2715,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 2688,
											"end": 2715,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 2688,
											"end": 2715,
											"name": "OR",
											"source": 1
										},
										{
											"begin": 2688,
											"end": 2715,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2688,
											"end": 2715,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 2688,
											"end": 2715,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2176,
											"end": 2723,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2176,
											"end": 2723,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2141,
											"end": 2723,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2141,
											"end": 2723,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 4280,
											"end": 5417,
											"name": "tag",
											"source": 1,
											"value": "33"
										},
										{
											"begin": 4280,
											"end": 5417,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4340,
											"end": 4354,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4355,
											"end": 4369,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "93"
										},
										{
											"begin": 4365,
											"end": 4368,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 4355,
											"end": 4364,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "62"
										},
										{
											"begin": 4355,
											"end": 4369,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 4355,
											"end": 4369,
											"name": "tag",
											"source": 1,
											"value": "93"
										},
										{
											"begin": 4355,
											"end": 4369,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4340,
											"end": 4369,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4340,
											"end": 4369,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4433,
											"end": 4439,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 4421,
											"end": 4439,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4421,
											"end": 4439,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 4421,
											"end": 4431,
											"name": "CALLER",
											"source": 1
										},
										{
											"begin": 4421,
											"end": 4439,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4421,
											"end": 4439,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 4421,
											"end": 4439,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 4413,
											"end": 4440,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "94"
										},
										{
											"begin": 4413,
											"end": 4440,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 4413,
											"end": 4440,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4413,
											"end": 4440,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 4413,
											"end": 4440,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 4413,
											"end": 4440,
											"name": "tag",
											"source": 1,
											"value": "94"
										},
										{
											"begin": 4413,
											"end": 4440,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4522,
											"end": 4530,
											"name": "PUSH",
											"source": 1,
											"value": "3"
										},
										{
											"begin": 4522,
											"end": 4538,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4531,
											"end": 4537,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 4522,
											"end": 4538,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4522,
											"end": 4538,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 4522,
											"end": 4538,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4522,
											"end": 4538,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 4522,
											"end": 4538,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4522,
											"end": 4538,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 4522,
											"end": 4538,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 4522,
											"end": 4538,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4522,
											"end": 4538,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4522,
											"end": 4538,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4522,
											"end": 4538,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 4522,
											"end": 4538,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 4522,
											"end": 4538,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4522,
											"end": 4538,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4522,
											"end": 4538,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 4522,
											"end": 4543,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4539,
											"end": 4542,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 4522,
											"end": 4543,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4522,
											"end": 4543,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 4522,
											"end": 4543,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4522,
											"end": 4543,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 4522,
											"end": 4543,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 4522,
											"end": 4543,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4522,
											"end": 4543,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4522,
											"end": 4543,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4522,
											"end": 4543,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 4522,
											"end": 4543,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 4522,
											"end": 4543,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4522,
											"end": 4543,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4522,
											"end": 4543,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 4522,
											"end": 4543,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4522,
											"end": 4543,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4522,
											"end": 4543,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 4522,
											"end": 4543,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4522,
											"end": 4543,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 4522,
											"end": 4543,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 4522,
											"end": 4543,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4522,
											"end": 4543,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 4522,
											"end": 4543,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 4522,
											"end": 4543,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 4514,
											"end": 4544,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "95"
										},
										{
											"begin": 4514,
											"end": 4544,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 4514,
											"end": 4544,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4514,
											"end": 4544,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 4514,
											"end": 4544,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 4514,
											"end": 4544,
											"name": "tag",
											"source": 1,
											"value": "95"
										},
										{
											"begin": 4514,
											"end": 4544,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4630,
											"end": 4635,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4596,
											"end": 4635,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 4596,
											"end": 4635,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 4596,
											"end": 4611,
											"name": "PUSH",
											"source": 1,
											"value": "5"
										},
										{
											"begin": 4596,
											"end": 4623,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4612,
											"end": 4622,
											"name": "CALLER",
											"source": 1
										},
										{
											"begin": 4596,
											"end": 4623,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4596,
											"end": 4623,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 4596,
											"end": 4623,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4596,
											"end": 4623,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 4596,
											"end": 4623,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4596,
											"end": 4623,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 4596,
											"end": 4623,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 4596,
											"end": 4623,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4596,
											"end": 4623,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4596,
											"end": 4623,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4596,
											"end": 4623,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 4596,
											"end": 4623,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 4596,
											"end": 4623,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4596,
											"end": 4623,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4596,
											"end": 4623,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 4596,
											"end": 4628,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4624,
											"end": 4627,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 4596,
											"end": 4628,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4596,
											"end": 4628,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 4596,
											"end": 4628,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4596,
											"end": 4628,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 4596,
											"end": 4628,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 4596,
											"end": 4628,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4596,
											"end": 4628,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4596,
											"end": 4628,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4596,
											"end": 4628,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 4596,
											"end": 4628,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 4596,
											"end": 4628,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4596,
											"end": 4628,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4596,
											"end": 4628,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 4596,
											"end": 4628,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4596,
											"end": 4628,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4596,
											"end": 4628,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 4596,
											"end": 4628,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4596,
											"end": 4628,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 4596,
											"end": 4628,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 4596,
											"end": 4628,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4596,
											"end": 4628,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 4596,
											"end": 4628,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 4596,
											"end": 4628,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 4596,
											"end": 4635,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 4596,
											"end": 4635,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 4596,
											"end": 4635,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 4588,
											"end": 4636,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "96"
										},
										{
											"begin": 4588,
											"end": 4636,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 4588,
											"end": 4636,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4588,
											"end": 4636,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 4588,
											"end": 4636,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 4588,
											"end": 4636,
											"name": "tag",
											"source": 1,
											"value": "96"
										},
										{
											"begin": 4588,
											"end": 4636,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4647,
											"end": 4673,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4674,
											"end": 4683,
											"name": "PUSH",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 4674,
											"end": 4688,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4684,
											"end": 4687,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 4674,
											"end": 4688,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4674,
											"end": 4688,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 4674,
											"end": 4688,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4674,
											"end": 4688,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 4674,
											"end": 4688,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4674,
											"end": 4688,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 4674,
											"end": 4688,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 4674,
											"end": 4688,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4674,
											"end": 4688,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4674,
											"end": 4688,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4674,
											"end": 4688,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 4674,
											"end": 4688,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 4674,
											"end": 4688,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4674,
											"end": 4688,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4674,
											"end": 4688,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 4674,
											"end": 4701,
											"name": "PUSH",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 4674,
											"end": 4701,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4674,
											"end": 4701,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4674,
											"end": 4701,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4674,
											"end": 4701,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 4674,
											"end": 4701,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4674,
											"end": 4701,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 4674,
											"end": 4701,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 4674,
											"end": 4701,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4674,
											"end": 4701,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 4674,
											"end": 4701,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4674,
											"end": 4701,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 4647,
											"end": 4701,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4647,
											"end": 4701,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4712,
											"end": 4725,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4750,
											"end": 4759,
											"name": "PUSH",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 4750,
											"end": 4764,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4760,
											"end": 4763,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 4750,
											"end": 4764,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4750,
											"end": 4764,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 4750,
											"end": 4764,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4750,
											"end": 4764,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 4750,
											"end": 4764,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4750,
											"end": 4764,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 4750,
											"end": 4764,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 4750,
											"end": 4764,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4750,
											"end": 4764,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4750,
											"end": 4764,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4750,
											"end": 4764,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 4750,
											"end": 4764,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 4750,
											"end": 4764,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4750,
											"end": 4764,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4750,
											"end": 4764,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 4750,
											"end": 4779,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4750,
											"end": 4779,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4750,
											"end": 4779,
											"name": "PUSH",
											"source": 1,
											"value": "10"
										},
										{
											"begin": 4750,
											"end": 4779,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4750,
											"end": 4779,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 4750,
											"end": 4779,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4750,
											"end": 4779,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 4750,
											"end": 4779,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 4750,
											"end": 4779,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4750,
											"end": 4779,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 4750,
											"end": 4779,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4750,
											"end": 4779,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 4726,
											"end": 4735,
											"name": "PUSH",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 4726,
											"end": 4740,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4736,
											"end": 4739,
											"name": "DUP7",
											"source": 1
										},
										{
											"begin": 4726,
											"end": 4740,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4726,
											"end": 4740,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 4726,
											"end": 4740,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4726,
											"end": 4740,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 4726,
											"end": 4740,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4726,
											"end": 4740,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 4726,
											"end": 4740,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 4726,
											"end": 4740,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4726,
											"end": 4740,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4726,
											"end": 4740,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4726,
											"end": 4740,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 4726,
											"end": 4740,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 4726,
											"end": 4740,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4726,
											"end": 4740,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4726,
											"end": 4740,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 4726,
											"end": 4749,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 4726,
											"end": 4749,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4726,
											"end": 4749,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4726,
											"end": 4749,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4726,
											"end": 4749,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 4726,
											"end": 4749,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4726,
											"end": 4749,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 4726,
											"end": 4749,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 4726,
											"end": 4749,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4726,
											"end": 4749,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 4726,
											"end": 4749,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4726,
											"end": 4749,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 4726,
											"end": 4779,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "97"
										},
										{
											"begin": 4726,
											"end": 4779,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 4726,
											"end": 4779,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4726,
											"end": 4779,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "85"
										},
										{
											"begin": 4726,
											"end": 4779,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 4726,
											"end": 4779,
											"name": "tag",
											"source": 1,
											"value": "97"
										},
										{
											"begin": 4726,
											"end": 4779,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4712,
											"end": 4779,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4712,
											"end": 4779,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 4712,
											"end": 4779,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4712,
											"end": 4779,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4790,
											"end": 4812,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4813,
											"end": 4876,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "98"
										},
										{
											"begin": 4822,
											"end": 4831,
											"name": "PUSH",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 4822,
											"end": 4836,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4832,
											"end": 4835,
											"name": "DUP8",
											"source": 1
										},
										{
											"begin": 4822,
											"end": 4836,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4822,
											"end": 4836,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 4822,
											"end": 4836,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4822,
											"end": 4836,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 4822,
											"end": 4836,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4822,
											"end": 4836,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 4822,
											"end": 4836,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 4822,
											"end": 4836,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4822,
											"end": 4836,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4822,
											"end": 4836,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4822,
											"end": 4836,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 4822,
											"end": 4836,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 4822,
											"end": 4836,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4822,
											"end": 4836,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4822,
											"end": 4836,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 4822,
											"end": 4845,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 4822,
											"end": 4845,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4822,
											"end": 4845,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4822,
											"end": 4845,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4822,
											"end": 4845,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 4822,
											"end": 4845,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4822,
											"end": 4845,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 4822,
											"end": 4845,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 4822,
											"end": 4845,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4822,
											"end": 4845,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 4822,
											"end": 4845,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4822,
											"end": 4845,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 4846,
											"end": 4855,
											"name": "PUSH",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 4846,
											"end": 4860,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4856,
											"end": 4859,
											"name": "DUP9",
											"source": 1
										},
										{
											"begin": 4846,
											"end": 4860,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4846,
											"end": 4860,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 4846,
											"end": 4860,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4846,
											"end": 4860,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 4846,
											"end": 4860,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4846,
											"end": 4860,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 4846,
											"end": 4860,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 4846,
											"end": 4860,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4846,
											"end": 4860,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4846,
											"end": 4860,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4846,
											"end": 4860,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 4846,
											"end": 4860,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 4846,
											"end": 4860,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4846,
											"end": 4860,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4846,
											"end": 4860,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 4846,
											"end": 4875,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4846,
											"end": 4875,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4846,
											"end": 4875,
											"name": "PUSH",
											"source": 1,
											"value": "10"
										},
										{
											"begin": 4846,
											"end": 4875,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4846,
											"end": 4875,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 4846,
											"end": 4875,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4846,
											"end": 4875,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 4846,
											"end": 4875,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 4846,
											"end": 4875,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4846,
											"end": 4875,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 4846,
											"end": 4875,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4846,
											"end": 4875,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 4813,
											"end": 4821,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "37"
										},
										{
											"begin": 4813,
											"end": 4876,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 4813,
											"end": 4876,
											"name": "tag",
											"source": 1,
											"value": "98"
										},
										{
											"begin": 4813,
											"end": 4876,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4790,
											"end": 4876,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4790,
											"end": 4876,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4887,
											"end": 4898,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4899,
											"end": 4917,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "99"
										},
										{
											"begin": 4911,
											"end": 4916,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 4899,
											"end": 4910,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "76"
										},
										{
											"begin": 4899,
											"end": 4917,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 4899,
											"end": 4917,
											"name": "tag",
											"source": 1,
											"value": "99"
										},
										{
											"begin": 4899,
											"end": 4917,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4887,
											"end": 4917,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4887,
											"end": 4917,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4970,
											"end": 5028,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 5018,
											"end": 5022,
											"name": "ADDRESS",
											"source": 1
										},
										{
											"begin": 5024,
											"end": 5027,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 4977,
											"end": 4995,
											"name": "DUP7",
											"source": 1
										},
										{
											"begin": 4970,
											"end": 5009,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4970,
											"end": 5009,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 4970,
											"end": 5009,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "78"
										},
										{
											"begin": 4970,
											"end": 5009,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4970,
											"end": 5028,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 4970,
											"end": 5028,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 4970,
											"end": 5028,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4970,
											"end": 5028,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFF"
										},
										{
											"begin": 4970,
											"end": 5028,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 4970,
											"end": 5028,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 4970,
											"end": 5028,
											"name": "tag",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 4970,
											"end": 5028,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5069,
											"end": 5164,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "101"
										},
										{
											"begin": 5123,
											"end": 5129,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 5150,
											"end": 5153,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 5144,
											"end": 5149,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 5144,
											"end": 5153,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "102"
										},
										{
											"begin": 5144,
											"end": 5153,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 5144,
											"end": 5153,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5144,
											"end": 5153,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "81"
										},
										{
											"begin": 5144,
											"end": 5153,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 5144,
											"end": 5153,
											"name": "tag",
											"source": 1,
											"value": "102"
										},
										{
											"begin": 5144,
											"end": 5153,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5076,
											"end": 5094,
											"name": "DUP7",
											"source": 1
										},
										{
											"begin": 5069,
											"end": 5108,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5069,
											"end": 5108,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 5069,
											"end": 5108,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "78"
										},
										{
											"begin": 5069,
											"end": 5108,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5069,
											"end": 5164,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 5069,
											"end": 5164,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 5069,
											"end": 5164,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5069,
											"end": 5164,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFF"
										},
										{
											"begin": 5069,
											"end": 5164,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 5069,
											"end": 5164,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 5069,
											"end": 5164,
											"name": "tag",
											"source": 1,
											"value": "101"
										},
										{
											"begin": 5069,
											"end": 5164,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5223,
											"end": 5323,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "103"
										},
										{
											"begin": 5277,
											"end": 5283,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 5298,
											"end": 5312,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 5230,
											"end": 5248,
											"name": "DUP7",
											"source": 1
										},
										{
											"begin": 5223,
											"end": 5262,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5223,
											"end": 5262,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 5223,
											"end": 5262,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "78"
										},
										{
											"begin": 5223,
											"end": 5262,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5223,
											"end": 5323,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 5223,
											"end": 5323,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 5223,
											"end": 5323,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5223,
											"end": 5323,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFF"
										},
										{
											"begin": 5223,
											"end": 5323,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 5223,
											"end": 5323,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 5223,
											"end": 5323,
											"name": "tag",
											"source": 1,
											"value": "103"
										},
										{
											"begin": 5223,
											"end": 5323,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5404,
											"end": 5408,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 5371,
											"end": 5386,
											"name": "PUSH",
											"source": 1,
											"value": "5"
										},
										{
											"begin": 5371,
											"end": 5398,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 5387,
											"end": 5397,
											"name": "CALLER",
											"source": 1
										},
										{
											"begin": 5371,
											"end": 5398,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5371,
											"end": 5398,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 5371,
											"end": 5398,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5371,
											"end": 5398,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 5371,
											"end": 5398,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5371,
											"end": 5398,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 5371,
											"end": 5398,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 5371,
											"end": 5398,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5371,
											"end": 5398,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5371,
											"end": 5398,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5371,
											"end": 5398,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 5371,
											"end": 5398,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 5371,
											"end": 5398,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5371,
											"end": 5398,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 5371,
											"end": 5398,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 5371,
											"end": 5403,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 5399,
											"end": 5402,
											"name": "DUP9",
											"source": 1
										},
										{
											"begin": 5371,
											"end": 5403,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5371,
											"end": 5403,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 5371,
											"end": 5403,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5371,
											"end": 5403,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 5371,
											"end": 5403,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 5371,
											"end": 5403,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5371,
											"end": 5403,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5371,
											"end": 5403,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5371,
											"end": 5403,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 5371,
											"end": 5403,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 5371,
											"end": 5403,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5371,
											"end": 5403,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 5371,
											"end": 5403,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 5371,
											"end": 5403,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 5371,
											"end": 5408,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 5371,
											"end": 5408,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 5371,
											"end": 5408,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5371,
											"end": 5408,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 5371,
											"end": 5408,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5371,
											"end": 5408,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 5371,
											"end": 5408,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 5371,
											"end": 5408,
											"name": "NOT",
											"source": 1
										},
										{
											"begin": 5371,
											"end": 5408,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 5371,
											"end": 5408,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5371,
											"end": 5408,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 5371,
											"end": 5408,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 5371,
											"end": 5408,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 5371,
											"end": 5408,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 5371,
											"end": 5408,
											"name": "OR",
											"source": 1
										},
										{
											"begin": 5371,
											"end": 5408,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5371,
											"end": 5408,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 5371,
											"end": 5408,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4329,
											"end": 5417,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4329,
											"end": 5417,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4329,
											"end": 5417,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4329,
											"end": 5417,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4329,
											"end": 5417,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4280,
											"end": 5417,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4280,
											"end": 5417,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 7330,
											"end": 7873,
											"name": "tag",
											"source": 1,
											"value": "37"
										},
										{
											"begin": 7330,
											"end": 7873,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 7409,
											"end": 7416,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 7428,
											"end": 7446,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 7460,
											"end": 7471,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 7449,
											"end": 7459,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 7449,
											"end": 7471,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "105"
										},
										{
											"begin": 7449,
											"end": 7471,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 7449,
											"end": 7471,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 7449,
											"end": 7471,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "85"
										},
										{
											"begin": 7449,
											"end": 7471,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 7449,
											"end": 7471,
											"name": "tag",
											"source": 1,
											"value": "105"
										},
										{
											"begin": 7449,
											"end": 7471,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 7428,
											"end": 7471,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7428,
											"end": 7471,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 7428,
											"end": 7471,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 7428,
											"end": 7471,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 7500,
											"end": 7509,
											"name": "PUSH",
											"source": 1,
											"value": "56BC75E2D63100000"
										},
										{
											"begin": 7486,
											"end": 7496,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 7486,
											"end": 7509,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 7486,
											"end": 7509,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 7486,
											"end": 7536,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 7486,
											"end": 7536,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 7486,
											"end": 7536,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "106"
										},
										{
											"begin": 7486,
											"end": 7536,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 7486,
											"end": 7536,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 7526,
											"end": 7536,
											"name": "PUSH",
											"source": 1,
											"value": "3635C9ADC5DEA00000"
										},
										{
											"begin": 7513,
											"end": 7523,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 7513,
											"end": 7536,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 7486,
											"end": 7536,
											"name": "tag",
											"source": 1,
											"value": "106"
										},
										{
											"begin": 7486,
											"end": 7536,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 7482,
											"end": 7866,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 7482,
											"end": 7866,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "107"
										},
										{
											"begin": 7482,
											"end": 7866,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 7580,
											"end": 7583,
											"name": "PUSH",
											"source": 1,
											"value": "64"
										},
										{
											"begin": 7574,
											"end": 7576,
											"name": "PUSH",
											"source": 1,
											"value": "32"
										},
										{
											"begin": 7561,
											"end": 7571,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 7561,
											"end": 7576,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "108"
										},
										{
											"begin": 7561,
											"end": 7576,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 7561,
											"end": 7576,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 7561,
											"end": 7576,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "109"
										},
										{
											"begin": 7561,
											"end": 7576,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 7561,
											"end": 7576,
											"name": "tag",
											"source": 1,
											"value": "108"
										},
										{
											"begin": 7561,
											"end": 7576,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 7560,
											"end": 7583,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "110"
										},
										{
											"begin": 7560,
											"end": 7583,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 7560,
											"end": 7583,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 7560,
											"end": 7583,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "111"
										},
										{
											"begin": 7560,
											"end": 7583,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 7560,
											"end": 7583,
											"name": "tag",
											"source": 1,
											"value": "110"
										},
										{
											"begin": 7560,
											"end": 7583,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 7553,
											"end": 7583,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 7553,
											"end": 7583,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 7553,
											"end": 7583,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 7553,
											"end": 7583,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "104"
										},
										{
											"begin": 7553,
											"end": 7583,
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 7482,
											"end": 7866,
											"name": "tag",
											"source": 1,
											"value": "107"
										},
										{
											"begin": 7482,
											"end": 7866,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 7619,
											"end": 7629,
											"name": "PUSH",
											"source": 1,
											"value": "3635C9ADC5DEA00000"
										},
										{
											"begin": 7605,
											"end": 7615,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 7605,
											"end": 7629,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 7605,
											"end": 7629,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 7605,
											"end": 7657,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 7605,
											"end": 7657,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 7605,
											"end": 7657,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "113"
										},
										{
											"begin": 7605,
											"end": 7657,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 7605,
											"end": 7657,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 7646,
											"end": 7657,
											"name": "PUSH",
											"source": 1,
											"value": "21E19E0C9BAB2400000"
										},
										{
											"begin": 7633,
											"end": 7643,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 7633,
											"end": 7657,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 7605,
											"end": 7657,
											"name": "tag",
											"source": 1,
											"value": "113"
										},
										{
											"begin": 7605,
											"end": 7657,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 7601,
											"end": 7866,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 7601,
											"end": 7866,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "114"
										},
										{
											"begin": 7601,
											"end": 7866,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 7701,
											"end": 7704,
											"name": "PUSH",
											"source": 1,
											"value": "64"
										},
										{
											"begin": 7695,
											"end": 7697,
											"name": "PUSH",
											"source": 1,
											"value": "28"
										},
										{
											"begin": 7682,
											"end": 7692,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 7682,
											"end": 7697,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "115"
										},
										{
											"begin": 7682,
											"end": 7697,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 7682,
											"end": 7697,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 7682,
											"end": 7697,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "109"
										},
										{
											"begin": 7682,
											"end": 7697,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 7682,
											"end": 7697,
											"name": "tag",
											"source": 1,
											"value": "115"
										},
										{
											"begin": 7682,
											"end": 7697,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 7681,
											"end": 7704,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "116"
										},
										{
											"begin": 7681,
											"end": 7704,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 7681,
											"end": 7704,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 7681,
											"end": 7704,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "111"
										},
										{
											"begin": 7681,
											"end": 7704,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 7681,
											"end": 7704,
											"name": "tag",
											"source": 1,
											"value": "116"
										},
										{
											"begin": 7681,
											"end": 7704,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 7674,
											"end": 7704,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 7674,
											"end": 7704,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 7674,
											"end": 7704,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 7674,
											"end": 7704,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "104"
										},
										{
											"begin": 7674,
											"end": 7704,
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 7601,
											"end": 7866,
											"name": "tag",
											"source": 1,
											"value": "114"
										},
										{
											"begin": 7601,
											"end": 7866,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 7739,
											"end": 7750,
											"name": "PUSH",
											"source": 1,
											"value": "21E19E0C9BAB2400000"
										},
										{
											"begin": 7726,
											"end": 7736,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 7726,
											"end": 7750,
											"name": "GT",
											"source": 1
										},
										{
											"begin": 7722,
											"end": 7866,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 7722,
											"end": 7866,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "118"
										},
										{
											"begin": 7722,
											"end": 7866,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 7794,
											"end": 7797,
											"name": "PUSH",
											"source": 1,
											"value": "64"
										},
										{
											"begin": 7788,
											"end": 7790,
											"name": "PUSH",
											"source": 1,
											"value": "19"
										},
										{
											"begin": 7775,
											"end": 7785,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 7775,
											"end": 7790,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "119"
										},
										{
											"begin": 7775,
											"end": 7790,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 7775,
											"end": 7790,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 7775,
											"end": 7790,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "109"
										},
										{
											"begin": 7775,
											"end": 7790,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 7775,
											"end": 7790,
											"name": "tag",
											"source": 1,
											"value": "119"
										},
										{
											"begin": 7775,
											"end": 7790,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 7774,
											"end": 7797,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "120"
										},
										{
											"begin": 7774,
											"end": 7797,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 7774,
											"end": 7797,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 7774,
											"end": 7797,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "111"
										},
										{
											"begin": 7774,
											"end": 7797,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 7774,
											"end": 7797,
											"name": "tag",
											"source": 1,
											"value": "120"
										},
										{
											"begin": 7774,
											"end": 7797,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 7767,
											"end": 7797,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 7767,
											"end": 7797,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 7767,
											"end": 7797,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 7767,
											"end": 7797,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "104"
										},
										{
											"begin": 7767,
											"end": 7797,
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 7722,
											"end": 7866,
											"name": "tag",
											"source": 1,
											"value": "118"
										},
										{
											"begin": 7722,
											"end": 7866,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 7837,
											"end": 7854,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 7837,
											"end": 7854,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 7837,
											"end": 7854,
											"name": "PUSH",
											"source": 1,
											"value": "E008B5F900000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 7837,
											"end": 7854,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 7837,
											"end": 7854,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 7837,
											"end": 7854,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 7837,
											"end": 7854,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 7837,
											"end": 7854,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 7837,
											"end": 7854,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 7837,
											"end": 7854,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 7837,
											"end": 7854,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 7837,
											"end": 7854,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 7837,
											"end": 7854,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 7837,
											"end": 7854,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 7330,
											"end": 7873,
											"name": "tag",
											"source": 1,
											"value": "104"
										},
										{
											"begin": 7330,
											"end": 7873,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 7330,
											"end": 7873,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 7330,
											"end": 7873,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 7330,
											"end": 7873,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 7330,
											"end": 7873,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 7330,
											"end": 7873,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 1177,
											"end": 1241,
											"name": "tag",
											"source": 1,
											"value": "42"
										},
										{
											"begin": 1177,
											"end": 1241,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1177,
											"end": 1241,
											"name": "PUSH",
											"source": 1,
											"value": "6"
										},
										{
											"begin": 1177,
											"end": 1241,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 1177,
											"end": 1241,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 1177,
											"end": 1241,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 1177,
											"end": 1241,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 1177,
											"end": 1241,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 1177,
											"end": 1241,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 1177,
											"end": 1241,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 1177,
											"end": 1241,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 1177,
											"end": 1241,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 1177,
											"end": 1241,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 1177,
											"end": 1241,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1177,
											"end": 1241,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 1177,
											"end": 1241,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 1177,
											"end": 1241,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 1177,
											"end": 1241,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 1177,
											"end": 1241,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 1177,
											"end": 1241,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 1177,
											"end": 1241,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 1177,
											"end": 1241,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 1177,
											"end": 1241,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 1177,
											"end": 1241,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 1177,
											"end": 1241,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 1177,
											"end": 1241,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 1177,
											"end": 1241,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 1177,
											"end": 1241,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 1177,
											"end": 1241,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 1177,
											"end": 1241,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 1177,
											"end": 1241,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 1177,
											"end": 1241,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 1177,
											"end": 1241,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 1177,
											"end": 1241,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 1177,
											"end": 1241,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 3467,
											"end": 4227,
											"name": "tag",
											"source": 1,
											"value": "46"
										},
										{
											"begin": 3467,
											"end": 4227,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3527,
											"end": 3540,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3541,
											"end": 3554,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "123"
										},
										{
											"begin": 3550,
											"end": 3553,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 3541,
											"end": 3549,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "68"
										},
										{
											"begin": 3541,
											"end": 3554,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 3541,
											"end": 3554,
											"name": "tag",
											"source": 1,
											"value": "123"
										},
										{
											"begin": 3541,
											"end": 3554,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3527,
											"end": 3554,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3527,
											"end": 3554,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 3613,
											"end": 3618,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3601,
											"end": 3618,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3601,
											"end": 3618,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 3601,
											"end": 3611,
											"name": "CALLER",
											"source": 1
										},
										{
											"begin": 3601,
											"end": 3618,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3601,
											"end": 3618,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 3601,
											"end": 3618,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 3598,
											"end": 3639,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "124"
										},
										{
											"begin": 3598,
											"end": 3639,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 3627,
											"end": 3637,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 3627,
											"end": 3637,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 3627,
											"end": 3637,
											"name": "PUSH",
											"source": 1,
											"value": "472E017E00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 3627,
											"end": 3637,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3627,
											"end": 3637,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 3627,
											"end": 3637,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 3627,
											"end": 3637,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 3627,
											"end": 3637,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 3627,
											"end": 3637,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 3627,
											"end": 3637,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3627,
											"end": 3637,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 3627,
											"end": 3637,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 3627,
											"end": 3637,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3627,
											"end": 3637,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 3598,
											"end": 3639,
											"name": "tag",
											"source": 1,
											"value": "124"
										},
										{
											"begin": 3598,
											"end": 3639,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3742,
											"end": 3743,
											"name": "PUSH",
											"source": 1,
											"value": "3"
										},
										{
											"begin": 3715,
											"end": 3724,
											"name": "PUSH",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 3715,
											"end": 3729,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3725,
											"end": 3728,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 3715,
											"end": 3729,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3715,
											"end": 3729,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 3715,
											"end": 3729,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3715,
											"end": 3729,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 3715,
											"end": 3729,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3715,
											"end": 3729,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 3715,
											"end": 3729,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 3715,
											"end": 3729,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 3715,
											"end": 3729,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3715,
											"end": 3729,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3715,
											"end": 3729,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 3715,
											"end": 3729,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 3715,
											"end": 3729,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 3715,
											"end": 3729,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3715,
											"end": 3729,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 3715,
											"end": 3740,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3715,
											"end": 3740,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 3715,
											"end": 3740,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3715,
											"end": 3740,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3715,
											"end": 3740,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 3715,
											"end": 3740,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3715,
											"end": 3740,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 3715,
											"end": 3740,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 3715,
											"end": 3740,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3715,
											"end": 3740,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 3715,
											"end": 3740,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 3715,
											"end": 3740,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 3715,
											"end": 3743,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 3715,
											"end": 3743,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 3715,
											"end": 3743,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 3712,
											"end": 3770,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "125"
										},
										{
											"begin": 3712,
											"end": 3770,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 3752,
											"end": 3768,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 3752,
											"end": 3768,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 3752,
											"end": 3768,
											"name": "PUSH",
											"source": 1,
											"value": "DE4461CD00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 3752,
											"end": 3768,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3752,
											"end": 3768,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 3752,
											"end": 3768,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 3752,
											"end": 3768,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 3752,
											"end": 3768,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 3752,
											"end": 3768,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 3752,
											"end": 3768,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3752,
											"end": 3768,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 3752,
											"end": 3768,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 3752,
											"end": 3768,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3752,
											"end": 3768,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 3712,
											"end": 3770,
											"name": "tag",
											"source": 1,
											"value": "125"
										},
										{
											"begin": 3712,
											"end": 3770,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3781,
											"end": 3798,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3799,
											"end": 3808,
											"name": "PUSH",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 3799,
											"end": 3813,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3809,
											"end": 3812,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 3799,
											"end": 3813,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3799,
											"end": 3813,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 3799,
											"end": 3813,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3799,
											"end": 3813,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 3799,
											"end": 3813,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3799,
											"end": 3813,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 3799,
											"end": 3813,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 3799,
											"end": 3813,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 3799,
											"end": 3813,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3799,
											"end": 3813,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3799,
											"end": 3813,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 3799,
											"end": 3813,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 3799,
											"end": 3813,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 3799,
											"end": 3813,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3799,
											"end": 3813,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 3799,
											"end": 3828,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3799,
											"end": 3828,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 3799,
											"end": 3828,
											"name": "PUSH",
											"source": 1,
											"value": "10"
										},
										{
											"begin": 3799,
											"end": 3828,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3799,
											"end": 3828,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 3799,
											"end": 3828,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3799,
											"end": 3828,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 3799,
											"end": 3828,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 3799,
											"end": 3828,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3799,
											"end": 3828,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 3799,
											"end": 3828,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3799,
											"end": 3828,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 3781,
											"end": 3828,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3781,
											"end": 3828,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 3839,
											"end": 3857,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3858,
											"end": 3867,
											"name": "PUSH",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 3858,
											"end": 3872,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3868,
											"end": 3871,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 3858,
											"end": 3872,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3858,
											"end": 3872,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 3858,
											"end": 3872,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3858,
											"end": 3872,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 3858,
											"end": 3872,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3858,
											"end": 3872,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 3858,
											"end": 3872,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 3858,
											"end": 3872,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 3858,
											"end": 3872,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3858,
											"end": 3872,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3858,
											"end": 3872,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 3858,
											"end": 3872,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 3858,
											"end": 3872,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 3858,
											"end": 3872,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3858,
											"end": 3872,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 3858,
											"end": 3881,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 3858,
											"end": 3881,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 3858,
											"end": 3881,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3858,
											"end": 3881,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3858,
											"end": 3881,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 3858,
											"end": 3881,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3858,
											"end": 3881,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 3858,
											"end": 3881,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 3858,
											"end": 3881,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3858,
											"end": 3881,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 3858,
											"end": 3881,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3858,
											"end": 3881,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 3839,
											"end": 3881,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3839,
											"end": 3881,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 3936,
											"end": 3947,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3948,
											"end": 3981,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "126"
										},
										{
											"begin": 3970,
											"end": 3980,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 3960,
											"end": 3969,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 3960,
											"end": 3980,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "127"
										},
										{
											"begin": 3960,
											"end": 3980,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 3960,
											"end": 3980,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3960,
											"end": 3980,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "85"
										},
										{
											"begin": 3960,
											"end": 3980,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 3960,
											"end": 3980,
											"name": "tag",
											"source": 1,
											"value": "127"
										},
										{
											"begin": 3960,
											"end": 3980,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3948,
											"end": 3981,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3948,
											"end": 3981,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 3948,
											"end": 3959,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "76"
										},
										{
											"begin": 3948,
											"end": 3981,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 3948,
											"end": 3981,
											"name": "tag",
											"source": 1,
											"value": "126"
										},
										{
											"begin": 3948,
											"end": 3981,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3936,
											"end": 3981,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3936,
											"end": 3981,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4034,
											"end": 4086,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "128"
										},
										{
											"begin": 4076,
											"end": 4080,
											"name": "ADDRESS",
											"source": 1
										},
										{
											"begin": 4082,
											"end": 4085,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 4041,
											"end": 4053,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 4041,
											"end": 4053,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4041,
											"end": 4053,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4041,
											"end": 4053,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 4041,
											"end": 4053,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4041,
											"end": 4053,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 4041,
											"end": 4053,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 4041,
											"end": 4053,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4041,
											"end": 4053,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 4041,
											"end": 4053,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4041,
											"end": 4053,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 4034,
											"end": 4067,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4034,
											"end": 4067,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 4034,
											"end": 4067,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "78"
										},
										{
											"begin": 4034,
											"end": 4067,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4034,
											"end": 4086,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 4034,
											"end": 4086,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 4034,
											"end": 4086,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4034,
											"end": 4086,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFF"
										},
										{
											"begin": 4034,
											"end": 4086,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 4034,
											"end": 4086,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 4034,
											"end": 4086,
											"name": "tag",
											"source": 1,
											"value": "128"
										},
										{
											"begin": 4034,
											"end": 4086,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4127,
											"end": 4181,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "129"
										},
										{
											"begin": 4161,
											"end": 4166,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 4177,
											"end": 4180,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 4167,
											"end": 4176,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 4167,
											"end": 4180,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4167,
											"end": 4180,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 4167,
											"end": 4180,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "130"
										},
										{
											"begin": 4167,
											"end": 4180,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 4167,
											"end": 4180,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4167,
											"end": 4180,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "81"
										},
										{
											"begin": 4167,
											"end": 4180,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 4167,
											"end": 4180,
											"name": "tag",
											"source": 1,
											"value": "130"
										},
										{
											"begin": 4167,
											"end": 4180,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4134,
											"end": 4146,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 4134,
											"end": 4146,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4134,
											"end": 4146,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4134,
											"end": 4146,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 4134,
											"end": 4146,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4134,
											"end": 4146,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 4134,
											"end": 4146,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 4134,
											"end": 4146,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4134,
											"end": 4146,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 4134,
											"end": 4146,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4134,
											"end": 4146,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 4127,
											"end": 4160,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4127,
											"end": 4160,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 4127,
											"end": 4160,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "78"
										},
										{
											"begin": 4127,
											"end": 4160,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4127,
											"end": 4181,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 4127,
											"end": 4181,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 4127,
											"end": 4181,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4127,
											"end": 4181,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFF"
										},
										{
											"begin": 4127,
											"end": 4181,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 4127,
											"end": 4181,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 4127,
											"end": 4181,
											"name": "tag",
											"source": 1,
											"value": "129"
										},
										{
											"begin": 4127,
											"end": 4181,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4218,
											"end": 4219,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 4192,
											"end": 4201,
											"name": "PUSH",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 4192,
											"end": 4206,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4202,
											"end": 4205,
											"name": "DUP8",
											"source": 1
										},
										{
											"begin": 4192,
											"end": 4206,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4192,
											"end": 4206,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 4192,
											"end": 4206,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4192,
											"end": 4206,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 4192,
											"end": 4206,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4192,
											"end": 4206,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 4192,
											"end": 4206,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 4192,
											"end": 4206,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4192,
											"end": 4206,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4192,
											"end": 4206,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4192,
											"end": 4206,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 4192,
											"end": 4206,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 4192,
											"end": 4206,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4192,
											"end": 4206,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4192,
											"end": 4206,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 4192,
											"end": 4217,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4192,
											"end": 4217,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4192,
											"end": 4217,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4192,
											"end": 4219,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 4192,
											"end": 4219,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 4192,
											"end": 4219,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4192,
											"end": 4219,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 4192,
											"end": 4219,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4192,
											"end": 4219,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 4192,
											"end": 4219,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 4192,
											"end": 4219,
											"name": "NOT",
											"source": 1
										},
										{
											"begin": 4192,
											"end": 4219,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 4192,
											"end": 4219,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4192,
											"end": 4219,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 4192,
											"end": 4219,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 4192,
											"end": 4219,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 4192,
											"end": 4219,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 4192,
											"end": 4219,
											"name": "OR",
											"source": 1
										},
										{
											"begin": 4192,
											"end": 4219,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4192,
											"end": 4219,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 4192,
											"end": 4219,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 3516,
											"end": 4227,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 3516,
											"end": 4227,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 3516,
											"end": 4227,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 3516,
											"end": 4227,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 3467,
											"end": 4227,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 3467,
											"end": 4227,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 1375,
											"end": 2119,
											"name": "tag",
											"source": 1,
											"value": "50"
										},
										{
											"begin": 1375,
											"end": 2119,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1466,
											"end": 1476,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 1488,
											"end": 1497,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 1477,
											"end": 1487,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 1477,
											"end": 1497,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "132"
										},
										{
											"begin": 1477,
											"end": 1497,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 1477,
											"end": 1497,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 1477,
											"end": 1497,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "85"
										},
										{
											"begin": 1477,
											"end": 1497,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 1477,
											"end": 1497,
											"name": "tag",
											"source": 1,
											"value": "132"
										},
										{
											"begin": 1477,
											"end": 1497,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1466,
											"end": 1497,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1466,
											"end": 1497,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 1466,
											"end": 1497,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 1466,
											"end": 1497,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 1517,
											"end": 1526,
											"name": "PUSH",
											"source": 1,
											"value": "56BC75E2D63100000"
										},
										{
											"begin": 1511,
											"end": 1516,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 1511,
											"end": 1526,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 1508,
											"end": 1578,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 1508,
											"end": 1578,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "133"
										},
										{
											"begin": 1508,
											"end": 1578,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 1549,
											"end": 1566,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 1549,
											"end": 1566,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 1549,
											"end": 1566,
											"name": "PUSH",
											"source": 1,
											"value": "E008B5F900000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1549,
											"end": 1566,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 1549,
											"end": 1566,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 1549,
											"end": 1566,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 1549,
											"end": 1566,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 1549,
											"end": 1566,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 1549,
											"end": 1566,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 1549,
											"end": 1566,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1549,
											"end": 1566,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 1549,
											"end": 1566,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 1549,
											"end": 1566,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 1549,
											"end": 1566,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 1508,
											"end": 1578,
											"name": "tag",
											"source": 1,
											"value": "133"
										},
										{
											"begin": 1508,
											"end": 1578,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1588,
											"end": 1615,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 1616,
											"end": 1929,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 1616,
											"end": 1929,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 1616,
											"end": 1929,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1616,
											"end": 1929,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 1616,
											"end": 1929,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 1616,
											"end": 1929,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 1616,
											"end": 1929,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 1616,
											"end": 1929,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1651,
											"end": 1652,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 1616,
											"end": 1929,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 1616,
											"end": 1929,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 1616,
											"end": 1929,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 1616,
											"end": 1929,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 1616,
											"end": 1929,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 1616,
											"end": 1929,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 1675,
											"end": 1677,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 1675,
											"end": 1677,
											"name": "PUSH",
											"source": 1,
											"value": "7"
										},
										{
											"begin": 1675,
											"end": 1677,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 1675,
											"end": 1677,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 1675,
											"end": 1677,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 1675,
											"end": 1677,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 1675,
											"end": 1677,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 1675,
											"end": 1677,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 1675,
											"end": 1677,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 1675,
											"end": 1677,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1675,
											"end": 1677,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 1616,
											"end": 1929,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1616,
											"end": 1929,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 1616,
											"end": 1929,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 1616,
											"end": 1929,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 1616,
											"end": 1929,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 1616,
											"end": 1929,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 1707,
											"end": 1722,
											"name": "TIMESTAMP",
											"source": 1
										},
										{
											"begin": 1616,
											"end": 1929,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFF"
										},
										{
											"begin": 1616,
											"end": 1929,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 1616,
											"end": 1929,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 1616,
											"end": 1929,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 1616,
											"end": 1929,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 1616,
											"end": 1929,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 1753,
											"end": 1763,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 1616,
											"end": 1929,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1616,
											"end": 1929,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 1616,
											"end": 1929,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 1616,
											"end": 1929,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 1616,
											"end": 1929,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 1616,
											"end": 1929,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 1787,
											"end": 1796,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 1616,
											"end": 1929,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1616,
											"end": 1929,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 1616,
											"end": 1929,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 1616,
											"end": 1929,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 1616,
											"end": 1929,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 1616,
											"end": 1929,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 1824,
											"end": 1837,
											"name": "DUP7",
											"source": 1
										},
										{
											"begin": 1616,
											"end": 1929,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1616,
											"end": 1929,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 1616,
											"end": 1929,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 1616,
											"end": 1929,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 1616,
											"end": 1929,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 1616,
											"end": 1929,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 1865,
											"end": 1875,
											"name": "CALLER",
											"source": 1
										},
										{
											"begin": 1616,
											"end": 1929,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1616,
											"end": 1929,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 1616,
											"end": 1929,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 1616,
											"end": 1929,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 1616,
											"end": 1929,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 1616,
											"end": 1929,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 1912,
											"end": 1916,
											"name": "ADDRESS",
											"source": 1
										},
										{
											"begin": 1616,
											"end": 1929,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1616,
											"end": 1929,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 1616,
											"end": 1929,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 1616,
											"end": 1929,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 1616,
											"end": 1929,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 1588,
											"end": 1929,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 1588,
											"end": 1929,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 1954,
											"end": 1965,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1949,
											"name": "PUSH",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 1940,
											"end": 1953,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 1950,
											"end": 1952,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1950,
											"end": 1952,
											"name": "PUSH",
											"source": 1,
											"value": "7"
										},
										{
											"begin": 1950,
											"end": 1952,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 1950,
											"end": 1952,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 1950,
											"end": 1952,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 1950,
											"end": 1952,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 1950,
											"end": 1952,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 1950,
											"end": 1952,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 1950,
											"end": 1952,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 1950,
											"end": 1952,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1950,
											"end": 1952,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1953,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1940,
											"end": 1953,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1953,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1940,
											"end": 1953,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1953,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1953,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1953,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 1940,
											"end": 1953,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1953,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1953,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1953,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1953,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 1940,
											"end": 1953,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1953,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 1940,
											"end": 1953,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "NOT",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "OR",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "NOT",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "OR",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "PUSH",
											"source": 1,
											"value": "9"
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFF"
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "NOT",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFF"
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "OR",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "PUSH",
											"source": 1,
											"value": "60"
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "PUSH",
											"source": 1,
											"value": "10"
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "NOT",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "OR",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "PUSH",
											"source": 1,
											"value": "80"
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "NOT",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "OR",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "PUSH",
											"source": 1,
											"value": "A0"
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "PUSH",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "NOT",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "OR",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "PUSH",
											"source": 1,
											"value": "C0"
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "PUSH",
											"source": 1,
											"value": "3"
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "NOT",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "OR",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "PUSH",
											"source": 1,
											"value": "E0"
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "NOT",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "OR",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 1940,
											"end": 1965,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2026,
											"end": 2096,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "134"
										},
										{
											"begin": 2065,
											"end": 2075,
											"name": "CALLER",
											"source": 1
										},
										{
											"begin": 2084,
											"end": 2088,
											"name": "ADDRESS",
											"source": 1
										},
										{
											"begin": 2090,
											"end": 2095,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 2033,
											"end": 2046,
											"name": "DUP9",
											"source": 1
										},
										{
											"begin": 2026,
											"end": 2064,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2026,
											"end": 2064,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 2026,
											"end": 2064,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "65"
										},
										{
											"begin": 2026,
											"end": 2064,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2026,
											"end": 2096,
											"name": "SWAP4",
											"source": 1
										},
										{
											"begin": 2026,
											"end": 2096,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 2026,
											"end": 2096,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2026,
											"end": 2096,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2026,
											"end": 2096,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFF"
										},
										{
											"begin": 2026,
											"end": 2096,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 2026,
											"end": 2096,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 2026,
											"end": 2096,
											"name": "tag",
											"source": 1,
											"value": "134"
										},
										{
											"begin": 2026,
											"end": 2096,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2107,
											"end": 2109,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2107,
											"end": 2109,
											"name": "PUSH",
											"source": 1,
											"value": "7"
										},
										{
											"begin": 2107,
											"end": 2111,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2107,
											"end": 2111,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2107,
											"end": 2111,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2107,
											"end": 2111,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 2107,
											"end": 2111,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2107,
											"end": 2111,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 2107,
											"end": 2111,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 2107,
											"end": 2111,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2107,
											"end": 2111,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 2107,
											"end": 2111,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2107,
											"end": 2111,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 2107,
											"end": 2111,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2107,
											"end": 2111,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 2107,
											"end": 2111,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2107,
											"end": 2111,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2107,
											"end": 2111,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "135"
										},
										{
											"begin": 2107,
											"end": 2111,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2107,
											"end": 2111,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "136"
										},
										{
											"begin": 2107,
											"end": 2111,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 2107,
											"end": 2111,
											"name": "tag",
											"source": 1,
											"value": "135"
										},
										{
											"begin": 2107,
											"end": 2111,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2107,
											"end": 2111,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2107,
											"end": 2111,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2107,
											"end": 2111,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 2107,
											"end": 2111,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 2107,
											"end": 2111,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2107,
											"end": 2111,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 2107,
											"end": 2111,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2107,
											"end": 2111,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2107,
											"end": 2111,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 2107,
											"end": 2111,
											"name": "NOT",
											"source": 1
										},
										{
											"begin": 2107,
											"end": 2111,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 2107,
											"end": 2111,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2107,
											"end": 2111,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 2107,
											"end": 2111,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2107,
											"end": 2111,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 2107,
											"end": 2111,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 2107,
											"end": 2111,
											"name": "OR",
											"source": 1
										},
										{
											"begin": 2107,
											"end": 2111,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2107,
											"end": 2111,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 2107,
											"end": 2111,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2107,
											"end": 2111,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 1455,
											"end": 2119,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 1455,
											"end": 2119,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 1375,
											"end": 2119,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 1375,
											"end": 2119,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 1375,
											"end": 2119,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 1375,
											"end": 2119,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 1053,
											"end": 1117,
											"name": "tag",
											"source": 1,
											"value": "53"
										},
										{
											"begin": 1053,
											"end": 1117,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1053,
											"end": 1117,
											"name": "PUSH",
											"source": 1,
											"value": "5"
										},
										{
											"begin": 1053,
											"end": 1117,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 1053,
											"end": 1117,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 1053,
											"end": 1117,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 1053,
											"end": 1117,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 1053,
											"end": 1117,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 1053,
											"end": 1117,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 1053,
											"end": 1117,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 1053,
											"end": 1117,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 1053,
											"end": 1117,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 1053,
											"end": 1117,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 1053,
											"end": 1117,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1053,
											"end": 1117,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 1053,
											"end": 1117,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 1053,
											"end": 1117,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 1053,
											"end": 1117,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 1053,
											"end": 1117,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 1053,
											"end": 1117,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 1053,
											"end": 1117,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 1053,
											"end": 1117,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 1053,
											"end": 1117,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 1053,
											"end": 1117,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 1053,
											"end": 1117,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 1053,
											"end": 1117,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 1053,
											"end": 1117,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 1053,
											"end": 1117,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 1053,
											"end": 1117,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 1053,
											"end": 1117,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 1053,
											"end": 1117,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 1053,
											"end": 1117,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 1053,
											"end": 1117,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 1053,
											"end": 1117,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 1053,
											"end": 1117,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 1288,
											"end": 1352,
											"name": "tag",
											"source": 1,
											"value": "57"
										},
										{
											"begin": 1288,
											"end": 1352,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1288,
											"end": 1352,
											"name": "PUSH",
											"source": 1,
											"value": "7"
										},
										{
											"begin": 1288,
											"end": 1352,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 1288,
											"end": 1352,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 1288,
											"end": 1352,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 1288,
											"end": 1352,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 1288,
											"end": 1352,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 1288,
											"end": 1352,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 1288,
											"end": 1352,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 1288,
											"end": 1352,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 1288,
											"end": 1352,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 1288,
											"end": 1352,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 1288,
											"end": 1352,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1288,
											"end": 1352,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 1288,
											"end": 1352,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 1288,
											"end": 1352,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 1288,
											"end": 1352,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 1288,
											"end": 1352,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 1288,
											"end": 1352,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 1288,
											"end": 1352,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 1288,
											"end": 1352,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 1288,
											"end": 1352,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 1288,
											"end": 1352,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 1288,
											"end": 1352,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 1288,
											"end": 1352,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 1288,
											"end": 1352,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 1288,
											"end": 1352,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 1288,
											"end": 1352,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 1288,
											"end": 1352,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 1288,
											"end": 1352,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 1288,
											"end": 1352,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 1288,
											"end": 1352,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 1288,
											"end": 1352,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 1288,
											"end": 1352,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 7150,
											"end": 7264,
											"name": "tag",
											"source": 1,
											"value": "62"
										},
										{
											"begin": 7150,
											"end": 7264,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 7202,
											"end": 7209,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 7228,
											"end": 7237,
											"name": "PUSH",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 7228,
											"end": 7242,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 7238,
											"end": 7241,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 7228,
											"end": 7242,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7228,
											"end": 7242,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 7228,
											"end": 7242,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7228,
											"end": 7242,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 7228,
											"end": 7242,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 7228,
											"end": 7242,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 7228,
											"end": 7242,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 7228,
											"end": 7242,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 7228,
											"end": 7242,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 7228,
											"end": 7242,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 7228,
											"end": 7242,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 7228,
											"end": 7242,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 7228,
											"end": 7242,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 7228,
											"end": 7242,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 7228,
											"end": 7242,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 7228,
											"end": 7256,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 7228,
											"end": 7256,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 7228,
											"end": 7256,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 7228,
											"end": 7256,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 7228,
											"end": 7256,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 7228,
											"end": 7256,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 7228,
											"end": 7256,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 7228,
											"end": 7256,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 7228,
											"end": 7256,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 7228,
											"end": 7256,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 7228,
											"end": 7256,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7228,
											"end": 7256,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 7221,
											"end": 7256,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 7221,
											"end": 7256,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 7150,
											"end": 7264,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 7150,
											"end": 7264,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 7150,
											"end": 7264,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 7150,
											"end": 7264,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 1447,
											"end": 1652,
											"name": "tag",
											"source": 18,
											"value": "65"
										},
										{
											"begin": 1447,
											"end": 1652,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1548,
											"end": 1644,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "139"
										},
										{
											"begin": 1568,
											"end": 1573,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 1598,
											"end": 1625,
											"name": "PUSH",
											"source": 18,
											"value": "23B872DD"
										},
										{
											"begin": 1598,
											"end": 1625,
											"name": "PUSH",
											"source": 18,
											"value": "E0"
										},
										{
											"begin": 1598,
											"end": 1625,
											"name": "SHL",
											"source": 18
										},
										{
											"begin": 1627,
											"end": 1631,
											"name": "DUP6",
											"source": 18
										},
										{
											"begin": 1633,
											"end": 1635,
											"name": "DUP6",
											"source": 18
										},
										{
											"begin": 1637,
											"end": 1642,
											"name": "DUP6",
											"source": 18
										},
										{
											"begin": 1575,
											"end": 1643,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 1575,
											"end": 1643,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 1575,
											"end": 1643,
											"name": "PUSH",
											"source": 18,
											"value": "24"
										},
										{
											"begin": 1575,
											"end": 1643,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 1575,
											"end": 1643,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "140"
										},
										{
											"begin": 1575,
											"end": 1643,
											"name": "SWAP4",
											"source": 18
										},
										{
											"begin": 1575,
											"end": 1643,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 1575,
											"end": 1643,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 1575,
											"end": 1643,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 1575,
											"end": 1643,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "141"
										},
										{
											"begin": 1575,
											"end": 1643,
											"name": "JUMP",
											"source": 18,
											"value": "[in]"
										},
										{
											"begin": 1575,
											"end": 1643,
											"name": "tag",
											"source": 18,
											"value": "140"
										},
										{
											"begin": 1575,
											"end": 1643,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1575,
											"end": 1643,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 1575,
											"end": 1643,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 1575,
											"end": 1643,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 1575,
											"end": 1643,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 1575,
											"end": 1643,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 1575,
											"end": 1643,
											"name": "SUB",
											"source": 18
										},
										{
											"begin": 1575,
											"end": 1643,
											"name": "SUB",
											"source": 18
										},
										{
											"begin": 1575,
											"end": 1643,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 1575,
											"end": 1643,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 1575,
											"end": 1643,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 1575,
											"end": 1643,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 1575,
											"end": 1643,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 1575,
											"end": 1643,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 1575,
											"end": 1643,
											"name": "PUSH",
											"source": 18,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1575,
											"end": 1643,
											"name": "NOT",
											"source": 18
										},
										{
											"begin": 1575,
											"end": 1643,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 1575,
											"end": 1643,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 1575,
											"end": 1643,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 1575,
											"end": 1643,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 1575,
											"end": 1643,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1575,
											"end": 1643,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 1575,
											"end": 1643,
											"name": "PUSH",
											"source": 18,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1575,
											"end": 1643,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 1575,
											"end": 1643,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 1575,
											"end": 1643,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 1575,
											"end": 1643,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 1575,
											"end": 1643,
											"name": "OR",
											"source": 18
										},
										{
											"begin": 1575,
											"end": 1643,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 1575,
											"end": 1643,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 1575,
											"end": 1643,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1575,
											"end": 1643,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1575,
											"end": 1643,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1575,
											"end": 1643,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1548,
											"end": 1567,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "142"
										},
										{
											"begin": 1548,
											"end": 1644,
											"name": "JUMP",
											"source": 18,
											"value": "[in]"
										},
										{
											"begin": 1548,
											"end": 1644,
											"name": "tag",
											"source": 18,
											"value": "139"
										},
										{
											"begin": 1548,
											"end": 1644,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1447,
											"end": 1652,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1447,
											"end": 1652,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1447,
											"end": 1652,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1447,
											"end": 1652,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1447,
											"end": 1652,
											"name": "JUMP",
											"source": 18,
											"value": "[out]"
										},
										{
											"begin": 6990,
											"end": 7102,
											"name": "tag",
											"source": 1,
											"value": "68"
										},
										{
											"begin": 6990,
											"end": 7102,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 7041,
											"end": 7048,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 7067,
											"end": 7076,
											"name": "PUSH",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 7067,
											"end": 7081,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 7077,
											"end": 7080,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 7067,
											"end": 7081,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7067,
											"end": 7081,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 7067,
											"end": 7081,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7067,
											"end": 7081,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 7067,
											"end": 7081,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 7067,
											"end": 7081,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 7067,
											"end": 7081,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 7067,
											"end": 7081,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 7067,
											"end": 7081,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 7067,
											"end": 7081,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 7067,
											"end": 7081,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 7067,
											"end": 7081,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 7067,
											"end": 7081,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 7067,
											"end": 7081,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 7067,
											"end": 7081,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 7067,
											"end": 7094,
											"name": "PUSH",
											"source": 1,
											"value": "3"
										},
										{
											"begin": 7067,
											"end": 7094,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 7067,
											"end": 7094,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 7067,
											"end": 7094,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 7067,
											"end": 7094,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 7067,
											"end": 7094,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 7067,
											"end": 7094,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 7067,
											"end": 7094,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 7067,
											"end": 7094,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 7067,
											"end": 7094,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 7067,
											"end": 7094,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7067,
											"end": 7094,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 7060,
											"end": 7094,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 7060,
											"end": 7094,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 6990,
											"end": 7102,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 6990,
											"end": 7102,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6990,
											"end": 7102,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 6990,
											"end": 7102,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 250,
											"end": 680,
											"name": "tag",
											"source": 19,
											"value": "76"
										},
										{
											"begin": 250,
											"end": 680,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 306,
											"end": 323,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 352,
											"end": 361,
											"name": "PUSH",
											"source": 19,
											"value": "56BC75E2D63100000"
										},
										{
											"begin": 338,
											"end": 350,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 338,
											"end": 361,
											"name": "LT",
											"source": 19
										},
										{
											"begin": 338,
											"end": 361,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 338,
											"end": 388,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 338,
											"end": 388,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 338,
											"end": 388,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "145"
										},
										{
											"begin": 338,
											"end": 388,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 338,
											"end": 388,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 378,
											"end": 388,
											"name": "PUSH",
											"source": 19,
											"value": "3635C9ADC5DEA00000"
										},
										{
											"begin": 365,
											"end": 377,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 365,
											"end": 388,
											"name": "LT",
											"source": 19
										},
										{
											"begin": 338,
											"end": 388,
											"name": "tag",
											"source": 19,
											"value": "145"
										},
										{
											"begin": 338,
											"end": 388,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 335,
											"end": 673,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 335,
											"end": 673,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "146"
										},
										{
											"begin": 335,
											"end": 673,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 424,
											"end": 427,
											"name": "PUSH",
											"source": 19,
											"value": "64"
										},
										{
											"begin": 411,
											"end": 423,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 411,
											"end": 427,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "147"
										},
										{
											"begin": 411,
											"end": 427,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 411,
											"end": 427,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 411,
											"end": 427,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "111"
										},
										{
											"begin": 411,
											"end": 427,
											"name": "JUMP",
											"source": 19,
											"value": "[in]"
										},
										{
											"begin": 411,
											"end": 427,
											"name": "tag",
											"source": 19,
											"value": "147"
										},
										{
											"begin": 411,
											"end": 427,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 404,
											"end": 427,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 404,
											"end": 427,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 404,
											"end": 427,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "144"
										},
										{
											"begin": 404,
											"end": 427,
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 335,
											"end": 673,
											"name": "tag",
											"source": 19,
											"value": "146"
										},
										{
											"begin": 335,
											"end": 673,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 461,
											"end": 471,
											"name": "PUSH",
											"source": 19,
											"value": "3635C9ADC5DEA00000"
										},
										{
											"begin": 447,
											"end": 459,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 447,
											"end": 471,
											"name": "LT",
											"source": 19
										},
										{
											"begin": 447,
											"end": 471,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 447,
											"end": 499,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 447,
											"end": 499,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 447,
											"end": 499,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "149"
										},
										{
											"begin": 447,
											"end": 499,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 447,
											"end": 499,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 488,
											"end": 499,
											"name": "PUSH",
											"source": 19,
											"value": "21E19E0C9BAB2400000"
										},
										{
											"begin": 475,
											"end": 487,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 475,
											"end": 499,
											"name": "LT",
											"source": 19
										},
										{
											"begin": 447,
											"end": 499,
											"name": "tag",
											"source": 19,
											"value": "149"
										},
										{
											"begin": 447,
											"end": 499,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 444,
											"end": 673,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 444,
											"end": 673,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "150"
										},
										{
											"begin": 444,
											"end": 673,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 535,
											"end": 538,
											"name": "PUSH",
											"source": 19,
											"value": "C8"
										},
										{
											"begin": 522,
											"end": 534,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 522,
											"end": 538,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "151"
										},
										{
											"begin": 522,
											"end": 538,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 522,
											"end": 538,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 522,
											"end": 538,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "111"
										},
										{
											"begin": 522,
											"end": 538,
											"name": "JUMP",
											"source": 19,
											"value": "[in]"
										},
										{
											"begin": 522,
											"end": 538,
											"name": "tag",
											"source": 19,
											"value": "151"
										},
										{
											"begin": 522,
											"end": 538,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 515,
											"end": 538,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 515,
											"end": 538,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 515,
											"end": 538,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "144"
										},
										{
											"begin": 515,
											"end": 538,
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 444,
											"end": 673,
											"name": "tag",
											"source": 19,
											"value": "150"
										},
										{
											"begin": 444,
											"end": 673,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 572,
											"end": 583,
											"name": "PUSH",
											"source": 19,
											"value": "21E19E0C9BAB2400000"
										},
										{
											"begin": 558,
											"end": 570,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 558,
											"end": 583,
											"name": "LT",
											"source": 19
										},
										{
											"begin": 555,
											"end": 673,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "153"
										},
										{
											"begin": 555,
											"end": 673,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 619,
											"end": 622,
											"name": "PUSH",
											"source": 19,
											"value": "190"
										},
										{
											"begin": 606,
											"end": 618,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 606,
											"end": 622,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "154"
										},
										{
											"begin": 606,
											"end": 622,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 606,
											"end": 622,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 606,
											"end": 622,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "111"
										},
										{
											"begin": 606,
											"end": 622,
											"name": "JUMP",
											"source": 19,
											"value": "[in]"
										},
										{
											"begin": 606,
											"end": 622,
											"name": "tag",
											"source": 19,
											"value": "154"
										},
										{
											"begin": 606,
											"end": 622,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 599,
											"end": 622,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 599,
											"end": 622,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 599,
											"end": 622,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "144"
										},
										{
											"begin": 599,
											"end": 622,
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 555,
											"end": 673,
											"name": "tag",
											"source": 19,
											"value": "153"
										},
										{
											"begin": 555,
											"end": 673,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 660,
											"end": 661,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 653,
											"end": 661,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 653,
											"end": 661,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 250,
											"end": 680,
											"name": "tag",
											"source": 19,
											"value": "144"
										},
										{
											"begin": 250,
											"end": 680,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 250,
											"end": 680,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 250,
											"end": 680,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 250,
											"end": 680,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 250,
											"end": 680,
											"name": "JUMP",
											"source": 19,
											"value": "[out]"
										},
										{
											"begin": 1025,
											"end": 1202,
											"name": "tag",
											"source": 18,
											"value": "78"
										},
										{
											"begin": 1025,
											"end": 1202,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1108,
											"end": 1194,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "157"
										},
										{
											"begin": 1128,
											"end": 1133,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 1158,
											"end": 1181,
											"name": "PUSH",
											"source": 18,
											"value": "A9059CBB"
										},
										{
											"begin": 1158,
											"end": 1181,
											"name": "PUSH",
											"source": 18,
											"value": "E0"
										},
										{
											"begin": 1158,
											"end": 1181,
											"name": "SHL",
											"source": 18
										},
										{
											"begin": 1183,
											"end": 1185,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 1187,
											"end": 1192,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "PUSH",
											"source": 18,
											"value": "24"
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "158"
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "159"
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "JUMP",
											"source": 18,
											"value": "[in]"
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "tag",
											"source": 18,
											"value": "158"
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "SUB",
											"source": 18
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "SUB",
											"source": 18
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "PUSH",
											"source": 18,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "NOT",
											"source": 18
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "PUSH",
											"source": 18,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "OR",
											"source": 18
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1135,
											"end": 1193,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1108,
											"end": 1127,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "142"
										},
										{
											"begin": 1108,
											"end": 1194,
											"name": "JUMP",
											"source": 18,
											"value": "[in]"
										},
										{
											"begin": 1108,
											"end": 1194,
											"name": "tag",
											"source": 18,
											"value": "157"
										},
										{
											"begin": 1108,
											"end": 1194,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1025,
											"end": 1202,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1025,
											"end": 1202,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1025,
											"end": 1202,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1025,
											"end": 1202,
											"name": "JUMP",
											"source": 18,
											"value": "[out]"
										},
										{
											"begin": 5371,
											"end": 6020,
											"name": "tag",
											"source": 18,
											"value": "142"
										},
										{
											"begin": 5371,
											"end": 6020,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 5795,
											"end": 5818,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 5821,
											"end": 5890,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "161"
										},
										{
											"begin": 5849,
											"end": 5853,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 5821,
											"end": 5890,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 5821,
											"end": 5890,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 5821,
											"end": 5890,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 5821,
											"end": 5890,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 5821,
											"end": 5890,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 5821,
											"end": 5890,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 5821,
											"end": 5890,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 5821,
											"end": 5890,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 5821,
											"end": 5890,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 5821,
											"end": 5890,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 5821,
											"end": 5890,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 5821,
											"end": 5890,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 5821,
											"end": 5890,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 5821,
											"end": 5890,
											"name": "PUSH",
											"source": 18,
											"value": "5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564"
										},
										{
											"begin": 5821,
											"end": 5890,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 5821,
											"end": 5890,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 5821,
											"end": 5890,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 5829,
											"end": 5834,
											"name": "DUP6",
											"source": 18
										},
										{
											"begin": 5821,
											"end": 5848,
											"name": "PUSH",
											"source": 18,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5821,
											"end": 5848,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 5821,
											"end": 5848,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "162"
										},
										{
											"begin": 5821,
											"end": 5848,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 5821,
											"end": 5890,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 5821,
											"end": 5890,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 5821,
											"end": 5890,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 5821,
											"end": 5890,
											"name": "PUSH",
											"source": 18,
											"value": "FFFFFFFF"
										},
										{
											"begin": 5821,
											"end": 5890,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 5821,
											"end": 5890,
											"name": "JUMP",
											"source": 18,
											"value": "[in]"
										},
										{
											"begin": 5821,
											"end": 5890,
											"name": "tag",
											"source": 18,
											"value": "161"
										},
										{
											"begin": 5821,
											"end": 5890,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 5795,
											"end": 5890,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 5795,
											"end": 5890,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 5930,
											"end": 5931,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 5909,
											"end": 5919,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 5909,
											"end": 5926,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 5909,
											"end": 5931,
											"name": "EQ",
											"source": 18
										},
										{
											"begin": 5909,
											"end": 5965,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 5909,
											"end": 5965,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "163"
										},
										{
											"begin": 5909,
											"end": 5965,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 5909,
											"end": 5965,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 5946,
											"end": 5956,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 5935,
											"end": 5965,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 5935,
											"end": 5965,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 5935,
											"end": 5965,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 5935,
											"end": 5965,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 5935,
											"end": 5965,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 5935,
											"end": 5965,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 5935,
											"end": 5965,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 5935,
											"end": 5965,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 5935,
											"end": 5965,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "164"
										},
										{
											"begin": 5935,
											"end": 5965,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 5935,
											"end": 5965,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 5935,
											"end": 5965,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "165"
										},
										{
											"begin": 5935,
											"end": 5965,
											"name": "JUMP",
											"source": 18,
											"value": "[in]"
										},
										{
											"begin": 5935,
											"end": 5965,
											"name": "tag",
											"source": 18,
											"value": "164"
										},
										{
											"begin": 5935,
											"end": 5965,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 5909,
											"end": 5965,
											"name": "tag",
											"source": 18,
											"value": "163"
										},
										{
											"begin": 5909,
											"end": 5965,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 5901,
											"end": 6012,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "166"
										},
										{
											"begin": 5901,
											"end": 6012,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 5901,
											"end": 6012,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 5901,
											"end": 6012,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 5901,
											"end": 6012,
											"name": "PUSH",
											"source": 18,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 5901,
											"end": 6012,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 5901,
											"end": 6012,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 5901,
											"end": 6012,
											"name": "PUSH",
											"source": 18,
											"value": "4"
										},
										{
											"begin": 5901,
											"end": 6012,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 5901,
											"end": 6012,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "167"
										},
										{
											"begin": 5901,
											"end": 6012,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 5901,
											"end": 6012,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "168"
										},
										{
											"begin": 5901,
											"end": 6012,
											"name": "JUMP",
											"source": 18,
											"value": "[in]"
										},
										{
											"begin": 5901,
											"end": 6012,
											"name": "tag",
											"source": 18,
											"value": "167"
										},
										{
											"begin": 5901,
											"end": 6012,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 5901,
											"end": 6012,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 5901,
											"end": 6012,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 5901,
											"end": 6012,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 5901,
											"end": 6012,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 5901,
											"end": 6012,
											"name": "SUB",
											"source": 18
										},
										{
											"begin": 5901,
											"end": 6012,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 5901,
											"end": 6012,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 5901,
											"end": 6012,
											"name": "tag",
											"source": 18,
											"value": "166"
										},
										{
											"begin": 5901,
											"end": 6012,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 5441,
											"end": 6020,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 5371,
											"end": 6020,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 5371,
											"end": 6020,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 5371,
											"end": 6020,
											"name": "JUMP",
											"source": 18,
											"value": "[out]"
										},
										{
											"begin": 4207,
											"end": 4436,
											"name": "tag",
											"source": 16,
											"value": "162"
										},
										{
											"begin": 4207,
											"end": 4436,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 4344,
											"end": 4356,
											"name": "PUSH",
											"source": 16,
											"value": "60"
										},
										{
											"begin": 4376,
											"end": 4428,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "170"
										},
										{
											"begin": 4398,
											"end": 4404,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 4406,
											"end": 4410,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 4412,
											"end": 4413,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 4415,
											"end": 4427,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 4376,
											"end": 4397,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "171"
										},
										{
											"begin": 4376,
											"end": 4428,
											"name": "JUMP",
											"source": 16,
											"value": "[in]"
										},
										{
											"begin": 4376,
											"end": 4428,
											"name": "tag",
											"source": 16,
											"value": "170"
										},
										{
											"begin": 4376,
											"end": 4428,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 4369,
											"end": 4428,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 4369,
											"end": 4428,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 4207,
											"end": 4436,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": 4207,
											"end": 4436,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 4207,
											"end": 4436,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 4207,
											"end": 4436,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 4207,
											"end": 4436,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 4207,
											"end": 4436,
											"name": "JUMP",
											"source": 16,
											"value": "[out]"
										},
										{
											"begin": 5293,
											"end": 5748,
											"name": "tag",
											"source": 16,
											"value": "171"
										},
										{
											"begin": 5293,
											"end": 5748,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 5463,
											"end": 5475,
											"name": "PUSH",
											"source": 16,
											"value": "60"
										},
										{
											"begin": 5521,
											"end": 5526,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 5496,
											"end": 5517,
											"name": "SELFBALANCE",
											"source": 16
										},
										{
											"begin": 5496,
											"end": 5526,
											"name": "LT",
											"source": 16
										},
										{
											"begin": 5496,
											"end": 5526,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 5488,
											"end": 5569,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "173"
										},
										{
											"begin": 5488,
											"end": 5569,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 5488,
											"end": 5569,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 5488,
											"end": 5569,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 5488,
											"end": 5569,
											"name": "PUSH",
											"source": 16,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 5488,
											"end": 5569,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 5488,
											"end": 5569,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 5488,
											"end": 5569,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 5488,
											"end": 5569,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 5488,
											"end": 5569,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "174"
										},
										{
											"begin": 5488,
											"end": 5569,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 5488,
											"end": 5569,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "175"
										},
										{
											"begin": 5488,
											"end": 5569,
											"name": "JUMP",
											"source": 16,
											"value": "[in]"
										},
										{
											"begin": 5488,
											"end": 5569,
											"name": "tag",
											"source": 16,
											"value": "174"
										},
										{
											"begin": 5488,
											"end": 5569,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 5488,
											"end": 5569,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 5488,
											"end": 5569,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 5488,
											"end": 5569,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 5488,
											"end": 5569,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 5488,
											"end": 5569,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 5488,
											"end": 5569,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 5488,
											"end": 5569,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 5488,
											"end": 5569,
											"name": "tag",
											"source": 16,
											"value": "173"
										},
										{
											"begin": 5488,
											"end": 5569,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 5581,
											"end": 5593,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 5595,
											"end": 5618,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 5622,
											"end": 5628,
											"name": "DUP7",
											"source": 16
										},
										{
											"begin": 5622,
											"end": 5633,
											"name": "PUSH",
											"source": 16,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5622,
											"end": 5633,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 5641,
											"end": 5646,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 5648,
											"end": 5652,
											"name": "DUP8",
											"source": 16
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "176"
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "177"
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "JUMP",
											"source": 16,
											"value": "[in]"
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "tag",
											"source": 16,
											"value": "176"
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "DUP8",
											"source": 16
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "GAS",
											"source": 16
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "CALL",
											"source": 16
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "RETURNDATASIZE",
											"source": 16
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "180"
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "PUSH",
											"source": 16,
											"value": "1F"
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "NOT",
											"source": 16
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "PUSH",
											"source": 16,
											"value": "3F"
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "RETURNDATASIZE",
											"source": 16
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "RETURNDATASIZE",
											"source": 16
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "RETURNDATASIZE",
											"source": 16
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "RETURNDATACOPY",
											"source": 16
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "179"
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "tag",
											"source": 16,
											"value": "180"
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "PUSH",
											"source": 16,
											"value": "60"
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "tag",
											"source": 16,
											"value": "179"
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 5622,
											"end": 5653,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 5580,
											"end": 5653,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 5580,
											"end": 5653,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 5580,
											"end": 5653,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 5580,
											"end": 5653,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 5671,
											"end": 5740,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "181"
										},
										{
											"begin": 5698,
											"end": 5704,
											"name": "DUP8",
											"source": 16
										},
										{
											"begin": 5706,
											"end": 5713,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 5715,
											"end": 5725,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 5727,
											"end": 5739,
											"name": "DUP8",
											"source": 16
										},
										{
											"begin": 5671,
											"end": 5697,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "182"
										},
										{
											"begin": 5671,
											"end": 5740,
											"name": "JUMP",
											"source": 16,
											"value": "[in]"
										},
										{
											"begin": 5671,
											"end": 5740,
											"name": "tag",
											"source": 16,
											"value": "181"
										},
										{
											"begin": 5671,
											"end": 5740,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 5664,
											"end": 5740,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 5664,
											"end": 5740,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 5664,
											"end": 5740,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 5664,
											"end": 5740,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 5293,
											"end": 5748,
											"name": "SWAP5",
											"source": 16
										},
										{
											"begin": 5293,
											"end": 5748,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": 5293,
											"end": 5748,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 5293,
											"end": 5748,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 5293,
											"end": 5748,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 5293,
											"end": 5748,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 5293,
											"end": 5748,
											"name": "JUMP",
											"source": 16,
											"value": "[out]"
										},
										{
											"begin": 7866,
											"end": 8510,
											"name": "tag",
											"source": 16,
											"value": "182"
										},
										{
											"begin": 7866,
											"end": 8510,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 8051,
											"end": 8063,
											"name": "PUSH",
											"source": 16,
											"value": "60"
										},
										{
											"begin": 8080,
											"end": 8087,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 8076,
											"end": 8503,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 8076,
											"end": 8503,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "184"
										},
										{
											"begin": 8076,
											"end": 8503,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 8129,
											"end": 8130,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 8108,
											"end": 8118,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 8108,
											"end": 8125,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 8108,
											"end": 8130,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 8104,
											"end": 8394,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 8104,
											"end": 8394,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "185"
										},
										{
											"begin": 8104,
											"end": 8394,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 8326,
											"end": 8344,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "186"
										},
										{
											"begin": 8337,
											"end": 8343,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 8326,
											"end": 8336,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "187"
										},
										{
											"begin": 8326,
											"end": 8344,
											"name": "JUMP",
											"source": 16,
											"value": "[in]"
										},
										{
											"begin": 8326,
											"end": 8344,
											"name": "tag",
											"source": 16,
											"value": "186"
										},
										{
											"begin": 8326,
											"end": 8344,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 8318,
											"end": 8378,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "188"
										},
										{
											"begin": 8318,
											"end": 8378,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 8318,
											"end": 8378,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 8318,
											"end": 8378,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 8318,
											"end": 8378,
											"name": "PUSH",
											"source": 16,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 8318,
											"end": 8378,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 8318,
											"end": 8378,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 8318,
											"end": 8378,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 8318,
											"end": 8378,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 8318,
											"end": 8378,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "189"
										},
										{
											"begin": 8318,
											"end": 8378,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 8318,
											"end": 8378,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "190"
										},
										{
											"begin": 8318,
											"end": 8378,
											"name": "JUMP",
											"source": 16,
											"value": "[in]"
										},
										{
											"begin": 8318,
											"end": 8378,
											"name": "tag",
											"source": 16,
											"value": "189"
										},
										{
											"begin": 8318,
											"end": 8378,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 8318,
											"end": 8378,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 8318,
											"end": 8378,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 8318,
											"end": 8378,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 8318,
											"end": 8378,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 8318,
											"end": 8378,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 8318,
											"end": 8378,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 8318,
											"end": 8378,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 8318,
											"end": 8378,
											"name": "tag",
											"source": 16,
											"value": "188"
										},
										{
											"begin": 8318,
											"end": 8378,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 8104,
											"end": 8394,
											"name": "tag",
											"source": 16,
											"value": "185"
										},
										{
											"begin": 8104,
											"end": 8394,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 8415,
											"end": 8425,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 8408,
											"end": 8425,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 8408,
											"end": 8425,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 8408,
											"end": 8425,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "183"
										},
										{
											"begin": 8408,
											"end": 8425,
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 8076,
											"end": 8503,
											"name": "tag",
											"source": 16,
											"value": "184"
										},
										{
											"begin": 8076,
											"end": 8503,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 8458,
											"end": 8491,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "192"
										},
										{
											"begin": 8466,
											"end": 8476,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 8478,
											"end": 8490,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 8458,
											"end": 8465,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "193"
										},
										{
											"begin": 8458,
											"end": 8491,
											"name": "JUMP",
											"source": 16,
											"value": "[in]"
										},
										{
											"begin": 8458,
											"end": 8491,
											"name": "tag",
											"source": 16,
											"value": "192"
										},
										{
											"begin": 8458,
											"end": 8491,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 7866,
											"end": 8510,
											"name": "tag",
											"source": 16,
											"value": "183"
										},
										{
											"begin": 7866,
											"end": 8510,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 7866,
											"end": 8510,
											"name": "SWAP5",
											"source": 16
										},
										{
											"begin": 7866,
											"end": 8510,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": 7866,
											"end": 8510,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 7866,
											"end": 8510,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 7866,
											"end": 8510,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 7866,
											"end": 8510,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 7866,
											"end": 8510,
											"name": "JUMP",
											"source": 16,
											"value": "[out]"
										},
										{
											"begin": 1452,
											"end": 1778,
											"name": "tag",
											"source": 16,
											"value": "187"
										},
										{
											"begin": 1452,
											"end": 1778,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 1512,
											"end": 1516,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 1769,
											"end": 1770,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 1747,
											"end": 1754,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 1747,
											"end": 1766,
											"name": "PUSH",
											"source": 16,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1747,
											"end": 1766,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 1747,
											"end": 1766,
											"name": "EXTCODESIZE",
											"source": 16
										},
										{
											"begin": 1747,
											"end": 1770,
											"name": "GT",
											"source": 16
										},
										{
											"begin": 1740,
											"end": 1770,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 1740,
											"end": 1770,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 1452,
											"end": 1778,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 1452,
											"end": 1778,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 1452,
											"end": 1778,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 1452,
											"end": 1778,
											"name": "JUMP",
											"source": 16,
											"value": "[out]"
										},
										{
											"begin": 9052,
											"end": 9604,
											"name": "tag",
											"source": 16,
											"value": "193"
										},
										{
											"begin": 9052,
											"end": 9604,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 9233,
											"end": 9234,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 9213,
											"end": 9223,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 9213,
											"end": 9230,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 9213,
											"end": 9234,
											"name": "GT",
											"source": 16
										},
										{
											"begin": 9209,
											"end": 9597,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 9209,
											"end": 9597,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "196"
										},
										{
											"begin": 9209,
											"end": 9597,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 9445,
											"end": 9455,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 9439,
											"end": 9456,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 9502,
											"end": 9517,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 9489,
											"end": 9499,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 9485,
											"end": 9487,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 9481,
											"end": 9500,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 9474,
											"end": 9518,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 9209,
											"end": 9597,
											"name": "tag",
											"source": 16,
											"value": "196"
										},
										{
											"begin": 9209,
											"end": 9597,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 9572,
											"end": 9584,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 9565,
											"end": 9585,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 9565,
											"end": 9585,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 9565,
											"end": 9585,
											"name": "PUSH",
											"source": 16,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 9565,
											"end": 9585,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 9565,
											"end": 9585,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 9565,
											"end": 9585,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 9565,
											"end": 9585,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 9565,
											"end": 9585,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "198"
										},
										{
											"begin": 9565,
											"end": 9585,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 9565,
											"end": 9585,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 9565,
											"end": 9585,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "199"
										},
										{
											"begin": 9565,
											"end": 9585,
											"name": "JUMP",
											"source": 16,
											"value": "[in]"
										},
										{
											"begin": 9565,
											"end": 9585,
											"name": "tag",
											"source": 16,
											"value": "198"
										},
										{
											"begin": 9565,
											"end": 9585,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 9565,
											"end": 9585,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 9565,
											"end": 9585,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 9565,
											"end": 9585,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 9565,
											"end": 9585,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 9565,
											"end": 9585,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 9565,
											"end": 9585,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 9565,
											"end": 9585,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 88,
											"end": 205,
											"name": "tag",
											"source": 20,
											"value": "201"
										},
										{
											"begin": 88,
											"end": 205,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 197,
											"end": 198,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 194,
											"end": 195,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 187,
											"end": 199,
											"name": "REVERT",
											"source": 20
										},
										{
											"begin": 334,
											"end": 435,
											"name": "tag",
											"source": 20,
											"value": "203"
										},
										{
											"begin": 334,
											"end": 435,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 370,
											"end": 377,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 410,
											"end": 428,
											"name": "PUSH",
											"source": 20,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 403,
											"end": 408,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 399,
											"end": 429,
											"name": "AND",
											"source": 20
										},
										{
											"begin": 388,
											"end": 429,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 388,
											"end": 429,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 334,
											"end": 435,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 334,
											"end": 435,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 334,
											"end": 435,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 334,
											"end": 435,
											"name": "JUMP",
											"source": 20,
											"value": "[out]"
										},
										{
											"begin": 441,
											"end": 561,
											"name": "tag",
											"source": 20,
											"value": "204"
										},
										{
											"begin": 441,
											"end": 561,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 513,
											"end": 536,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "244"
										},
										{
											"begin": 530,
											"end": 535,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 513,
											"end": 536,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "203"
										},
										{
											"begin": 513,
											"end": 536,
											"name": "JUMP",
											"source": 20,
											"value": "[in]"
										},
										{
											"begin": 513,
											"end": 536,
											"name": "tag",
											"source": 20,
											"value": "244"
										},
										{
											"begin": 513,
											"end": 536,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 506,
											"end": 511,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 503,
											"end": 537,
											"name": "EQ",
											"source": 20
										},
										{
											"begin": 493,
											"end": 555,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "245"
										},
										{
											"begin": 493,
											"end": 555,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 551,
											"end": 552,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 548,
											"end": 549,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 541,
											"end": 553,
											"name": "REVERT",
											"source": 20
										},
										{
											"begin": 493,
											"end": 555,
											"name": "tag",
											"source": 20,
											"value": "245"
										},
										{
											"begin": 493,
											"end": 555,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 441,
											"end": 561,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 441,
											"end": 561,
											"name": "JUMP",
											"source": 20,
											"value": "[out]"
										},
										{
											"begin": 567,
											"end": 704,
											"name": "tag",
											"source": 20,
											"value": "205"
										},
										{
											"begin": 567,
											"end": 704,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 612,
											"end": 617,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 650,
											"end": 656,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 637,
											"end": 657,
											"name": "CALLDATALOAD",
											"source": 20
										},
										{
											"begin": 628,
											"end": 657,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 628,
											"end": 657,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 666,
											"end": 698,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "247"
										},
										{
											"begin": 692,
											"end": 697,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 666,
											"end": 698,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "204"
										},
										{
											"begin": 666,
											"end": 698,
											"name": "JUMP",
											"source": 20,
											"value": "[in]"
										},
										{
											"begin": 666,
											"end": 698,
											"name": "tag",
											"source": 20,
											"value": "247"
										},
										{
											"begin": 666,
											"end": 698,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 567,
											"end": 704,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 567,
											"end": 704,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 567,
											"end": 704,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 567,
											"end": 704,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 567,
											"end": 704,
											"name": "JUMP",
											"source": 20,
											"value": "[out]"
										},
										{
											"begin": 710,
											"end": 1037,
											"name": "tag",
											"source": 20,
											"value": "17"
										},
										{
											"begin": 710,
											"end": 1037,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 768,
											"end": 774,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 817,
											"end": 819,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 805,
											"end": 814,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 796,
											"end": 803,
											"name": "DUP5",
											"source": 20
										},
										{
											"begin": 792,
											"end": 815,
											"name": "SUB",
											"source": 20
										},
										{
											"begin": 788,
											"end": 820,
											"name": "SLT",
											"source": 20
										},
										{
											"begin": 785,
											"end": 904,
											"name": "ISZERO",
											"source": 20
										},
										{
											"begin": 785,
											"end": 904,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "249"
										},
										{
											"begin": 785,
											"end": 904,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 823,
											"end": 902,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "250"
										},
										{
											"begin": 823,
											"end": 902,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "201"
										},
										{
											"begin": 823,
											"end": 902,
											"name": "JUMP",
											"source": 20,
											"value": "[in]"
										},
										{
											"begin": 823,
											"end": 902,
											"name": "tag",
											"source": 20,
											"value": "250"
										},
										{
											"begin": 823,
											"end": 902,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 785,
											"end": 904,
											"name": "tag",
											"source": 20,
											"value": "249"
										},
										{
											"begin": 785,
											"end": 904,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 943,
											"end": 944,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 968,
											"end": 1020,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "251"
										},
										{
											"begin": 1012,
											"end": 1019,
											"name": "DUP5",
											"source": 20
										},
										{
											"begin": 1003,
											"end": 1009,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 992,
											"end": 1001,
											"name": "DUP6",
											"source": 20
										},
										{
											"begin": 988,
											"end": 1010,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 968,
											"end": 1020,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "205"
										},
										{
											"begin": 968,
											"end": 1020,
											"name": "JUMP",
											"source": 20,
											"value": "[in]"
										},
										{
											"begin": 968,
											"end": 1020,
											"name": "tag",
											"source": 20,
											"value": "251"
										},
										{
											"begin": 968,
											"end": 1020,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 958,
											"end": 1020,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 958,
											"end": 1020,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 914,
											"end": 1030,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 710,
											"end": 1037,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 710,
											"end": 1037,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 710,
											"end": 1037,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 710,
											"end": 1037,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 710,
											"end": 1037,
											"name": "JUMP",
											"source": 20,
											"value": "[out]"
										},
										{
											"begin": 1043,
											"end": 1169,
											"name": "tag",
											"source": 20,
											"value": "206"
										},
										{
											"begin": 1043,
											"end": 1169,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 1080,
											"end": 1087,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 1120,
											"end": 1162,
											"name": "PUSH",
											"source": 20,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1113,
											"end": 1118,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 1109,
											"end": 1163,
											"name": "AND",
											"source": 20
										},
										{
											"begin": 1098,
											"end": 1163,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 1098,
											"end": 1163,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 1043,
											"end": 1169,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 1043,
											"end": 1169,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 1043,
											"end": 1169,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 1043,
											"end": 1169,
											"name": "JUMP",
											"source": 20,
											"value": "[out]"
										},
										{
											"begin": 1175,
											"end": 1271,
											"name": "tag",
											"source": 20,
											"value": "207"
										},
										{
											"begin": 1175,
											"end": 1271,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 1212,
											"end": 1219,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 1241,
											"end": 1265,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "254"
										},
										{
											"begin": 1259,
											"end": 1264,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 1241,
											"end": 1265,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "206"
										},
										{
											"begin": 1241,
											"end": 1265,
											"name": "JUMP",
											"source": 20,
											"value": "[in]"
										},
										{
											"begin": 1241,
											"end": 1265,
											"name": "tag",
											"source": 20,
											"value": "254"
										},
										{
											"begin": 1241,
											"end": 1265,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 1230,
											"end": 1265,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 1230,
											"end": 1265,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 1175,
											"end": 1271,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 1175,
											"end": 1271,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 1175,
											"end": 1271,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 1175,
											"end": 1271,
											"name": "JUMP",
											"source": 20,
											"value": "[out]"
										},
										{
											"begin": 1277,
											"end": 1399,
											"name": "tag",
											"source": 20,
											"value": "208"
										},
										{
											"begin": 1277,
											"end": 1399,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 1350,
											"end": 1374,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "256"
										},
										{
											"begin": 1368,
											"end": 1373,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 1350,
											"end": 1374,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "207"
										},
										{
											"begin": 1350,
											"end": 1374,
											"name": "JUMP",
											"source": 20,
											"value": "[in]"
										},
										{
											"begin": 1350,
											"end": 1374,
											"name": "tag",
											"source": 20,
											"value": "256"
										},
										{
											"begin": 1350,
											"end": 1374,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 1343,
											"end": 1348,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 1340,
											"end": 1375,
											"name": "EQ",
											"source": 20
										},
										{
											"begin": 1330,
											"end": 1393,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "257"
										},
										{
											"begin": 1330,
											"end": 1393,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 1389,
											"end": 1390,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 1386,
											"end": 1387,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 1379,
											"end": 1391,
											"name": "REVERT",
											"source": 20
										},
										{
											"begin": 1330,
											"end": 1393,
											"name": "tag",
											"source": 20,
											"value": "257"
										},
										{
											"begin": 1330,
											"end": 1393,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 1277,
											"end": 1399,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 1277,
											"end": 1399,
											"name": "JUMP",
											"source": 20,
											"value": "[out]"
										},
										{
											"begin": 1405,
											"end": 1544,
											"name": "tag",
											"source": 20,
											"value": "209"
										},
										{
											"begin": 1405,
											"end": 1544,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 1451,
											"end": 1456,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 1489,
											"end": 1495,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 1476,
											"end": 1496,
											"name": "CALLDATALOAD",
											"source": 20
										},
										{
											"begin": 1467,
											"end": 1496,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 1467,
											"end": 1496,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 1505,
											"end": 1538,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "259"
										},
										{
											"begin": 1532,
											"end": 1537,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 1505,
											"end": 1538,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "208"
										},
										{
											"begin": 1505,
											"end": 1538,
											"name": "JUMP",
											"source": 20,
											"value": "[in]"
										},
										{
											"begin": 1505,
											"end": 1538,
											"name": "tag",
											"source": 20,
											"value": "259"
										},
										{
											"begin": 1505,
											"end": 1538,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 1405,
											"end": 1544,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 1405,
											"end": 1544,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 1405,
											"end": 1544,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 1405,
											"end": 1544,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 1405,
											"end": 1544,
											"name": "JUMP",
											"source": 20,
											"value": "[out]"
										},
										{
											"begin": 1550,
											"end": 1627,
											"name": "tag",
											"source": 20,
											"value": "210"
										},
										{
											"begin": 1550,
											"end": 1627,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 1587,
											"end": 1594,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 1616,
											"end": 1621,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 1605,
											"end": 1621,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 1605,
											"end": 1621,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 1550,
											"end": 1627,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 1550,
											"end": 1627,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 1550,
											"end": 1627,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 1550,
											"end": 1627,
											"name": "JUMP",
											"source": 20,
											"value": "[out]"
										},
										{
											"begin": 1633,
											"end": 1755,
											"name": "tag",
											"source": 20,
											"value": "211"
										},
										{
											"begin": 1633,
											"end": 1755,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 1706,
											"end": 1730,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "262"
										},
										{
											"begin": 1724,
											"end": 1729,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 1706,
											"end": 1730,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "210"
										},
										{
											"begin": 1706,
											"end": 1730,
											"name": "JUMP",
											"source": 20,
											"value": "[in]"
										},
										{
											"begin": 1706,
											"end": 1730,
											"name": "tag",
											"source": 20,
											"value": "262"
										},
										{
											"begin": 1706,
											"end": 1730,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 1699,
											"end": 1704,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 1696,
											"end": 1731,
											"name": "EQ",
											"source": 20
										},
										{
											"begin": 1686,
											"end": 1749,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "263"
										},
										{
											"begin": 1686,
											"end": 1749,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 1745,
											"end": 1746,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 1742,
											"end": 1743,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 1735,
											"end": 1747,
											"name": "REVERT",
											"source": 20
										},
										{
											"begin": 1686,
											"end": 1749,
											"name": "tag",
											"source": 20,
											"value": "263"
										},
										{
											"begin": 1686,
											"end": 1749,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 1633,
											"end": 1755,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 1633,
											"end": 1755,
											"name": "JUMP",
											"source": 20,
											"value": "[out]"
										},
										{
											"begin": 1761,
											"end": 1900,
											"name": "tag",
											"source": 20,
											"value": "212"
										},
										{
											"begin": 1761,
											"end": 1900,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 1807,
											"end": 1812,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 1845,
											"end": 1851,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 1832,
											"end": 1852,
											"name": "CALLDATALOAD",
											"source": 20
										},
										{
											"begin": 1823,
											"end": 1852,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 1823,
											"end": 1852,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 1861,
											"end": 1894,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "265"
										},
										{
											"begin": 1888,
											"end": 1893,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 1861,
											"end": 1894,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "211"
										},
										{
											"begin": 1861,
											"end": 1894,
											"name": "JUMP",
											"source": 20,
											"value": "[in]"
										},
										{
											"begin": 1861,
											"end": 1894,
											"name": "tag",
											"source": 20,
											"value": "265"
										},
										{
											"begin": 1861,
											"end": 1894,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 1761,
											"end": 1900,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 1761,
											"end": 1900,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 1761,
											"end": 1900,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 1761,
											"end": 1900,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 1761,
											"end": 1900,
											"name": "JUMP",
											"source": 20,
											"value": "[out]"
										},
										{
											"begin": 1906,
											"end": 2380,
											"name": "tag",
											"source": 20,
											"value": "24"
										},
										{
											"begin": 1906,
											"end": 2380,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 1974,
											"end": 1980,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 1982,
											"end": 1988,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 2031,
											"end": 2033,
											"name": "PUSH",
											"source": 20,
											"value": "40"
										},
										{
											"begin": 2019,
											"end": 2028,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 2010,
											"end": 2017,
											"name": "DUP6",
											"source": 20
										},
										{
											"begin": 2006,
											"end": 2029,
											"name": "SUB",
											"source": 20
										},
										{
											"begin": 2002,
											"end": 2034,
											"name": "SLT",
											"source": 20
										},
										{
											"begin": 1999,
											"end": 2118,
											"name": "ISZERO",
											"source": 20
										},
										{
											"begin": 1999,
											"end": 2118,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "267"
										},
										{
											"begin": 1999,
											"end": 2118,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 2037,
											"end": 2116,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "268"
										},
										{
											"begin": 2037,
											"end": 2116,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "201"
										},
										{
											"begin": 2037,
											"end": 2116,
											"name": "JUMP",
											"source": 20,
											"value": "[in]"
										},
										{
											"begin": 2037,
											"end": 2116,
											"name": "tag",
											"source": 20,
											"value": "268"
										},
										{
											"begin": 2037,
											"end": 2116,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 1999,
											"end": 2118,
											"name": "tag",
											"source": 20,
											"value": "267"
										},
										{
											"begin": 1999,
											"end": 2118,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 2157,
											"end": 2158,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 2182,
											"end": 2235,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "269"
										},
										{
											"begin": 2227,
											"end": 2234,
											"name": "DUP6",
											"source": 20
										},
										{
											"begin": 2218,
											"end": 2224,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 2207,
											"end": 2216,
											"name": "DUP7",
											"source": 20
										},
										{
											"begin": 2203,
											"end": 2225,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 2182,
											"end": 2235,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "209"
										},
										{
											"begin": 2182,
											"end": 2235,
											"name": "JUMP",
											"source": 20,
											"value": "[in]"
										},
										{
											"begin": 2182,
											"end": 2235,
											"name": "tag",
											"source": 20,
											"value": "269"
										},
										{
											"begin": 2182,
											"end": 2235,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 2172,
											"end": 2235,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 2172,
											"end": 2235,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 2128,
											"end": 2245,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 2284,
											"end": 2286,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 2310,
											"end": 2363,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "270"
										},
										{
											"begin": 2355,
											"end": 2362,
											"name": "DUP6",
											"source": 20
										},
										{
											"begin": 2346,
											"end": 2352,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 2335,
											"end": 2344,
											"name": "DUP7",
											"source": 20
										},
										{
											"begin": 2331,
											"end": 2353,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 2310,
											"end": 2363,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "212"
										},
										{
											"begin": 2310,
											"end": 2363,
											"name": "JUMP",
											"source": 20,
											"value": "[in]"
										},
										{
											"begin": 2310,
											"end": 2363,
											"name": "tag",
											"source": 20,
											"value": "270"
										},
										{
											"begin": 2310,
											"end": 2363,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 2300,
											"end": 2363,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 2300,
											"end": 2363,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 2255,
											"end": 2373,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 1906,
											"end": 2380,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 1906,
											"end": 2380,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 1906,
											"end": 2380,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 1906,
											"end": 2380,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 1906,
											"end": 2380,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 1906,
											"end": 2380,
											"name": "JUMP",
											"source": 20,
											"value": "[out]"
										},
										{
											"begin": 2386,
											"end": 2476,
											"name": "tag",
											"source": 20,
											"value": "213"
										},
										{
											"begin": 2386,
											"end": 2476,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 2420,
											"end": 2427,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 2463,
											"end": 2468,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 2456,
											"end": 2469,
											"name": "ISZERO",
											"source": 20
										},
										{
											"begin": 2449,
											"end": 2470,
											"name": "ISZERO",
											"source": 20
										},
										{
											"begin": 2438,
											"end": 2470,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 2438,
											"end": 2470,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 2386,
											"end": 2476,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 2386,
											"end": 2476,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 2386,
											"end": 2476,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 2386,
											"end": 2476,
											"name": "JUMP",
											"source": 20,
											"value": "[out]"
										},
										{
											"begin": 2482,
											"end": 2591,
											"name": "tag",
											"source": 20,
											"value": "214"
										},
										{
											"begin": 2482,
											"end": 2591,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 2563,
											"end": 2584,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "273"
										},
										{
											"begin": 2578,
											"end": 2583,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 2563,
											"end": 2584,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "213"
										},
										{
											"begin": 2563,
											"end": 2584,
											"name": "JUMP",
											"source": 20,
											"value": "[in]"
										},
										{
											"begin": 2563,
											"end": 2584,
											"name": "tag",
											"source": 20,
											"value": "273"
										},
										{
											"begin": 2563,
											"end": 2584,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 2558,
											"end": 2561,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 2551,
											"end": 2585,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 2482,
											"end": 2591,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 2482,
											"end": 2591,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 2482,
											"end": 2591,
											"name": "JUMP",
											"source": 20,
											"value": "[out]"
										},
										{
											"begin": 2597,
											"end": 2807,
											"name": "tag",
											"source": 20,
											"value": "27"
										},
										{
											"begin": 2597,
											"end": 2807,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 2684,
											"end": 2688,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 2722,
											"end": 2724,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 2711,
											"end": 2720,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 2707,
											"end": 2725,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 2699,
											"end": 2725,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 2699,
											"end": 2725,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 2735,
											"end": 2800,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "275"
										},
										{
											"begin": 2797,
											"end": 2798,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 2786,
											"end": 2795,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 2782,
											"end": 2799,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 2773,
											"end": 2779,
											"name": "DUP5",
											"source": 20
										},
										{
											"begin": 2735,
											"end": 2800,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "214"
										},
										{
											"begin": 2735,
											"end": 2800,
											"name": "JUMP",
											"source": 20,
											"value": "[in]"
										},
										{
											"begin": 2735,
											"end": 2800,
											"name": "tag",
											"source": 20,
											"value": "275"
										},
										{
											"begin": 2735,
											"end": 2800,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 2597,
											"end": 2807,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 2597,
											"end": 2807,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 2597,
											"end": 2807,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 2597,
											"end": 2807,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 2597,
											"end": 2807,
											"name": "JUMP",
											"source": 20,
											"value": "[out]"
										},
										{
											"begin": 2813,
											"end": 2931,
											"name": "tag",
											"source": 20,
											"value": "215"
										},
										{
											"begin": 2813,
											"end": 2931,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 2850,
											"end": 2857,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 2890,
											"end": 2924,
											"name": "PUSH",
											"source": 20,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2883,
											"end": 2888,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 2879,
											"end": 2925,
											"name": "AND",
											"source": 20
										},
										{
											"begin": 2868,
											"end": 2925,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 2868,
											"end": 2925,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 2813,
											"end": 2931,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 2813,
											"end": 2931,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 2813,
											"end": 2931,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 2813,
											"end": 2931,
											"name": "JUMP",
											"source": 20,
											"value": "[out]"
										},
										{
											"begin": 2937,
											"end": 3059,
											"name": "tag",
											"source": 20,
											"value": "216"
										},
										{
											"begin": 2937,
											"end": 3059,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 3010,
											"end": 3034,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "278"
										},
										{
											"begin": 3028,
											"end": 3033,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 3010,
											"end": 3034,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "215"
										},
										{
											"begin": 3010,
											"end": 3034,
											"name": "JUMP",
											"source": 20,
											"value": "[in]"
										},
										{
											"begin": 3010,
											"end": 3034,
											"name": "tag",
											"source": 20,
											"value": "278"
										},
										{
											"begin": 3010,
											"end": 3034,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 3003,
											"end": 3008,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 3000,
											"end": 3035,
											"name": "EQ",
											"source": 20
										},
										{
											"begin": 2990,
											"end": 3053,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "279"
										},
										{
											"begin": 2990,
											"end": 3053,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 3049,
											"end": 3050,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 3046,
											"end": 3047,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 3039,
											"end": 3051,
											"name": "REVERT",
											"source": 20
										},
										{
											"begin": 2990,
											"end": 3053,
											"name": "tag",
											"source": 20,
											"value": "279"
										},
										{
											"begin": 2990,
											"end": 3053,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 2937,
											"end": 3059,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 2937,
											"end": 3059,
											"name": "JUMP",
											"source": 20,
											"value": "[out]"
										},
										{
											"begin": 3065,
											"end": 3204,
											"name": "tag",
											"source": 20,
											"value": "217"
										},
										{
											"begin": 3065,
											"end": 3204,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 3111,
											"end": 3116,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 3149,
											"end": 3155,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 3136,
											"end": 3156,
											"name": "CALLDATALOAD",
											"source": 20
										},
										{
											"begin": 3127,
											"end": 3156,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 3127,
											"end": 3156,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 3165,
											"end": 3198,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "281"
										},
										{
											"begin": 3192,
											"end": 3197,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 3165,
											"end": 3198,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "216"
										},
										{
											"begin": 3165,
											"end": 3198,
											"name": "JUMP",
											"source": 20,
											"value": "[in]"
										},
										{
											"begin": 3165,
											"end": 3198,
											"name": "tag",
											"source": 20,
											"value": "281"
										},
										{
											"begin": 3165,
											"end": 3198,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 3065,
											"end": 3204,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 3065,
											"end": 3204,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 3065,
											"end": 3204,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 3065,
											"end": 3204,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 3065,
											"end": 3204,
											"name": "JUMP",
											"source": 20,
											"value": "[out]"
										},
										{
											"begin": 3210,
											"end": 3684,
											"name": "tag",
											"source": 20,
											"value": "36"
										},
										{
											"begin": 3210,
											"end": 3684,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 3278,
											"end": 3284,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 3286,
											"end": 3292,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 3335,
											"end": 3337,
											"name": "PUSH",
											"source": 20,
											"value": "40"
										},
										{
											"begin": 3323,
											"end": 3332,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 3314,
											"end": 3321,
											"name": "DUP6",
											"source": 20
										},
										{
											"begin": 3310,
											"end": 3333,
											"name": "SUB",
											"source": 20
										},
										{
											"begin": 3306,
											"end": 3338,
											"name": "SLT",
											"source": 20
										},
										{
											"begin": 3303,
											"end": 3422,
											"name": "ISZERO",
											"source": 20
										},
										{
											"begin": 3303,
											"end": 3422,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "283"
										},
										{
											"begin": 3303,
											"end": 3422,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 3341,
											"end": 3420,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "284"
										},
										{
											"begin": 3341,
											"end": 3420,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "201"
										},
										{
											"begin": 3341,
											"end": 3420,
											"name": "JUMP",
											"source": 20,
											"value": "[in]"
										},
										{
											"begin": 3341,
											"end": 3420,
											"name": "tag",
											"source": 20,
											"value": "284"
										},
										{
											"begin": 3341,
											"end": 3420,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 3303,
											"end": 3422,
											"name": "tag",
											"source": 20,
											"value": "283"
										},
										{
											"begin": 3303,
											"end": 3422,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 3461,
											"end": 3462,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 3486,
											"end": 3539,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "285"
										},
										{
											"begin": 3531,
											"end": 3538,
											"name": "DUP6",
											"source": 20
										},
										{
											"begin": 3522,
											"end": 3528,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 3511,
											"end": 3520,
											"name": "DUP7",
											"source": 20
										},
										{
											"begin": 3507,
											"end": 3529,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 3486,
											"end": 3539,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "217"
										},
										{
											"begin": 3486,
											"end": 3539,
											"name": "JUMP",
											"source": 20,
											"value": "[in]"
										},
										{
											"begin": 3486,
											"end": 3539,
											"name": "tag",
											"source": 20,
											"value": "285"
										},
										{
											"begin": 3486,
											"end": 3539,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 3476,
											"end": 3539,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 3476,
											"end": 3539,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 3432,
											"end": 3549,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 3588,
											"end": 3590,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 3614,
											"end": 3667,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "286"
										},
										{
											"begin": 3659,
											"end": 3666,
											"name": "DUP6",
											"source": 20
										},
										{
											"begin": 3650,
											"end": 3656,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 3639,
											"end": 3648,
											"name": "DUP7",
											"source": 20
										},
										{
											"begin": 3635,
											"end": 3657,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 3614,
											"end": 3667,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "217"
										},
										{
											"begin": 3614,
											"end": 3667,
											"name": "JUMP",
											"source": 20,
											"value": "[in]"
										},
										{
											"begin": 3614,
											"end": 3667,
											"name": "tag",
											"source": 20,
											"value": "286"
										},
										{
											"begin": 3614,
											"end": 3667,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 3604,
											"end": 3667,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 3604,
											"end": 3667,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 3559,
											"end": 3677,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 3210,
											"end": 3684,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 3210,
											"end": 3684,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 3210,
											"end": 3684,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 3210,
											"end": 3684,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 3210,
											"end": 3684,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 3210,
											"end": 3684,
											"name": "JUMP",
											"source": 20,
											"value": "[out]"
										},
										{
											"begin": 3690,
											"end": 3808,
											"name": "tag",
											"source": 20,
											"value": "218"
										},
										{
											"begin": 3690,
											"end": 3808,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 3777,
											"end": 3801,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "288"
										},
										{
											"begin": 3795,
											"end": 3800,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 3777,
											"end": 3801,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "210"
										},
										{
											"begin": 3777,
											"end": 3801,
											"name": "JUMP",
											"source": 20,
											"value": "[in]"
										},
										{
											"begin": 3777,
											"end": 3801,
											"name": "tag",
											"source": 20,
											"value": "288"
										},
										{
											"begin": 3777,
											"end": 3801,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 3772,
											"end": 3775,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 3765,
											"end": 3802,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 3690,
											"end": 3808,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 3690,
											"end": 3808,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 3690,
											"end": 3808,
											"name": "JUMP",
											"source": 20,
											"value": "[out]"
										},
										{
											"begin": 3814,
											"end": 4036,
											"name": "tag",
											"source": 20,
											"value": "39"
										},
										{
											"begin": 3814,
											"end": 4036,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 3907,
											"end": 3911,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 3945,
											"end": 3947,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 3934,
											"end": 3943,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 3930,
											"end": 3948,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 3922,
											"end": 3948,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 3922,
											"end": 3948,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 3958,
											"end": 4029,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "290"
										},
										{
											"begin": 4026,
											"end": 4027,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 4015,
											"end": 4024,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 4011,
											"end": 4028,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 4002,
											"end": 4008,
											"name": "DUP5",
											"source": 20
										},
										{
											"begin": 3958,
											"end": 4029,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "218"
										},
										{
											"begin": 3958,
											"end": 4029,
											"name": "JUMP",
											"source": 20,
											"value": "[in]"
										},
										{
											"begin": 3958,
											"end": 4029,
											"name": "tag",
											"source": 20,
											"value": "290"
										},
										{
											"begin": 3958,
											"end": 4029,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 3814,
											"end": 4036,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 3814,
											"end": 4036,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 3814,
											"end": 4036,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 3814,
											"end": 4036,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 3814,
											"end": 4036,
											"name": "JUMP",
											"source": 20,
											"value": "[out]"
										},
										{
											"begin": 4042,
											"end": 4661,
											"name": "tag",
											"source": 20,
											"value": "49"
										},
										{
											"begin": 4042,
											"end": 4661,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 4119,
											"end": 4125,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 4127,
											"end": 4133,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 4135,
											"end": 4141,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 4184,
											"end": 4186,
											"name": "PUSH",
											"source": 20,
											"value": "60"
										},
										{
											"begin": 4172,
											"end": 4181,
											"name": "DUP5",
											"source": 20
										},
										{
											"begin": 4163,
											"end": 4170,
											"name": "DUP7",
											"source": 20
										},
										{
											"begin": 4159,
											"end": 4182,
											"name": "SUB",
											"source": 20
										},
										{
											"begin": 4155,
											"end": 4187,
											"name": "SLT",
											"source": 20
										},
										{
											"begin": 4152,
											"end": 4271,
											"name": "ISZERO",
											"source": 20
										},
										{
											"begin": 4152,
											"end": 4271,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "292"
										},
										{
											"begin": 4152,
											"end": 4271,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 4190,
											"end": 4269,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "293"
										},
										{
											"begin": 4190,
											"end": 4269,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "201"
										},
										{
											"begin": 4190,
											"end": 4269,
											"name": "JUMP",
											"source": 20,
											"value": "[in]"
										},
										{
											"begin": 4190,
											"end": 4269,
											"name": "tag",
											"source": 20,
											"value": "293"
										},
										{
											"begin": 4190,
											"end": 4269,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 4152,
											"end": 4271,
											"name": "tag",
											"source": 20,
											"value": "292"
										},
										{
											"begin": 4152,
											"end": 4271,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 4310,
											"end": 4311,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 4335,
											"end": 4388,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "294"
										},
										{
											"begin": 4380,
											"end": 4387,
											"name": "DUP7",
											"source": 20
										},
										{
											"begin": 4371,
											"end": 4377,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 4360,
											"end": 4369,
											"name": "DUP8",
											"source": 20
										},
										{
											"begin": 4356,
											"end": 4378,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 4335,
											"end": 4388,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "209"
										},
										{
											"begin": 4335,
											"end": 4388,
											"name": "JUMP",
											"source": 20,
											"value": "[in]"
										},
										{
											"begin": 4335,
											"end": 4388,
											"name": "tag",
											"source": 20,
											"value": "294"
										},
										{
											"begin": 4335,
											"end": 4388,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 4325,
											"end": 4388,
											"name": "SWAP4",
											"source": 20
										},
										{
											"begin": 4325,
											"end": 4388,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 4281,
											"end": 4398,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 4437,
											"end": 4439,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 4463,
											"end": 4516,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "295"
										},
										{
											"begin": 4508,
											"end": 4515,
											"name": "DUP7",
											"source": 20
										},
										{
											"begin": 4499,
											"end": 4505,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 4488,
											"end": 4497,
											"name": "DUP8",
											"source": 20
										},
										{
											"begin": 4484,
											"end": 4506,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 4463,
											"end": 4516,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "217"
										},
										{
											"begin": 4463,
											"end": 4516,
											"name": "JUMP",
											"source": 20,
											"value": "[in]"
										},
										{
											"begin": 4463,
											"end": 4516,
											"name": "tag",
											"source": 20,
											"value": "295"
										},
										{
											"begin": 4463,
											"end": 4516,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 4453,
											"end": 4516,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 4453,
											"end": 4516,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 4408,
											"end": 4526,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 4565,
											"end": 4567,
											"name": "PUSH",
											"source": 20,
											"value": "40"
										},
										{
											"begin": 4591,
											"end": 4644,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "296"
										},
										{
											"begin": 4636,
											"end": 4643,
											"name": "DUP7",
											"source": 20
										},
										{
											"begin": 4627,
											"end": 4633,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 4616,
											"end": 4625,
											"name": "DUP8",
											"source": 20
										},
										{
											"begin": 4612,
											"end": 4634,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 4591,
											"end": 4644,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "217"
										},
										{
											"begin": 4591,
											"end": 4644,
											"name": "JUMP",
											"source": 20,
											"value": "[in]"
										},
										{
											"begin": 4591,
											"end": 4644,
											"name": "tag",
											"source": 20,
											"value": "296"
										},
										{
											"begin": 4591,
											"end": 4644,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 4581,
											"end": 4644,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 4581,
											"end": 4644,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 4536,
											"end": 4654,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 4042,
											"end": 4661,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 4042,
											"end": 4661,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 4042,
											"end": 4661,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 4042,
											"end": 4661,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 4042,
											"end": 4661,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 4042,
											"end": 4661,
											"name": "JUMP",
											"source": 20,
											"value": "[out]"
										},
										{
											"begin": 4667,
											"end": 4847,
											"name": "tag",
											"source": 20,
											"value": "219"
										},
										{
											"begin": 4667,
											"end": 4847,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 4715,
											"end": 4792,
											"name": "PUSH",
											"source": 20,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 4712,
											"end": 4713,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 4705,
											"end": 4793,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 4812,
											"end": 4816,
											"name": "PUSH",
											"source": 20,
											"value": "11"
										},
										{
											"begin": 4809,
											"end": 4810,
											"name": "PUSH",
											"source": 20,
											"value": "4"
										},
										{
											"begin": 4802,
											"end": 4817,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 4836,
											"end": 4840,
											"name": "PUSH",
											"source": 20,
											"value": "24"
										},
										{
											"begin": 4833,
											"end": 4834,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 4826,
											"end": 4841,
											"name": "REVERT",
											"source": 20
										},
										{
											"begin": 4853,
											"end": 5044,
											"name": "tag",
											"source": 20,
											"value": "81"
										},
										{
											"begin": 4853,
											"end": 5044,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 4893,
											"end": 4897,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 4913,
											"end": 4933,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "299"
										},
										{
											"begin": 4931,
											"end": 4932,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 4913,
											"end": 4933,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "210"
										},
										{
											"begin": 4913,
											"end": 4933,
											"name": "JUMP",
											"source": 20,
											"value": "[in]"
										},
										{
											"begin": 4913,
											"end": 4933,
											"name": "tag",
											"source": 20,
											"value": "299"
										},
										{
											"begin": 4913,
											"end": 4933,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 4908,
											"end": 4933,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 4908,
											"end": 4933,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 4947,
											"end": 4967,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "300"
										},
										{
											"begin": 4965,
											"end": 4966,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 4947,
											"end": 4967,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "210"
										},
										{
											"begin": 4947,
											"end": 4967,
											"name": "JUMP",
											"source": 20,
											"value": "[in]"
										},
										{
											"begin": 4947,
											"end": 4967,
											"name": "tag",
											"source": 20,
											"value": "300"
										},
										{
											"begin": 4947,
											"end": 4967,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 4942,
											"end": 4967,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 4942,
											"end": 4967,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 4986,
											"end": 4987,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 4983,
											"end": 4984,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 4980,
											"end": 4988,
											"name": "LT",
											"source": 20
										},
										{
											"begin": 4977,
											"end": 5011,
											"name": "ISZERO",
											"source": 20
										},
										{
											"begin": 4977,
											"end": 5011,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "301"
										},
										{
											"begin": 4977,
											"end": 5011,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 4991,
											"end": 5009,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "302"
										},
										{
											"begin": 4991,
											"end": 5009,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "219"
										},
										{
											"begin": 4991,
											"end": 5009,
											"name": "JUMP",
											"source": 20,
											"value": "[in]"
										},
										{
											"begin": 4991,
											"end": 5009,
											"name": "tag",
											"source": 20,
											"value": "302"
										},
										{
											"begin": 4991,
											"end": 5009,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 4977,
											"end": 5011,
											"name": "tag",
											"source": 20,
											"value": "301"
										},
										{
											"begin": 4977,
											"end": 5011,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 5036,
											"end": 5037,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 5033,
											"end": 5034,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 5029,
											"end": 5038,
											"name": "SUB",
											"source": 20
										},
										{
											"begin": 5021,
											"end": 5038,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 5021,
											"end": 5038,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 4853,
											"end": 5044,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 4853,
											"end": 5044,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 4853,
											"end": 5044,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 4853,
											"end": 5044,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 4853,
											"end": 5044,
											"name": "JUMP",
											"source": 20,
											"value": "[out]"
										},
										{
											"begin": 5050,
											"end": 5366,
											"name": "tag",
											"source": 20,
											"value": "85"
										},
										{
											"begin": 5050,
											"end": 5366,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 5090,
											"end": 5097,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 5113,
											"end": 5133,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "304"
										},
										{
											"begin": 5131,
											"end": 5132,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 5113,
											"end": 5133,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "215"
										},
										{
											"begin": 5113,
											"end": 5133,
											"name": "JUMP",
											"source": 20,
											"value": "[in]"
										},
										{
											"begin": 5113,
											"end": 5133,
											"name": "tag",
											"source": 20,
											"value": "304"
										},
										{
											"begin": 5113,
											"end": 5133,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 5108,
											"end": 5133,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 5108,
											"end": 5133,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 5147,
											"end": 5167,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "305"
										},
										{
											"begin": 5165,
											"end": 5166,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 5147,
											"end": 5167,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "215"
										},
										{
											"begin": 5147,
											"end": 5167,
											"name": "JUMP",
											"source": 20,
											"value": "[in]"
										},
										{
											"begin": 5147,
											"end": 5167,
											"name": "tag",
											"source": 20,
											"value": "305"
										},
										{
											"begin": 5147,
											"end": 5167,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 5142,
											"end": 5167,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 5142,
											"end": 5167,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 5303,
											"end": 5304,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 5267,
											"end": 5301,
											"name": "PUSH",
											"source": 20,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5263,
											"end": 5305,
											"name": "DIV",
											"source": 20
										},
										{
											"begin": 5260,
											"end": 5261,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 5257,
											"end": 5306,
											"name": "GT",
											"source": 20
										},
										{
											"begin": 5252,
											"end": 5253,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 5245,
											"end": 5254,
											"name": "ISZERO",
											"source": 20
										},
										{
											"begin": 5238,
											"end": 5255,
											"name": "ISZERO",
											"source": 20
										},
										{
											"begin": 5234,
											"end": 5307,
											"name": "AND",
											"source": 20
										},
										{
											"begin": 5231,
											"end": 5330,
											"name": "ISZERO",
											"source": 20
										},
										{
											"begin": 5231,
											"end": 5330,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "306"
										},
										{
											"begin": 5231,
											"end": 5330,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 5310,
											"end": 5328,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "307"
										},
										{
											"begin": 5310,
											"end": 5328,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "219"
										},
										{
											"begin": 5310,
											"end": 5328,
											"name": "JUMP",
											"source": 20,
											"value": "[in]"
										},
										{
											"begin": 5310,
											"end": 5328,
											"name": "tag",
											"source": 20,
											"value": "307"
										},
										{
											"begin": 5310,
											"end": 5328,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 5231,
											"end": 5330,
											"name": "tag",
											"source": 20,
											"value": "306"
										},
										{
											"begin": 5231,
											"end": 5330,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 5358,
											"end": 5359,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 5355,
											"end": 5356,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 5351,
											"end": 5360,
											"name": "MUL",
											"source": 20
										},
										{
											"begin": 5340,
											"end": 5360,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 5340,
											"end": 5360,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 5050,
											"end": 5366,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 5050,
											"end": 5366,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 5050,
											"end": 5366,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 5050,
											"end": 5366,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 5050,
											"end": 5366,
											"name": "JUMP",
											"source": 20,
											"value": "[out]"
										},
										{
											"begin": 5372,
											"end": 5720,
											"name": "tag",
											"source": 20,
											"value": "109"
										},
										{
											"begin": 5372,
											"end": 5720,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 5412,
											"end": 5419,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 5435,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "309"
										},
										{
											"begin": 5453,
											"end": 5454,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 5435,
											"end": 5455,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "210"
										},
										{
											"begin": 5435,
											"end": 5455,
											"name": "JUMP",
											"source": 20,
											"value": "[in]"
										},
										{
											"begin": 5435,
											"end": 5455,
											"name": "tag",
											"source": 20,
											"value": "309"
										},
										{
											"begin": 5435,
											"end": 5455,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 5430,
											"end": 5455,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 5430,
											"end": 5455,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 5469,
											"end": 5489,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "310"
										},
										{
											"begin": 5487,
											"end": 5488,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 5469,
											"end": 5489,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "210"
										},
										{
											"begin": 5469,
											"end": 5489,
											"name": "JUMP",
											"source": 20,
											"value": "[in]"
										},
										{
											"begin": 5469,
											"end": 5489,
											"name": "tag",
											"source": 20,
											"value": "310"
										},
										{
											"begin": 5469,
											"end": 5489,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 5464,
											"end": 5489,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 5464,
											"end": 5489,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 5657,
											"end": 5658,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 5589,
											"end": 5655,
											"name": "PUSH",
											"source": 20,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5585,
											"end": 5659,
											"name": "DIV",
											"source": 20
										},
										{
											"begin": 5582,
											"end": 5583,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 5579,
											"end": 5660,
											"name": "GT",
											"source": 20
										},
										{
											"begin": 5574,
											"end": 5575,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 5567,
											"end": 5576,
											"name": "ISZERO",
											"source": 20
										},
										{
											"begin": 5560,
											"end": 5577,
											"name": "ISZERO",
											"source": 20
										},
										{
											"begin": 5556,
											"end": 5661,
											"name": "AND",
											"source": 20
										},
										{
											"begin": 5553,
											"end": 5684,
											"name": "ISZERO",
											"source": 20
										},
										{
											"begin": 5553,
											"end": 5684,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "311"
										},
										{
											"begin": 5553,
											"end": 5684,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 5664,
											"end": 5682,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "312"
										},
										{
											"begin": 5664,
											"end": 5682,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "219"
										},
										{
											"begin": 5664,
											"end": 5682,
											"name": "JUMP",
											"source": 20,
											"value": "[in]"
										},
										{
											"begin": 5664,
											"end": 5682,
											"name": "tag",
											"source": 20,
											"value": "312"
										},
										{
											"begin": 5664,
											"end": 5682,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 5553,
											"end": 5684,
											"name": "tag",
											"source": 20,
											"value": "311"
										},
										{
											"begin": 5553,
											"end": 5684,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 5712,
											"end": 5713,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 5709,
											"end": 5710,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 5705,
											"end": 5714,
											"name": "MUL",
											"source": 20
										},
										{
											"begin": 5694,
											"end": 5714,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 5694,
											"end": 5714,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 5372,
											"end": 5720,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 5372,
											"end": 5720,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 5372,
											"end": 5720,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 5372,
											"end": 5720,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 5372,
											"end": 5720,
											"name": "JUMP",
											"source": 20,
											"value": "[out]"
										},
										{
											"begin": 5726,
											"end": 5906,
											"name": "tag",
											"source": 20,
											"value": "220"
										},
										{
											"begin": 5726,
											"end": 5906,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 5774,
											"end": 5851,
											"name": "PUSH",
											"source": 20,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 5771,
											"end": 5772,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 5764,
											"end": 5852,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 5871,
											"end": 5875,
											"name": "PUSH",
											"source": 20,
											"value": "12"
										},
										{
											"begin": 5868,
											"end": 5869,
											"name": "PUSH",
											"source": 20,
											"value": "4"
										},
										{
											"begin": 5861,
											"end": 5876,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 5895,
											"end": 5899,
											"name": "PUSH",
											"source": 20,
											"value": "24"
										},
										{
											"begin": 5892,
											"end": 5893,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 5885,
											"end": 5900,
											"name": "REVERT",
											"source": 20
										},
										{
											"begin": 5912,
											"end": 6097,
											"name": "tag",
											"source": 20,
											"value": "111"
										},
										{
											"begin": 5912,
											"end": 6097,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 5952,
											"end": 5953,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 5969,
											"end": 5989,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "315"
										},
										{
											"begin": 5987,
											"end": 5988,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 5969,
											"end": 5989,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "210"
										},
										{
											"begin": 5969,
											"end": 5989,
											"name": "JUMP",
											"source": 20,
											"value": "[in]"
										},
										{
											"begin": 5969,
											"end": 5989,
											"name": "tag",
											"source": 20,
											"value": "315"
										},
										{
											"begin": 5969,
											"end": 5989,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 5964,
											"end": 5989,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 5964,
											"end": 5989,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 6003,
											"end": 6023,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "316"
										},
										{
											"begin": 6021,
											"end": 6022,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 6003,
											"end": 6023,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "210"
										},
										{
											"begin": 6003,
											"end": 6023,
											"name": "JUMP",
											"source": 20,
											"value": "[in]"
										},
										{
											"begin": 6003,
											"end": 6023,
											"name": "tag",
											"source": 20,
											"value": "316"
										},
										{
											"begin": 6003,
											"end": 6023,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 5998,
											"end": 6023,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 5998,
											"end": 6023,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 6042,
											"end": 6043,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 6032,
											"end": 6067,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "317"
										},
										{
											"begin": 6032,
											"end": 6067,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 6047,
											"end": 6065,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "318"
										},
										{
											"begin": 6047,
											"end": 6065,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "220"
										},
										{
											"begin": 6047,
											"end": 6065,
											"name": "JUMP",
											"source": 20,
											"value": "[in]"
										},
										{
											"begin": 6047,
											"end": 6065,
											"name": "tag",
											"source": 20,
											"value": "318"
										},
										{
											"begin": 6047,
											"end": 6065,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 6032,
											"end": 6067,
											"name": "tag",
											"source": 20,
											"value": "317"
										},
										{
											"begin": 6032,
											"end": 6067,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 6089,
											"end": 6090,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 6086,
											"end": 6087,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 6082,
											"end": 6091,
											"name": "DIV",
											"source": 20
										},
										{
											"begin": 6077,
											"end": 6091,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 6077,
											"end": 6091,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 5912,
											"end": 6097,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 5912,
											"end": 6097,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 5912,
											"end": 6097,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 5912,
											"end": 6097,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 5912,
											"end": 6097,
											"name": "JUMP",
											"source": 20,
											"value": "[out]"
										},
										{
											"begin": 6103,
											"end": 6286,
											"name": "tag",
											"source": 20,
											"value": "136"
										},
										{
											"begin": 6103,
											"end": 6286,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 6141,
											"end": 6144,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 6164,
											"end": 6187,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "320"
										},
										{
											"begin": 6181,
											"end": 6186,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 6164,
											"end": 6187,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "203"
										},
										{
											"begin": 6164,
											"end": 6187,
											"name": "JUMP",
											"source": 20,
											"value": "[in]"
										},
										{
											"begin": 6164,
											"end": 6187,
											"name": "tag",
											"source": 20,
											"value": "320"
										},
										{
											"begin": 6164,
											"end": 6187,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 6155,
											"end": 6187,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 6155,
											"end": 6187,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 6209,
											"end": 6227,
											"name": "PUSH",
											"source": 20,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6202,
											"end": 6207,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 6199,
											"end": 6228,
											"name": "EQ",
											"source": 20
										},
										{
											"begin": 6196,
											"end": 6251,
											"name": "ISZERO",
											"source": 20
										},
										{
											"begin": 6196,
											"end": 6251,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "321"
										},
										{
											"begin": 6196,
											"end": 6251,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 6231,
											"end": 6249,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "322"
										},
										{
											"begin": 6231,
											"end": 6249,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "219"
										},
										{
											"begin": 6231,
											"end": 6249,
											"name": "JUMP",
											"source": 20,
											"value": "[in]"
										},
										{
											"begin": 6231,
											"end": 6249,
											"name": "tag",
											"source": 20,
											"value": "322"
										},
										{
											"begin": 6231,
											"end": 6249,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 6196,
											"end": 6251,
											"name": "tag",
											"source": 20,
											"value": "321"
										},
										{
											"begin": 6196,
											"end": 6251,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 6278,
											"end": 6279,
											"name": "PUSH",
											"source": 20,
											"value": "1"
										},
										{
											"begin": 6271,
											"end": 6276,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 6267,
											"end": 6280,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 6260,
											"end": 6280,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 6260,
											"end": 6280,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 6103,
											"end": 6286,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 6103,
											"end": 6286,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 6103,
											"end": 6286,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 6103,
											"end": 6286,
											"name": "JUMP",
											"source": 20,
											"value": "[out]"
										},
										{
											"begin": 6292,
											"end": 6410,
											"name": "tag",
											"source": 20,
											"value": "221"
										},
										{
											"begin": 6292,
											"end": 6410,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 6379,
											"end": 6403,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "324"
										},
										{
											"begin": 6397,
											"end": 6402,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 6379,
											"end": 6403,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "207"
										},
										{
											"begin": 6379,
											"end": 6403,
											"name": "JUMP",
											"source": 20,
											"value": "[in]"
										},
										{
											"begin": 6379,
											"end": 6403,
											"name": "tag",
											"source": 20,
											"value": "324"
										},
										{
											"begin": 6379,
											"end": 6403,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 6374,
											"end": 6377,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 6367,
											"end": 6404,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 6292,
											"end": 6410,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 6292,
											"end": 6410,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 6292,
											"end": 6410,
											"name": "JUMP",
											"source": 20,
											"value": "[out]"
										},
										{
											"begin": 6416,
											"end": 6858,
											"name": "tag",
											"source": 20,
											"value": "141"
										},
										{
											"begin": 6416,
											"end": 6858,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 6565,
											"end": 6569,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 6603,
											"end": 6605,
											"name": "PUSH",
											"source": 20,
											"value": "60"
										},
										{
											"begin": 6592,
											"end": 6601,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 6588,
											"end": 6606,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 6580,
											"end": 6606,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 6580,
											"end": 6606,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 6616,
											"end": 6687,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "326"
										},
										{
											"begin": 6684,
											"end": 6685,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 6673,
											"end": 6682,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 6669,
											"end": 6686,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 6660,
											"end": 6666,
											"name": "DUP7",
											"source": 20
										},
										{
											"begin": 6616,
											"end": 6687,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "221"
										},
										{
											"begin": 6616,
											"end": 6687,
											"name": "JUMP",
											"source": 20,
											"value": "[in]"
										},
										{
											"begin": 6616,
											"end": 6687,
											"name": "tag",
											"source": 20,
											"value": "326"
										},
										{
											"begin": 6616,
											"end": 6687,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 6697,
											"end": 6769,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "327"
										},
										{
											"begin": 6765,
											"end": 6767,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 6754,
											"end": 6763,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 6750,
											"end": 6768,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 6741,
											"end": 6747,
											"name": "DUP6",
											"source": 20
										},
										{
											"begin": 6697,
											"end": 6769,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "221"
										},
										{
											"begin": 6697,
											"end": 6769,
											"name": "JUMP",
											"source": 20,
											"value": "[in]"
										},
										{
											"begin": 6697,
											"end": 6769,
											"name": "tag",
											"source": 20,
											"value": "327"
										},
										{
											"begin": 6697,
											"end": 6769,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 6779,
											"end": 6851,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "328"
										},
										{
											"begin": 6847,
											"end": 6849,
											"name": "PUSH",
											"source": 20,
											"value": "40"
										},
										{
											"begin": 6836,
											"end": 6845,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 6832,
											"end": 6850,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 6823,
											"end": 6829,
											"name": "DUP5",
											"source": 20
										},
										{
											"begin": 6779,
											"end": 6851,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "218"
										},
										{
											"begin": 6779,
											"end": 6851,
											"name": "JUMP",
											"source": 20,
											"value": "[in]"
										},
										{
											"begin": 6779,
											"end": 6851,
											"name": "tag",
											"source": 20,
											"value": "328"
										},
										{
											"begin": 6779,
											"end": 6851,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 6416,
											"end": 6858,
											"name": "SWAP5",
											"source": 20
										},
										{
											"begin": 6416,
											"end": 6858,
											"name": "SWAP4",
											"source": 20
										},
										{
											"begin": 6416,
											"end": 6858,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 6416,
											"end": 6858,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 6416,
											"end": 6858,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 6416,
											"end": 6858,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 6416,
											"end": 6858,
											"name": "JUMP",
											"source": 20,
											"value": "[out]"
										},
										{
											"begin": 6864,
											"end": 7196,
											"name": "tag",
											"source": 20,
											"value": "159"
										},
										{
											"begin": 6864,
											"end": 7196,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 6985,
											"end": 6989,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 7023,
											"end": 7025,
											"name": "PUSH",
											"source": 20,
											"value": "40"
										},
										{
											"begin": 7012,
											"end": 7021,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 7008,
											"end": 7026,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 7000,
											"end": 7026,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 7000,
											"end": 7026,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 7036,
											"end": 7107,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "330"
										},
										{
											"begin": 7104,
											"end": 7105,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 7093,
											"end": 7102,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 7089,
											"end": 7106,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 7080,
											"end": 7086,
											"name": "DUP6",
											"source": 20
										},
										{
											"begin": 7036,
											"end": 7107,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "221"
										},
										{
											"begin": 7036,
											"end": 7107,
											"name": "JUMP",
											"source": 20,
											"value": "[in]"
										},
										{
											"begin": 7036,
											"end": 7107,
											"name": "tag",
											"source": 20,
											"value": "330"
										},
										{
											"begin": 7036,
											"end": 7107,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 7117,
											"end": 7189,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "331"
										},
										{
											"begin": 7185,
											"end": 7187,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 7174,
											"end": 7183,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 7170,
											"end": 7188,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 7161,
											"end": 7167,
											"name": "DUP5",
											"source": 20
										},
										{
											"begin": 7117,
											"end": 7189,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "218"
										},
										{
											"begin": 7117,
											"end": 7189,
											"name": "JUMP",
											"source": 20,
											"value": "[in]"
										},
										{
											"begin": 7117,
											"end": 7189,
											"name": "tag",
											"source": 20,
											"value": "331"
										},
										{
											"begin": 7117,
											"end": 7189,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 6864,
											"end": 7196,
											"name": "SWAP4",
											"source": 20
										},
										{
											"begin": 6864,
											"end": 7196,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 6864,
											"end": 7196,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 6864,
											"end": 7196,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 6864,
											"end": 7196,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 6864,
											"end": 7196,
											"name": "JUMP",
											"source": 20,
											"value": "[out]"
										},
										{
											"begin": 7202,
											"end": 7318,
											"name": "tag",
											"source": 20,
											"value": "222"
										},
										{
											"begin": 7202,
											"end": 7318,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 7272,
											"end": 7293,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "333"
										},
										{
											"begin": 7287,
											"end": 7292,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 7272,
											"end": 7293,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "213"
										},
										{
											"begin": 7272,
											"end": 7293,
											"name": "JUMP",
											"source": 20,
											"value": "[in]"
										},
										{
											"begin": 7272,
											"end": 7293,
											"name": "tag",
											"source": 20,
											"value": "333"
										},
										{
											"begin": 7272,
											"end": 7293,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 7265,
											"end": 7270,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 7262,
											"end": 7294,
											"name": "EQ",
											"source": 20
										},
										{
											"begin": 7252,
											"end": 7312,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "334"
										},
										{
											"begin": 7252,
											"end": 7312,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 7308,
											"end": 7309,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 7305,
											"end": 7306,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 7298,
											"end": 7310,
											"name": "REVERT",
											"source": 20
										},
										{
											"begin": 7252,
											"end": 7312,
											"name": "tag",
											"source": 20,
											"value": "334"
										},
										{
											"begin": 7252,
											"end": 7312,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 7202,
											"end": 7318,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 7202,
											"end": 7318,
											"name": "JUMP",
											"source": 20,
											"value": "[out]"
										},
										{
											"begin": 7324,
											"end": 7461,
											"name": "tag",
											"source": 20,
											"value": "223"
										},
										{
											"begin": 7324,
											"end": 7461,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 7378,
											"end": 7383,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 7409,
											"end": 7415,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 7403,
											"end": 7416,
											"name": "MLOAD",
											"source": 20
										},
										{
											"begin": 7394,
											"end": 7416,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 7394,
											"end": 7416,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 7425,
											"end": 7455,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "336"
										},
										{
											"begin": 7449,
											"end": 7454,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 7425,
											"end": 7455,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "222"
										},
										{
											"begin": 7425,
											"end": 7455,
											"name": "JUMP",
											"source": 20,
											"value": "[in]"
										},
										{
											"begin": 7425,
											"end": 7455,
											"name": "tag",
											"source": 20,
											"value": "336"
										},
										{
											"begin": 7425,
											"end": 7455,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 7324,
											"end": 7461,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 7324,
											"end": 7461,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 7324,
											"end": 7461,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 7324,
											"end": 7461,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 7324,
											"end": 7461,
											"name": "JUMP",
											"source": 20,
											"value": "[out]"
										},
										{
											"begin": 7467,
											"end": 7812,
											"name": "tag",
											"source": 20,
											"value": "165"
										},
										{
											"begin": 7467,
											"end": 7812,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 7534,
											"end": 7540,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 7583,
											"end": 7585,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 7571,
											"end": 7580,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 7562,
											"end": 7569,
											"name": "DUP5",
											"source": 20
										},
										{
											"begin": 7558,
											"end": 7581,
											"name": "SUB",
											"source": 20
										},
										{
											"begin": 7554,
											"end": 7586,
											"name": "SLT",
											"source": 20
										},
										{
											"begin": 7551,
											"end": 7670,
											"name": "ISZERO",
											"source": 20
										},
										{
											"begin": 7551,
											"end": 7670,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "338"
										},
										{
											"begin": 7551,
											"end": 7670,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 7589,
											"end": 7668,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "339"
										},
										{
											"begin": 7589,
											"end": 7668,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "201"
										},
										{
											"begin": 7589,
											"end": 7668,
											"name": "JUMP",
											"source": 20,
											"value": "[in]"
										},
										{
											"begin": 7589,
											"end": 7668,
											"name": "tag",
											"source": 20,
											"value": "339"
										},
										{
											"begin": 7589,
											"end": 7668,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 7551,
											"end": 7670,
											"name": "tag",
											"source": 20,
											"value": "338"
										},
										{
											"begin": 7551,
											"end": 7670,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 7709,
											"end": 7710,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 7734,
											"end": 7795,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "340"
										},
										{
											"begin": 7787,
											"end": 7794,
											"name": "DUP5",
											"source": 20
										},
										{
											"begin": 7778,
											"end": 7784,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 7767,
											"end": 7776,
											"name": "DUP6",
											"source": 20
										},
										{
											"begin": 7763,
											"end": 7785,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 7734,
											"end": 7795,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "223"
										},
										{
											"begin": 7734,
											"end": 7795,
											"name": "JUMP",
											"source": 20,
											"value": "[in]"
										},
										{
											"begin": 7734,
											"end": 7795,
											"name": "tag",
											"source": 20,
											"value": "340"
										},
										{
											"begin": 7734,
											"end": 7795,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 7724,
											"end": 7795,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 7724,
											"end": 7795,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 7680,
											"end": 7805,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 7467,
											"end": 7812,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 7467,
											"end": 7812,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 7467,
											"end": 7812,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 7467,
											"end": 7812,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 7467,
											"end": 7812,
											"name": "JUMP",
											"source": 20,
											"value": "[out]"
										},
										{
											"begin": 7818,
											"end": 7987,
											"name": "tag",
											"source": 20,
											"value": "224"
										},
										{
											"begin": 7818,
											"end": 7987,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 7902,
											"end": 7913,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 7936,
											"end": 7942,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 7931,
											"end": 7934,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 7924,
											"end": 7943,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 7976,
											"end": 7980,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 7971,
											"end": 7974,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 7967,
											"end": 7981,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 7952,
											"end": 7981,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 7952,
											"end": 7981,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 7818,
											"end": 7987,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 7818,
											"end": 7987,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 7818,
											"end": 7987,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 7818,
											"end": 7987,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 7818,
											"end": 7987,
											"name": "JUMP",
											"source": 20,
											"value": "[out]"
										},
										{
											"begin": 7993,
											"end": 8222,
											"name": "tag",
											"source": 20,
											"value": "225"
										},
										{
											"begin": 7993,
											"end": 8222,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 8133,
											"end": 8167,
											"name": "PUSH",
											"source": 20,
											"value": "5361666545524332303A204552433230206F7065726174696F6E20646964206E"
										},
										{
											"begin": 8129,
											"end": 8130,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 8121,
											"end": 8127,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 8117,
											"end": 8131,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 8110,
											"end": 8168,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 8202,
											"end": 8214,
											"name": "PUSH",
											"source": 20,
											"value": "6F74207375636365656400000000000000000000000000000000000000000000"
										},
										{
											"begin": 8197,
											"end": 8199,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 8189,
											"end": 8195,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 8185,
											"end": 8200,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 8178,
											"end": 8215,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 7993,
											"end": 8222,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 7993,
											"end": 8222,
											"name": "JUMP",
											"source": 20,
											"value": "[out]"
										},
										{
											"begin": 8228,
											"end": 8594,
											"name": "tag",
											"source": 20,
											"value": "226"
										},
										{
											"begin": 8228,
											"end": 8594,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 8370,
											"end": 8373,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 8391,
											"end": 8458,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "344"
										},
										{
											"begin": 8455,
											"end": 8457,
											"name": "PUSH",
											"source": 20,
											"value": "2A"
										},
										{
											"begin": 8450,
											"end": 8453,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 8391,
											"end": 8458,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "224"
										},
										{
											"begin": 8391,
											"end": 8458,
											"name": "JUMP",
											"source": 20,
											"value": "[in]"
										},
										{
											"begin": 8391,
											"end": 8458,
											"name": "tag",
											"source": 20,
											"value": "344"
										},
										{
											"begin": 8391,
											"end": 8458,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 8384,
											"end": 8458,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 8384,
											"end": 8458,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 8467,
											"end": 8560,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "345"
										},
										{
											"begin": 8556,
											"end": 8559,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 8467,
											"end": 8560,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "225"
										},
										{
											"begin": 8467,
											"end": 8560,
											"name": "JUMP",
											"source": 20,
											"value": "[in]"
										},
										{
											"begin": 8467,
											"end": 8560,
											"name": "tag",
											"source": 20,
											"value": "345"
										},
										{
											"begin": 8467,
											"end": 8560,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 8585,
											"end": 8587,
											"name": "PUSH",
											"source": 20,
											"value": "40"
										},
										{
											"begin": 8580,
											"end": 8583,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 8576,
											"end": 8588,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 8569,
											"end": 8588,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 8569,
											"end": 8588,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 8228,
											"end": 8594,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 8228,
											"end": 8594,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 8228,
											"end": 8594,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 8228,
											"end": 8594,
											"name": "JUMP",
											"source": 20,
											"value": "[out]"
										},
										{
											"begin": 8600,
											"end": 9019,
											"name": "tag",
											"source": 20,
											"value": "168"
										},
										{
											"begin": 8600,
											"end": 9019,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 8766,
											"end": 8770,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 8804,
											"end": 8806,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 8793,
											"end": 8802,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 8789,
											"end": 8807,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 8781,
											"end": 8807,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 8781,
											"end": 8807,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 8853,
											"end": 8862,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 8847,
											"end": 8851,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 8843,
											"end": 8863,
											"name": "SUB",
											"source": 20
										},
										{
											"begin": 8839,
											"end": 8840,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 8828,
											"end": 8837,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 8824,
											"end": 8841,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 8817,
											"end": 8864,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 8881,
											"end": 9012,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "347"
										},
										{
											"begin": 9007,
											"end": 9011,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 8881,
											"end": 9012,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "226"
										},
										{
											"begin": 8881,
											"end": 9012,
											"name": "JUMP",
											"source": 20,
											"value": "[in]"
										},
										{
											"begin": 8881,
											"end": 9012,
											"name": "tag",
											"source": 20,
											"value": "347"
										},
										{
											"begin": 8881,
											"end": 9012,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 8873,
											"end": 9012,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 8873,
											"end": 9012,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 8600,
											"end": 9019,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 8600,
											"end": 9019,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 8600,
											"end": 9019,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 8600,
											"end": 9019,
											"name": "JUMP",
											"source": 20,
											"value": "[out]"
										},
										{
											"begin": 9025,
											"end": 9250,
											"name": "tag",
											"source": 20,
											"value": "227"
										},
										{
											"begin": 9025,
											"end": 9250,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 9165,
											"end": 9199,
											"name": "PUSH",
											"source": 20,
											"value": "416464726573733A20696E73756666696369656E742062616C616E636520666F"
										},
										{
											"begin": 9161,
											"end": 9162,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 9153,
											"end": 9159,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 9149,
											"end": 9163,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 9142,
											"end": 9200,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 9234,
											"end": 9242,
											"name": "PUSH",
											"source": 20,
											"value": "722063616C6C0000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 9229,
											"end": 9231,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 9221,
											"end": 9227,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 9217,
											"end": 9232,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 9210,
											"end": 9243,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 9025,
											"end": 9250,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 9025,
											"end": 9250,
											"name": "JUMP",
											"source": 20,
											"value": "[out]"
										},
										{
											"begin": 9256,
											"end": 9622,
											"name": "tag",
											"source": 20,
											"value": "228"
										},
										{
											"begin": 9256,
											"end": 9622,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 9398,
											"end": 9401,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 9419,
											"end": 9486,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "350"
										},
										{
											"begin": 9483,
											"end": 9485,
											"name": "PUSH",
											"source": 20,
											"value": "26"
										},
										{
											"begin": 9478,
											"end": 9481,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 9419,
											"end": 9486,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "224"
										},
										{
											"begin": 9419,
											"end": 9486,
											"name": "JUMP",
											"source": 20,
											"value": "[in]"
										},
										{
											"begin": 9419,
											"end": 9486,
											"name": "tag",
											"source": 20,
											"value": "350"
										},
										{
											"begin": 9419,
											"end": 9486,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 9412,
											"end": 9486,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 9412,
											"end": 9486,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 9495,
											"end": 9588,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "351"
										},
										{
											"begin": 9584,
											"end": 9587,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 9495,
											"end": 9588,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "227"
										},
										{
											"begin": 9495,
											"end": 9588,
											"name": "JUMP",
											"source": 20,
											"value": "[in]"
										},
										{
											"begin": 9495,
											"end": 9588,
											"name": "tag",
											"source": 20,
											"value": "351"
										},
										{
											"begin": 9495,
											"end": 9588,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 9613,
											"end": 9615,
											"name": "PUSH",
											"source": 20,
											"value": "40"
										},
										{
											"begin": 9608,
											"end": 9611,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 9604,
											"end": 9616,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 9597,
											"end": 9616,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 9597,
											"end": 9616,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 9256,
											"end": 9622,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 9256,
											"end": 9622,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 9256,
											"end": 9622,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 9256,
											"end": 9622,
											"name": "JUMP",
											"source": 20,
											"value": "[out]"
										},
										{
											"begin": 9628,
											"end": 10047,
											"name": "tag",
											"source": 20,
											"value": "175"
										},
										{
											"begin": 9628,
											"end": 10047,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 9794,
											"end": 9798,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 9832,
											"end": 9834,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 9821,
											"end": 9830,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 9817,
											"end": 9835,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 9809,
											"end": 9835,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 9809,
											"end": 9835,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 9881,
											"end": 9890,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 9875,
											"end": 9879,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 9871,
											"end": 9891,
											"name": "SUB",
											"source": 20
										},
										{
											"begin": 9867,
											"end": 9868,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 9856,
											"end": 9865,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 9852,
											"end": 9869,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 9845,
											"end": 9892,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 9909,
											"end": 10040,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "353"
										},
										{
											"begin": 10035,
											"end": 10039,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 9909,
											"end": 10040,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "228"
										},
										{
											"begin": 9909,
											"end": 10040,
											"name": "JUMP",
											"source": 20,
											"value": "[in]"
										},
										{
											"begin": 9909,
											"end": 10040,
											"name": "tag",
											"source": 20,
											"value": "353"
										},
										{
											"begin": 9909,
											"end": 10040,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 9901,
											"end": 10040,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 9901,
											"end": 10040,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 9628,
											"end": 10047,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 9628,
											"end": 10047,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 9628,
											"end": 10047,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 9628,
											"end": 10047,
											"name": "JUMP",
											"source": 20,
											"value": "[out]"
										},
										{
											"begin": 10053,
											"end": 10151,
											"name": "tag",
											"source": 20,
											"value": "229"
										},
										{
											"begin": 10053,
											"end": 10151,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 10104,
											"end": 10110,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 10138,
											"end": 10143,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 10132,
											"end": 10144,
											"name": "MLOAD",
											"source": 20
										},
										{
											"begin": 10122,
											"end": 10144,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 10122,
											"end": 10144,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 10053,
											"end": 10151,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 10053,
											"end": 10151,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 10053,
											"end": 10151,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 10053,
											"end": 10151,
											"name": "JUMP",
											"source": 20,
											"value": "[out]"
										},
										{
											"begin": 10157,
											"end": 10304,
											"name": "tag",
											"source": 20,
											"value": "230"
										},
										{
											"begin": 10157,
											"end": 10304,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 10258,
											"end": 10269,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 10295,
											"end": 10298,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 10280,
											"end": 10298,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 10280,
											"end": 10298,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 10157,
											"end": 10304,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 10157,
											"end": 10304,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 10157,
											"end": 10304,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 10157,
											"end": 10304,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 10157,
											"end": 10304,
											"name": "JUMP",
											"source": 20,
											"value": "[out]"
										},
										{
											"begin": 10310,
											"end": 10617,
											"name": "tag",
											"source": 20,
											"value": "231"
										},
										{
											"begin": 10310,
											"end": 10617,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 10378,
											"end": 10379,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 10388,
											"end": 10501,
											"name": "tag",
											"source": 20,
											"value": "357"
										},
										{
											"begin": 10388,
											"end": 10501,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 10402,
											"end": 10408,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 10399,
											"end": 10400,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 10396,
											"end": 10409,
											"name": "LT",
											"source": 20
										},
										{
											"begin": 10388,
											"end": 10501,
											"name": "ISZERO",
											"source": 20
										},
										{
											"begin": 10388,
											"end": 10501,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "359"
										},
										{
											"begin": 10388,
											"end": 10501,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 10487,
											"end": 10488,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 10482,
											"end": 10485,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 10478,
											"end": 10489,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 10472,
											"end": 10490,
											"name": "MLOAD",
											"source": 20
										},
										{
											"begin": 10468,
											"end": 10469,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 10463,
											"end": 10466,
											"name": "DUP5",
											"source": 20
										},
										{
											"begin": 10459,
											"end": 10470,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 10452,
											"end": 10491,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 10424,
											"end": 10426,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 10421,
											"end": 10422,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 10417,
											"end": 10427,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 10412,
											"end": 10427,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 10412,
											"end": 10427,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 10388,
											"end": 10501,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "357"
										},
										{
											"begin": 10388,
											"end": 10501,
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 10388,
											"end": 10501,
											"name": "tag",
											"source": 20,
											"value": "359"
										},
										{
											"begin": 10388,
											"end": 10501,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 10519,
											"end": 10525,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 10516,
											"end": 10517,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 10513,
											"end": 10526,
											"name": "GT",
											"source": 20
										},
										{
											"begin": 10510,
											"end": 10611,
											"name": "ISZERO",
											"source": 20
										},
										{
											"begin": 10510,
											"end": 10611,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "360"
										},
										{
											"begin": 10510,
											"end": 10611,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 10599,
											"end": 10600,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 10590,
											"end": 10596,
											"name": "DUP5",
											"source": 20
										},
										{
											"begin": 10585,
											"end": 10588,
											"name": "DUP5",
											"source": 20
										},
										{
											"begin": 10581,
											"end": 10597,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 10574,
											"end": 10601,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 10510,
											"end": 10611,
											"name": "tag",
											"source": 20,
											"value": "360"
										},
										{
											"begin": 10510,
											"end": 10611,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 10359,
											"end": 10617,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 10310,
											"end": 10617,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 10310,
											"end": 10617,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 10310,
											"end": 10617,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 10310,
											"end": 10617,
											"name": "JUMP",
											"source": 20,
											"value": "[out]"
										},
										{
											"begin": 10623,
											"end": 10996,
											"name": "tag",
											"source": 20,
											"value": "232"
										},
										{
											"begin": 10623,
											"end": 10996,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 10727,
											"end": 10730,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 10755,
											"end": 10793,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "362"
										},
										{
											"begin": 10787,
											"end": 10792,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 10755,
											"end": 10793,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "229"
										},
										{
											"begin": 10755,
											"end": 10793,
											"name": "JUMP",
											"source": 20,
											"value": "[in]"
										},
										{
											"begin": 10755,
											"end": 10793,
											"name": "tag",
											"source": 20,
											"value": "362"
										},
										{
											"begin": 10755,
											"end": 10793,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 10809,
											"end": 10897,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "363"
										},
										{
											"begin": 10890,
											"end": 10896,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 10885,
											"end": 10888,
											"name": "DUP6",
											"source": 20
										},
										{
											"begin": 10809,
											"end": 10897,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "230"
										},
										{
											"begin": 10809,
											"end": 10897,
											"name": "JUMP",
											"source": 20,
											"value": "[in]"
										},
										{
											"begin": 10809,
											"end": 10897,
											"name": "tag",
											"source": 20,
											"value": "363"
										},
										{
											"begin": 10809,
											"end": 10897,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 10802,
											"end": 10897,
											"name": "SWAP4",
											"source": 20
										},
										{
											"begin": 10802,
											"end": 10897,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 10906,
											"end": 10958,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "364"
										},
										{
											"begin": 10951,
											"end": 10957,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 10946,
											"end": 10949,
											"name": "DUP6",
											"source": 20
										},
										{
											"begin": 10939,
											"end": 10943,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 10932,
											"end": 10937,
											"name": "DUP7",
											"source": 20
										},
										{
											"begin": 10928,
											"end": 10944,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 10906,
											"end": 10958,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "231"
										},
										{
											"begin": 10906,
											"end": 10958,
											"name": "JUMP",
											"source": 20,
											"value": "[in]"
										},
										{
											"begin": 10906,
											"end": 10958,
											"name": "tag",
											"source": 20,
											"value": "364"
										},
										{
											"begin": 10906,
											"end": 10958,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 10983,
											"end": 10989,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 10978,
											"end": 10981,
											"name": "DUP5",
											"source": 20
										},
										{
											"begin": 10974,
											"end": 10990,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 10967,
											"end": 10990,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 10967,
											"end": 10990,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 10731,
											"end": 10996,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 10623,
											"end": 10996,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 10623,
											"end": 10996,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 10623,
											"end": 10996,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 10623,
											"end": 10996,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 10623,
											"end": 10996,
											"name": "JUMP",
											"source": 20,
											"value": "[out]"
										},
										{
											"begin": 11002,
											"end": 11273,
											"name": "tag",
											"source": 20,
											"value": "177"
										},
										{
											"begin": 11002,
											"end": 11273,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 11132,
											"end": 11135,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 11154,
											"end": 11247,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "366"
										},
										{
											"begin": 11243,
											"end": 11246,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 11234,
											"end": 11240,
											"name": "DUP5",
											"source": 20
										},
										{
											"begin": 11154,
											"end": 11247,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "232"
										},
										{
											"begin": 11154,
											"end": 11247,
											"name": "JUMP",
											"source": 20,
											"value": "[in]"
										},
										{
											"begin": 11154,
											"end": 11247,
											"name": "tag",
											"source": 20,
											"value": "366"
										},
										{
											"begin": 11154,
											"end": 11247,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 11147,
											"end": 11247,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 11147,
											"end": 11247,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 11264,
											"end": 11267,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 11257,
											"end": 11267,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 11257,
											"end": 11267,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 11002,
											"end": 11273,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 11002,
											"end": 11273,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 11002,
											"end": 11273,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 11002,
											"end": 11273,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 11002,
											"end": 11273,
											"name": "JUMP",
											"source": 20,
											"value": "[out]"
										},
										{
											"begin": 11279,
											"end": 11458,
											"name": "tag",
											"source": 20,
											"value": "233"
										},
										{
											"begin": 11279,
											"end": 11458,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 11419,
											"end": 11450,
											"name": "PUSH",
											"source": 20,
											"value": "416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000"
										},
										{
											"begin": 11415,
											"end": 11416,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 11407,
											"end": 11413,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 11403,
											"end": 11417,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 11396,
											"end": 11451,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 11279,
											"end": 11458,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 11279,
											"end": 11458,
											"name": "JUMP",
											"source": 20,
											"value": "[out]"
										},
										{
											"begin": 11464,
											"end": 11830,
											"name": "tag",
											"source": 20,
											"value": "234"
										},
										{
											"begin": 11464,
											"end": 11830,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 11606,
											"end": 11609,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 11627,
											"end": 11694,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "369"
										},
										{
											"begin": 11691,
											"end": 11693,
											"name": "PUSH",
											"source": 20,
											"value": "1D"
										},
										{
											"begin": 11686,
											"end": 11689,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 11627,
											"end": 11694,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "224"
										},
										{
											"begin": 11627,
											"end": 11694,
											"name": "JUMP",
											"source": 20,
											"value": "[in]"
										},
										{
											"begin": 11627,
											"end": 11694,
											"name": "tag",
											"source": 20,
											"value": "369"
										},
										{
											"begin": 11627,
											"end": 11694,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 11620,
											"end": 11694,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 11620,
											"end": 11694,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 11703,
											"end": 11796,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "370"
										},
										{
											"begin": 11792,
											"end": 11795,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 11703,
											"end": 11796,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "233"
										},
										{
											"begin": 11703,
											"end": 11796,
											"name": "JUMP",
											"source": 20,
											"value": "[in]"
										},
										{
											"begin": 11703,
											"end": 11796,
											"name": "tag",
											"source": 20,
											"value": "370"
										},
										{
											"begin": 11703,
											"end": 11796,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 11821,
											"end": 11823,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 11816,
											"end": 11819,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 11812,
											"end": 11824,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 11805,
											"end": 11824,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 11805,
											"end": 11824,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 11464,
											"end": 11830,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 11464,
											"end": 11830,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 11464,
											"end": 11830,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 11464,
											"end": 11830,
											"name": "JUMP",
											"source": 20,
											"value": "[out]"
										},
										{
											"begin": 11836,
											"end": 12255,
											"name": "tag",
											"source": 20,
											"value": "190"
										},
										{
											"begin": 11836,
											"end": 12255,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 12002,
											"end": 12006,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 12040,
											"end": 12042,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 12029,
											"end": 12038,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 12025,
											"end": 12043,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 12017,
											"end": 12043,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 12017,
											"end": 12043,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 12089,
											"end": 12098,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 12083,
											"end": 12087,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 12079,
											"end": 12099,
											"name": "SUB",
											"source": 20
										},
										{
											"begin": 12075,
											"end": 12076,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 12064,
											"end": 12073,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 12060,
											"end": 12077,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 12053,
											"end": 12100,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 12117,
											"end": 12248,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "372"
										},
										{
											"begin": 12243,
											"end": 12247,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 12117,
											"end": 12248,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "234"
										},
										{
											"begin": 12117,
											"end": 12248,
											"name": "JUMP",
											"source": 20,
											"value": "[in]"
										},
										{
											"begin": 12117,
											"end": 12248,
											"name": "tag",
											"source": 20,
											"value": "372"
										},
										{
											"begin": 12117,
											"end": 12248,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 12109,
											"end": 12248,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 12109,
											"end": 12248,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 11836,
											"end": 12255,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 11836,
											"end": 12255,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 11836,
											"end": 12255,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 11836,
											"end": 12255,
											"name": "JUMP",
											"source": 20,
											"value": "[out]"
										},
										{
											"begin": 12261,
											"end": 12360,
											"name": "tag",
											"source": 20,
											"value": "235"
										},
										{
											"begin": 12261,
											"end": 12360,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 12313,
											"end": 12319,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 12347,
											"end": 12352,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 12341,
											"end": 12353,
											"name": "MLOAD",
											"source": 20
										},
										{
											"begin": 12331,
											"end": 12353,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 12331,
											"end": 12353,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 12261,
											"end": 12360,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 12261,
											"end": 12360,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 12261,
											"end": 12360,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 12261,
											"end": 12360,
											"name": "JUMP",
											"source": 20,
											"value": "[out]"
										},
										{
											"begin": 12366,
											"end": 12468,
											"name": "tag",
											"source": 20,
											"value": "236"
										},
										{
											"begin": 12366,
											"end": 12468,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 12407,
											"end": 12413,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 12458,
											"end": 12460,
											"name": "PUSH",
											"source": 20,
											"value": "1F"
										},
										{
											"begin": 12454,
											"end": 12461,
											"name": "NOT",
											"source": 20
										},
										{
											"begin": 12449,
											"end": 12451,
											"name": "PUSH",
											"source": 20,
											"value": "1F"
										},
										{
											"begin": 12442,
											"end": 12447,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 12438,
											"end": 12452,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 12434,
											"end": 12462,
											"name": "AND",
											"source": 20
										},
										{
											"begin": 12424,
											"end": 12462,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 12424,
											"end": 12462,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 12366,
											"end": 12468,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 12366,
											"end": 12468,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 12366,
											"end": 12468,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 12366,
											"end": 12468,
											"name": "JUMP",
											"source": 20,
											"value": "[out]"
										},
										{
											"begin": 12474,
											"end": 12838,
											"name": "tag",
											"source": 20,
											"value": "237"
										},
										{
											"begin": 12474,
											"end": 12838,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 12562,
											"end": 12565,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 12590,
											"end": 12629,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "376"
										},
										{
											"begin": 12623,
											"end": 12628,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 12590,
											"end": 12629,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "235"
										},
										{
											"begin": 12590,
											"end": 12629,
											"name": "JUMP",
											"source": 20,
											"value": "[in]"
										},
										{
											"begin": 12590,
											"end": 12629,
											"name": "tag",
											"source": 20,
											"value": "376"
										},
										{
											"begin": 12590,
											"end": 12629,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 12645,
											"end": 12716,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "377"
										},
										{
											"begin": 12709,
											"end": 12715,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 12704,
											"end": 12707,
											"name": "DUP6",
											"source": 20
										},
										{
											"begin": 12645,
											"end": 12716,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "224"
										},
										{
											"begin": 12645,
											"end": 12716,
											"name": "JUMP",
											"source": 20,
											"value": "[in]"
										},
										{
											"begin": 12645,
											"end": 12716,
											"name": "tag",
											"source": 20,
											"value": "377"
										},
										{
											"begin": 12645,
											"end": 12716,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 12638,
											"end": 12716,
											"name": "SWAP4",
											"source": 20
										},
										{
											"begin": 12638,
											"end": 12716,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 12725,
											"end": 12777,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "378"
										},
										{
											"begin": 12770,
											"end": 12776,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 12765,
											"end": 12768,
											"name": "DUP6",
											"source": 20
										},
										{
											"begin": 12758,
											"end": 12762,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 12751,
											"end": 12756,
											"name": "DUP7",
											"source": 20
										},
										{
											"begin": 12747,
											"end": 12763,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 12725,
											"end": 12777,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "231"
										},
										{
											"begin": 12725,
											"end": 12777,
											"name": "JUMP",
											"source": 20,
											"value": "[in]"
										},
										{
											"begin": 12725,
											"end": 12777,
											"name": "tag",
											"source": 20,
											"value": "378"
										},
										{
											"begin": 12725,
											"end": 12777,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 12802,
											"end": 12831,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "379"
										},
										{
											"begin": 12824,
											"end": 12830,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 12802,
											"end": 12831,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "236"
										},
										{
											"begin": 12802,
											"end": 12831,
											"name": "JUMP",
											"source": 20,
											"value": "[in]"
										},
										{
											"begin": 12802,
											"end": 12831,
											"name": "tag",
											"source": 20,
											"value": "379"
										},
										{
											"begin": 12802,
											"end": 12831,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 12797,
											"end": 12800,
											"name": "DUP5",
											"source": 20
										},
										{
											"begin": 12793,
											"end": 12832,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 12786,
											"end": 12832,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 12786,
											"end": 12832,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 12566,
											"end": 12838,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 12474,
											"end": 12838,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 12474,
											"end": 12838,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 12474,
											"end": 12838,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 12474,
											"end": 12838,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 12474,
											"end": 12838,
											"name": "JUMP",
											"source": 20,
											"value": "[out]"
										},
										{
											"begin": 12844,
											"end": 13157,
											"name": "tag",
											"source": 20,
											"value": "199"
										},
										{
											"begin": 12844,
											"end": 13157,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 12957,
											"end": 12961,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 12995,
											"end": 12997,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 12984,
											"end": 12993,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 12980,
											"end": 12998,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 12972,
											"end": 12998,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 12972,
											"end": 12998,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 13044,
											"end": 13053,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 13038,
											"end": 13042,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 13034,
											"end": 13054,
											"name": "SUB",
											"source": 20
										},
										{
											"begin": 13030,
											"end": 13031,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 13019,
											"end": 13028,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 13015,
											"end": 13032,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 13008,
											"end": 13055,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 13072,
											"end": 13150,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "381"
										},
										{
											"begin": 13145,
											"end": 13149,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 13136,
											"end": 13142,
											"name": "DUP5",
											"source": 20
										},
										{
											"begin": 13072,
											"end": 13150,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "237"
										},
										{
											"begin": 13072,
											"end": 13150,
											"name": "JUMP",
											"source": 20,
											"value": "[in]"
										},
										{
											"begin": 13072,
											"end": 13150,
											"name": "tag",
											"source": 20,
											"value": "381"
										},
										{
											"begin": 13072,
											"end": 13150,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 13064,
											"end": 13150,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 13064,
											"end": 13150,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 12844,
											"end": 13157,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 12844,
											"end": 13157,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 12844,
											"end": 13157,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 12844,
											"end": 13157,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 12844,
											"end": 13157,
											"name": "JUMP",
											"source": 20,
											"value": "[out]"
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"Sale(uint64)": "762e9d30",
							"buy(address,uint128,uint128)": "d14485a2",
							"buyerWithdrawAirdorp(uint64)": "c0102de4",
							"buyerWithdrawRefund(uint64)": "2895cb7b",
							"getPenal(uint128,uint128)": "98c50fdd",
							"injectFutureToken(uint64)": "25ac3a73",
							"solderWithdrawStable(uint64)": "77bcd8a6",
							"userIfWithdraw1(address,uint256)": "59de2f60",
							"userIfWithdraw2(address,uint256)": "df0905c6",
							"userIfWithdraw3(address,uint256)": "b8d7f980",
							"userIfWithdraw4(address,uint256)": "fc993ea8"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_airdropToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_clearingTime\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyInjectToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NorSolder\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotBuyer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInjectToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_id\",\"type\":\"uint64\"}],\"name\":\"Sale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_buyAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_buyPrice\",\"type\":\"uint128\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_id\",\"type\":\"uint64\"}],\"name\":\"buyerWithdrawAirdorp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_id\",\"type\":\"uint64\"}],\"name\":\"buyerWithdrawRefund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_soldPrice\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_soldAmount\",\"type\":\"uint128\"}],\"name\":\"getPenal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_id\",\"type\":\"uint64\"}],\"name\":\"injectFutureToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_id\",\"type\":\"uint64\"}],\"name\":\"solderWithdrawStable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userIfWithdraw1\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userIfWithdraw2\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userIfWithdraw3\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userIfWithdraw4\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TimeMarket.sol\":\"TimeMarket\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/TimeMarket.sol\":{\"keccak256\":\"0x906e8366c55b7d89ed49603b0f99f7fa45d4d691dfed9b35f5531e59f4f31838\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e9ab22df632f823cc7ca2ebf010b27b24e3a5bc1309b5f97ee7f66af95c59460\",\"dweb:/ipfs/QmZ2ay92qx7WKeYGev9yoCUwRXFEPdrENrRqv1JPWYfprf\"]},\"interfaces/IERC165.sol\":{\"keccak256\":\"0x7d622aae953af8cc0c42b642ea6bfefc4851d9da99ebf0c11c8a99e1b97dc7ff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ef936c54bf126d59024eaf04e4a15aa3527c52a27e160d5f93185cf2e47db5e8\",\"dweb:/ipfs/QmQS5yZTHRPGXyJbj1RX9JajLueqN3MTQ6SSvAG9iJQ4cV\"]},\"interfaces/IERC20.sol\":{\"keccak256\":\"0xa426add89e9b4785ddeeb07b4d9352b57de8b4cb314c8cb8f0d5898938bd8de9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://09852a830ad29d33cfdf74e7035853c68e43e1a8c242b25db9d656a074a54e6d\",\"dweb:/ipfs/QmeRSfQwWr3vyP2uJxnjybtPYLMiD17E51d4eMhXQh93R1\"]},\"interfaces/IERC20Permit.sol\":{\"keccak256\":\"0xc51a927b9d9ff62cf4c237f7f197827b90c460786c855c527007c02a94f23154\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d1107bf21355e8518d9fdcf1aa7052de7e5fc6d867d86d87b61b43667813cc1d\",\"dweb:/ipfs/QmZG3AQa61MLFWmovNyuzv3iCBPnFHGV7E7CimxLwpAwKt\"]},\"interfaces/IERC721.sol\":{\"keccak256\":\"0x49d5ef5ec866b921e61b9fd74a17160dc7f7396e2a58c3812fa4936ae7655899\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5675c27037dbd9a9d90cf650930c5ed95ee6c62bb8dfcacdc3872eab62ecf50d\",\"dweb:/ipfs/QmYmdBCaUZNiQjc4qnx4avKAWx7QXYiid1nwo76Zq7PdHn\"]},\"interfaces/IERC721Enumerable.sol\":{\"keccak256\":\"0x2928336d6b9bbc64be3a0969fadfc1e4d4b319497651d54851dcb919c1c50590\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://cf5a9f178df915738ce28563818060b15c62249653fa417d9cfde1b04516c31b\",\"dweb:/ipfs/QmfLqHXScsK1t8D2NCAVZa4j7niAqXHjxEHuG77HDUrSdt\"]},\"interfaces/IERC721Metadata.sol\":{\"keccak256\":\"0xd32870e2a6e19ded14c88a471733a51504aaec5e51b61be8f57469cc67440f2b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fe79f6298aa790c064e9aec4ded31cdb32d5de372b3fcda66035a9c6b3780331\",\"dweb:/ipfs/QmWvVNwdFao6264NR63yHgKH4LcYqYjJDq9SZ7GqKVRJFx\"]},\"interfaces/IERC721Receiver.sol\":{\"keccak256\":\"0xd669818e4d77be24bc391f00146315479826edff54e6791b92508bf7f4147791\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2ab4b52e2db524224473b3e62999634b2adf7d6e6fe00c34a6f57d562619a251\",\"dweb:/ipfs/QmaHFCwJtUDXoyLfV1KyDoFAAti1UgSqS8pQWZMFYZv2wu\"]},\"interfaces/IError.sol\":{\"keccak256\":\"0xeba0280837886bc9f46fea9c1a96b9a687e3f3e2d4646c5416a925d48d07b54c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://de9649f76e3bbf2896049207657ad98a181962e0ee8ca6dcaeb9317a002d5420\",\"dweb:/ipfs/QmdAadR7iwRtUgATLc3a3bgsqefxDWdadm9zQD7eP7GiiQ\"]},\"interfaces/ITimeStruct.sol\":{\"keccak256\":\"0x0afe849cb20e95bbad7d16aa2ea4d9b3b9cec028c3efeefa5fe8b34cc24f7e4b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://cf85a5b15f40309babd9526c684bf3c160716e1ed3a465da6c18dd57de883a07\",\"dweb:/ipfs/QmNYMhZPWaALPTvJbo21uyngnc2sP3JnfVRqLNCNXwGUAK\"]},\"interfaces/UniswapV3/IERC721Permit.sol\":{\"keccak256\":\"0xf64ceb2b37307fe3b391256ee5745ca4877adc339b56fe71ae9531d7f19be9aa\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://f2ab4e22a3cc4a36cf359f0eb37543a66849d864fa27eabc602f32aeae34667a\",\"dweb:/ipfs/QmU9xKeEre66suCJYxchbivZkGbGygw3jKP9daHKUaYMuN\"]},\"interfaces/UniswapV3/INonfungiblePositionManager.sol\":{\"keccak256\":\"0xf223d560260129efd7a8a794c2193ac1e645a49621ebbe3358a31b551aef8dea\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9aa85f6c28aca3fc982b4b93a753865913f435e8aa9d1d04bd51a8a9e052c1d2\",\"dweb:/ipfs/QmWmyTdJUsHH6VxwL9gooFQAeEMkE396cNgmDG3s6HJYdB\"]},\"interfaces/UniswapV3/IPeripheryImmutableState.sol\":{\"keccak256\":\"0x9d4a239b1324e9cb7ffa202088a2784a3d7c56ea7b47d3a12febec032305e245\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://726ee46aabe0655e684d9b344dcf0844bef491879bdc35499c9ba4c1d9fb75b1\",\"dweb:/ipfs/QmV96KM5eoC73ZdsQkLjw2WjNHk3cqnLtNRSWxAsebKusX\"]},\"interfaces/UniswapV3/IPeripheryPayments.sol\":{\"keccak256\":\"0xedc15d14a5be9ed30744f3f8c0a3e53c3d5478464091330ba9c8acc1ddf9fcb4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2b20d91bc3db69de801f8c8e6dd5b05aa42ebc73690fd9f13316e7bf71405641\",\"dweb:/ipfs/QmQX65rHNiJptDzxXX8bctavSHpYCYuPLoSriJaL2GYyDp\"]},\"interfaces/UniswapV3/IPoolInitializer.sol\":{\"keccak256\":\"0xa54fe96a33c55207b9cf3e4c4d727dc7e0212e645b2c767281b9a9026c2edaf3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d082f8a8e48919d6c920d91351fddc3fd509d0446b1f45f541fdcfa0942a9196\",\"dweb:/ipfs/QmRVaquMHr4mbGBADKii6F9K9mLTtDx7omn7pPaEXJTLMw\"]},\"libraries/Address.sol\":{\"keccak256\":\"0x0f4169fea1817f1228f6a2db5e764e2a86f357a9f42f83de1f157449bca0f1ad\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://244a3f17ec48680bfaadacf724e5b12030636dc8b3e59f01de1cf206f0802ad7\",\"dweb:/ipfs/QmZXNxyUx2vm7LjcwtNhwYyKgqVxmbMAM3cG5bricBmL1K\"]},\"libraries/PoolAddress.sol\":{\"keccak256\":\"0xda7193f15e5262d61ba1995c1523dda0c00fa89b6b930dee4178849fa7ff8506\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://02924be40064529f8cd7ea8e7f40ffeb8fb1e074d82be0603cf9ec2896f9310e\",\"dweb:/ipfs/QmTj3DLXF3ePVr4DcqhnqYj9vAJ9Ng98Pf3EFkG9LzTFuK\"]},\"libraries/SafeERC20.sol\":{\"keccak256\":\"0xe74183ce288c892718941897cf193167013ef062470ea7fc7f0e74c23521cdd1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://75be313f96388535ff46fc29a55ed358e24e887c5706ea595ef2ed95c1d58e03\",\"dweb:/ipfs/QmReMXbvdgk5wZtn3mrjsDGLKFzfbBxG6HJBELLsaAKXkS\"]},\"libraries/TimeFee.sol\":{\"keccak256\":\"0x263efba43eaec339f5385a6c25158219d00edce75157d7cd759f3032725fcc79\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bcb2fee6d1fa020c5a58f9de9dace4b0c09339c784b1b7888ef78ffd52faa7c0\",\"dweb:/ipfs/QmVjYwXXg8QyvTh1dyTWp41qjyrajaqyXuATtMJqN4SRF7\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 27,
								"contract": "contracts/TimeMarket.sol:TimeMarket",
								"label": "clearingTime",
								"offset": 0,
								"slot": "0",
								"type": "t_uint56"
							},
							{
								"astId": 29,
								"contract": "contracts/TimeMarket.sol:TimeMarket",
								"label": "id",
								"offset": 7,
								"slot": "0",
								"type": "t_uint64"
							},
							{
								"astId": 31,
								"contract": "contracts/TimeMarket.sol:TimeMarket",
								"label": "airdropToken",
								"offset": 0,
								"slot": "1",
								"type": "t_address"
							},
							{
								"astId": 55,
								"contract": "contracts/TimeMarket.sol:TimeMarket",
								"label": "_tradeMes",
								"offset": 0,
								"slot": "2",
								"type": "t_mapping(t_uint64,t_struct(tradeMes)1084_storage)"
							},
							{
								"astId": 61,
								"contract": "contracts/TimeMarket.sol:TimeMarket",
								"label": "ifInject",
								"offset": 0,
								"slot": "3",
								"type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
							},
							{
								"astId": 67,
								"contract": "contracts/TimeMarket.sol:TimeMarket",
								"label": "userIfWithdraw1",
								"offset": 0,
								"slot": "4",
								"type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
							},
							{
								"astId": 73,
								"contract": "contracts/TimeMarket.sol:TimeMarket",
								"label": "userIfWithdraw2",
								"offset": 0,
								"slot": "5",
								"type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
							},
							{
								"astId": 79,
								"contract": "contracts/TimeMarket.sol:TimeMarket",
								"label": "userIfWithdraw3",
								"offset": 0,
								"slot": "6",
								"type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
							},
							{
								"astId": 85,
								"contract": "contracts/TimeMarket.sol:TimeMarket",
								"label": "userIfWithdraw4",
								"offset": 0,
								"slot": "7",
								"type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(uint256 => bool))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_uint256,t_bool)"
							},
							"t_mapping(t_uint256,t_bool)": {
								"encoding": "mapping",
								"key": "t_uint256",
								"label": "mapping(uint256 => bool)",
								"numberOfBytes": "32",
								"value": "t_bool"
							},
							"t_mapping(t_uint64,t_struct(tradeMes)1084_storage)": {
								"encoding": "mapping",
								"key": "t_uint64",
								"label": "mapping(uint64 => struct ITimeStruct.tradeMes)",
								"numberOfBytes": "32",
								"value": "t_struct(tradeMes)1084_storage"
							},
							"t_struct(tradeMes)1084_storage": {
								"encoding": "inplace",
								"label": "struct ITimeStruct.tradeMes",
								"members": [
									{
										"astId": 1069,
										"contract": "contracts/TimeMarket.sol:TimeMarket",
										"label": "tradeState",
										"offset": 0,
										"slot": "0",
										"type": "t_uint8"
									},
									{
										"astId": 1071,
										"contract": "contracts/TimeMarket.sol:TimeMarket",
										"label": "tradeId",
										"offset": 1,
										"slot": "0",
										"type": "t_uint64"
									},
									{
										"astId": 1073,
										"contract": "contracts/TimeMarket.sol:TimeMarket",
										"label": "buyTime",
										"offset": 9,
										"slot": "0",
										"type": "t_uint56"
									},
									{
										"astId": 1075,
										"contract": "contracts/TimeMarket.sol:TimeMarket",
										"label": "buyTotalAmount",
										"offset": 16,
										"slot": "0",
										"type": "t_uint128"
									},
									{
										"astId": 1077,
										"contract": "contracts/TimeMarket.sol:TimeMarket",
										"label": "buyPrice",
										"offset": 0,
										"slot": "1",
										"type": "t_uint128"
									},
									{
										"astId": 1079,
										"contract": "contracts/TimeMarket.sol:TimeMarket",
										"label": "tokenAddress",
										"offset": 0,
										"slot": "2",
										"type": "t_address"
									},
									{
										"astId": 1081,
										"contract": "contracts/TimeMarket.sol:TimeMarket",
										"label": "buyerAddress",
										"offset": 0,
										"slot": "3",
										"type": "t_address"
									},
									{
										"astId": 1083,
										"contract": "contracts/TimeMarket.sol:TimeMarket",
										"label": "solderAddress",
										"offset": 0,
										"slot": "4",
										"type": "t_address"
									}
								],
								"numberOfBytes": "160"
							},
							"t_uint128": {
								"encoding": "inplace",
								"label": "uint128",
								"numberOfBytes": "16"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							},
							"t_uint56": {
								"encoding": "inplace",
								"label": "uint56",
								"numberOfBytes": "7"
							},
							"t_uint64": {
								"encoding": "inplace",
								"label": "uint64",
								"numberOfBytes": "8"
							},
							"t_uint8": {
								"encoding": "inplace",
								"label": "uint8",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"interfaces/IERC165.sol": {
				"IERC165": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.",
						"kind": "dev",
						"methods": {
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"supportsInterface(bytes4)": "01ffc9a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"interfaces/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"interfaces/IERC165.sol\":{\"keccak256\":\"0x7d622aae953af8cc0c42b642ea6bfefc4851d9da99ebf0c11c8a99e1b97dc7ff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ef936c54bf126d59024eaf04e4a15aa3527c52a27e160d5f93185cf2e47db5e8\",\"dweb:/ipfs/QmQS5yZTHRPGXyJbj1RX9JajLueqN3MTQ6SSvAG9iJQ4cV\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"interfaces/IERC20.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 standard as defined in the EIP.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"interfaces/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"interfaces/IERC20.sol\":{\"keccak256\":\"0xa426add89e9b4785ddeeb07b4d9352b57de8b4cb314c8cb8f0d5898938bd8de9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://09852a830ad29d33cfdf74e7035853c68e43e1a8c242b25db9d656a074a54e6d\",\"dweb:/ipfs/QmeRSfQwWr3vyP2uJxnjybtPYLMiD17E51d4eMhXQh93R1\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"interfaces/IERC20Permit.sol": {
				"IERC20Permit": {
					"abi": [
						{
							"inputs": [],
							"name": "DOMAIN_SEPARATOR",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "nonces",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "permit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all. ==== Security Considerations There are two important considerations concerning the use of `permit`. The first is that a valid permit signature expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be considered as an intention to spend the allowance in any specific way. The second is that because permits have built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be generally recommended is: ```solidity function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}     doThing(..., value); } function doThing(..., uint256 value) public {     token.safeTransferFrom(msg.sender, address(this), value);     ... } ``` Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also {SafeERC20-safeTransferFrom}). Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so contracts should have entry points that don't rely on permit.",
						"kind": "dev",
						"methods": {
							"DOMAIN_SEPARATOR()": {
								"details": "Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
							},
							"nonces(address)": {
								"details": "Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."
							},
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"DOMAIN_SEPARATOR()": "3644e515",
							"nonces(address)": "7ecebe00",
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "d505accf"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all. ==== Security Considerations There are two important considerations concerning the use of `permit`. The first is that a valid permit signature expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be considered as an intention to spend the allowance in any specific way. The second is that because permits have built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be generally recommended is: ```solidity function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}     doThing(..., value); } function doThing(..., uint256 value) public {     token.safeTransferFrom(msg.sender, address(this), value);     ... } ``` Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also {SafeERC20-safeTransferFrom}). Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so contracts should have entry points that don't rely on permit.\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"interfaces/IERC20Permit.sol\":\"IERC20Permit\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"interfaces/IERC20Permit.sol\":{\"keccak256\":\"0xc51a927b9d9ff62cf4c237f7f197827b90c460786c855c527007c02a94f23154\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d1107bf21355e8518d9fdcf1aa7052de7e5fc6d867d86d87b61b43667813cc1d\",\"dweb:/ipfs/QmZG3AQa61MLFWmovNyuzv3iCBPnFHGV7E7CimxLwpAwKt\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"interfaces/IERC721.sol": {
				"IERC721": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Required interface of an ERC721 compliant contract.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
							},
							"ApprovalForAll(address,address,bool)": {
								"details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `tokenId` token is transferred from `from` to `to`."
							}
						},
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Required interface of an ERC721 compliant contract.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"interfaces/IERC721.sol\":\"IERC721\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"interfaces/IERC165.sol\":{\"keccak256\":\"0x7d622aae953af8cc0c42b642ea6bfefc4851d9da99ebf0c11c8a99e1b97dc7ff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ef936c54bf126d59024eaf04e4a15aa3527c52a27e160d5f93185cf2e47db5e8\",\"dweb:/ipfs/QmQS5yZTHRPGXyJbj1RX9JajLueqN3MTQ6SSvAG9iJQ4cV\"]},\"interfaces/IERC721.sol\":{\"keccak256\":\"0x49d5ef5ec866b921e61b9fd74a17160dc7f7396e2a58c3812fa4936ae7655899\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5675c27037dbd9a9d90cf650930c5ed95ee6c62bb8dfcacdc3872eab62ecf50d\",\"dweb:/ipfs/QmYmdBCaUZNiQjc4qnx4avKAWx7QXYiid1nwo76Zq7PdHn\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"interfaces/IERC721Enumerable.sol": {
				"IERC721Enumerable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "index",
									"type": "uint256"
								}
							],
							"name": "tokenByIndex",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "index",
									"type": "uint256"
								}
							],
							"name": "tokenOfOwnerByIndex",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "See https://eips.ethereum.org/EIPS/eip-721",
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"tokenByIndex(uint256)": {
								"details": "Returns a token ID at a given `index` of all the tokens stored by the contract. Use along with {totalSupply} to enumerate all tokens."
							},
							"tokenOfOwnerByIndex(address,uint256)": {
								"details": "Returns a token ID owned by `owner` at a given `index` of its token list. Use along with {balanceOf} to enumerate all of ``owner``'s tokens."
							},
							"totalSupply()": {
								"details": "Returns the total amount of tokens stored by the contract."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"title": "ERC-721 Non-Fungible Token Standard, optional enumeration extension",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"tokenByIndex(uint256)": "4f6ccce7",
							"tokenOfOwnerByIndex(address,uint256)": "2f745c59",
							"totalSupply()": "18160ddd",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"tokenByIndex(uint256)\":{\"details\":\"Returns a token ID at a given `index` of all the tokens stored by the contract. Use along with {totalSupply} to enumerate all tokens.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"Returns a token ID owned by `owner` at a given `index` of its token list. Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\"},\"totalSupply()\":{\"details\":\"Returns the total amount of tokens stored by the contract.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"title\":\"ERC-721 Non-Fungible Token Standard, optional enumeration extension\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"interfaces/IERC721Enumerable.sol\":\"IERC721Enumerable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"interfaces/IERC165.sol\":{\"keccak256\":\"0x7d622aae953af8cc0c42b642ea6bfefc4851d9da99ebf0c11c8a99e1b97dc7ff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ef936c54bf126d59024eaf04e4a15aa3527c52a27e160d5f93185cf2e47db5e8\",\"dweb:/ipfs/QmQS5yZTHRPGXyJbj1RX9JajLueqN3MTQ6SSvAG9iJQ4cV\"]},\"interfaces/IERC721.sol\":{\"keccak256\":\"0x49d5ef5ec866b921e61b9fd74a17160dc7f7396e2a58c3812fa4936ae7655899\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5675c27037dbd9a9d90cf650930c5ed95ee6c62bb8dfcacdc3872eab62ecf50d\",\"dweb:/ipfs/QmYmdBCaUZNiQjc4qnx4avKAWx7QXYiid1nwo76Zq7PdHn\"]},\"interfaces/IERC721Enumerable.sol\":{\"keccak256\":\"0x2928336d6b9bbc64be3a0969fadfc1e4d4b319497651d54851dcb919c1c50590\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://cf5a9f178df915738ce28563818060b15c62249653fa417d9cfde1b04516c31b\",\"dweb:/ipfs/QmfLqHXScsK1t8D2NCAVZa4j7niAqXHjxEHuG77HDUrSdt\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"interfaces/IERC721Metadata.sol": {
				"IERC721Metadata": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "tokenURI",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "See https://eips.ethereum.org/EIPS/eip-721",
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"name()": {
								"details": "Returns the token collection name."
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"symbol()": {
								"details": "Returns the token collection symbol."
							},
							"tokenURI(uint256)": {
								"details": "Returns the Uniform Resource Identifier (URI) for `tokenId` token."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"title": "ERC-721 Non-Fungible Token Standard, optional metadata extension",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"name()": "06fdde03",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"symbol()": "95d89b41",
							"tokenURI(uint256)": "c87b56dd",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"title\":\"ERC-721 Non-Fungible Token Standard, optional metadata extension\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"interfaces/IERC721Metadata.sol\":\"IERC721Metadata\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"interfaces/IERC165.sol\":{\"keccak256\":\"0x7d622aae953af8cc0c42b642ea6bfefc4851d9da99ebf0c11c8a99e1b97dc7ff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ef936c54bf126d59024eaf04e4a15aa3527c52a27e160d5f93185cf2e47db5e8\",\"dweb:/ipfs/QmQS5yZTHRPGXyJbj1RX9JajLueqN3MTQ6SSvAG9iJQ4cV\"]},\"interfaces/IERC721.sol\":{\"keccak256\":\"0x49d5ef5ec866b921e61b9fd74a17160dc7f7396e2a58c3812fa4936ae7655899\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5675c27037dbd9a9d90cf650930c5ed95ee6c62bb8dfcacdc3872eab62ecf50d\",\"dweb:/ipfs/QmYmdBCaUZNiQjc4qnx4avKAWx7QXYiid1nwo76Zq7PdHn\"]},\"interfaces/IERC721Metadata.sol\":{\"keccak256\":\"0xd32870e2a6e19ded14c88a471733a51504aaec5e51b61be8f57469cc67440f2b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fe79f6298aa790c064e9aec4ded31cdb32d5de372b3fcda66035a9c6b3780331\",\"dweb:/ipfs/QmWvVNwdFao6264NR63yHgKH4LcYqYjJDq9SZ7GqKVRJFx\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"interfaces/IERC721Receiver.sol": {
				"IERC721Receiver": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "onERC721Received",
							"outputs": [
								{
									"internalType": "bytes4",
									"name": "",
									"type": "bytes4"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.",
						"kind": "dev",
						"methods": {
							"onERC721Received(address,address,uint256,bytes)": {
								"details": "Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`."
							}
						},
						"title": "ERC721 token receiver interface",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"onERC721Received(address,address,uint256,bytes)": "150b7a02"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.\",\"kind\":\"dev\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\"}},\"title\":\"ERC721 token receiver interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"interfaces/IERC721Receiver.sol\":\"IERC721Receiver\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"interfaces/IERC721Receiver.sol\":{\"keccak256\":\"0xd669818e4d77be24bc391f00146315479826edff54e6791b92508bf7f4147791\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2ab4b52e2db524224473b3e62999634b2adf7d6e6fe00c34a6f57d562619a251\",\"dweb:/ipfs/QmaHFCwJtUDXoyLfV1KyDoFAAti1UgSqS8pQWZMFYZv2wu\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"interfaces/IError.sol": {
				"IError": {
					"abi": [
						{
							"inputs": [],
							"name": "AlreadyInjectToken",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "NorSolder",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "NotBuyer",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "NotEnoughAmount",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "NotInjectToken",
							"type": "error"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AlreadyInjectToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NorSolder\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotBuyer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInjectToken\",\"type\":\"error\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"interfaces/IError.sol\":\"IError\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"interfaces/IError.sol\":{\"keccak256\":\"0xeba0280837886bc9f46fea9c1a96b9a687e3f3e2d4646c5416a925d48d07b54c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://de9649f76e3bbf2896049207657ad98a181962e0ee8ca6dcaeb9317a002d5420\",\"dweb:/ipfs/QmdAadR7iwRtUgATLc3a3bgsqefxDWdadm9zQD7eP7GiiQ\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"interfaces/ITimeStruct.sol": {
				"ITimeStruct": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"interfaces/ITimeStruct.sol\":\"ITimeStruct\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"interfaces/ITimeStruct.sol\":{\"keccak256\":\"0x0afe849cb20e95bbad7d16aa2ea4d9b3b9cec028c3efeefa5fe8b34cc24f7e4b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://cf85a5b15f40309babd9526c684bf3c160716e1ed3a465da6c18dd57de883a07\",\"dweb:/ipfs/QmNYMhZPWaALPTvJbo21uyngnc2sP3JnfVRqLNCNXwGUAK\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"interfaces/UniswapV3/IERC721Permit.sol": {
				"IERC721Permit": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "DOMAIN_SEPARATOR",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "PERMIT_TYPEHASH",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "permit",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"DOMAIN_SEPARATOR()": {
								"returns": {
									"_0": "The domain seperator used in encoding of permit signature"
								}
							},
							"PERMIT_TYPEHASH()": {
								"returns": {
									"_0": "The typehash for the permit"
								}
							},
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"permit(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"params": {
									"deadline": "The deadline timestamp by which the call must be mined for the approve to work",
									"r": "Must produce valid secp256k1 signature from the holder along with `v` and `s`",
									"s": "Must produce valid secp256k1 signature from the holder along with `r` and `v`",
									"spender": "The account that is being approved",
									"tokenId": "The ID of the token that is being approved for spending",
									"v": "Must produce valid secp256k1 signature from the holder along with `r` and `s`"
								}
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"title": "ERC721 with permit",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"DOMAIN_SEPARATOR()": "3644e515",
							"PERMIT_TYPEHASH()": "30adf81f",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"ownerOf(uint256)": "6352211e",
							"permit(address,uint256,uint256,uint8,bytes32,bytes32)": "7ac2ff7b",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"returns\":{\"_0\":\"The domain seperator used in encoding of permit signature\"}},\"PERMIT_TYPEHASH()\":{\"returns\":{\"_0\":\"The typehash for the permit\"}},\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"permit(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"deadline\":\"The deadline timestamp by which the call must be mined for the approve to work\",\"r\":\"Must produce valid secp256k1 signature from the holder along with `v` and `s`\",\"s\":\"Must produce valid secp256k1 signature from the holder along with `r` and `v`\",\"spender\":\"The account that is being approved\",\"tokenId\":\"The ID of the token that is being approved for spending\",\"v\":\"Must produce valid secp256k1 signature from the holder along with `r` and `s`\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"title\":\"ERC721 with permit\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"notice\":\"The domain separator used in the permit signature\"},\"PERMIT_TYPEHASH()\":{\"notice\":\"The permit typehash used in the permit signature\"},\"permit(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Approve of a specific token ID for spending by spender via signature\"}},\"notice\":\"Extension to ERC721 that includes a permit function for signature based approvals\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"interfaces/UniswapV3/IERC721Permit.sol\":\"IERC721Permit\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"interfaces/IERC165.sol\":{\"keccak256\":\"0x7d622aae953af8cc0c42b642ea6bfefc4851d9da99ebf0c11c8a99e1b97dc7ff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ef936c54bf126d59024eaf04e4a15aa3527c52a27e160d5f93185cf2e47db5e8\",\"dweb:/ipfs/QmQS5yZTHRPGXyJbj1RX9JajLueqN3MTQ6SSvAG9iJQ4cV\"]},\"interfaces/IERC721.sol\":{\"keccak256\":\"0x49d5ef5ec866b921e61b9fd74a17160dc7f7396e2a58c3812fa4936ae7655899\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5675c27037dbd9a9d90cf650930c5ed95ee6c62bb8dfcacdc3872eab62ecf50d\",\"dweb:/ipfs/QmYmdBCaUZNiQjc4qnx4avKAWx7QXYiid1nwo76Zq7PdHn\"]},\"interfaces/UniswapV3/IERC721Permit.sol\":{\"keccak256\":\"0xf64ceb2b37307fe3b391256ee5745ca4877adc339b56fe71ae9531d7f19be9aa\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://f2ab4e22a3cc4a36cf359f0eb37543a66849d864fa27eabc602f32aeae34667a\",\"dweb:/ipfs/QmU9xKeEre66suCJYxchbivZkGbGygw3jKP9daHKUaYMuN\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"DOMAIN_SEPARATOR()": {
								"notice": "The domain separator used in the permit signature"
							},
							"PERMIT_TYPEHASH()": {
								"notice": "The permit typehash used in the permit signature"
							},
							"permit(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"notice": "Approve of a specific token ID for spending by spender via signature"
							}
						},
						"notice": "Extension to ERC721 that includes a permit function for signature based approvals",
						"version": 1
					}
				}
			},
			"interfaces/UniswapV3/INonfungiblePositionManager.sol": {
				"INonfungiblePositionManager": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"name": "Collect",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "liquidity",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"name": "DecreaseLiquidity",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "liquidity",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"name": "IncreaseLiquidity",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "DOMAIN_SEPARATOR",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "PERMIT_TYPEHASH",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "WETH9",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "burn",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "tokenId",
											"type": "uint256"
										},
										{
											"internalType": "address",
											"name": "recipient",
											"type": "address"
										},
										{
											"internalType": "uint128",
											"name": "amount0Max",
											"type": "uint128"
										},
										{
											"internalType": "uint128",
											"name": "amount1Max",
											"type": "uint128"
										}
									],
									"internalType": "struct INonfungiblePositionManager.CollectParams",
									"name": "params",
									"type": "tuple"
								}
							],
							"name": "collect",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token0",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "token1",
									"type": "address"
								},
								{
									"internalType": "uint24",
									"name": "fee",
									"type": "uint24"
								},
								{
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								}
							],
							"name": "createAndInitializePoolIfNecessary",
							"outputs": [
								{
									"internalType": "address",
									"name": "pool",
									"type": "address"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "tokenId",
											"type": "uint256"
										},
										{
											"internalType": "uint128",
											"name": "liquidity",
											"type": "uint128"
										},
										{
											"internalType": "uint256",
											"name": "amount0Min",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amount1Min",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "deadline",
											"type": "uint256"
										}
									],
									"internalType": "struct INonfungiblePositionManager.DecreaseLiquidityParams",
									"name": "params",
									"type": "tuple"
								}
							],
							"name": "decreaseLiquidity",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "factory",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "tokenId",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amount0Desired",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amount1Desired",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amount0Min",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amount1Min",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "deadline",
											"type": "uint256"
										}
									],
									"internalType": "struct INonfungiblePositionManager.IncreaseLiquidityParams",
									"name": "params",
									"type": "tuple"
								}
							],
							"name": "increaseLiquidity",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "liquidity",
									"type": "uint128"
								},
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "token0",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "token1",
											"type": "address"
										},
										{
											"internalType": "uint24",
											"name": "fee",
											"type": "uint24"
										},
										{
											"internalType": "int24",
											"name": "tickLower",
											"type": "int24"
										},
										{
											"internalType": "int24",
											"name": "tickUpper",
											"type": "int24"
										},
										{
											"internalType": "uint256",
											"name": "amount0Desired",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amount1Desired",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amount0Min",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amount1Min",
											"type": "uint256"
										},
										{
											"internalType": "address",
											"name": "recipient",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "deadline",
											"type": "uint256"
										}
									],
									"internalType": "struct INonfungiblePositionManager.MintParams",
									"name": "params",
									"type": "tuple"
								}
							],
							"name": "mint",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "uint128",
									"name": "liquidity",
									"type": "uint128"
								},
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "permit",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "positions",
							"outputs": [
								{
									"internalType": "uint96",
									"name": "nonce",
									"type": "uint96"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "token0",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "token1",
									"type": "address"
								},
								{
									"internalType": "uint24",
									"name": "fee",
									"type": "uint24"
								},
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "liquidity",
									"type": "uint128"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthInside0LastX128",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthInside1LastX128",
									"type": "uint256"
								},
								{
									"internalType": "uint128",
									"name": "tokensOwed0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "tokensOwed1",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "refundETH",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amountMinimum",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								}
							],
							"name": "sweepToken",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "index",
									"type": "uint256"
								}
							],
							"name": "tokenByIndex",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "index",
									"type": "uint256"
								}
							],
							"name": "tokenOfOwnerByIndex",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "tokenURI",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amountMinimum",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								}
							],
							"name": "unwrapWETH9",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						}
					],
					"devdoc": {
						"events": {
							"Collect(uint256,address,uint256,uint256)": {
								"details": "The amounts reported may not be exactly equivalent to the amounts transferred, due to rounding behavior",
								"params": {
									"amount0": "The amount of token0 owed to the position that was collected",
									"amount1": "The amount of token1 owed to the position that was collected",
									"recipient": "The address of the account that received the collected tokens",
									"tokenId": "The ID of the token for which underlying tokens were collected"
								}
							},
							"DecreaseLiquidity(uint256,uint128,uint256,uint256)": {
								"params": {
									"amount0": "The amount of token0 that was accounted for the decrease in liquidity",
									"amount1": "The amount of token1 that was accounted for the decrease in liquidity",
									"liquidity": "The amount by which liquidity for the NFT position was decreased",
									"tokenId": "The ID of the token for which liquidity was decreased"
								}
							},
							"IncreaseLiquidity(uint256,uint128,uint256,uint256)": {
								"details": "Also emitted when a token is minted",
								"params": {
									"amount0": "The amount of token0 that was paid for the increase in liquidity",
									"amount1": "The amount of token1 that was paid for the increase in liquidity",
									"liquidity": "The amount by which liquidity for the NFT position was increased",
									"tokenId": "The ID of the token for which liquidity was increased"
								}
							}
						},
						"kind": "dev",
						"methods": {
							"DOMAIN_SEPARATOR()": {
								"returns": {
									"_0": "The domain seperator used in encoding of permit signature"
								}
							},
							"PERMIT_TYPEHASH()": {
								"returns": {
									"_0": "The typehash for the permit"
								}
							},
							"WETH9()": {
								"returns": {
									"_0": "Returns the address of WETH9"
								}
							},
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"burn(uint256)": {
								"params": {
									"tokenId": "The ID of the token that is being burned"
								}
							},
							"collect((uint256,address,uint128,uint128))": {
								"params": {
									"params": "tokenId The ID of the NFT for which tokens are being collected, recipient The account that should receive the tokens, amount0Max The maximum amount of token0 to collect, amount1Max The maximum amount of token1 to collect"
								},
								"returns": {
									"amount0": "The amount of fees collected in token0",
									"amount1": "The amount of fees collected in token1"
								}
							},
							"createAndInitializePoolIfNecessary(address,address,uint24,uint160)": {
								"details": "This method can be bundled with others via IMulticall for the first action (e.g. mint) performed against a pool",
								"params": {
									"fee": "The fee amount of the v3 pool for the specified token pair",
									"sqrtPriceX96": "The initial square root price of the pool as a Q64.96 value",
									"token0": "The contract address of token0 of the pool",
									"token1": "The contract address of token1 of the pool"
								},
								"returns": {
									"pool": "Returns the pool address based on the pair of tokens and fee, will return the newly created pool address if necessary"
								}
							},
							"decreaseLiquidity((uint256,uint128,uint256,uint256,uint256))": {
								"params": {
									"params": "tokenId The ID of the token for which liquidity is being decreased, amount The amount by which liquidity will be decreased, amount0Min The minimum amount of token0 that should be accounted for the burned liquidity, amount1Min The minimum amount of token1 that should be accounted for the burned liquidity, deadline The time by which the transaction must be included to effect the change"
								},
								"returns": {
									"amount0": "The amount of token0 accounted to the position's tokens owed",
									"amount1": "The amount of token1 accounted to the position's tokens owed"
								}
							},
							"factory()": {
								"returns": {
									"_0": "Returns the address of the Uniswap V3 factory"
								}
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"increaseLiquidity((uint256,uint256,uint256,uint256,uint256,uint256))": {
								"params": {
									"params": "tokenId The ID of the token for which liquidity is being increased, amount0Desired The desired amount of token0 to be spent, amount1Desired The desired amount of token1 to be spent, amount0Min The minimum amount of token0 to spend, which serves as a slippage check, amount1Min The minimum amount of token1 to spend, which serves as a slippage check, deadline The time by which the transaction must be included to effect the change"
								},
								"returns": {
									"amount0": "The amount of token0 to acheive resulting liquidity",
									"amount1": "The amount of token1 to acheive resulting liquidity",
									"liquidity": "The new liquidity amount as a result of the increase"
								}
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"mint((address,address,uint24,int24,int24,uint256,uint256,uint256,uint256,address,uint256))": {
								"details": "Call this when the pool does exist and is initialized. Note that if the pool is created but not initialized a method does not exist, i.e. the pool is assumed to be initialized.",
								"params": {
									"params": "The params necessary to mint a position, encoded as `MintParams` in calldata"
								},
								"returns": {
									"amount0": "The amount of token0",
									"amount1": "The amount of token1",
									"liquidity": "The amount of liquidity for this position",
									"tokenId": "The ID of the token that represents the minted position"
								}
							},
							"name()": {
								"details": "Returns the token collection name."
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"permit(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"params": {
									"deadline": "The deadline timestamp by which the call must be mined for the approve to work",
									"r": "Must produce valid secp256k1 signature from the holder along with `v` and `s`",
									"s": "Must produce valid secp256k1 signature from the holder along with `r` and `v`",
									"spender": "The account that is being approved",
									"tokenId": "The ID of the token that is being approved for spending",
									"v": "Must produce valid secp256k1 signature from the holder along with `r` and `s`"
								}
							},
							"positions(uint256)": {
								"details": "Throws if the token ID is not valid.",
								"params": {
									"tokenId": "The ID of the token that represents the position"
								},
								"returns": {
									"fee": "The fee associated with the pool",
									"feeGrowthInside0LastX128": "The fee growth of token0 as of the last action on the individual position",
									"feeGrowthInside1LastX128": "The fee growth of token1 as of the last action on the individual position",
									"liquidity": "The liquidity of the position",
									"nonce": "The nonce for permits",
									"operator": "The address that is approved for spending",
									"tickLower": "The lower end of the tick range for the position",
									"tickUpper": "The higher end of the tick range for the position",
									"token0": "The address of the token0 for a specific pool",
									"token1": "The address of the token1 for a specific pool",
									"tokensOwed0": "The uncollected amount of token0 owed to the position as of the last computation",
									"tokensOwed1": "The uncollected amount of token1 owed to the position as of the last computation"
								}
							},
							"refundETH()": {
								"details": "Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps that use ether for the input amount"
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"sweepToken(address,uint256,address)": {
								"details": "The amountMinimum parameter prevents malicious contracts from stealing the token from users",
								"params": {
									"amountMinimum": "The minimum amount of token required for a transfer",
									"recipient": "The destination address of the token",
									"token": "The contract address of the token which will be transferred to `recipient`"
								}
							},
							"symbol()": {
								"details": "Returns the token collection symbol."
							},
							"tokenByIndex(uint256)": {
								"details": "Returns a token ID at a given `index` of all the tokens stored by the contract. Use along with {totalSupply} to enumerate all tokens."
							},
							"tokenOfOwnerByIndex(address,uint256)": {
								"details": "Returns a token ID owned by `owner` at a given `index` of its token list. Use along with {balanceOf} to enumerate all of ``owner``'s tokens."
							},
							"tokenURI(uint256)": {
								"details": "Returns the Uniform Resource Identifier (URI) for `tokenId` token."
							},
							"totalSupply()": {
								"details": "Returns the total amount of tokens stored by the contract."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							},
							"unwrapWETH9(uint256,address)": {
								"details": "The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.",
								"params": {
									"amountMinimum": "The minimum amount of WETH9 to unwrap",
									"recipient": "The address receiving ETH"
								}
							}
						},
						"title": "Non-fungible token for positions",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"DOMAIN_SEPARATOR()": "3644e515",
							"PERMIT_TYPEHASH()": "30adf81f",
							"WETH9()": "4aa4a4fc",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"burn(uint256)": "42966c68",
							"collect((uint256,address,uint128,uint128))": "fc6f7865",
							"createAndInitializePoolIfNecessary(address,address,uint24,uint160)": "13ead562",
							"decreaseLiquidity((uint256,uint128,uint256,uint256,uint256))": "0c49ccbe",
							"factory()": "c45a0155",
							"getApproved(uint256)": "081812fc",
							"increaseLiquidity((uint256,uint256,uint256,uint256,uint256,uint256))": "219f5d17",
							"isApprovedForAll(address,address)": "e985e9c5",
							"mint((address,address,uint24,int24,int24,uint256,uint256,uint256,uint256,address,uint256))": "88316456",
							"name()": "06fdde03",
							"ownerOf(uint256)": "6352211e",
							"permit(address,uint256,uint256,uint8,bytes32,bytes32)": "7ac2ff7b",
							"positions(uint256)": "99fbab88",
							"refundETH()": "12210e8a",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"sweepToken(address,uint256,address)": "df2ab5bb",
							"symbol()": "95d89b41",
							"tokenByIndex(uint256)": "4f6ccce7",
							"tokenOfOwnerByIndex(address,uint256)": "2f745c59",
							"tokenURI(uint256)": "c87b56dd",
							"totalSupply()": "18160ddd",
							"transferFrom(address,address,uint256)": "23b872dd",
							"unwrapWETH9(uint256,address)": "49404b7c"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Collect\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"DecreaseLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"IncreaseLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH9\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amount0Max\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1Max\",\"type\":\"uint128\"}],\"internalType\":\"struct INonfungiblePositionManager.CollectParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"collect\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"}],\"name\":\"createAndInitializePoolIfNecessary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"amount0Min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct INonfungiblePositionManager.DecreaseLiquidityParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"decreaseLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount0Desired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Desired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount0Min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct INonfungiblePositionManager.IncreaseLiquidityParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"increaseLiquidity\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint256\",\"name\":\"amount0Desired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Desired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount0Min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Min\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct INonfungiblePositionManager.MintParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"positions\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"nonce\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside0LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside1LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed1\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refundETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountMinimum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"sweepToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountMinimum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"unwrapWETH9\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Collect(uint256,address,uint256,uint256)\":{\"details\":\"The amounts reported may not be exactly equivalent to the amounts transferred, due to rounding behavior\",\"params\":{\"amount0\":\"The amount of token0 owed to the position that was collected\",\"amount1\":\"The amount of token1 owed to the position that was collected\",\"recipient\":\"The address of the account that received the collected tokens\",\"tokenId\":\"The ID of the token for which underlying tokens were collected\"}},\"DecreaseLiquidity(uint256,uint128,uint256,uint256)\":{\"params\":{\"amount0\":\"The amount of token0 that was accounted for the decrease in liquidity\",\"amount1\":\"The amount of token1 that was accounted for the decrease in liquidity\",\"liquidity\":\"The amount by which liquidity for the NFT position was decreased\",\"tokenId\":\"The ID of the token for which liquidity was decreased\"}},\"IncreaseLiquidity(uint256,uint128,uint256,uint256)\":{\"details\":\"Also emitted when a token is minted\",\"params\":{\"amount0\":\"The amount of token0 that was paid for the increase in liquidity\",\"amount1\":\"The amount of token1 that was paid for the increase in liquidity\",\"liquidity\":\"The amount by which liquidity for the NFT position was increased\",\"tokenId\":\"The ID of the token for which liquidity was increased\"}}},\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"returns\":{\"_0\":\"The domain seperator used in encoding of permit signature\"}},\"PERMIT_TYPEHASH()\":{\"returns\":{\"_0\":\"The typehash for the permit\"}},\"WETH9()\":{\"returns\":{\"_0\":\"Returns the address of WETH9\"}},\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"burn(uint256)\":{\"params\":{\"tokenId\":\"The ID of the token that is being burned\"}},\"collect((uint256,address,uint128,uint128))\":{\"params\":{\"params\":\"tokenId The ID of the NFT for which tokens are being collected, recipient The account that should receive the tokens, amount0Max The maximum amount of token0 to collect, amount1Max The maximum amount of token1 to collect\"},\"returns\":{\"amount0\":\"The amount of fees collected in token0\",\"amount1\":\"The amount of fees collected in token1\"}},\"createAndInitializePoolIfNecessary(address,address,uint24,uint160)\":{\"details\":\"This method can be bundled with others via IMulticall for the first action (e.g. mint) performed against a pool\",\"params\":{\"fee\":\"The fee amount of the v3 pool for the specified token pair\",\"sqrtPriceX96\":\"The initial square root price of the pool as a Q64.96 value\",\"token0\":\"The contract address of token0 of the pool\",\"token1\":\"The contract address of token1 of the pool\"},\"returns\":{\"pool\":\"Returns the pool address based on the pair of tokens and fee, will return the newly created pool address if necessary\"}},\"decreaseLiquidity((uint256,uint128,uint256,uint256,uint256))\":{\"params\":{\"params\":\"tokenId The ID of the token for which liquidity is being decreased, amount The amount by which liquidity will be decreased, amount0Min The minimum amount of token0 that should be accounted for the burned liquidity, amount1Min The minimum amount of token1 that should be accounted for the burned liquidity, deadline The time by which the transaction must be included to effect the change\"},\"returns\":{\"amount0\":\"The amount of token0 accounted to the position's tokens owed\",\"amount1\":\"The amount of token1 accounted to the position's tokens owed\"}},\"factory()\":{\"returns\":{\"_0\":\"Returns the address of the Uniswap V3 factory\"}},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"increaseLiquidity((uint256,uint256,uint256,uint256,uint256,uint256))\":{\"params\":{\"params\":\"tokenId The ID of the token for which liquidity is being increased, amount0Desired The desired amount of token0 to be spent, amount1Desired The desired amount of token1 to be spent, amount0Min The minimum amount of token0 to spend, which serves as a slippage check, amount1Min The minimum amount of token1 to spend, which serves as a slippage check, deadline The time by which the transaction must be included to effect the change\"},\"returns\":{\"amount0\":\"The amount of token0 to acheive resulting liquidity\",\"amount1\":\"The amount of token1 to acheive resulting liquidity\",\"liquidity\":\"The new liquidity amount as a result of the increase\"}},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"mint((address,address,uint24,int24,int24,uint256,uint256,uint256,uint256,address,uint256))\":{\"details\":\"Call this when the pool does exist and is initialized. Note that if the pool is created but not initialized a method does not exist, i.e. the pool is assumed to be initialized.\",\"params\":{\"params\":\"The params necessary to mint a position, encoded as `MintParams` in calldata\"},\"returns\":{\"amount0\":\"The amount of token0\",\"amount1\":\"The amount of token1\",\"liquidity\":\"The amount of liquidity for this position\",\"tokenId\":\"The ID of the token that represents the minted position\"}},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"permit(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"deadline\":\"The deadline timestamp by which the call must be mined for the approve to work\",\"r\":\"Must produce valid secp256k1 signature from the holder along with `v` and `s`\",\"s\":\"Must produce valid secp256k1 signature from the holder along with `r` and `v`\",\"spender\":\"The account that is being approved\",\"tokenId\":\"The ID of the token that is being approved for spending\",\"v\":\"Must produce valid secp256k1 signature from the holder along with `r` and `s`\"}},\"positions(uint256)\":{\"details\":\"Throws if the token ID is not valid.\",\"params\":{\"tokenId\":\"The ID of the token that represents the position\"},\"returns\":{\"fee\":\"The fee associated with the pool\",\"feeGrowthInside0LastX128\":\"The fee growth of token0 as of the last action on the individual position\",\"feeGrowthInside1LastX128\":\"The fee growth of token1 as of the last action on the individual position\",\"liquidity\":\"The liquidity of the position\",\"nonce\":\"The nonce for permits\",\"operator\":\"The address that is approved for spending\",\"tickLower\":\"The lower end of the tick range for the position\",\"tickUpper\":\"The higher end of the tick range for the position\",\"token0\":\"The address of the token0 for a specific pool\",\"token1\":\"The address of the token1 for a specific pool\",\"tokensOwed0\":\"The uncollected amount of token0 owed to the position as of the last computation\",\"tokensOwed1\":\"The uncollected amount of token1 owed to the position as of the last computation\"}},\"refundETH()\":{\"details\":\"Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps that use ether for the input amount\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"sweepToken(address,uint256,address)\":{\"details\":\"The amountMinimum parameter prevents malicious contracts from stealing the token from users\",\"params\":{\"amountMinimum\":\"The minimum amount of token required for a transfer\",\"recipient\":\"The destination address of the token\",\"token\":\"The contract address of the token which will be transferred to `recipient`\"}},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenByIndex(uint256)\":{\"details\":\"Returns a token ID at a given `index` of all the tokens stored by the contract. Use along with {totalSupply} to enumerate all tokens.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"Returns a token ID owned by `owner` at a given `index` of its token list. Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"totalSupply()\":{\"details\":\"Returns the total amount of tokens stored by the contract.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"},\"unwrapWETH9(uint256,address)\":{\"details\":\"The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\",\"params\":{\"amountMinimum\":\"The minimum amount of WETH9 to unwrap\",\"recipient\":\"The address receiving ETH\"}}},\"title\":\"Non-fungible token for positions\",\"version\":1},\"userdoc\":{\"events\":{\"Collect(uint256,address,uint256,uint256)\":{\"notice\":\"Emitted when tokens are collected for a position NFT\"},\"DecreaseLiquidity(uint256,uint128,uint256,uint256)\":{\"notice\":\"Emitted when liquidity is decreased for a position NFT\"},\"IncreaseLiquidity(uint256,uint128,uint256,uint256)\":{\"notice\":\"Emitted when liquidity is increased for a position NFT\"}},\"kind\":\"user\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"notice\":\"The domain separator used in the permit signature\"},\"PERMIT_TYPEHASH()\":{\"notice\":\"The permit typehash used in the permit signature\"},\"burn(uint256)\":{\"notice\":\"Burns a token ID, which deletes it from the NFT contract. The token must have 0 liquidity and all tokens must be collected first.\"},\"collect((uint256,address,uint128,uint128))\":{\"notice\":\"Collects up to a maximum amount of fees owed to a specific position to the recipient\"},\"createAndInitializePoolIfNecessary(address,address,uint24,uint160)\":{\"notice\":\"Creates a new pool if it does not exist, then initializes if not initialized\"},\"decreaseLiquidity((uint256,uint128,uint256,uint256,uint256))\":{\"notice\":\"Decreases the amount of liquidity in a position and accounts it to the position\"},\"increaseLiquidity((uint256,uint256,uint256,uint256,uint256,uint256))\":{\"notice\":\"Increases the amount of liquidity in a position, with tokens paid by the `msg.sender`\"},\"mint((address,address,uint24,int24,int24,uint256,uint256,uint256,uint256,address,uint256))\":{\"notice\":\"Creates a new position wrapped in a NFT\"},\"permit(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Approve of a specific token ID for spending by spender via signature\"},\"positions(uint256)\":{\"notice\":\"Returns the position information associated with a given token ID.\"},\"refundETH()\":{\"notice\":\"Refunds any ETH balance held by this contract to the `msg.sender`\"},\"sweepToken(address,uint256,address)\":{\"notice\":\"Transfers the full amount of a token held by this contract to recipient\"},\"unwrapWETH9(uint256,address)\":{\"notice\":\"Unwraps the contract's WETH9 balance and sends it to recipient as ETH.\"}},\"notice\":\"Wraps Uniswap V3 positions in a non-fungible token interface which allows for them to be transferred and authorized.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"interfaces/UniswapV3/INonfungiblePositionManager.sol\":\"INonfungiblePositionManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"interfaces/IERC165.sol\":{\"keccak256\":\"0x7d622aae953af8cc0c42b642ea6bfefc4851d9da99ebf0c11c8a99e1b97dc7ff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ef936c54bf126d59024eaf04e4a15aa3527c52a27e160d5f93185cf2e47db5e8\",\"dweb:/ipfs/QmQS5yZTHRPGXyJbj1RX9JajLueqN3MTQ6SSvAG9iJQ4cV\"]},\"interfaces/IERC721.sol\":{\"keccak256\":\"0x49d5ef5ec866b921e61b9fd74a17160dc7f7396e2a58c3812fa4936ae7655899\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5675c27037dbd9a9d90cf650930c5ed95ee6c62bb8dfcacdc3872eab62ecf50d\",\"dweb:/ipfs/QmYmdBCaUZNiQjc4qnx4avKAWx7QXYiid1nwo76Zq7PdHn\"]},\"interfaces/IERC721Enumerable.sol\":{\"keccak256\":\"0x2928336d6b9bbc64be3a0969fadfc1e4d4b319497651d54851dcb919c1c50590\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://cf5a9f178df915738ce28563818060b15c62249653fa417d9cfde1b04516c31b\",\"dweb:/ipfs/QmfLqHXScsK1t8D2NCAVZa4j7niAqXHjxEHuG77HDUrSdt\"]},\"interfaces/IERC721Metadata.sol\":{\"keccak256\":\"0xd32870e2a6e19ded14c88a471733a51504aaec5e51b61be8f57469cc67440f2b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fe79f6298aa790c064e9aec4ded31cdb32d5de372b3fcda66035a9c6b3780331\",\"dweb:/ipfs/QmWvVNwdFao6264NR63yHgKH4LcYqYjJDq9SZ7GqKVRJFx\"]},\"interfaces/UniswapV3/IERC721Permit.sol\":{\"keccak256\":\"0xf64ceb2b37307fe3b391256ee5745ca4877adc339b56fe71ae9531d7f19be9aa\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://f2ab4e22a3cc4a36cf359f0eb37543a66849d864fa27eabc602f32aeae34667a\",\"dweb:/ipfs/QmU9xKeEre66suCJYxchbivZkGbGygw3jKP9daHKUaYMuN\"]},\"interfaces/UniswapV3/INonfungiblePositionManager.sol\":{\"keccak256\":\"0xf223d560260129efd7a8a794c2193ac1e645a49621ebbe3358a31b551aef8dea\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9aa85f6c28aca3fc982b4b93a753865913f435e8aa9d1d04bd51a8a9e052c1d2\",\"dweb:/ipfs/QmWmyTdJUsHH6VxwL9gooFQAeEMkE396cNgmDG3s6HJYdB\"]},\"interfaces/UniswapV3/IPeripheryImmutableState.sol\":{\"keccak256\":\"0x9d4a239b1324e9cb7ffa202088a2784a3d7c56ea7b47d3a12febec032305e245\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://726ee46aabe0655e684d9b344dcf0844bef491879bdc35499c9ba4c1d9fb75b1\",\"dweb:/ipfs/QmV96KM5eoC73ZdsQkLjw2WjNHk3cqnLtNRSWxAsebKusX\"]},\"interfaces/UniswapV3/IPeripheryPayments.sol\":{\"keccak256\":\"0xedc15d14a5be9ed30744f3f8c0a3e53c3d5478464091330ba9c8acc1ddf9fcb4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2b20d91bc3db69de801f8c8e6dd5b05aa42ebc73690fd9f13316e7bf71405641\",\"dweb:/ipfs/QmQX65rHNiJptDzxXX8bctavSHpYCYuPLoSriJaL2GYyDp\"]},\"interfaces/UniswapV3/IPoolInitializer.sol\":{\"keccak256\":\"0xa54fe96a33c55207b9cf3e4c4d727dc7e0212e645b2c767281b9a9026c2edaf3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d082f8a8e48919d6c920d91351fddc3fd509d0446b1f45f541fdcfa0942a9196\",\"dweb:/ipfs/QmRVaquMHr4mbGBADKii6F9K9mLTtDx7omn7pPaEXJTLMw\"]},\"libraries/PoolAddress.sol\":{\"keccak256\":\"0xda7193f15e5262d61ba1995c1523dda0c00fa89b6b930dee4178849fa7ff8506\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://02924be40064529f8cd7ea8e7f40ffeb8fb1e074d82be0603cf9ec2896f9310e\",\"dweb:/ipfs/QmTj3DLXF3ePVr4DcqhnqYj9vAJ9Ng98Pf3EFkG9LzTFuK\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"events": {
							"Collect(uint256,address,uint256,uint256)": {
								"notice": "Emitted when tokens are collected for a position NFT"
							},
							"DecreaseLiquidity(uint256,uint128,uint256,uint256)": {
								"notice": "Emitted when liquidity is decreased for a position NFT"
							},
							"IncreaseLiquidity(uint256,uint128,uint256,uint256)": {
								"notice": "Emitted when liquidity is increased for a position NFT"
							}
						},
						"kind": "user",
						"methods": {
							"DOMAIN_SEPARATOR()": {
								"notice": "The domain separator used in the permit signature"
							},
							"PERMIT_TYPEHASH()": {
								"notice": "The permit typehash used in the permit signature"
							},
							"burn(uint256)": {
								"notice": "Burns a token ID, which deletes it from the NFT contract. The token must have 0 liquidity and all tokens must be collected first."
							},
							"collect((uint256,address,uint128,uint128))": {
								"notice": "Collects up to a maximum amount of fees owed to a specific position to the recipient"
							},
							"createAndInitializePoolIfNecessary(address,address,uint24,uint160)": {
								"notice": "Creates a new pool if it does not exist, then initializes if not initialized"
							},
							"decreaseLiquidity((uint256,uint128,uint256,uint256,uint256))": {
								"notice": "Decreases the amount of liquidity in a position and accounts it to the position"
							},
							"increaseLiquidity((uint256,uint256,uint256,uint256,uint256,uint256))": {
								"notice": "Increases the amount of liquidity in a position, with tokens paid by the `msg.sender`"
							},
							"mint((address,address,uint24,int24,int24,uint256,uint256,uint256,uint256,address,uint256))": {
								"notice": "Creates a new position wrapped in a NFT"
							},
							"permit(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"notice": "Approve of a specific token ID for spending by spender via signature"
							},
							"positions(uint256)": {
								"notice": "Returns the position information associated with a given token ID."
							},
							"refundETH()": {
								"notice": "Refunds any ETH balance held by this contract to the `msg.sender`"
							},
							"sweepToken(address,uint256,address)": {
								"notice": "Transfers the full amount of a token held by this contract to recipient"
							},
							"unwrapWETH9(uint256,address)": {
								"notice": "Unwraps the contract's WETH9 balance and sends it to recipient as ETH."
							}
						},
						"notice": "Wraps Uniswap V3 positions in a non-fungible token interface which allows for them to be transferred and authorized.",
						"version": 1
					}
				}
			},
			"interfaces/UniswapV3/IPeripheryImmutableState.sol": {
				"IPeripheryImmutableState": {
					"abi": [
						{
							"inputs": [],
							"name": "WETH9",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "factory",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"WETH9()": {
								"returns": {
									"_0": "Returns the address of WETH9"
								}
							},
							"factory()": {
								"returns": {
									"_0": "Returns the address of the Uniswap V3 factory"
								}
							}
						},
						"title": "Immutable state",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"WETH9()": "4aa4a4fc",
							"factory()": "c45a0155"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"WETH9\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"WETH9()\":{\"returns\":{\"_0\":\"Returns the address of WETH9\"}},\"factory()\":{\"returns\":{\"_0\":\"Returns the address of the Uniswap V3 factory\"}}},\"title\":\"Immutable state\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Functions that return immutable state of the router\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"interfaces/UniswapV3/IPeripheryImmutableState.sol\":\"IPeripheryImmutableState\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"interfaces/UniswapV3/IPeripheryImmutableState.sol\":{\"keccak256\":\"0x9d4a239b1324e9cb7ffa202088a2784a3d7c56ea7b47d3a12febec032305e245\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://726ee46aabe0655e684d9b344dcf0844bef491879bdc35499c9ba4c1d9fb75b1\",\"dweb:/ipfs/QmV96KM5eoC73ZdsQkLjw2WjNHk3cqnLtNRSWxAsebKusX\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "Functions that return immutable state of the router",
						"version": 1
					}
				}
			},
			"interfaces/UniswapV3/IPeripheryPayments.sol": {
				"IPeripheryPayments": {
					"abi": [
						{
							"inputs": [],
							"name": "refundETH",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amountMinimum",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								}
							],
							"name": "sweepToken",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amountMinimum",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								}
							],
							"name": "unwrapWETH9",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"refundETH()": {
								"details": "Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps that use ether for the input amount"
							},
							"sweepToken(address,uint256,address)": {
								"details": "The amountMinimum parameter prevents malicious contracts from stealing the token from users",
								"params": {
									"amountMinimum": "The minimum amount of token required for a transfer",
									"recipient": "The destination address of the token",
									"token": "The contract address of the token which will be transferred to `recipient`"
								}
							},
							"unwrapWETH9(uint256,address)": {
								"details": "The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.",
								"params": {
									"amountMinimum": "The minimum amount of WETH9 to unwrap",
									"recipient": "The address receiving ETH"
								}
							}
						},
						"title": "Periphery Payments",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"refundETH()": "12210e8a",
							"sweepToken(address,uint256,address)": "df2ab5bb",
							"unwrapWETH9(uint256,address)": "49404b7c"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"refundETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountMinimum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"sweepToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountMinimum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"unwrapWETH9\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"refundETH()\":{\"details\":\"Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps that use ether for the input amount\"},\"sweepToken(address,uint256,address)\":{\"details\":\"The amountMinimum parameter prevents malicious contracts from stealing the token from users\",\"params\":{\"amountMinimum\":\"The minimum amount of token required for a transfer\",\"recipient\":\"The destination address of the token\",\"token\":\"The contract address of the token which will be transferred to `recipient`\"}},\"unwrapWETH9(uint256,address)\":{\"details\":\"The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\",\"params\":{\"amountMinimum\":\"The minimum amount of WETH9 to unwrap\",\"recipient\":\"The address receiving ETH\"}}},\"title\":\"Periphery Payments\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"refundETH()\":{\"notice\":\"Refunds any ETH balance held by this contract to the `msg.sender`\"},\"sweepToken(address,uint256,address)\":{\"notice\":\"Transfers the full amount of a token held by this contract to recipient\"},\"unwrapWETH9(uint256,address)\":{\"notice\":\"Unwraps the contract's WETH9 balance and sends it to recipient as ETH.\"}},\"notice\":\"Functions to ease deposits and withdrawals of ETH\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"interfaces/UniswapV3/IPeripheryPayments.sol\":\"IPeripheryPayments\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"interfaces/UniswapV3/IPeripheryPayments.sol\":{\"keccak256\":\"0xedc15d14a5be9ed30744f3f8c0a3e53c3d5478464091330ba9c8acc1ddf9fcb4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2b20d91bc3db69de801f8c8e6dd5b05aa42ebc73690fd9f13316e7bf71405641\",\"dweb:/ipfs/QmQX65rHNiJptDzxXX8bctavSHpYCYuPLoSriJaL2GYyDp\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"refundETH()": {
								"notice": "Refunds any ETH balance held by this contract to the `msg.sender`"
							},
							"sweepToken(address,uint256,address)": {
								"notice": "Transfers the full amount of a token held by this contract to recipient"
							},
							"unwrapWETH9(uint256,address)": {
								"notice": "Unwraps the contract's WETH9 balance and sends it to recipient as ETH."
							}
						},
						"notice": "Functions to ease deposits and withdrawals of ETH",
						"version": 1
					}
				}
			},
			"interfaces/UniswapV3/IPoolInitializer.sol": {
				"IPoolInitializer": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token0",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "token1",
									"type": "address"
								},
								{
									"internalType": "uint24",
									"name": "fee",
									"type": "uint24"
								},
								{
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								}
							],
							"name": "createAndInitializePoolIfNecessary",
							"outputs": [
								{
									"internalType": "address",
									"name": "pool",
									"type": "address"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"createAndInitializePoolIfNecessary(address,address,uint24,uint160)": {
								"details": "This method can be bundled with others via IMulticall for the first action (e.g. mint) performed against a pool",
								"params": {
									"fee": "The fee amount of the v3 pool for the specified token pair",
									"sqrtPriceX96": "The initial square root price of the pool as a Q64.96 value",
									"token0": "The contract address of token0 of the pool",
									"token1": "The contract address of token1 of the pool"
								},
								"returns": {
									"pool": "Returns the pool address based on the pair of tokens and fee, will return the newly created pool address if necessary"
								}
							}
						},
						"title": "Creates and initializes V3 Pools",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"createAndInitializePoolIfNecessary(address,address,uint24,uint160)": "13ead562"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"}],\"name\":\"createAndInitializePoolIfNecessary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"createAndInitializePoolIfNecessary(address,address,uint24,uint160)\":{\"details\":\"This method can be bundled with others via IMulticall for the first action (e.g. mint) performed against a pool\",\"params\":{\"fee\":\"The fee amount of the v3 pool for the specified token pair\",\"sqrtPriceX96\":\"The initial square root price of the pool as a Q64.96 value\",\"token0\":\"The contract address of token0 of the pool\",\"token1\":\"The contract address of token1 of the pool\"},\"returns\":{\"pool\":\"Returns the pool address based on the pair of tokens and fee, will return the newly created pool address if necessary\"}}},\"title\":\"Creates and initializes V3 Pools\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createAndInitializePoolIfNecessary(address,address,uint24,uint160)\":{\"notice\":\"Creates a new pool if it does not exist, then initializes if not initialized\"}},\"notice\":\"Provides a method for creating and initializing a pool, if necessary, for bundling with other methods that require the pool to exist.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"interfaces/UniswapV3/IPoolInitializer.sol\":\"IPoolInitializer\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"interfaces/UniswapV3/IPoolInitializer.sol\":{\"keccak256\":\"0xa54fe96a33c55207b9cf3e4c4d727dc7e0212e645b2c767281b9a9026c2edaf3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d082f8a8e48919d6c920d91351fddc3fd509d0446b1f45f541fdcfa0942a9196\",\"dweb:/ipfs/QmRVaquMHr4mbGBADKii6F9K9mLTtDx7omn7pPaEXJTLMw\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"createAndInitializePoolIfNecessary(address,address,uint24,uint160)": {
								"notice": "Creates a new pool if it does not exist, then initializes if not initialized"
							}
						},
						"notice": "Provides a method for creating and initializing a pool, if necessary, for bundling with other methods that require the pool to exist.",
						"version": 1
					}
				}
			},
			"libraries/Address.sol": {
				"Address": {
					"abi": [],
					"devdoc": {
						"details": "Collection of functions related to the address type",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"libraries/Address.sol\":203:9607  library Address {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"libraries/Address.sol\":203:9607  library Address {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa264697066735822122062904bdf8e832dde7d8c0407890cb164073063eaf4608ae345276dba0354bc8464736f6c63430008090033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122062904bdf8e832dde7d8c0407890cb164073063eaf4608ae345276dba0354bc8464736f6c63430008090033",
							"opcodes": "PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH3 0x904BDF DUP15 DUP4 0x2D 0xDE PUSH30 0x8C0407890CB164073063EAF4608AE345276DBA0354BC8464736F6C634300 ADDMOD MULMOD STOP CALLER ",
							"sourceMap": "203:9404:16:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122062904bdf8e832dde7d8c0407890cb164073063eaf4608ae345276dba0354bc8464736f6c63430008090033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH3 0x904BDF DUP15 DUP4 0x2D 0xDE PUSH30 0x8C0407890CB164073063EAF4608AE345276DBA0354BC8464736F6C634300 ADDMOD MULMOD STOP CALLER ",
							"sourceMap": "203:9404:16:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"_revert(bytes memory,string memory)": "infinite",
								"functionCall(address,bytes memory)": "infinite",
								"functionCall(address,bytes memory,string memory)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256,string memory)": "infinite",
								"functionDelegateCall(address,bytes memory)": "infinite",
								"functionDelegateCall(address,bytes memory,string memory)": "infinite",
								"functionStaticCall(address,bytes memory)": "infinite",
								"functionStaticCall(address,bytes memory,string memory)": "infinite",
								"isContract(address)": "infinite",
								"sendValue(address payable,uint256)": "infinite",
								"verifyCallResult(bool,bytes memory,string memory)": "infinite",
								"verifyCallResultFromTarget(address,bool,bytes memory,string memory)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 203,
									"end": 9607,
									"name": "PUSH #[$]",
									"source": 16,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 203,
									"end": 9607,
									"name": "PUSH [$]",
									"source": 16,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 203,
									"end": 9607,
									"name": "PUSH",
									"source": 16,
									"value": "B"
								},
								{
									"begin": 203,
									"end": 9607,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 203,
									"end": 9607,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 203,
									"end": 9607,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 203,
									"end": 9607,
									"name": "CODECOPY",
									"source": 16
								},
								{
									"begin": 203,
									"end": 9607,
									"name": "DUP1",
									"source": 16
								},
								{
									"begin": 203,
									"end": 9607,
									"name": "MLOAD",
									"source": 16
								},
								{
									"begin": 203,
									"end": 9607,
									"name": "PUSH",
									"source": 16,
									"value": "0"
								},
								{
									"begin": 203,
									"end": 9607,
									"name": "BYTE",
									"source": 16
								},
								{
									"begin": 203,
									"end": 9607,
									"name": "PUSH",
									"source": 16,
									"value": "73"
								},
								{
									"begin": 203,
									"end": 9607,
									"name": "EQ",
									"source": 16
								},
								{
									"begin": 203,
									"end": 9607,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "1"
								},
								{
									"begin": 203,
									"end": 9607,
									"name": "JUMPI",
									"source": 16
								},
								{
									"begin": 203,
									"end": 9607,
									"name": "PUSH",
									"source": 16,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 203,
									"end": 9607,
									"name": "PUSH",
									"source": 16,
									"value": "0"
								},
								{
									"begin": 203,
									"end": 9607,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 203,
									"end": 9607,
									"name": "PUSH",
									"source": 16,
									"value": "0"
								},
								{
									"begin": 203,
									"end": 9607,
									"name": "PUSH",
									"source": 16,
									"value": "4"
								},
								{
									"begin": 203,
									"end": 9607,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 203,
									"end": 9607,
									"name": "PUSH",
									"source": 16,
									"value": "24"
								},
								{
									"begin": 203,
									"end": 9607,
									"name": "PUSH",
									"source": 16,
									"value": "0"
								},
								{
									"begin": 203,
									"end": 9607,
									"name": "REVERT",
									"source": 16
								},
								{
									"begin": 203,
									"end": 9607,
									"name": "tag",
									"source": 16,
									"value": "1"
								},
								{
									"begin": 203,
									"end": 9607,
									"name": "JUMPDEST",
									"source": 16
								},
								{
									"begin": 203,
									"end": 9607,
									"name": "ADDRESS",
									"source": 16
								},
								{
									"begin": 203,
									"end": 9607,
									"name": "PUSH",
									"source": 16,
									"value": "0"
								},
								{
									"begin": 203,
									"end": 9607,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 203,
									"end": 9607,
									"name": "PUSH",
									"source": 16,
									"value": "73"
								},
								{
									"begin": 203,
									"end": 9607,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 203,
									"end": 9607,
									"name": "MSTORE8",
									"source": 16
								},
								{
									"begin": 203,
									"end": 9607,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 203,
									"end": 9607,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 203,
									"end": 9607,
									"name": "RETURN",
									"source": 16
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122062904bdf8e832dde7d8c0407890cb164073063eaf4608ae345276dba0354bc8464736f6c63430008090033",
									".code": [
										{
											"begin": 203,
											"end": 9607,
											"name": "PUSHDEPLOYADDRESS",
											"source": 16
										},
										{
											"begin": 203,
											"end": 9607,
											"name": "ADDRESS",
											"source": 16
										},
										{
											"begin": 203,
											"end": 9607,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 203,
											"end": 9607,
											"name": "PUSH",
											"source": 16,
											"value": "80"
										},
										{
											"begin": 203,
											"end": 9607,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 203,
											"end": 9607,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 203,
											"end": 9607,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 203,
											"end": 9607,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 203,
											"end": 9607,
											"name": "REVERT",
											"source": 16
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"libraries/Address.sol\":\"Address\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"libraries/Address.sol\":{\"keccak256\":\"0x0f4169fea1817f1228f6a2db5e764e2a86f357a9f42f83de1f157449bca0f1ad\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://244a3f17ec48680bfaadacf724e5b12030636dc8b3e59f01de1cf206f0802ad7\",\"dweb:/ipfs/QmZXNxyUx2vm7LjcwtNhwYyKgqVxmbMAM3cG5bricBmL1K\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"libraries/PoolAddress.sol": {
				"PoolAddress": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"title": "Provides functions for deriving a pool address from the factory, tokens, and the fee",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"libraries/PoolAddress.sol\":171:1863  library PoolAddress {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"libraries/PoolAddress.sol\":171:1863  library PoolAddress {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220d8bd0ecc1be15d637434f7a43b4df16822d3ad404c9e041a71ec3b7689f11c6464736f6c63430008090033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220d8bd0ecc1be15d637434f7a43b4df16822d3ad404c9e041a71ec3b7689f11c6464736f6c63430008090033",
							"opcodes": "PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD8 0xBD 0xE 0xCC SHL 0xE1 0x5D PUSH4 0x7434F7A4 EXTCODESIZE 0x4D CALL PUSH9 0x22D3AD404C9E041A71 0xEC EXTCODESIZE PUSH23 0x89F11C6464736F6C634300080900330000000000000000 ",
							"sourceMap": "171:1692:17:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220d8bd0ecc1be15d637434f7a43b4df16822d3ad404c9e041a71ec3b7689f11c6464736f6c63430008090033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD8 0xBD 0xE 0xCC SHL 0xE1 0x5D PUSH4 0x7434F7A4 EXTCODESIZE 0x4D CALL PUSH9 0x22D3AD404C9E041A71 0xEC EXTCODESIZE PUSH23 0x89F11C6464736F6C634300080900330000000000000000 ",
							"sourceMap": "171:1692:17:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"computeAddress(address,struct PoolAddress.PoolKey memory)": "infinite",
								"getPoolKey(address,address,uint24)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 171,
									"end": 1863,
									"name": "PUSH #[$]",
									"source": 17,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 171,
									"end": 1863,
									"name": "PUSH [$]",
									"source": 17,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 171,
									"end": 1863,
									"name": "PUSH",
									"source": 17,
									"value": "B"
								},
								{
									"begin": 171,
									"end": 1863,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 171,
									"end": 1863,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 171,
									"end": 1863,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 171,
									"end": 1863,
									"name": "CODECOPY",
									"source": 17
								},
								{
									"begin": 171,
									"end": 1863,
									"name": "DUP1",
									"source": 17
								},
								{
									"begin": 171,
									"end": 1863,
									"name": "MLOAD",
									"source": 17
								},
								{
									"begin": 171,
									"end": 1863,
									"name": "PUSH",
									"source": 17,
									"value": "0"
								},
								{
									"begin": 171,
									"end": 1863,
									"name": "BYTE",
									"source": 17
								},
								{
									"begin": 171,
									"end": 1863,
									"name": "PUSH",
									"source": 17,
									"value": "73"
								},
								{
									"begin": 171,
									"end": 1863,
									"name": "EQ",
									"source": 17
								},
								{
									"begin": 171,
									"end": 1863,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "1"
								},
								{
									"begin": 171,
									"end": 1863,
									"name": "JUMPI",
									"source": 17
								},
								{
									"begin": 171,
									"end": 1863,
									"name": "PUSH",
									"source": 17,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 171,
									"end": 1863,
									"name": "PUSH",
									"source": 17,
									"value": "0"
								},
								{
									"begin": 171,
									"end": 1863,
									"name": "MSTORE",
									"source": 17
								},
								{
									"begin": 171,
									"end": 1863,
									"name": "PUSH",
									"source": 17,
									"value": "0"
								},
								{
									"begin": 171,
									"end": 1863,
									"name": "PUSH",
									"source": 17,
									"value": "4"
								},
								{
									"begin": 171,
									"end": 1863,
									"name": "MSTORE",
									"source": 17
								},
								{
									"begin": 171,
									"end": 1863,
									"name": "PUSH",
									"source": 17,
									"value": "24"
								},
								{
									"begin": 171,
									"end": 1863,
									"name": "PUSH",
									"source": 17,
									"value": "0"
								},
								{
									"begin": 171,
									"end": 1863,
									"name": "REVERT",
									"source": 17
								},
								{
									"begin": 171,
									"end": 1863,
									"name": "tag",
									"source": 17,
									"value": "1"
								},
								{
									"begin": 171,
									"end": 1863,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 171,
									"end": 1863,
									"name": "ADDRESS",
									"source": 17
								},
								{
									"begin": 171,
									"end": 1863,
									"name": "PUSH",
									"source": 17,
									"value": "0"
								},
								{
									"begin": 171,
									"end": 1863,
									"name": "MSTORE",
									"source": 17
								},
								{
									"begin": 171,
									"end": 1863,
									"name": "PUSH",
									"source": 17,
									"value": "73"
								},
								{
									"begin": 171,
									"end": 1863,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 171,
									"end": 1863,
									"name": "MSTORE8",
									"source": 17
								},
								{
									"begin": 171,
									"end": 1863,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 171,
									"end": 1863,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 171,
									"end": 1863,
									"name": "RETURN",
									"source": 17
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220d8bd0ecc1be15d637434f7a43b4df16822d3ad404c9e041a71ec3b7689f11c6464736f6c63430008090033",
									".code": [
										{
											"begin": 171,
											"end": 1863,
											"name": "PUSHDEPLOYADDRESS",
											"source": 17
										},
										{
											"begin": 171,
											"end": 1863,
											"name": "ADDRESS",
											"source": 17
										},
										{
											"begin": 171,
											"end": 1863,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 171,
											"end": 1863,
											"name": "PUSH",
											"source": 17,
											"value": "80"
										},
										{
											"begin": 171,
											"end": 1863,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 171,
											"end": 1863,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 171,
											"end": 1863,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 171,
											"end": 1863,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 171,
											"end": 1863,
											"name": "REVERT",
											"source": 17
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"Provides functions for deriving a pool address from the factory, tokens, and the fee\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"libraries/PoolAddress.sol\":\"PoolAddress\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"libraries/PoolAddress.sol\":{\"keccak256\":\"0xda7193f15e5262d61ba1995c1523dda0c00fa89b6b930dee4178849fa7ff8506\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://02924be40064529f8cd7ea8e7f40ffeb8fb1e074d82be0603cf9ec2896f9310e\",\"dweb:/ipfs/QmTj3DLXF3ePVr4DcqhnqYj9vAJ9Ng98Pf3EFkG9LzTFuK\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"libraries/SafeERC20.sol": {
				"SafeERC20": {
					"abi": [],
					"devdoc": {
						"details": "Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.",
						"kind": "dev",
						"methods": {},
						"title": "SafeERC20",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"libraries/SafeERC20.sol\":778:7136  library SafeERC20 {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"libraries/SafeERC20.sol\":778:7136  library SafeERC20 {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa264697066735822122049299144de7617b3c95dc5b6c5b6ea7cc5e7c3a1d3349e2d04bb7f6e8415575064736f6c63430008090033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122049299144de7617b3c95dc5b6c5b6ea7cc5e7c3a1d3349e2d04bb7f6e8415575064736f6c63430008090033",
							"opcodes": "PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x49 0x29 SWAP2 DIFFICULTY 0xDE PUSH23 0x17B3C95DC5B6C5B6EA7CC5E7C3A1D3349E2D04BB7F6E84 ISZERO JUMPI POP PUSH5 0x736F6C6343 STOP ADDMOD MULMOD STOP CALLER ",
							"sourceMap": "778:6358:18:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122049299144de7617b3c95dc5b6c5b6ea7cc5e7c3a1d3349e2d04bb7f6e8415575064736f6c63430008090033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x49 0x29 SWAP2 DIFFICULTY 0xDE PUSH23 0x17B3C95DC5B6C5B6EA7CC5E7C3A1D3349E2D04BB7F6E84 ISZERO JUMPI POP PUSH5 0x736F6C6343 STOP ADDMOD MULMOD STOP CALLER ",
							"sourceMap": "778:6358:18:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"_callOptionalReturn(contract IERC20,bytes memory)": "infinite",
								"_callOptionalReturnBool(contract IERC20,bytes memory)": "infinite",
								"forceApprove(contract IERC20,address,uint256)": "infinite",
								"safeApprove(contract IERC20,address,uint256)": "infinite",
								"safeDecreaseAllowance(contract IERC20,address,uint256)": "infinite",
								"safeIncreaseAllowance(contract IERC20,address,uint256)": "infinite",
								"safePermit(contract IERC20Permit,address,address,uint256,uint256,uint8,bytes32,bytes32)": "infinite",
								"safeTransfer(contract IERC20,address,uint256)": "infinite",
								"safeTransferFrom(contract IERC20,address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 778,
									"end": 7136,
									"name": "PUSH #[$]",
									"source": 18,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 778,
									"end": 7136,
									"name": "PUSH [$]",
									"source": 18,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 778,
									"end": 7136,
									"name": "PUSH",
									"source": 18,
									"value": "B"
								},
								{
									"begin": 778,
									"end": 7136,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 778,
									"end": 7136,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 778,
									"end": 7136,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 778,
									"end": 7136,
									"name": "CODECOPY",
									"source": 18
								},
								{
									"begin": 778,
									"end": 7136,
									"name": "DUP1",
									"source": 18
								},
								{
									"begin": 778,
									"end": 7136,
									"name": "MLOAD",
									"source": 18
								},
								{
									"begin": 778,
									"end": 7136,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 778,
									"end": 7136,
									"name": "BYTE",
									"source": 18
								},
								{
									"begin": 778,
									"end": 7136,
									"name": "PUSH",
									"source": 18,
									"value": "73"
								},
								{
									"begin": 778,
									"end": 7136,
									"name": "EQ",
									"source": 18
								},
								{
									"begin": 778,
									"end": 7136,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "1"
								},
								{
									"begin": 778,
									"end": 7136,
									"name": "JUMPI",
									"source": 18
								},
								{
									"begin": 778,
									"end": 7136,
									"name": "PUSH",
									"source": 18,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 778,
									"end": 7136,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 778,
									"end": 7136,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 778,
									"end": 7136,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 778,
									"end": 7136,
									"name": "PUSH",
									"source": 18,
									"value": "4"
								},
								{
									"begin": 778,
									"end": 7136,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 778,
									"end": 7136,
									"name": "PUSH",
									"source": 18,
									"value": "24"
								},
								{
									"begin": 778,
									"end": 7136,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 778,
									"end": 7136,
									"name": "REVERT",
									"source": 18
								},
								{
									"begin": 778,
									"end": 7136,
									"name": "tag",
									"source": 18,
									"value": "1"
								},
								{
									"begin": 778,
									"end": 7136,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 778,
									"end": 7136,
									"name": "ADDRESS",
									"source": 18
								},
								{
									"begin": 778,
									"end": 7136,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 778,
									"end": 7136,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 778,
									"end": 7136,
									"name": "PUSH",
									"source": 18,
									"value": "73"
								},
								{
									"begin": 778,
									"end": 7136,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 778,
									"end": 7136,
									"name": "MSTORE8",
									"source": 18
								},
								{
									"begin": 778,
									"end": 7136,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 778,
									"end": 7136,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 778,
									"end": 7136,
									"name": "RETURN",
									"source": 18
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122049299144de7617b3c95dc5b6c5b6ea7cc5e7c3a1d3349e2d04bb7f6e8415575064736f6c63430008090033",
									".code": [
										{
											"begin": 778,
											"end": 7136,
											"name": "PUSHDEPLOYADDRESS",
											"source": 18
										},
										{
											"begin": 778,
											"end": 7136,
											"name": "ADDRESS",
											"source": 18
										},
										{
											"begin": 778,
											"end": 7136,
											"name": "EQ",
											"source": 18
										},
										{
											"begin": 778,
											"end": 7136,
											"name": "PUSH",
											"source": 18,
											"value": "80"
										},
										{
											"begin": 778,
											"end": 7136,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 778,
											"end": 7136,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 778,
											"end": 7136,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 778,
											"end": 7136,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 778,
											"end": 7136,
											"name": "REVERT",
											"source": 18
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"libraries/SafeERC20.sol\":\"SafeERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"interfaces/IERC20.sol\":{\"keccak256\":\"0xa426add89e9b4785ddeeb07b4d9352b57de8b4cb314c8cb8f0d5898938bd8de9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://09852a830ad29d33cfdf74e7035853c68e43e1a8c242b25db9d656a074a54e6d\",\"dweb:/ipfs/QmeRSfQwWr3vyP2uJxnjybtPYLMiD17E51d4eMhXQh93R1\"]},\"interfaces/IERC20Permit.sol\":{\"keccak256\":\"0xc51a927b9d9ff62cf4c237f7f197827b90c460786c855c527007c02a94f23154\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d1107bf21355e8518d9fdcf1aa7052de7e5fc6d867d86d87b61b43667813cc1d\",\"dweb:/ipfs/QmZG3AQa61MLFWmovNyuzv3iCBPnFHGV7E7CimxLwpAwKt\"]},\"libraries/Address.sol\":{\"keccak256\":\"0x0f4169fea1817f1228f6a2db5e764e2a86f357a9f42f83de1f157449bca0f1ad\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://244a3f17ec48680bfaadacf724e5b12030636dc8b3e59f01de1cf206f0802ad7\",\"dweb:/ipfs/QmZXNxyUx2vm7LjcwtNhwYyKgqVxmbMAM3cG5bricBmL1K\"]},\"libraries/SafeERC20.sol\":{\"keccak256\":\"0xe74183ce288c892718941897cf193167013ef062470ea7fc7f0e74c23521cdd1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://75be313f96388535ff46fc29a55ed358e24e887c5706ea595ef2ed95c1d58e03\",\"dweb:/ipfs/QmReMXbvdgk5wZtn3mrjsDGLKFzfbBxG6HJBELLsaAKXkS\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"libraries/TimeFee.sol": {
				"TimeFee": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"libraries/TimeFee.sol\":59:683  library TimeFee{... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"libraries/TimeFee.sol\":59:683  library TimeFee{... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa264697066735822122083b5eb5c3f49fdc8d1cb6521df06f1894c1feff30f0846ac85c0a8f15c3149a564736f6c63430008090033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122083b5eb5c3f49fdc8d1cb6521df06f1894c1feff30f0846ac85c0a8f15c3149a564736f6c63430008090033",
							"opcodes": "PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP4 0xB5 0xEB 0x5C EXTCODEHASH 0x49 REVERT 0xC8 0xD1 0xCB PUSH6 0x21DF06F1894C 0x1F 0xEF RETURN 0xF ADDMOD CHAINID 0xAC DUP6 0xC0 0xA8 CALL 0x5C BALANCE 0x49 0xA5 PUSH5 0x736F6C6343 STOP ADDMOD MULMOD STOP CALLER ",
							"sourceMap": "59:624:19:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122083b5eb5c3f49fdc8d1cb6521df06f1894c1feff30f0846ac85c0a8f15c3149a564736f6c63430008090033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP4 0xB5 0xEB 0x5C EXTCODEHASH 0x49 REVERT 0xC8 0xD1 0xCB PUSH6 0x21DF06F1894C 0x1F 0xEF RETURN 0xF ADDMOD CHAINID 0xAC DUP6 0xC0 0xA8 CALL 0x5C BALANCE 0x49 0xA5 PUSH5 0x736F6C6343 STOP ADDMOD MULMOD STOP CALLER ",
							"sourceMap": "59:624:19:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"fee(uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 59,
									"end": 683,
									"name": "PUSH #[$]",
									"source": 19,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 59,
									"end": 683,
									"name": "PUSH [$]",
									"source": 19,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 59,
									"end": 683,
									"name": "PUSH",
									"source": 19,
									"value": "B"
								},
								{
									"begin": 59,
									"end": 683,
									"name": "DUP3",
									"source": 19
								},
								{
									"begin": 59,
									"end": 683,
									"name": "DUP3",
									"source": 19
								},
								{
									"begin": 59,
									"end": 683,
									"name": "DUP3",
									"source": 19
								},
								{
									"begin": 59,
									"end": 683,
									"name": "CODECOPY",
									"source": 19
								},
								{
									"begin": 59,
									"end": 683,
									"name": "DUP1",
									"source": 19
								},
								{
									"begin": 59,
									"end": 683,
									"name": "MLOAD",
									"source": 19
								},
								{
									"begin": 59,
									"end": 683,
									"name": "PUSH",
									"source": 19,
									"value": "0"
								},
								{
									"begin": 59,
									"end": 683,
									"name": "BYTE",
									"source": 19
								},
								{
									"begin": 59,
									"end": 683,
									"name": "PUSH",
									"source": 19,
									"value": "73"
								},
								{
									"begin": 59,
									"end": 683,
									"name": "EQ",
									"source": 19
								},
								{
									"begin": 59,
									"end": 683,
									"name": "PUSH [tag]",
									"source": 19,
									"value": "1"
								},
								{
									"begin": 59,
									"end": 683,
									"name": "JUMPI",
									"source": 19
								},
								{
									"begin": 59,
									"end": 683,
									"name": "PUSH",
									"source": 19,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 59,
									"end": 683,
									"name": "PUSH",
									"source": 19,
									"value": "0"
								},
								{
									"begin": 59,
									"end": 683,
									"name": "MSTORE",
									"source": 19
								},
								{
									"begin": 59,
									"end": 683,
									"name": "PUSH",
									"source": 19,
									"value": "0"
								},
								{
									"begin": 59,
									"end": 683,
									"name": "PUSH",
									"source": 19,
									"value": "4"
								},
								{
									"begin": 59,
									"end": 683,
									"name": "MSTORE",
									"source": 19
								},
								{
									"begin": 59,
									"end": 683,
									"name": "PUSH",
									"source": 19,
									"value": "24"
								},
								{
									"begin": 59,
									"end": 683,
									"name": "PUSH",
									"source": 19,
									"value": "0"
								},
								{
									"begin": 59,
									"end": 683,
									"name": "REVERT",
									"source": 19
								},
								{
									"begin": 59,
									"end": 683,
									"name": "tag",
									"source": 19,
									"value": "1"
								},
								{
									"begin": 59,
									"end": 683,
									"name": "JUMPDEST",
									"source": 19
								},
								{
									"begin": 59,
									"end": 683,
									"name": "ADDRESS",
									"source": 19
								},
								{
									"begin": 59,
									"end": 683,
									"name": "PUSH",
									"source": 19,
									"value": "0"
								},
								{
									"begin": 59,
									"end": 683,
									"name": "MSTORE",
									"source": 19
								},
								{
									"begin": 59,
									"end": 683,
									"name": "PUSH",
									"source": 19,
									"value": "73"
								},
								{
									"begin": 59,
									"end": 683,
									"name": "DUP2",
									"source": 19
								},
								{
									"begin": 59,
									"end": 683,
									"name": "MSTORE8",
									"source": 19
								},
								{
									"begin": 59,
									"end": 683,
									"name": "DUP3",
									"source": 19
								},
								{
									"begin": 59,
									"end": 683,
									"name": "DUP2",
									"source": 19
								},
								{
									"begin": 59,
									"end": 683,
									"name": "RETURN",
									"source": 19
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122083b5eb5c3f49fdc8d1cb6521df06f1894c1feff30f0846ac85c0a8f15c3149a564736f6c63430008090033",
									".code": [
										{
											"begin": 59,
											"end": 683,
											"name": "PUSHDEPLOYADDRESS",
											"source": 19
										},
										{
											"begin": 59,
											"end": 683,
											"name": "ADDRESS",
											"source": 19
										},
										{
											"begin": 59,
											"end": 683,
											"name": "EQ",
											"source": 19
										},
										{
											"begin": 59,
											"end": 683,
											"name": "PUSH",
											"source": 19,
											"value": "80"
										},
										{
											"begin": 59,
											"end": 683,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 59,
											"end": 683,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 59,
											"end": 683,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 59,
											"end": 683,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 59,
											"end": 683,
											"name": "REVERT",
											"source": 19
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"libraries/TimeFee.sol\":\"TimeFee\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"libraries/TimeFee.sol\":{\"keccak256\":\"0x263efba43eaec339f5385a6c25158219d00edce75157d7cd759f3032725fcc79\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bcb2fee6d1fa020c5a58f9de9dace4b0c09339c784b1b7888ef78ffd52faa7c0\",\"dweb:/ipfs/QmVjYwXXg8QyvTh1dyTWp41qjyrajaqyXuATtMJqN4SRF7\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"contracts/TimeFactory.sol": {
				"ast": {
					"absolutePath": "contracts/TimeFactory.sol",
					"exportedSymbols": {
						"Address": [
							1710
						],
						"IERC165": [
							745
						],
						"IERC20": [
							823
						],
						"IERC20Permit": [
							859
						],
						"IERC721": [
							976
						],
						"IERC721Enumerable": [
							1007
						],
						"IERC721Metadata": [
							1034
						],
						"IERC721Permit": [
							1120
						],
						"IERC721Receiver": [
							1052
						],
						"IError": [
							1065
						],
						"INonfungiblePositionManager": [
							1319
						],
						"IPeripheryImmutableState": [
							1335
						],
						"IPeripheryPayments": [
							1361
						],
						"IPoolInitializer": [
							1380
						],
						"ITimeStruct": [
							1085
						],
						"PoolAddress": [
							1810
						],
						"SafeERC20": [
							2189
						],
						"TimeFactory": [
							8
						],
						"TimeFee": [
							2238
						],
						"TimeMarket": [
							733
						]
					},
					"id": 9,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".9"
							],
							"nodeType": "PragmaDirective",
							"src": "31:23:0"
						},
						{
							"id": 2,
							"literals": [
								"abicoder",
								"v2"
							],
							"nodeType": "PragmaDirective",
							"src": "56:19:0"
						},
						{
							"absolutePath": "contracts/TimeMarket.sol",
							"file": "./TimeMarket.sol",
							"id": 3,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 9,
							"sourceUnit": 734,
							"src": "77:26:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "TimeFactory",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 8,
							"linearizedBaseContracts": [
								8
							],
							"name": "TimeFactory",
							"nameLocation": "116:11:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 6,
										"nodeType": "Block",
										"src": "201:10:0",
										"statements": []
									},
									"functionSelector": "aea0e35f",
									"id": 7,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "createMarket",
									"nameLocation": "179:12:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 4,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "191:2:0"
									},
									"returnParameters": {
										"id": 5,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "201:0:0"
									},
									"scope": 8,
									"src": "170:41:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 9,
							"src": "107:107:0",
							"usedErrors": []
						}
					],
					"src": "31:183:0"
				},
				"id": 0
			},
			"contracts/TimeMarket.sol": {
				"ast": {
					"absolutePath": "contracts/TimeMarket.sol",
					"exportedSymbols": {
						"Address": [
							1710
						],
						"IERC165": [
							745
						],
						"IERC20": [
							823
						],
						"IERC20Permit": [
							859
						],
						"IERC721": [
							976
						],
						"IERC721Enumerable": [
							1007
						],
						"IERC721Metadata": [
							1034
						],
						"IERC721Permit": [
							1120
						],
						"IERC721Receiver": [
							1052
						],
						"IError": [
							1065
						],
						"INonfungiblePositionManager": [
							1319
						],
						"IPeripheryImmutableState": [
							1335
						],
						"IPeripheryPayments": [
							1361
						],
						"IPoolInitializer": [
							1380
						],
						"ITimeStruct": [
							1085
						],
						"PoolAddress": [
							1810
						],
						"SafeERC20": [
							2189
						],
						"TimeFee": [
							2238
						],
						"TimeMarket": [
							733
						]
					},
					"id": 734,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 10,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".9"
							],
							"nodeType": "PragmaDirective",
							"src": "31:23:1"
						},
						{
							"id": 11,
							"literals": [
								"abicoder",
								"v2"
							],
							"nodeType": "PragmaDirective",
							"src": "56:19:1"
						},
						{
							"absolutePath": "libraries/SafeERC20.sol",
							"file": "../libraries/SafeERC20.sol",
							"id": 12,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 734,
							"sourceUnit": 2190,
							"src": "77:36:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "interfaces/ITimeStruct.sol",
							"file": "../interfaces/ITimeStruct.sol",
							"id": 13,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 734,
							"sourceUnit": 1086,
							"src": "115:39:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "interfaces/IError.sol",
							"file": "../interfaces/IError.sol",
							"id": 14,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 734,
							"sourceUnit": 1066,
							"src": "156:34:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "libraries/TimeFee.sol",
							"file": "../libraries/TimeFee.sol",
							"id": 15,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 734,
							"sourceUnit": 2239,
							"src": "192:34:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "interfaces/IERC721Receiver.sol",
							"file": "../interfaces/IERC721Receiver.sol",
							"id": 16,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 734,
							"sourceUnit": 1053,
							"src": "242:43:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "interfaces/UniswapV3/INonfungiblePositionManager.sol",
							"file": "../interfaces/UniswapV3/INonfungiblePositionManager.sol",
							"id": 17,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 734,
							"sourceUnit": 1320,
							"src": "287:65:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 18,
										"name": "ITimeStruct",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1085,
										"src": "379:11:1"
									},
									"id": 19,
									"nodeType": "InheritanceSpecifier",
									"src": "379:11:1"
								},
								{
									"baseName": {
										"id": 20,
										"name": "IError",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1065,
										"src": "392:6:1"
									},
									"id": 21,
									"nodeType": "InheritanceSpecifier",
									"src": "392:6:1"
								}
							],
							"canonicalName": "TimeMarket",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 733,
							"linearizedBaseContracts": [
								733,
								1065,
								1085
							],
							"name": "TimeMarket",
							"nameLocation": "365:10:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"id": 25,
									"libraryName": {
										"id": 22,
										"name": "SafeERC20",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 2189,
										"src": "411:9:1"
									},
									"nodeType": "UsingForDirective",
									"src": "405:27:1",
									"typeName": {
										"id": 24,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 23,
											"name": "IERC20",
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 823,
											"src": "425:6:1"
										},
										"referencedDeclaration": 823,
										"src": "425:6:1",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC20_$823",
											"typeString": "contract IERC20"
										}
									}
								},
								{
									"constant": false,
									"id": 27,
									"mutability": "mutable",
									"name": "clearingTime",
									"nameLocation": "453:12:1",
									"nodeType": "VariableDeclaration",
									"scope": 733,
									"src": "438:27:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint56",
										"typeString": "uint56"
									},
									"typeName": {
										"id": 26,
										"name": "uint56",
										"nodeType": "ElementaryTypeName",
										"src": "438:6:1",
										"typeDescriptions": {
											"typeIdentifier": "t_uint56",
											"typeString": "uint56"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 29,
									"mutability": "mutable",
									"name": "id",
									"nameLocation": "479:2:1",
									"nodeType": "VariableDeclaration",
									"scope": 733,
									"src": "472:9:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint64",
										"typeString": "uint64"
									},
									"typeName": {
										"id": 28,
										"name": "uint64",
										"nodeType": "ElementaryTypeName",
										"src": "472:6:1",
										"typeDescriptions": {
											"typeIdentifier": "t_uint64",
											"typeString": "uint64"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 31,
									"mutability": "mutable",
									"name": "airdropToken",
									"nameLocation": "504:12:1",
									"nodeType": "VariableDeclaration",
									"scope": 733,
									"src": "488:28:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 30,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "488:7:1",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 49,
										"nodeType": "Block",
										"src": "578:90:1",
										"statements": [
											{
												"expression": {
													"id": 40,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 38,
														"name": "airdropToken",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 31,
														"src": "589:12:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 39,
														"name": "_airdropToken",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 33,
														"src": "602:13:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "589:26:1",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 41,
												"nodeType": "ExpressionStatement",
												"src": "589:26:1"
											},
											{
												"expression": {
													"id": 47,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 42,
														"name": "clearingTime",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 27,
														"src": "626:12:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint56",
															"typeString": "uint56"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 45,
																"name": "_clearingTime",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 35,
																"src": "646:13:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 44,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "639:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint56_$",
																"typeString": "type(uint56)"
															},
															"typeName": {
																"id": 43,
																"name": "uint56",
																"nodeType": "ElementaryTypeName",
																"src": "639:6:1",
																"typeDescriptions": {}
															}
														},
														"id": 46,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "639:21:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint56",
															"typeString": "uint56"
														}
													},
													"src": "626:34:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint56",
														"typeString": "uint56"
													}
												},
												"id": 48,
												"nodeType": "ExpressionStatement",
												"src": "626:34:1"
											}
										]
									},
									"id": 50,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 36,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 33,
												"mutability": "mutable",
												"name": "_airdropToken",
												"nameLocation": "545:13:1",
												"nodeType": "VariableDeclaration",
												"scope": 50,
												"src": "537:21:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 32,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "537:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 35,
												"mutability": "mutable",
												"name": "_clearingTime",
												"nameLocation": "564:13:1",
												"nodeType": "VariableDeclaration",
												"scope": 50,
												"src": "559:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 34,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "559:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "536:42:1"
									},
									"returnParameters": {
										"id": 37,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "578:0:1"
									},
									"scope": 733,
									"src": "525:143:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"constant": false,
									"id": 55,
									"mutability": "mutable",
									"name": "_tradeMes",
									"nameLocation": "709:9:1",
									"nodeType": "VariableDeclaration",
									"scope": 733,
									"src": "676:42:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_uint64_$_t_struct$_tradeMes_$1084_storage_$",
										"typeString": "mapping(uint64 => struct ITimeStruct.tradeMes)"
									},
									"typeName": {
										"id": 54,
										"keyType": {
											"id": 51,
											"name": "uint64",
											"nodeType": "ElementaryTypeName",
											"src": "684:6:1",
											"typeDescriptions": {
												"typeIdentifier": "t_uint64",
												"typeString": "uint64"
											}
										},
										"nodeType": "Mapping",
										"src": "676:25:1",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_uint64_$_t_struct$_tradeMes_$1084_storage_$",
											"typeString": "mapping(uint64 => struct ITimeStruct.tradeMes)"
										},
										"valueType": {
											"id": 53,
											"nodeType": "UserDefinedTypeName",
											"pathNode": {
												"id": 52,
												"name": "tradeMes",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1084,
												"src": "692:8:1"
											},
											"referencedDeclaration": 1084,
											"src": "692:8:1",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_tradeMes_$1084_storage_ptr",
												"typeString": "struct ITimeStruct.tradeMes"
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 61,
									"mutability": "mutable",
									"name": "ifInject",
									"nameLocation": "855:8:1",
									"nodeType": "VariableDeclaration",
									"scope": 733,
									"src": "805:58:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_bool_$_$",
										"typeString": "mapping(address => mapping(uint256 => bool))"
									},
									"typeName": {
										"id": 60,
										"keyType": {
											"id": 56,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "813:7:1",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "805:42:1",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_bool_$_$",
											"typeString": "mapping(address => mapping(uint256 => bool))"
										},
										"valueType": {
											"id": 59,
											"keyType": {
												"id": 57,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "832:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"nodeType": "Mapping",
											"src": "824:22:1",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
												"typeString": "mapping(uint256 => bool)"
											},
											"valueType": {
												"id": 58,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "841:4:1",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"functionSelector": "59de2f60",
									"id": 67,
									"mutability": "mutable",
									"name": "userIfWithdraw1",
									"nameLocation": "978:15:1",
									"nodeType": "VariableDeclaration",
									"scope": 733,
									"src": "929:64:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_bool_$_$",
										"typeString": "mapping(address => mapping(uint256 => bool))"
									},
									"typeName": {
										"id": 66,
										"keyType": {
											"id": 62,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "937:7:1",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "929:42:1",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_bool_$_$",
											"typeString": "mapping(address => mapping(uint256 => bool))"
										},
										"valueType": {
											"id": 65,
											"keyType": {
												"id": 63,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "956:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"nodeType": "Mapping",
											"src": "948:22:1",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
												"typeString": "mapping(uint256 => bool)"
											},
											"valueType": {
												"id": 64,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "965:4:1",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											}
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "df0905c6",
									"id": 73,
									"mutability": "mutable",
									"name": "userIfWithdraw2",
									"nameLocation": "1102:15:1",
									"nodeType": "VariableDeclaration",
									"scope": 733,
									"src": "1053:64:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_bool_$_$",
										"typeString": "mapping(address => mapping(uint256 => bool))"
									},
									"typeName": {
										"id": 72,
										"keyType": {
											"id": 68,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1061:7:1",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1053:42:1",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_bool_$_$",
											"typeString": "mapping(address => mapping(uint256 => bool))"
										},
										"valueType": {
											"id": 71,
											"keyType": {
												"id": 69,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1080:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"nodeType": "Mapping",
											"src": "1072:22:1",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
												"typeString": "mapping(uint256 => bool)"
											},
											"valueType": {
												"id": 70,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "1089:4:1",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											}
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "b8d7f980",
									"id": 79,
									"mutability": "mutable",
									"name": "userIfWithdraw3",
									"nameLocation": "1226:15:1",
									"nodeType": "VariableDeclaration",
									"scope": 733,
									"src": "1177:64:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_bool_$_$",
										"typeString": "mapping(address => mapping(uint256 => bool))"
									},
									"typeName": {
										"id": 78,
										"keyType": {
											"id": 74,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1185:7:1",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1177:42:1",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_bool_$_$",
											"typeString": "mapping(address => mapping(uint256 => bool))"
										},
										"valueType": {
											"id": 77,
											"keyType": {
												"id": 75,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1204:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"nodeType": "Mapping",
											"src": "1196:22:1",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
												"typeString": "mapping(uint256 => bool)"
											},
											"valueType": {
												"id": 76,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "1213:4:1",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											}
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "fc993ea8",
									"id": 85,
									"mutability": "mutable",
									"name": "userIfWithdraw4",
									"nameLocation": "1337:15:1",
									"nodeType": "VariableDeclaration",
									"scope": 733,
									"src": "1288:64:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_bool_$_$",
										"typeString": "mapping(address => mapping(uint256 => bool))"
									},
									"typeName": {
										"id": 84,
										"keyType": {
											"id": 80,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1296:7:1",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1288:42:1",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_bool_$_$",
											"typeString": "mapping(address => mapping(uint256 => bool))"
										},
										"valueType": {
											"id": 83,
											"keyType": {
												"id": 81,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1315:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"nodeType": "Mapping",
											"src": "1307:22:1",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
												"typeString": "mapping(uint256 => bool)"
											},
											"valueType": {
												"id": 82,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "1324:4:1",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											}
										}
									},
									"visibility": "public"
								},
								{
									"body": {
										"id": 152,
										"nodeType": "Block",
										"src": "1455:664:1",
										"statements": [
											{
												"assignments": [
													95
												],
												"declarations": [
													{
														"constant": false,
														"id": 95,
														"mutability": "mutable",
														"name": "total",
														"nameLocation": "1471:5:1",
														"nodeType": "VariableDeclaration",
														"scope": 152,
														"src": "1466:10:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 94,
															"name": "uint",
															"nodeType": "ElementaryTypeName",
															"src": "1466:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 99,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													},
													"id": 98,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 96,
														"name": "_buyAmount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 89,
														"src": "1477:10:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint128",
															"typeString": "uint128"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "*",
													"rightExpression": {
														"id": 97,
														"name": "_buyPrice",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 91,
														"src": "1488:9:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint128",
															"typeString": "uint128"
														}
													},
													"src": "1477:20:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1466:31:1"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 102,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 100,
														"name": "total",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 95,
														"src": "1511:5:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"hexValue": "313030",
														"id": 101,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1517:9:1",
														"subdenomination": "ether",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_100000000000000000000_by_1",
															"typeString": "int_const 100000000000000000000"
														},
														"value": "100"
													},
													"src": "1511:15:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 107,
												"nodeType": "IfStatement",
												"src": "1508:70:1",
												"trueBody": {
													"id": 106,
													"nodeType": "Block",
													"src": "1527:51:1",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 103,
																	"name": "NotEnoughAmount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1056,
																	"src": "1549:15:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 104,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1549:17:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 105,
															"nodeType": "RevertStatement",
															"src": "1542:24:1"
														}
													]
												}
											},
											{
												"assignments": [
													110
												],
												"declarations": [
													{
														"constant": false,
														"id": 110,
														"mutability": "mutable",
														"name": "newTradeMes",
														"nameLocation": "1604:11:1",
														"nodeType": "VariableDeclaration",
														"scope": 152,
														"src": "1588:27:1",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_tradeMes_$1084_memory_ptr",
															"typeString": "struct ITimeStruct.tradeMes"
														},
														"typeName": {
															"id": 109,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 108,
																"name": "tradeMes",
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 1084,
																"src": "1588:8:1"
															},
															"referencedDeclaration": 1084,
															"src": "1588:8:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_tradeMes_$1084_storage_ptr",
																"typeString": "struct ITimeStruct.tradeMes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 129,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "31",
															"id": 112,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1651:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														{
															"id": 113,
															"name": "id",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 29,
															"src": "1675:2:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"id": 116,
																		"name": "block",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967292,
																		"src": "1707:5:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_block",
																			"typeString": "block"
																		}
																	},
																	"id": 117,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "timestamp",
																	"nodeType": "MemberAccess",
																	"src": "1707:15:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 115,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1700:6:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_uint56_$",
																	"typeString": "type(uint56)"
																},
																"typeName": {
																	"id": 114,
																	"name": "uint56",
																	"nodeType": "ElementaryTypeName",
																	"src": "1700:6:1",
																	"typeDescriptions": {}
																}
															},
															"id": 118,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1700:23:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint56",
																"typeString": "uint56"
															}
														},
														{
															"id": 119,
															"name": "_buyAmount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 89,
															"src": "1753:10:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint128",
																"typeString": "uint128"
															}
														},
														{
															"id": 120,
															"name": "_buyPrice",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 91,
															"src": "1787:9:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint128",
																"typeString": "uint128"
															}
														},
														{
															"id": 121,
															"name": "_tokenAddress",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 87,
															"src": "1824:13:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"expression": {
																"id": 122,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "1865:3:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 123,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "1865:10:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"id": 126,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "1912:4:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_TimeMarket_$733",
																		"typeString": "contract TimeMarket"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_TimeMarket_$733",
																		"typeString": "contract TimeMarket"
																	}
																],
																"id": 125,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1904:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 124,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1904:7:1",
																	"typeDescriptions": {}
																}
															},
															"id": 127,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1904:13:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															{
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															},
															{
																"typeIdentifier": "t_uint56",
																"typeString": "uint56"
															},
															{
																"typeIdentifier": "t_uint128",
																"typeString": "uint128"
															},
															{
																"typeIdentifier": "t_uint128",
																"typeString": "uint128"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 111,
														"name": "tradeMes",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1084,
														"src": "1616:8:1",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_struct$_tradeMes_$1084_storage_ptr_$",
															"typeString": "type(struct ITimeStruct.tradeMes storage pointer)"
														}
													},
													"id": 128,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "structConstructorCall",
													"lValueRequested": false,
													"names": [
														"tradeState",
														"tradeId",
														"buyTime",
														"buyTotalAmount",
														"buyPrice",
														"tokenAddress",
														"buyerAddress",
														"solderAddress"
													],
													"nodeType": "FunctionCall",
													"src": "1616:313:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_tradeMes_$1084_memory_ptr",
														"typeString": "struct ITimeStruct.tradeMes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1588:341:1"
											},
											{
												"expression": {
													"id": 134,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 130,
															"name": "_tradeMes",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 55,
															"src": "1940:9:1",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint64_$_t_struct$_tradeMes_$1084_storage_$",
																"typeString": "mapping(uint64 => struct ITimeStruct.tradeMes storage ref)"
															}
														},
														"id": 132,
														"indexExpression": {
															"id": 131,
															"name": "id",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 29,
															"src": "1950:2:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "1940:13:1",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_tradeMes_$1084_storage",
															"typeString": "struct ITimeStruct.tradeMes storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 133,
														"name": "newTradeMes",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 110,
														"src": "1954:11:1",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_tradeMes_$1084_memory_ptr",
															"typeString": "struct ITimeStruct.tradeMes memory"
														}
													},
													"src": "1940:25:1",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_tradeMes_$1084_storage",
														"typeString": "struct ITimeStruct.tradeMes storage ref"
													}
												},
												"id": 135,
												"nodeType": "ExpressionStatement",
												"src": "1940:25:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 140,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "2065:3:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 141,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "2065:10:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"id": 144,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "2084:4:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_TimeMarket_$733",
																		"typeString": "contract TimeMarket"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_TimeMarket_$733",
																		"typeString": "contract TimeMarket"
																	}
																],
																"id": 143,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2076:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 142,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "2076:7:1",
																	"typeDescriptions": {}
																}
															},
															"id": 145,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2076:13:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 146,
															"name": "total",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 95,
															"src": "2090:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 137,
																	"name": "_tokenAddress",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 87,
																	"src": "2033:13:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 136,
																"name": "IERC20",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 823,
																"src": "2026:6:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20_$823_$",
																	"typeString": "type(contract IERC20)"
																}
															},
															"id": 138,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2026:21:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$823",
																"typeString": "contract IERC20"
															}
														},
														"id": 139,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "safeTransferFrom",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1873,
														"src": "2026:38:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$823_$_t_address_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$823_$",
															"typeString": "function (contract IERC20,address,address,uint256)"
														}
													},
													"id": 147,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2026:70:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 148,
												"nodeType": "ExpressionStatement",
												"src": "2026:70:1"
											},
											{
												"expression": {
													"id": 150,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "++",
													"prefix": false,
													"src": "2107:4:1",
													"subExpression": {
														"id": 149,
														"name": "id",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 29,
														"src": "2107:2:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"id": 151,
												"nodeType": "ExpressionStatement",
												"src": "2107:4:1"
											}
										]
									},
									"functionSelector": "d14485a2",
									"id": 153,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "buy",
									"nameLocation": "1384:3:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 92,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 87,
												"mutability": "mutable",
												"name": "_tokenAddress",
												"nameLocation": "1396:13:1",
												"nodeType": "VariableDeclaration",
												"scope": 153,
												"src": "1388:21:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 86,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1388:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 89,
												"mutability": "mutable",
												"name": "_buyAmount",
												"nameLocation": "1418:10:1",
												"nodeType": "VariableDeclaration",
												"scope": 153,
												"src": "1410:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 88,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "1410:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 91,
												"mutability": "mutable",
												"name": "_buyPrice",
												"nameLocation": "1437:9:1",
												"nodeType": "VariableDeclaration",
												"scope": 153,
												"src": "1429:17:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 90,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "1429:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1387:60:1"
									},
									"returnParameters": {
										"id": 93,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1455:0:1"
									},
									"scope": 733,
									"src": "1375:744:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 210,
										"nodeType": "Block",
										"src": "2176:547:1",
										"statements": [
											{
												"assignments": [
													160
												],
												"declarations": [
													{
														"constant": false,
														"id": 160,
														"mutability": "mutable",
														"name": "maxTradeMes",
														"nameLocation": "2203:11:1",
														"nodeType": "VariableDeclaration",
														"scope": 210,
														"src": "2187:27:1",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_tradeMes_$1084_memory_ptr",
															"typeString": "struct ITimeStruct.tradeMes"
														},
														"typeName": {
															"id": 159,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 158,
																"name": "tradeMes",
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 1084,
																"src": "2187:8:1"
															},
															"referencedDeclaration": 1084,
															"src": "2187:8:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_tradeMes_$1084_storage_ptr",
																"typeString": "struct ITimeStruct.tradeMes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 164,
												"initialValue": {
													"baseExpression": {
														"id": 161,
														"name": "_tradeMes",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 55,
														"src": "2215:9:1",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_uint64_$_t_struct$_tradeMes_$1084_storage_$",
															"typeString": "mapping(uint64 => struct ITimeStruct.tradeMes storage ref)"
														}
													},
													"id": 163,
													"indexExpression": {
														"id": 162,
														"name": "_id",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 155,
														"src": "2225:3:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "2215:14:1",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_tradeMes_$1084_storage",
														"typeString": "struct ITimeStruct.tradeMes storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2187:42:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															"id": 169,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 166,
																	"name": "maxTradeMes",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 160,
																	"src": "2248:11:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_tradeMes_$1084_memory_ptr",
																		"typeString": "struct ITimeStruct.tradeMes memory"
																	}
																},
																"id": 167,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "tradeState",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1069,
																"src": "2248:22:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "31",
																"id": 168,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2272:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "2248:25:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 165,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2240:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 170,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2240:34:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 171,
												"nodeType": "ExpressionStatement",
												"src": "2240:34:1"
											},
											{
												"assignments": [
													173
												],
												"declarations": [
													{
														"constant": false,
														"id": 173,
														"mutability": "mutable",
														"name": "promiseStableToken",
														"nameLocation": "2323:18:1",
														"nodeType": "VariableDeclaration",
														"scope": 210,
														"src": "2315:26:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 172,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2315:7:1",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 176,
												"initialValue": {
													"expression": {
														"id": 174,
														"name": "maxTradeMes",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 160,
														"src": "2342:11:1",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_tradeMes_$1084_memory_ptr",
															"typeString": "struct ITimeStruct.tradeMes memory"
														}
													},
													"id": 175,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "tokenAddress",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 1079,
													"src": "2342:24:1",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2315:51:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 181,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "2462:3:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 182,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "2462:10:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"id": 185,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "2495:4:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_TimeMarket_$733",
																		"typeString": "contract TimeMarket"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_TimeMarket_$733",
																		"typeString": "contract TimeMarket"
																	}
																],
																"id": 184,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2487:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 183,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "2487:7:1",
																	"typeDescriptions": {}
																}
															},
															"id": 186,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2487:13:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"id": 188,
																		"name": "maxTradeMes",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 160,
																		"src": "2524:11:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_tradeMes_$1084_memory_ptr",
																			"typeString": "struct ITimeStruct.tradeMes memory"
																		}
																	},
																	"id": 189,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "buyPrice",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1077,
																	"src": "2524:20:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint128",
																		"typeString": "uint128"
																	}
																},
																{
																	"expression": {
																		"id": 190,
																		"name": "maxTradeMes",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 160,
																		"src": "2546:11:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_tradeMes_$1084_memory_ptr",
																			"typeString": "struct ITimeStruct.tradeMes memory"
																		}
																	},
																	"id": 191,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "buyTotalAmount",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1075,
																	"src": "2546:26:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint128",
																		"typeString": "uint128"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint128",
																		"typeString": "uint128"
																	},
																	{
																		"typeIdentifier": "t_uint128",
																		"typeString": "uint128"
																	}
																],
																"id": 187,
																"name": "getPenal",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 732,
																"src": "2515:8:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint128_$_t_uint128_$returns$_t_uint256_$",
																	"typeString": "function (uint128,uint128) pure returns (uint256)"
																}
															},
															"id": 192,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2515:58:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 178,
																	"name": "promiseStableToken",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 173,
																	"src": "2411:18:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 177,
																"name": "IERC20",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 823,
																"src": "2404:6:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20_$823_$",
																	"typeString": "type(contract IERC20)"
																}
															},
															"id": 179,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2404:26:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$823",
																"typeString": "contract IERC20"
															}
														},
														"id": 180,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "safeTransferFrom",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1873,
														"src": "2404:43:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$823_$_t_address_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$823_$",
															"typeString": "function (contract IERC20,address,address,uint256)"
														}
													},
													"id": 193,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2404:180:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 194,
												"nodeType": "ExpressionStatement",
												"src": "2404:180:1"
											},
											{
												"expression": {
													"id": 201,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 195,
																"name": "_tradeMes",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 55,
																"src": "2595:9:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_uint64_$_t_struct$_tradeMes_$1084_storage_$",
																	"typeString": "mapping(uint64 => struct ITimeStruct.tradeMes storage ref)"
																}
															},
															"id": 197,
															"indexExpression": {
																"id": 196,
																"name": "_id",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 155,
																"src": "2605:3:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "2595:14:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_tradeMes_$1084_storage",
																"typeString": "struct ITimeStruct.tradeMes storage ref"
															}
														},
														"id": 198,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "solderAddress",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1083,
														"src": "2595:28:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"expression": {
															"id": 199,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "2624:3:1",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 200,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "2624:10:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2595:39:1",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 202,
												"nodeType": "ExpressionStatement",
												"src": "2595:39:1"
											},
											{
												"expression": {
													"id": 208,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 203,
																"name": "_tradeMes",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 55,
																"src": "2688:9:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_uint64_$_t_struct$_tradeMes_$1084_storage_$",
																	"typeString": "mapping(uint64 => struct ITimeStruct.tradeMes storage ref)"
																}
															},
															"id": 205,
															"indexExpression": {
																"id": 204,
																"name": "_id",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 155,
																"src": "2698:3:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "2688:14:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_tradeMes_$1084_storage",
																"typeString": "struct ITimeStruct.tradeMes storage ref"
															}
														},
														"id": 206,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "tradeState",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1069,
														"src": "2688:25:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "32",
														"id": 207,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2714:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_2_by_1",
															"typeString": "int_const 2"
														},
														"value": "2"
													},
													"src": "2688:27:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"id": 209,
												"nodeType": "ExpressionStatement",
												"src": "2688:27:1"
											}
										]
									},
									"functionSelector": "762e9d30",
									"id": 211,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "Sale",
									"nameLocation": "2150:4:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 156,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 155,
												"mutability": "mutable",
												"name": "_id",
												"nameLocation": "2162:3:1",
												"nodeType": "VariableDeclaration",
												"scope": 211,
												"src": "2155:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 154,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "2155:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2154:12:1"
									},
									"returnParameters": {
										"id": 157,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2176:0:1"
									},
									"scope": 733,
									"src": "2141:582:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 276,
										"nodeType": "Block",
										"src": "2898:561:1",
										"statements": [
											{
												"condition": {
													"id": 223,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"id": 216,
																"name": "ifInject",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 61,
																"src": "2966:8:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_bool_$_$",
																	"typeString": "mapping(address => mapping(uint256 => bool))"
																}
															},
															"id": 219,
															"indexExpression": {
																"expression": {
																	"id": 217,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "2975:3:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 218,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "2975:10:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "2966:20:1",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
																"typeString": "mapping(uint256 => bool)"
															}
														},
														"id": 221,
														"indexExpression": {
															"id": 220,
															"name": "_id",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 213,
															"src": "2987:3:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "2966:25:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "66616c7365",
														"id": 222,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2992:5:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "false"
													},
													"src": "2966:31:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 228,
												"nodeType": "IfStatement",
												"src": "2963:65:1",
												"trueBody": {
													"id": 227,
													"nodeType": "Block",
													"src": "2998:30:1",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 224,
																	"name": "AlreadyInjectToken",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1058,
																	"src": "3006:18:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 225,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3006:20:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 226,
															"nodeType": "RevertStatement",
															"src": "2999:27:1"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 234,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 230,
																"name": "_id",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 213,
																"src": "3130:3:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															],
															"id": 229,
															"name": "getSolder",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 668,
															"src": "3120:9:1",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_uint64_$returns$_t_address_$",
																"typeString": "function (uint64) view returns (address)"
															}
														},
														"id": 231,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3120:14:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"expression": {
															"id": 232,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "3136:3:1",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 233,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "3136:10:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "3120:26:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 239,
												"nodeType": "IfStatement",
												"src": "3117:51:1",
												"trueBody": {
													"id": 238,
													"nodeType": "Block",
													"src": "3147:21:1",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 235,
																	"name": "NorSolder",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1064,
																	"src": "3155:9:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 236,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3155:11:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 237,
															"nodeType": "RevertStatement",
															"src": "3148:18:1"
														}
													]
												}
											},
											{
												"assignments": [
													241
												],
												"declarations": [
													{
														"constant": false,
														"id": 241,
														"mutability": "mutable",
														"name": "thisAirdropAmount",
														"nameLocation": "3233:17:1",
														"nodeType": "VariableDeclaration",
														"scope": 276,
														"src": "3225:25:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 240,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3225:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 246,
												"initialValue": {
													"expression": {
														"baseExpression": {
															"id": 242,
															"name": "_tradeMes",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 55,
															"src": "3251:9:1",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint64_$_t_struct$_tradeMes_$1084_storage_$",
																"typeString": "mapping(uint64 => struct ITimeStruct.tradeMes storage ref)"
															}
														},
														"id": 244,
														"indexExpression": {
															"id": 243,
															"name": "_id",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 213,
															"src": "3261:3:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "3251:14:1",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_tradeMes_$1084_storage",
															"typeString": "struct ITimeStruct.tradeMes storage ref"
														}
													},
													"id": 245,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "buyTotalAmount",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 1075,
													"src": "3251:29:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3225:55:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 251,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "3329:3:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 252,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "3329:10:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"id": 255,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "3348:4:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_TimeMarket_$733",
																		"typeString": "contract TimeMarket"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_TimeMarket_$733",
																		"typeString": "contract TimeMarket"
																	}
																],
																"id": 254,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "3340:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 253,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "3340:7:1",
																	"typeDescriptions": {}
																}
															},
															"id": 256,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3340:13:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 257,
															"name": "thisAirdropAmount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 241,
															"src": "3354:17:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 248,
																	"name": "airdropToken",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 31,
																	"src": "3298:12:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 247,
																"name": "IERC20",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 823,
																"src": "3291:6:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20_$823_$",
																	"typeString": "type(contract IERC20)"
																}
															},
															"id": 249,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3291:20:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$823",
																"typeString": "contract IERC20"
															}
														},
														"id": 250,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "safeTransferFrom",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1873,
														"src": "3291:37:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$823_$_t_address_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$823_$",
															"typeString": "function (contract IERC20,address,address,uint256)"
														}
													},
													"id": 258,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3291:81:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 259,
												"nodeType": "ExpressionStatement",
												"src": "3291:81:1"
											},
											{
												"expression": {
													"id": 267,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"id": 260,
																"name": "ifInject",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 61,
																"src": "3383:8:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_bool_$_$",
																	"typeString": "mapping(address => mapping(uint256 => bool))"
																}
															},
															"id": 264,
															"indexExpression": {
																"expression": {
																	"id": 261,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "3392:3:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 262,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "3392:10:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "3383:20:1",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
																"typeString": "mapping(uint256 => bool)"
															}
														},
														"id": 265,
														"indexExpression": {
															"id": 263,
															"name": "_id",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 213,
															"src": "3404:3:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "3383:25:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "74727565",
														"id": 266,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3409:4:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "3383:30:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 268,
												"nodeType": "ExpressionStatement",
												"src": "3383:30:1"
											},
											{
												"expression": {
													"id": 274,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 269,
																"name": "_tradeMes",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 55,
																"src": "3424:9:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_uint64_$_t_struct$_tradeMes_$1084_storage_$",
																	"typeString": "mapping(uint64 => struct ITimeStruct.tradeMes storage ref)"
																}
															},
															"id": 271,
															"indexExpression": {
																"id": 270,
																"name": "_id",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 213,
																"src": "3434:3:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "3424:14:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_tradeMes_$1084_storage",
																"typeString": "struct ITimeStruct.tradeMes storage ref"
															}
														},
														"id": 272,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "tradeState",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1069,
														"src": "3424:25:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "33",
														"id": 273,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3450:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_3_by_1",
															"typeString": "int_const 3"
														},
														"value": "3"
													},
													"src": "3424:27:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"id": 275,
												"nodeType": "ExpressionStatement",
												"src": "3424:27:1"
											}
										]
									},
									"functionSelector": "25ac3a73",
									"id": 277,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "injectFutureToken",
									"nameLocation": "2861:17:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 214,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 213,
												"mutability": "mutable",
												"name": "_id",
												"nameLocation": "2886:3:1",
												"nodeType": "VariableDeclaration",
												"scope": 277,
												"src": "2879:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 212,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "2879:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2878:12:1"
									},
									"returnParameters": {
										"id": 215,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2898:0:1"
									},
									"scope": 733,
									"src": "2852:607:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 359,
										"nodeType": "Block",
										"src": "3516:711:1",
										"statements": [
											{
												"assignments": [
													283
												],
												"declarations": [
													{
														"constant": false,
														"id": 283,
														"mutability": "mutable",
														"name": "buyer",
														"nameLocation": "3535:5:1",
														"nodeType": "VariableDeclaration",
														"scope": 359,
														"src": "3527:13:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 282,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "3527:7:1",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 287,
												"initialValue": {
													"arguments": [
														{
															"id": 285,
															"name": "_id",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 279,
															"src": "3550:3:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														],
														"id": 284,
														"name": "getBuyer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 655,
														"src": "3541:8:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint64_$returns$_t_address_$",
															"typeString": "function (uint64) view returns (address)"
														}
													},
													"id": 286,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3541:13:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3527:27:1"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 291,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 288,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "3601:3:1",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 289,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "3601:10:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"id": 290,
														"name": "buyer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 283,
														"src": "3613:5:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "3601:17:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 296,
												"nodeType": "IfStatement",
												"src": "3598:41:1",
												"trueBody": {
													"id": 295,
													"nodeType": "Block",
													"src": "3619:20:1",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 292,
																	"name": "NotBuyer",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1062,
																	"src": "3627:8:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 293,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3627:10:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 294,
															"nodeType": "RevertStatement",
															"src": "3620:17:1"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													},
													"id": 302,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"baseExpression": {
																"id": 297,
																"name": "_tradeMes",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 55,
																"src": "3715:9:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_uint64_$_t_struct$_tradeMes_$1084_storage_$",
																	"typeString": "mapping(uint64 => struct ITimeStruct.tradeMes storage ref)"
																}
															},
															"id": 299,
															"indexExpression": {
																"id": 298,
																"name": "_id",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 279,
																"src": "3725:3:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "3715:14:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_tradeMes_$1084_storage",
																"typeString": "struct ITimeStruct.tradeMes storage ref"
															}
														},
														"id": 300,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "tradeState",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1069,
														"src": "3715:25:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "33",
														"id": 301,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3742:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_3_by_1",
															"typeString": "int_const 3"
														},
														"value": "3"
													},
													"src": "3715:28:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 307,
												"nodeType": "IfStatement",
												"src": "3712:58:1",
												"trueBody": {
													"id": 306,
													"nodeType": "Block",
													"src": "3744:26:1",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 303,
																	"name": "NotInjectToken",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1060,
																	"src": "3752:14:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 304,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3752:16:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 305,
															"nodeType": "RevertStatement",
															"src": "3745:23:1"
														}
													]
												}
											},
											{
												"assignments": [
													309
												],
												"declarations": [
													{
														"constant": false,
														"id": 309,
														"mutability": "mutable",
														"name": "buyAmount",
														"nameLocation": "3789:9:1",
														"nodeType": "VariableDeclaration",
														"scope": 359,
														"src": "3781:17:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint128",
															"typeString": "uint128"
														},
														"typeName": {
															"id": 308,
															"name": "uint128",
															"nodeType": "ElementaryTypeName",
															"src": "3781:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint128",
																"typeString": "uint128"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 314,
												"initialValue": {
													"expression": {
														"baseExpression": {
															"id": 310,
															"name": "_tradeMes",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 55,
															"src": "3799:9:1",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint64_$_t_struct$_tradeMes_$1084_storage_$",
																"typeString": "mapping(uint64 => struct ITimeStruct.tradeMes storage ref)"
															}
														},
														"id": 312,
														"indexExpression": {
															"id": 311,
															"name": "_id",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 279,
															"src": "3809:3:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "3799:14:1",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_tradeMes_$1084_storage",
															"typeString": "struct ITimeStruct.tradeMes storage ref"
														}
													},
													"id": 313,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "buyTotalAmount",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 1075,
													"src": "3799:29:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3781:47:1"
											},
											{
												"assignments": [
													316
												],
												"declarations": [
													{
														"constant": false,
														"id": 316,
														"mutability": "mutable",
														"name": "buyerPrice",
														"nameLocation": "3847:10:1",
														"nodeType": "VariableDeclaration",
														"scope": 359,
														"src": "3839:18:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint128",
															"typeString": "uint128"
														},
														"typeName": {
															"id": 315,
															"name": "uint128",
															"nodeType": "ElementaryTypeName",
															"src": "3839:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint128",
																"typeString": "uint128"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 321,
												"initialValue": {
													"expression": {
														"baseExpression": {
															"id": 317,
															"name": "_tradeMes",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 55,
															"src": "3858:9:1",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint64_$_t_struct$_tradeMes_$1084_storage_$",
																"typeString": "mapping(uint64 => struct ITimeStruct.tradeMes storage ref)"
															}
														},
														"id": 319,
														"indexExpression": {
															"id": 318,
															"name": "_id",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 279,
															"src": "3868:3:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "3858:14:1",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_tradeMes_$1084_storage",
															"typeString": "struct ITimeStruct.tradeMes storage ref"
														}
													},
													"id": 320,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "buyPrice",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 1077,
													"src": "3858:23:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3839:42:1"
											},
											{
												"assignments": [
													323
												],
												"declarations": [
													{
														"constant": false,
														"id": 323,
														"mutability": "mutable",
														"name": "fee",
														"nameLocation": "3944:3:1",
														"nodeType": "VariableDeclaration",
														"scope": 359,
														"src": "3936:11:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 322,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3936:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 330,
												"initialValue": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint128",
																"typeString": "uint128"
															},
															"id": 328,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 326,
																"name": "buyAmount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 309,
																"src": "3960:9:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint128",
																	"typeString": "uint128"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 327,
																"name": "buyerPrice",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 316,
																"src": "3970:10:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint128",
																	"typeString": "uint128"
																}
															},
															"src": "3960:20:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint128",
																"typeString": "uint128"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint128",
																"typeString": "uint128"
															}
														],
														"expression": {
															"id": 324,
															"name": "TimeFee",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2238,
															"src": "3948:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_TimeFee_$2238_$",
																"typeString": "type(library TimeFee)"
															}
														},
														"id": 325,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "fee",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2237,
														"src": "3948:11:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256) pure returns (uint256)"
														}
													},
													"id": 329,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3948:33:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3936:45:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 337,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "4076:4:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_TimeMarket_$733",
																		"typeString": "contract TimeMarket"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_TimeMarket_$733",
																		"typeString": "contract TimeMarket"
																	}
																],
																"id": 336,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "4068:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 335,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "4068:7:1",
																	"typeDescriptions": {}
																}
															},
															"id": 338,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4068:13:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 339,
															"name": "fee",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 323,
															"src": "4082:3:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 332,
																	"name": "airdropToken",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 31,
																	"src": "4041:12:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 331,
																"name": "IERC20",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 823,
																"src": "4034:6:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20_$823_$",
																	"typeString": "type(contract IERC20)"
																}
															},
															"id": 333,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4034:20:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$823",
																"typeString": "contract IERC20"
															}
														},
														"id": 334,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "safeTransfer",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1846,
														"src": "4034:33:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$823_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$823_$",
															"typeString": "function (contract IERC20,address,uint256)"
														}
													},
													"id": 340,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4034:52:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 341,
												"nodeType": "ExpressionStatement",
												"src": "4034:52:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 346,
															"name": "buyer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 283,
															"src": "4161:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 349,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 347,
																"name": "buyAmount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 309,
																"src": "4167:9:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint128",
																	"typeString": "uint128"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"id": 348,
																"name": "fee",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 323,
																"src": "4177:3:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4167:13:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 343,
																	"name": "airdropToken",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 31,
																	"src": "4134:12:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 342,
																"name": "IERC20",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 823,
																"src": "4127:6:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20_$823_$",
																	"typeString": "type(contract IERC20)"
																}
															},
															"id": 344,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4127:20:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$823",
																"typeString": "contract IERC20"
															}
														},
														"id": 345,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "safeTransfer",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1846,
														"src": "4127:33:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$823_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$823_$",
															"typeString": "function (contract IERC20,address,uint256)"
														}
													},
													"id": 350,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4127:54:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 351,
												"nodeType": "ExpressionStatement",
												"src": "4127:54:1"
											},
											{
												"expression": {
													"id": 357,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 352,
																"name": "_tradeMes",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 55,
																"src": "4192:9:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_uint64_$_t_struct$_tradeMes_$1084_storage_$",
																	"typeString": "mapping(uint64 => struct ITimeStruct.tradeMes storage ref)"
																}
															},
															"id": 354,
															"indexExpression": {
																"id": 353,
																"name": "_id",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 279,
																"src": "4202:3:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "4192:14:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_tradeMes_$1084_storage",
																"typeString": "struct ITimeStruct.tradeMes storage ref"
															}
														},
														"id": 355,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "tradeState",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1069,
														"src": "4192:25:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "34",
														"id": 356,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4218:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_4_by_1",
															"typeString": "int_const 4"
														},
														"value": "4"
													},
													"src": "4192:27:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"id": 358,
												"nodeType": "ExpressionStatement",
												"src": "4192:27:1"
											}
										]
									},
									"functionSelector": "c0102de4",
									"id": 360,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "buyerWithdrawAirdorp",
									"nameLocation": "3476:20:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 280,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 279,
												"mutability": "mutable",
												"name": "_id",
												"nameLocation": "3504:3:1",
												"nodeType": "VariableDeclaration",
												"scope": 360,
												"src": "3497:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 278,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "3497:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3496:12:1"
									},
									"returnParameters": {
										"id": 281,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3516:0:1"
									},
									"scope": 733,
									"src": "3467:760:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 474,
										"nodeType": "Block",
										"src": "4329:1088:1",
										"statements": [
											{
												"assignments": [
													366
												],
												"declarations": [
													{
														"constant": false,
														"id": 366,
														"mutability": "mutable",
														"name": "solder",
														"nameLocation": "4348:6:1",
														"nodeType": "VariableDeclaration",
														"scope": 474,
														"src": "4340:14:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 365,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "4340:7:1",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 370,
												"initialValue": {
													"arguments": [
														{
															"id": 368,
															"name": "_id",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 362,
															"src": "4365:3:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														],
														"id": 367,
														"name": "getSolder",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 668,
														"src": "4355:9:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint64_$returns$_t_address_$",
															"typeString": "function (uint64) view returns (address)"
														}
													},
													"id": 369,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4355:14:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4340:29:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 375,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 372,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "4421:3:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 373,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "4421:10:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 374,
																"name": "solder",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 366,
																"src": "4433:6:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "4421:18:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 371,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4413:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 376,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4413:27:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 377,
												"nodeType": "ExpressionStatement",
												"src": "4413:27:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"baseExpression": {
																"baseExpression": {
																	"id": 379,
																	"name": "ifInject",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 61,
																	"src": "4522:8:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_bool_$_$",
																		"typeString": "mapping(address => mapping(uint256 => bool))"
																	}
																},
																"id": 381,
																"indexExpression": {
																	"id": 380,
																	"name": "solder",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 366,
																	"src": "4531:6:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "4522:16:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
																	"typeString": "mapping(uint256 => bool)"
																}
															},
															"id": 383,
															"indexExpression": {
																"id": 382,
																"name": "_id",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 362,
																"src": "4539:3:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "4522:21:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 378,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4514:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 384,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4514:30:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 385,
												"nodeType": "ExpressionStatement",
												"src": "4514:30:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 394,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"baseExpression": {
																	"baseExpression": {
																		"id": 387,
																		"name": "userIfWithdraw2",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 73,
																		"src": "4596:15:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_bool_$_$",
																			"typeString": "mapping(address => mapping(uint256 => bool))"
																		}
																	},
																	"id": 390,
																	"indexExpression": {
																		"expression": {
																			"id": 388,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "4612:3:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 389,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "4612:10:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "4596:27:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
																		"typeString": "mapping(uint256 => bool)"
																	}
																},
																"id": 392,
																"indexExpression": {
																	"id": 391,
																	"name": "_id",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 362,
																	"src": "4624:3:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint64",
																		"typeString": "uint64"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "4596:32:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "66616c7365",
																"id": 393,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4630:5:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															"src": "4596:39:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 386,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4588:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 395,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4588:48:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 396,
												"nodeType": "ExpressionStatement",
												"src": "4588:48:1"
											},
											{
												"assignments": [
													398
												],
												"declarations": [
													{
														"constant": false,
														"id": 398,
														"mutability": "mutable",
														"name": "promiseStableToken",
														"nameLocation": "4655:18:1",
														"nodeType": "VariableDeclaration",
														"scope": 474,
														"src": "4647:26:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 397,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "4647:7:1",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 403,
												"initialValue": {
													"expression": {
														"baseExpression": {
															"id": 399,
															"name": "_tradeMes",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 55,
															"src": "4674:9:1",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint64_$_t_struct$_tradeMes_$1084_storage_$",
																"typeString": "mapping(uint64 => struct ITimeStruct.tradeMes storage ref)"
															}
														},
														"id": 401,
														"indexExpression": {
															"id": 400,
															"name": "_id",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 362,
															"src": "4684:3:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "4674:14:1",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_tradeMes_$1084_storage",
															"typeString": "struct ITimeStruct.tradeMes storage ref"
														}
													},
													"id": 402,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "tokenAddress",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 1079,
													"src": "4674:27:1",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4647:54:1"
											},
											{
												"assignments": [
													405
												],
												"declarations": [
													{
														"constant": false,
														"id": 405,
														"mutability": "mutable",
														"name": "total",
														"nameLocation": "4720:5:1",
														"nodeType": "VariableDeclaration",
														"scope": 474,
														"src": "4712:13:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 404,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4712:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 415,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													},
													"id": 414,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"baseExpression": {
																"id": 406,
																"name": "_tradeMes",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 55,
																"src": "4726:9:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_uint64_$_t_struct$_tradeMes_$1084_storage_$",
																	"typeString": "mapping(uint64 => struct ITimeStruct.tradeMes storage ref)"
																}
															},
															"id": 408,
															"indexExpression": {
																"id": 407,
																"name": "_id",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 362,
																"src": "4736:3:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "4726:14:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_tradeMes_$1084_storage",
																"typeString": "struct ITimeStruct.tradeMes storage ref"
															}
														},
														"id": 409,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "buyPrice",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1077,
														"src": "4726:23:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint128",
															"typeString": "uint128"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "*",
													"rightExpression": {
														"expression": {
															"baseExpression": {
																"id": 410,
																"name": "_tradeMes",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 55,
																"src": "4750:9:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_uint64_$_t_struct$_tradeMes_$1084_storage_$",
																	"typeString": "mapping(uint64 => struct ITimeStruct.tradeMes storage ref)"
																}
															},
															"id": 412,
															"indexExpression": {
																"id": 411,
																"name": "_id",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 362,
																"src": "4760:3:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "4750:14:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_tradeMes_$1084_storage",
																"typeString": "struct ITimeStruct.tradeMes storage ref"
															}
														},
														"id": 413,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "buyTotalAmount",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1075,
														"src": "4750:29:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint128",
															"typeString": "uint128"
														}
													},
													"src": "4726:53:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4712:67:1"
											},
											{
												"assignments": [
													417
												],
												"declarations": [
													{
														"constant": false,
														"id": 417,
														"mutability": "mutable",
														"name": "penalSumAmount",
														"nameLocation": "4798:14:1",
														"nodeType": "VariableDeclaration",
														"scope": 474,
														"src": "4790:22:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 416,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4790:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 428,
												"initialValue": {
													"arguments": [
														{
															"expression": {
																"baseExpression": {
																	"id": 419,
																	"name": "_tradeMes",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 55,
																	"src": "4822:9:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_uint64_$_t_struct$_tradeMes_$1084_storage_$",
																		"typeString": "mapping(uint64 => struct ITimeStruct.tradeMes storage ref)"
																	}
																},
																"id": 421,
																"indexExpression": {
																	"id": 420,
																	"name": "_id",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 362,
																	"src": "4832:3:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint64",
																		"typeString": "uint64"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "4822:14:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_tradeMes_$1084_storage",
																	"typeString": "struct ITimeStruct.tradeMes storage ref"
																}
															},
															"id": 422,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "buyPrice",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1077,
															"src": "4822:23:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint128",
																"typeString": "uint128"
															}
														},
														{
															"expression": {
																"baseExpression": {
																	"id": 423,
																	"name": "_tradeMes",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 55,
																	"src": "4846:9:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_uint64_$_t_struct$_tradeMes_$1084_storage_$",
																		"typeString": "mapping(uint64 => struct ITimeStruct.tradeMes storage ref)"
																	}
																},
																"id": 425,
																"indexExpression": {
																	"id": 424,
																	"name": "_id",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 362,
																	"src": "4856:3:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint64",
																		"typeString": "uint64"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "4846:14:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_tradeMes_$1084_storage",
																	"typeString": "struct ITimeStruct.tradeMes storage ref"
																}
															},
															"id": 426,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "buyTotalAmount",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1075,
															"src": "4846:29:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint128",
																"typeString": "uint128"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint128",
																"typeString": "uint128"
															},
															{
																"typeIdentifier": "t_uint128",
																"typeString": "uint128"
															}
														],
														"id": 418,
														"name": "getPenal",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 732,
														"src": "4813:8:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint128_$_t_uint128_$returns$_t_uint256_$",
															"typeString": "function (uint128,uint128) pure returns (uint256)"
														}
													},
													"id": 427,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4813:63:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4790:86:1"
											},
											{
												"assignments": [
													430
												],
												"declarations": [
													{
														"constant": false,
														"id": 430,
														"mutability": "mutable",
														"name": "fee",
														"nameLocation": "4895:3:1",
														"nodeType": "VariableDeclaration",
														"scope": 474,
														"src": "4887:11:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 429,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4887:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 435,
												"initialValue": {
													"arguments": [
														{
															"id": 433,
															"name": "total",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 405,
															"src": "4911:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 431,
															"name": "TimeFee",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2238,
															"src": "4899:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_TimeFee_$2238_$",
																"typeString": "type(library TimeFee)"
															}
														},
														"id": 432,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "fee",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2237,
														"src": "4899:11:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256) pure returns (uint256)"
														}
													},
													"id": 434,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4899:18:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4887:30:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 442,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "5018:4:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_TimeMarket_$733",
																		"typeString": "contract TimeMarket"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_TimeMarket_$733",
																		"typeString": "contract TimeMarket"
																	}
																],
																"id": 441,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "5010:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 440,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "5010:7:1",
																	"typeDescriptions": {}
																}
															},
															"id": 443,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5010:13:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 444,
															"name": "fee",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 430,
															"src": "5024:3:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 437,
																	"name": "promiseStableToken",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 398,
																	"src": "4977:18:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 436,
																"name": "IERC20",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 823,
																"src": "4970:6:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20_$823_$",
																	"typeString": "type(contract IERC20)"
																}
															},
															"id": 438,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4970:26:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$823",
																"typeString": "contract IERC20"
															}
														},
														"id": 439,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "safeTransfer",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1846,
														"src": "4970:39:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$823_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$823_$",
															"typeString": "function (contract IERC20,address,uint256)"
														}
													},
													"id": 445,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4970:58:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 446,
												"nodeType": "ExpressionStatement",
												"src": "4970:58:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 451,
															"name": "solder",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 366,
															"src": "5123:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 454,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 452,
																"name": "total",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 405,
																"src": "5144:5:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"id": 453,
																"name": "fee",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 430,
																"src": "5150:3:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5144:9:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 448,
																	"name": "promiseStableToken",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 398,
																	"src": "5076:18:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 447,
																"name": "IERC20",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 823,
																"src": "5069:6:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20_$823_$",
																	"typeString": "type(contract IERC20)"
																}
															},
															"id": 449,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5069:26:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$823",
																"typeString": "contract IERC20"
															}
														},
														"id": 450,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "safeTransfer",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1846,
														"src": "5069:39:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$823_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$823_$",
															"typeString": "function (contract IERC20,address,uint256)"
														}
													},
													"id": 455,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5069:95:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 456,
												"nodeType": "ExpressionStatement",
												"src": "5069:95:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 461,
															"name": "solder",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 366,
															"src": "5277:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 462,
															"name": "penalSumAmount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 417,
															"src": "5298:14:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 458,
																	"name": "promiseStableToken",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 398,
																	"src": "5230:18:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 457,
																"name": "IERC20",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 823,
																"src": "5223:6:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20_$823_$",
																	"typeString": "type(contract IERC20)"
																}
															},
															"id": 459,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5223:26:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$823",
																"typeString": "contract IERC20"
															}
														},
														"id": 460,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "safeTransfer",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1846,
														"src": "5223:39:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$823_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$823_$",
															"typeString": "function (contract IERC20,address,uint256)"
														}
													},
													"id": 463,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5223:100:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 464,
												"nodeType": "ExpressionStatement",
												"src": "5223:100:1"
											},
											{
												"expression": {
													"id": 472,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"id": 465,
																"name": "userIfWithdraw2",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 73,
																"src": "5371:15:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_bool_$_$",
																	"typeString": "mapping(address => mapping(uint256 => bool))"
																}
															},
															"id": 469,
															"indexExpression": {
																"expression": {
																	"id": 466,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "5387:3:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 467,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "5387:10:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "5371:27:1",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
																"typeString": "mapping(uint256 => bool)"
															}
														},
														"id": 470,
														"indexExpression": {
															"id": 468,
															"name": "_id",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 362,
															"src": "5399:3:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "5371:32:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "74727565",
														"id": 471,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5404:4:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "5371:37:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 473,
												"nodeType": "ExpressionStatement",
												"src": "5371:37:1"
											}
										]
									},
									"functionSelector": "77bcd8a6",
									"id": 475,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "solderWithdrawStable",
									"nameLocation": "4289:20:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 363,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 362,
												"mutability": "mutable",
												"name": "_id",
												"nameLocation": "4317:3:1",
												"nodeType": "VariableDeclaration",
												"scope": 475,
												"src": "4310:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 361,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "4310:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4309:12:1"
									},
									"returnParameters": {
										"id": 364,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4329:0:1"
									},
									"scope": 733,
									"src": "4280:1137:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 641,
										"nodeType": "Block",
										"src": "5552:1385:1",
										"statements": [
											{
												"assignments": [
													481
												],
												"declarations": [
													{
														"constant": false,
														"id": 481,
														"mutability": "mutable",
														"name": "buyer",
														"nameLocation": "5571:5:1",
														"nodeType": "VariableDeclaration",
														"scope": 641,
														"src": "5563:13:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 480,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "5563:7:1",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 485,
												"initialValue": {
													"arguments": [
														{
															"id": 483,
															"name": "_id",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 477,
															"src": "5586:3:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														],
														"id": 482,
														"name": "getBuyer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 655,
														"src": "5577:8:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint64_$returns$_t_address_$",
															"typeString": "function (uint64) view returns (address)"
														}
													},
													"id": 484,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5577:13:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5563:27:1"
											},
											{
												"assignments": [
													487
												],
												"declarations": [
													{
														"constant": false,
														"id": 487,
														"mutability": "mutable",
														"name": "solder",
														"nameLocation": "5609:6:1",
														"nodeType": "VariableDeclaration",
														"scope": 641,
														"src": "5601:14:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 486,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "5601:7:1",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 491,
												"initialValue": {
													"arguments": [
														{
															"id": 489,
															"name": "_id",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 477,
															"src": "5626:3:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														],
														"id": 488,
														"name": "getSolder",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 668,
														"src": "5616:9:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint64_$returns$_t_address_$",
															"typeString": "function (uint64) view returns (address)"
														}
													},
													"id": 490,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5616:14:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5601:29:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 496,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 493,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "5682:3:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 494,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "5682:10:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 495,
																"name": "buyer",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 481,
																"src": "5694:5:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "5682:17:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 492,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5674:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 497,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5674:26:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 498,
												"nodeType": "ExpressionStatement",
												"src": "5674:26:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 506,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"baseExpression": {
																	"baseExpression": {
																		"id": 500,
																		"name": "ifInject",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 61,
																		"src": "5782:8:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_bool_$_$",
																			"typeString": "mapping(address => mapping(uint256 => bool))"
																		}
																	},
																	"id": 502,
																	"indexExpression": {
																		"id": 501,
																		"name": "solder",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 487,
																		"src": "5791:6:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "5782:16:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
																		"typeString": "mapping(uint256 => bool)"
																	}
																},
																"id": 504,
																"indexExpression": {
																	"id": 503,
																	"name": "_id",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 477,
																	"src": "5799:3:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint64",
																		"typeString": "uint64"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "5782:21:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "66616c7365",
																"id": 505,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5805:5:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															"src": "5782:28:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 499,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5774:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 507,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5774:37:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 508,
												"nodeType": "ExpressionStatement",
												"src": "5774:37:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 517,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"baseExpression": {
																	"baseExpression": {
																		"id": 510,
																		"name": "userIfWithdraw3",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 79,
																		"src": "5830:15:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_bool_$_$",
																			"typeString": "mapping(address => mapping(uint256 => bool))"
																		}
																	},
																	"id": 513,
																	"indexExpression": {
																		"expression": {
																			"id": 511,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "5846:3:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 512,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "5846:10:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "5830:27:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
																		"typeString": "mapping(uint256 => bool)"
																	}
																},
																"id": 515,
																"indexExpression": {
																	"id": 514,
																	"name": "_id",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 477,
																	"src": "5858:3:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint64",
																		"typeString": "uint64"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "5830:32:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "66616c7365",
																"id": 516,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5864:5:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															"src": "5830:39:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 509,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5822:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 518,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5822:48:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 519,
												"nodeType": "ExpressionStatement",
												"src": "5822:48:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 524,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 521,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "5922:3:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 522,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "5922:10:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 523,
																"name": "buyer",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 481,
																"src": "5934:5:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "5922:17:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 520,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5914:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 525,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5914:26:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 526,
												"nodeType": "ExpressionStatement",
												"src": "5914:26:1"
											},
											{
												"assignments": [
													528
												],
												"declarations": [
													{
														"constant": false,
														"id": 528,
														"mutability": "mutable",
														"name": "promiseStableToken",
														"nameLocation": "5961:18:1",
														"nodeType": "VariableDeclaration",
														"scope": 641,
														"src": "5953:26:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 527,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "5953:7:1",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 533,
												"initialValue": {
													"expression": {
														"baseExpression": {
															"id": 529,
															"name": "_tradeMes",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 55,
															"src": "5980:9:1",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint64_$_t_struct$_tradeMes_$1084_storage_$",
																"typeString": "mapping(uint64 => struct ITimeStruct.tradeMes storage ref)"
															}
														},
														"id": 531,
														"indexExpression": {
															"id": 530,
															"name": "_id",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 477,
															"src": "5990:3:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "5980:14:1",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_tradeMes_$1084_storage",
															"typeString": "struct ITimeStruct.tradeMes storage ref"
														}
													},
													"id": 532,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "tokenAddress",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 1079,
													"src": "5980:27:1",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5953:54:1"
											},
											{
												"assignments": [
													535
												],
												"declarations": [
													{
														"constant": false,
														"id": 535,
														"mutability": "mutable",
														"name": "penalSumAmount",
														"nameLocation": "6026:14:1",
														"nodeType": "VariableDeclaration",
														"scope": 641,
														"src": "6018:22:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 534,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "6018:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 546,
												"initialValue": {
													"arguments": [
														{
															"expression": {
																"baseExpression": {
																	"id": 537,
																	"name": "_tradeMes",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 55,
																	"src": "6050:9:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_uint64_$_t_struct$_tradeMes_$1084_storage_$",
																		"typeString": "mapping(uint64 => struct ITimeStruct.tradeMes storage ref)"
																	}
																},
																"id": 539,
																"indexExpression": {
																	"id": 538,
																	"name": "_id",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 477,
																	"src": "6060:3:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint64",
																		"typeString": "uint64"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "6050:14:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_tradeMes_$1084_storage",
																	"typeString": "struct ITimeStruct.tradeMes storage ref"
																}
															},
															"id": 540,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "buyPrice",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1077,
															"src": "6050:23:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint128",
																"typeString": "uint128"
															}
														},
														{
															"expression": {
																"baseExpression": {
																	"id": 541,
																	"name": "_tradeMes",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 55,
																	"src": "6074:9:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_uint64_$_t_struct$_tradeMes_$1084_storage_$",
																		"typeString": "mapping(uint64 => struct ITimeStruct.tradeMes storage ref)"
																	}
																},
																"id": 543,
																"indexExpression": {
																	"id": 542,
																	"name": "_id",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 477,
																	"src": "6084:3:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint64",
																		"typeString": "uint64"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "6074:14:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_tradeMes_$1084_storage",
																	"typeString": "struct ITimeStruct.tradeMes storage ref"
																}
															},
															"id": 544,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "buyTotalAmount",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1075,
															"src": "6074:29:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint128",
																"typeString": "uint128"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint128",
																"typeString": "uint128"
															},
															{
																"typeIdentifier": "t_uint128",
																"typeString": "uint128"
															}
														],
														"id": 536,
														"name": "getPenal",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 732,
														"src": "6041:8:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint128_$_t_uint128_$returns$_t_uint256_$",
															"typeString": "function (uint128,uint128) pure returns (uint256)"
														}
													},
													"id": 545,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6041:63:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6018:86:1"
											},
											{
												"assignments": [
													548
												],
												"declarations": [
													{
														"constant": false,
														"id": 548,
														"mutability": "mutable",
														"name": "fee",
														"nameLocation": "6123:3:1",
														"nodeType": "VariableDeclaration",
														"scope": 641,
														"src": "6115:11:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 547,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "6115:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 553,
												"initialValue": {
													"arguments": [
														{
															"id": 551,
															"name": "penalSumAmount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 535,
															"src": "6139:14:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 549,
															"name": "TimeFee",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2238,
															"src": "6127:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_TimeFee_$2238_$",
																"typeString": "type(library TimeFee)"
															}
														},
														"id": 550,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "fee",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2237,
														"src": "6127:11:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256) pure returns (uint256)"
														}
													},
													"id": 552,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6127:27:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6115:39:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 560,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "6245:4:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_TimeMarket_$733",
																		"typeString": "contract TimeMarket"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_TimeMarket_$733",
																		"typeString": "contract TimeMarket"
																	}
																],
																"id": 559,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "6237:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 558,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "6237:7:1",
																	"typeDescriptions": {}
																}
															},
															"id": 561,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6237:13:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 562,
															"name": "fee",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 548,
															"src": "6265:3:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 555,
																	"name": "promiseStableToken",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 528,
																	"src": "6190:18:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 554,
																"name": "IERC20",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 823,
																"src": "6183:6:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20_$823_$",
																	"typeString": "type(contract IERC20)"
																}
															},
															"id": 556,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6183:26:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$823",
																"typeString": "contract IERC20"
															}
														},
														"id": 557,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "safeTransfer",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1846,
														"src": "6183:39:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$823_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$823_$",
															"typeString": "function (contract IERC20,address,uint256)"
														}
													},
													"id": 563,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6183:96:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 564,
												"nodeType": "ExpressionStatement",
												"src": "6183:96:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 569,
															"name": "buyer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 481,
															"src": "6389:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 572,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 570,
																"name": "penalSumAmount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 535,
																"src": "6409:14:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"id": 571,
																"name": "fee",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 548,
																"src": "6424:3:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "6409:18:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 566,
																	"name": "promiseStableToken",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 528,
																	"src": "6342:18:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 565,
																"name": "IERC20",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 823,
																"src": "6335:6:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20_$823_$",
																	"typeString": "type(contract IERC20)"
																}
															},
															"id": 567,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6335:26:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$823",
																"typeString": "contract IERC20"
															}
														},
														"id": 568,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "safeTransfer",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1846,
														"src": "6335:39:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$823_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$823_$",
															"typeString": "function (contract IERC20,address,uint256)"
														}
													},
													"id": 573,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6335:103:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 574,
												"nodeType": "ExpressionStatement",
												"src": "6335:103:1"
											},
											{
												"expression": {
													"id": 582,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"id": 575,
																"name": "userIfWithdraw3",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 79,
																"src": "6449:15:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_bool_$_$",
																	"typeString": "mapping(address => mapping(uint256 => bool))"
																}
															},
															"id": 579,
															"indexExpression": {
																"expression": {
																	"id": 576,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "6465:3:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 577,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "6465:10:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "6449:27:1",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
																"typeString": "mapping(uint256 => bool)"
															}
														},
														"id": 580,
														"indexExpression": {
															"id": 578,
															"name": "_id",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 477,
															"src": "6477:3:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "6449:32:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "74727565",
														"id": 581,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6482:4:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "6449:37:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 583,
												"nodeType": "ExpressionStatement",
												"src": "6449:37:1"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													},
													"id": 589,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"baseExpression": {
																"id": 584,
																"name": "_tradeMes",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 55,
																"src": "6502:9:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_uint64_$_t_struct$_tradeMes_$1084_storage_$",
																	"typeString": "mapping(uint64 => struct ITimeStruct.tradeMes storage ref)"
																}
															},
															"id": 586,
															"indexExpression": {
																"id": 585,
																"name": "_id",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 477,
																"src": "6512:3:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "6502:14:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_tradeMes_$1084_storage",
																"typeString": "struct ITimeStruct.tradeMes storage ref"
															}
														},
														"id": 587,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "tradeState",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1069,
														"src": "6502:25:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "31",
														"id": 588,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6529:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "6502:28:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 633,
												"nodeType": "IfStatement",
												"src": "6499:393:1",
												"trueBody": {
													"id": 632,
													"nodeType": "Block",
													"src": "6531:361:1",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"id": 598,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"baseExpression": {
																				"baseExpression": {
																					"id": 591,
																					"name": "userIfWithdraw4",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 85,
																					"src": "6554:15:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_bool_$_$",
																						"typeString": "mapping(address => mapping(uint256 => bool))"
																					}
																				},
																				"id": 594,
																				"indexExpression": {
																					"expression": {
																						"id": 592,
																						"name": "msg",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 4294967281,
																						"src": "6570:3:1",
																						"typeDescriptions": {
																							"typeIdentifier": "t_magic_message",
																							"typeString": "msg"
																						}
																					},
																					"id": 593,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "sender",
																					"nodeType": "MemberAccess",
																					"src": "6570:10:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "IndexAccess",
																				"src": "6554:27:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
																					"typeString": "mapping(uint256 => bool)"
																				}
																			},
																			"id": 596,
																			"indexExpression": {
																				"id": 595,
																				"name": "_id",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 477,
																				"src": "6582:3:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint64",
																					"typeString": "uint64"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "6554:32:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "66616c7365",
																			"id": 597,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "bool",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "6588:5:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"value": "false"
																		},
																		"src": "6554:39:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	],
																	"id": 590,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "6546:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
																		"typeString": "function (bool) pure"
																	}
																},
																"id": 599,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6546:48:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 600,
															"nodeType": "ExpressionStatement",
															"src": "6546:48:1"
														},
														{
															"assignments": [
																602
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 602,
																	"mutability": "mutable",
																	"name": "total",
																	"nameLocation": "6617:5:1",
																	"nodeType": "VariableDeclaration",
																	"scope": 632,
																	"src": "6609:13:1",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 601,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "6609:7:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 612,
															"initialValue": {
																"commonType": {
																	"typeIdentifier": "t_uint128",
																	"typeString": "uint128"
																},
																"id": 611,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"baseExpression": {
																			"id": 603,
																			"name": "_tradeMes",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 55,
																			"src": "6623:9:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_uint64_$_t_struct$_tradeMes_$1084_storage_$",
																				"typeString": "mapping(uint64 => struct ITimeStruct.tradeMes storage ref)"
																			}
																		},
																		"id": 605,
																		"indexExpression": {
																			"id": 604,
																			"name": "_id",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 477,
																			"src": "6633:3:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint64",
																				"typeString": "uint64"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "6623:14:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_tradeMes_$1084_storage",
																			"typeString": "struct ITimeStruct.tradeMes storage ref"
																		}
																	},
																	"id": 606,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "buyPrice",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1077,
																	"src": "6623:23:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint128",
																		"typeString": "uint128"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"expression": {
																		"baseExpression": {
																			"id": 607,
																			"name": "_tradeMes",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 55,
																			"src": "6647:9:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_uint64_$_t_struct$_tradeMes_$1084_storage_$",
																				"typeString": "mapping(uint64 => struct ITimeStruct.tradeMes storage ref)"
																			}
																		},
																		"id": 609,
																		"indexExpression": {
																			"id": 608,
																			"name": "_id",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 477,
																			"src": "6657:3:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint64",
																				"typeString": "uint64"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "6647:14:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_tradeMes_$1084_storage",
																			"typeString": "struct ITimeStruct.tradeMes storage ref"
																		}
																	},
																	"id": 610,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "buyTotalAmount",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1075,
																	"src": "6647:29:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint128",
																		"typeString": "uint128"
																	}
																},
																"src": "6623:53:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint128",
																	"typeString": "uint128"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "6609:67:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"id": 618,
																				"name": "_id",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 477,
																				"src": "6785:3:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint64",
																					"typeString": "uint64"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_uint64",
																					"typeString": "uint64"
																				}
																			],
																			"id": 617,
																			"name": "getBuyer",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 655,
																			"src": "6776:8:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_view$_t_uint64_$returns$_t_address_$",
																				"typeString": "function (uint64) view returns (address)"
																			}
																		},
																		"id": 619,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "6776:13:1",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 620,
																		"name": "total",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 602,
																		"src": "6808:5:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"arguments": [
																			{
																				"id": 614,
																				"name": "promiseStableToken",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 528,
																				"src": "6725:18:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"id": 613,
																			"name": "IERC20",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 823,
																			"src": "6718:6:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC20_$823_$",
																				"typeString": "type(contract IERC20)"
																			}
																		},
																		"id": 615,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "6718:26:1",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$823",
																			"typeString": "contract IERC20"
																		}
																	},
																	"id": 616,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "safeTransfer",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1846,
																	"src": "6718:39:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$823_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$823_$",
																		"typeString": "function (contract IERC20,address,uint256)"
																	}
																},
																"id": 621,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6718:110:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 622,
															"nodeType": "ExpressionStatement",
															"src": "6718:110:1"
														},
														{
															"expression": {
																"id": 630,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"baseExpression": {
																			"id": 623,
																			"name": "userIfWithdraw4",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 85,
																			"src": "6843:15:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_bool_$_$",
																				"typeString": "mapping(address => mapping(uint256 => bool))"
																			}
																		},
																		"id": 627,
																		"indexExpression": {
																			"expression": {
																				"id": 624,
																				"name": "msg",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967281,
																				"src": "6859:3:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_message",
																					"typeString": "msg"
																				}
																			},
																			"id": 625,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "sender",
																			"nodeType": "MemberAccess",
																			"src": "6859:10:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "6843:27:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
																			"typeString": "mapping(uint256 => bool)"
																		}
																	},
																	"id": 628,
																	"indexExpression": {
																		"id": 626,
																		"name": "_id",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 477,
																		"src": "6871:3:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint64",
																			"typeString": "uint64"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "6843:32:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "74727565",
																	"id": 629,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "6876:4:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																"src": "6843:37:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 631,
															"nodeType": "ExpressionStatement",
															"src": "6843:37:1"
														}
													]
												}
											},
											{
												"expression": {
													"id": 639,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 634,
																"name": "_tradeMes",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 55,
																"src": "6902:9:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_uint64_$_t_struct$_tradeMes_$1084_storage_$",
																	"typeString": "mapping(uint64 => struct ITimeStruct.tradeMes storage ref)"
																}
															},
															"id": 636,
															"indexExpression": {
																"id": 635,
																"name": "_id",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 477,
																"src": "6912:3:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "6902:14:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_tradeMes_$1084_storage",
																"typeString": "struct ITimeStruct.tradeMes storage ref"
															}
														},
														"id": 637,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "tradeState",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1069,
														"src": "6902:25:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "35",
														"id": 638,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6928:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_5_by_1",
															"typeString": "int_const 5"
														},
														"value": "5"
													},
													"src": "6902:27:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"id": 640,
												"nodeType": "ExpressionStatement",
												"src": "6902:27:1"
											}
										]
									},
									"functionSelector": "2895cb7b",
									"id": 642,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "buyerWithdrawRefund",
									"nameLocation": "5513:19:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 478,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 477,
												"mutability": "mutable",
												"name": "_id",
												"nameLocation": "5540:3:1",
												"nodeType": "VariableDeclaration",
												"scope": 642,
												"src": "5533:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 476,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "5533:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5532:12:1"
									},
									"returnParameters": {
										"id": 479,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5552:0:1"
									},
									"scope": 733,
									"src": "5504:1433:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 654,
										"nodeType": "Block",
										"src": "7049:53:1",
										"statements": [
											{
												"expression": {
													"expression": {
														"baseExpression": {
															"id": 649,
															"name": "_tradeMes",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 55,
															"src": "7067:9:1",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint64_$_t_struct$_tradeMes_$1084_storage_$",
																"typeString": "mapping(uint64 => struct ITimeStruct.tradeMes storage ref)"
															}
														},
														"id": 651,
														"indexExpression": {
															"id": 650,
															"name": "_id",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 644,
															"src": "7077:3:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "7067:14:1",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_tradeMes_$1084_storage",
															"typeString": "struct ITimeStruct.tradeMes storage ref"
														}
													},
													"id": 652,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "buyerAddress",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 1081,
													"src": "7067:27:1",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 648,
												"id": 653,
												"nodeType": "Return",
												"src": "7060:34:1"
											}
										]
									},
									"id": 655,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getBuyer",
									"nameLocation": "6999:8:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 645,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 644,
												"mutability": "mutable",
												"name": "_id",
												"nameLocation": "7015:3:1",
												"nodeType": "VariableDeclaration",
												"scope": 655,
												"src": "7008:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 643,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "7008:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7007:12:1"
									},
									"returnParameters": {
										"id": 648,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 647,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 655,
												"src": "7041:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 646,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7041:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7040:9:1"
									},
									"scope": 733,
									"src": "6990:112:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 667,
										"nodeType": "Block",
										"src": "7210:54:1",
										"statements": [
											{
												"expression": {
													"expression": {
														"baseExpression": {
															"id": 662,
															"name": "_tradeMes",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 55,
															"src": "7228:9:1",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint64_$_t_struct$_tradeMes_$1084_storage_$",
																"typeString": "mapping(uint64 => struct ITimeStruct.tradeMes storage ref)"
															}
														},
														"id": 664,
														"indexExpression": {
															"id": 663,
															"name": "_id",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 657,
															"src": "7238:3:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "7228:14:1",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_tradeMes_$1084_storage",
															"typeString": "struct ITimeStruct.tradeMes storage ref"
														}
													},
													"id": 665,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "solderAddress",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 1083,
													"src": "7228:28:1",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 661,
												"id": 666,
												"nodeType": "Return",
												"src": "7221:35:1"
											}
										]
									},
									"id": 668,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getSolder",
									"nameLocation": "7159:9:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 658,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 657,
												"mutability": "mutable",
												"name": "_id",
												"nameLocation": "7176:3:1",
												"nodeType": "VariableDeclaration",
												"scope": 668,
												"src": "7169:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 656,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "7169:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7168:12:1"
									},
									"returnParameters": {
										"id": 661,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 660,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 668,
												"src": "7202:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 659,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7202:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7201:9:1"
									},
									"scope": 733,
									"src": "7150:114:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 731,
										"nodeType": "Block",
										"src": "7417:456:1",
										"statements": [
											{
												"assignments": [
													678
												],
												"declarations": [
													{
														"constant": false,
														"id": 678,
														"mutability": "mutable",
														"name": "thisAmount",
														"nameLocation": "7436:10:1",
														"nodeType": "VariableDeclaration",
														"scope": 731,
														"src": "7428:18:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 677,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "7428:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 682,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													},
													"id": 681,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 679,
														"name": "_soldPrice",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 670,
														"src": "7449:10:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint128",
															"typeString": "uint128"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "*",
													"rightExpression": {
														"id": 680,
														"name": "_soldAmount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 672,
														"src": "7460:11:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint128",
															"typeString": "uint128"
														}
													},
													"src": "7449:22:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7428:43:1"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 689,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 685,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 683,
															"name": "thisAmount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 678,
															"src": "7486:10:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">=",
														"rightExpression": {
															"hexValue": "313030",
															"id": 684,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7500:9:1",
															"subdenomination": "ether",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_100000000000000000000_by_1",
																"typeString": "int_const 100000000000000000000"
															},
															"value": "100"
														},
														"src": "7486:23:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 688,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 686,
															"name": "thisAmount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 678,
															"src": "7513:10:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "<",
														"rightExpression": {
															"hexValue": "31303030",
															"id": 687,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7526:10:1",
															"subdenomination": "ether",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1000000000000000000000_by_1",
																"typeString": "int_const 1000000000000000000000"
															},
															"value": "1000"
														},
														"src": "7513:23:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "7486:50:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"id": 704,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 700,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 698,
																"name": "thisAmount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 678,
																"src": "7605:10:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"hexValue": "31303030",
																"id": 699,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "7619:10:1",
																"subdenomination": "ether",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1000000000000000000000_by_1",
																	"typeString": "int_const 1000000000000000000000"
																},
																"value": "1000"
															},
															"src": "7605:24:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&&",
														"rightExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 703,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 701,
																"name": "thisAmount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 678,
																"src": "7633:10:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"hexValue": "3130303030",
																"id": 702,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "7646:11:1",
																"subdenomination": "ether",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10000000000000000000000_by_1",
																	"typeString": "int_const 10000000000000000000000"
																},
																"value": "10000"
															},
															"src": "7633:24:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"src": "7605:52:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseBody": {
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 715,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 713,
																"name": "thisAmount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 678,
																"src": "7726:10:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "3130303030",
																"id": 714,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "7739:11:1",
																"subdenomination": "ether",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10000000000000000000000_by_1",
																	"typeString": "int_const 10000000000000000000000"
																},
																"value": "10000"
															},
															"src": "7726:24:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"falseBody": {
															"id": 727,
															"nodeType": "Block",
															"src": "7815:51:1",
															"statements": [
																{
																	"errorCall": {
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"id": 724,
																			"name": "NotEnoughAmount",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1056,
																			"src": "7837:15:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_error_pure$__$returns$__$",
																				"typeString": "function () pure"
																			}
																		},
																		"id": 725,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "7837:17:1",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_tuple$__$",
																			"typeString": "tuple()"
																		}
																	},
																	"id": 726,
																	"nodeType": "RevertStatement",
																	"src": "7830:24:1"
																}
															]
														},
														"id": 728,
														"nodeType": "IfStatement",
														"src": "7722:144:1",
														"trueBody": {
															"id": 723,
															"nodeType": "Block",
															"src": "7752:57:1",
															"statements": [
																{
																	"expression": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 721,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"components": [
																				{
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 718,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"id": 716,
																						"name": "thisAmount",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 678,
																						"src": "7775:10:1",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "*",
																					"rightExpression": {
																						"hexValue": "3235",
																						"id": 717,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "7788:2:1",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_25_by_1",
																							"typeString": "int_const 25"
																						},
																						"value": "25"
																					},
																					"src": "7775:15:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"id": 719,
																			"isConstant": false,
																			"isInlineArray": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "TupleExpression",
																			"src": "7774:17:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "/",
																		"rightExpression": {
																			"hexValue": "313030",
																			"id": 720,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "7794:3:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_100_by_1",
																				"typeString": "int_const 100"
																			},
																			"value": "100"
																		},
																		"src": "7774:23:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"functionReturnParameters": 676,
																	"id": 722,
																	"nodeType": "Return",
																	"src": "7767:30:1"
																}
															]
														}
													},
													"id": 729,
													"nodeType": "IfStatement",
													"src": "7601:265:1",
													"trueBody": {
														"id": 712,
														"nodeType": "Block",
														"src": "7659:57:1",
														"statements": [
															{
																"expression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 710,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"components": [
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 707,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 705,
																					"name": "thisAmount",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 678,
																					"src": "7682:10:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "*",
																				"rightExpression": {
																					"hexValue": "3430",
																					"id": 706,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "7695:2:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_40_by_1",
																						"typeString": "int_const 40"
																					},
																					"value": "40"
																				},
																				"src": "7682:15:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"id": 708,
																		"isConstant": false,
																		"isInlineArray": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "TupleExpression",
																		"src": "7681:17:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "/",
																	"rightExpression": {
																		"hexValue": "313030",
																		"id": 709,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "7701:3:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_100_by_1",
																			"typeString": "int_const 100"
																		},
																		"value": "100"
																	},
																	"src": "7681:23:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"functionReturnParameters": 676,
																"id": 711,
																"nodeType": "Return",
																"src": "7674:30:1"
															}
														]
													}
												},
												"id": 730,
												"nodeType": "IfStatement",
												"src": "7482:384:1",
												"trueBody": {
													"id": 697,
													"nodeType": "Block",
													"src": "7538:57:1",
													"statements": [
														{
															"expression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 695,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 692,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 690,
																				"name": "thisAmount",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 678,
																				"src": "7561:10:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "*",
																			"rightExpression": {
																				"hexValue": "3530",
																				"id": 691,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "7574:2:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_50_by_1",
																					"typeString": "int_const 50"
																				},
																				"value": "50"
																			},
																			"src": "7561:15:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 693,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "7560:17:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"hexValue": "313030",
																	"id": 694,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7580:3:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_100_by_1",
																		"typeString": "int_const 100"
																	},
																	"value": "100"
																},
																"src": "7560:23:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"functionReturnParameters": 676,
															"id": 696,
															"nodeType": "Return",
															"src": "7553:30:1"
														}
													]
												}
											}
										]
									},
									"functionSelector": "98c50fdd",
									"id": 732,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getPenal",
									"nameLocation": "7339:8:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 673,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 670,
												"mutability": "mutable",
												"name": "_soldPrice",
												"nameLocation": "7356:10:1",
												"nodeType": "VariableDeclaration",
												"scope": 732,
												"src": "7348:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 669,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "7348:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 672,
												"mutability": "mutable",
												"name": "_soldAmount",
												"nameLocation": "7376:11:1",
												"nodeType": "VariableDeclaration",
												"scope": 732,
												"src": "7368:19:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 671,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "7368:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7347:41:1"
									},
									"returnParameters": {
										"id": 676,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 675,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 732,
												"src": "7409:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 674,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7409:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7408:9:1"
									},
									"scope": 733,
									"src": "7330:543:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "public"
								}
							],
							"scope": 734,
							"src": "356:7522:1",
							"usedErrors": [
								1056,
								1058,
								1060,
								1062,
								1064
							]
						}
					],
					"src": "31:7847:1"
				},
				"id": 1
			},
			"interfaces/IERC165.sol": {
				"ast": {
					"absolutePath": "interfaces/IERC165.sol",
					"exportedSymbols": {
						"IERC165": [
							745
						]
					},
					"id": 746,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 735,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "118:24:2"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC165",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 736,
								"nodeType": "StructuredDocumentation",
								"src": "146:287:2",
								"text": " @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."
							},
							"fullyImplemented": false,
							"id": 745,
							"linearizedBaseContracts": [
								745
							],
							"name": "IERC165",
							"nameLocation": "445:7:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 737,
										"nodeType": "StructuredDocumentation",
										"src": "460:347:2",
										"text": " @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."
									},
									"functionSelector": "01ffc9a7",
									"id": 744,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "supportsInterface",
									"nameLocation": "822:17:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 740,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 739,
												"mutability": "mutable",
												"name": "interfaceId",
												"nameLocation": "847:11:2",
												"nodeType": "VariableDeclaration",
												"scope": 744,
												"src": "840:18:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 738,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "840:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "839:20:2"
									},
									"returnParameters": {
										"id": 743,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 742,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 744,
												"src": "883:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 741,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "883:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "882:6:2"
									},
									"scope": 745,
									"src": "813:76:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 746,
							"src": "435:457:2",
							"usedErrors": []
						}
					],
					"src": "118:776:2"
				},
				"id": 2
			},
			"interfaces/IERC20.sol": {
				"ast": {
					"absolutePath": "interfaces/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							823
						]
					},
					"id": 824,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 747,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "109:23:3"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 748,
								"nodeType": "StructuredDocumentation",
								"src": "136:72:3",
								"text": " @dev Interface of the ERC20 standard as defined in the EIP."
							},
							"fullyImplemented": false,
							"id": 823,
							"linearizedBaseContracts": [
								823
							],
							"name": "IERC20",
							"nameLocation": "220:6:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 749,
										"nodeType": "StructuredDocumentation",
										"src": "234:163:3",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"id": 757,
									"name": "Transfer",
									"nameLocation": "409:8:3",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 756,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 751,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "434:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 757,
												"src": "418:20:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 750,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "418:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 753,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "456:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 757,
												"src": "440:18:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 752,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "440:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 755,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "468:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 757,
												"src": "460:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 754,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "460:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "417:57:3"
									},
									"src": "403:72:3"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 758,
										"nodeType": "StructuredDocumentation",
										"src": "483:151:3",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"id": 766,
									"name": "Approval",
									"nameLocation": "646:8:3",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 765,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 760,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "671:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 766,
												"src": "655:21:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 759,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "655:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 762,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "694:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 766,
												"src": "678:23:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 761,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "678:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 764,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "711:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 766,
												"src": "703:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 763,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "703:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "654:63:3"
									},
									"src": "640:78:3"
								},
								{
									"documentation": {
										"id": 767,
										"nodeType": "StructuredDocumentation",
										"src": "726:68:3",
										"text": " @dev Returns the amount of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 772,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "809:11:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 768,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "820:2:3"
									},
									"returnParameters": {
										"id": 771,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 770,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 772,
												"src": "846:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 769,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "846:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "845:9:3"
									},
									"scope": 823,
									"src": "800:55:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 773,
										"nodeType": "StructuredDocumentation",
										"src": "863:74:3",
										"text": " @dev Returns the amount of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 780,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "952:9:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 776,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 775,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "970:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 780,
												"src": "962:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 774,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "962:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "961:17:3"
									},
									"returnParameters": {
										"id": 779,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 778,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 780,
												"src": "1002:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 777,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1002:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1001:9:3"
									},
									"scope": 823,
									"src": "943:68:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 781,
										"nodeType": "StructuredDocumentation",
										"src": "1019:208:3",
										"text": " @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 790,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "1242:8:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 786,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 783,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1259:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 790,
												"src": "1251:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 782,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1251:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 785,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1271:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 790,
												"src": "1263:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 784,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1263:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1250:28:3"
									},
									"returnParameters": {
										"id": 789,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 788,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 790,
												"src": "1297:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 787,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1297:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1296:6:3"
									},
									"scope": 823,
									"src": "1233:70:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 791,
										"nodeType": "StructuredDocumentation",
										"src": "1311:270:3",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 800,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "1596:9:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 796,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 793,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1614:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 800,
												"src": "1606:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 792,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1606:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 795,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1629:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 800,
												"src": "1621:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 794,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1621:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1605:32:3"
									},
									"returnParameters": {
										"id": 799,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 798,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 800,
												"src": "1661:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 797,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1661:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1660:9:3"
									},
									"scope": 823,
									"src": "1587:83:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 801,
										"nodeType": "StructuredDocumentation",
										"src": "1678:655:3",
										"text": " @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 810,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "2348:7:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 806,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 803,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2364:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 810,
												"src": "2356:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 802,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2356:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 805,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2381:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 810,
												"src": "2373:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 804,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2373:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2355:33:3"
									},
									"returnParameters": {
										"id": 809,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 808,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 810,
												"src": "2407:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 807,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2407:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2406:6:3"
									},
									"scope": 823,
									"src": "2339:74:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 811,
										"nodeType": "StructuredDocumentation",
										"src": "2421:295:3",
										"text": " @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 822,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "2731:12:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 818,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 813,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2752:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 822,
												"src": "2744:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 812,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2744:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 815,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2766:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 822,
												"src": "2758:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 814,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2758:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 817,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2778:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 822,
												"src": "2770:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 816,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2770:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2743:42:3"
									},
									"returnParameters": {
										"id": 821,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 820,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 822,
												"src": "2804:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 819,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2804:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2803:6:3"
									},
									"scope": 823,
									"src": "2722:88:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 824,
							"src": "210:2603:3",
							"usedErrors": []
						}
					],
					"src": "109:2706:3"
				},
				"id": 3
			},
			"interfaces/IERC20Permit.sol": {
				"ast": {
					"absolutePath": "interfaces/IERC20Permit.sol",
					"exportedSymbols": {
						"IERC20Permit": [
							859
						]
					},
					"id": 860,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 825,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "126:24:4"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20Permit",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 826,
								"nodeType": "StructuredDocumentation",
								"src": "154:1998:4",
								"text": " @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n need to send a transaction, and thus is not required to hold Ether at all.\n ==== Security Considerations\n There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n considered as an intention to spend the allowance in any specific way. The second is that because permits have\n built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n generally recommended is:\n ```solidity\n function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n     doThing(..., value);\n }\n function doThing(..., uint256 value) public {\n     token.safeTransferFrom(msg.sender, address(this), value);\n     ...\n }\n ```\n Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n {SafeERC20-safeTransferFrom}).\n Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n contracts should have entry points that don't rely on permit."
							},
							"fullyImplemented": false,
							"id": 859,
							"linearizedBaseContracts": [
								859
							],
							"name": "IERC20Permit",
							"nameLocation": "2164:12:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 827,
										"nodeType": "StructuredDocumentation",
										"src": "2184:872:4",
										"text": " @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n given ``owner``'s signed approval.\n IMPORTANT: The same issues {IERC20-approve} has related to transaction\n ordering also apply here.\n Emits an {Approval} event.\n Requirements:\n - `spender` cannot be the zero address.\n - `deadline` must be a timestamp in the future.\n - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n over the EIP712-formatted function arguments.\n - the signature must use ``owner``'s current nonce (see {nonces}).\n For more information on the signature format, see the\n https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n section].\n CAUTION: See Security Considerations above."
									},
									"functionSelector": "d505accf",
									"id": 844,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "permit",
									"nameLocation": "3071:6:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 842,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 829,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3096:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 844,
												"src": "3088:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 828,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3088:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 831,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "3120:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 844,
												"src": "3112:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 830,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3112:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 833,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3146:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 844,
												"src": "3138:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 832,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3138:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 835,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "3170:8:4",
												"nodeType": "VariableDeclaration",
												"scope": 844,
												"src": "3162:16:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 834,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3162:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 837,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "3195:1:4",
												"nodeType": "VariableDeclaration",
												"scope": 844,
												"src": "3189:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 836,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "3189:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 839,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "3215:1:4",
												"nodeType": "VariableDeclaration",
												"scope": 844,
												"src": "3207:9:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 838,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3207:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 841,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "3235:1:4",
												"nodeType": "VariableDeclaration",
												"scope": 844,
												"src": "3227:9:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 840,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3227:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3077:166:4"
									},
									"returnParameters": {
										"id": 843,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3252:0:4"
									},
									"scope": 859,
									"src": "3062:191:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 845,
										"nodeType": "StructuredDocumentation",
										"src": "3261:300:4",
										"text": " @dev Returns the current nonce for `owner`. This value must be\n included whenever a signature is generated for {permit}.\n Every successful call to {permit} increases ``owner``'s nonce by one. This\n prevents a signature from being used multiple times."
									},
									"functionSelector": "7ecebe00",
									"id": 852,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "nonces",
									"nameLocation": "3576:6:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 848,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 847,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3591:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 852,
												"src": "3583:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 846,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3583:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3582:15:4"
									},
									"returnParameters": {
										"id": 851,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 850,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 852,
												"src": "3621:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 849,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3621:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3620:9:4"
									},
									"scope": 859,
									"src": "3567:63:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 853,
										"nodeType": "StructuredDocumentation",
										"src": "3638:130:4",
										"text": " @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
									},
									"functionSelector": "3644e515",
									"id": 858,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "DOMAIN_SEPARATOR",
									"nameLocation": "3837:16:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 854,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3853:2:4"
									},
									"returnParameters": {
										"id": 857,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 856,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 858,
												"src": "3879:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 855,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3879:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3878:9:4"
									},
									"scope": 859,
									"src": "3828:60:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 860,
							"src": "2154:1737:4",
							"usedErrors": []
						}
					],
					"src": "126:3767:4"
				},
				"id": 4
			},
			"interfaces/IERC721.sol": {
				"ast": {
					"absolutePath": "interfaces/IERC721.sol",
					"exportedSymbols": {
						"IERC165": [
							745
						],
						"IERC721": [
							976
						]
					},
					"id": 977,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 861,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "111:24:5"
						},
						{
							"absolutePath": "interfaces/IERC165.sol",
							"file": "../interfaces/IERC165.sol",
							"id": 863,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 977,
							"sourceUnit": 746,
							"src": "139:50:5",
							"symbolAliases": [
								{
									"foreign": {
										"id": 862,
										"name": "IERC165",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"src": "147:7:5",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 865,
										"name": "IERC165",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 745,
										"src": "285:7:5"
									},
									"id": 866,
									"nodeType": "InheritanceSpecifier",
									"src": "285:7:5"
								}
							],
							"canonicalName": "IERC721",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 864,
								"nodeType": "StructuredDocumentation",
								"src": "193:69:5",
								"text": " @dev Required interface of an ERC721 compliant contract."
							},
							"fullyImplemented": false,
							"id": 976,
							"linearizedBaseContracts": [
								976,
								745
							],
							"name": "IERC721",
							"nameLocation": "274:7:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 867,
										"nodeType": "StructuredDocumentation",
										"src": "300:90:5",
										"text": " @dev Emitted when `tokenId` token is transferred from `from` to `to`."
									},
									"id": 875,
									"name": "Transfer",
									"nameLocation": "402:8:5",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 874,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 869,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "427:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 875,
												"src": "411:20:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 868,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "411:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 871,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "449:2:5",
												"nodeType": "VariableDeclaration",
												"scope": 875,
												"src": "433:18:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 870,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "433:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 873,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "469:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 875,
												"src": "453:23:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 872,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "453:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "410:67:5"
									},
									"src": "396:82:5"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 876,
										"nodeType": "StructuredDocumentation",
										"src": "486:96:5",
										"text": " @dev Emitted when `owner` enables `approved` to manage the `tokenId` token."
									},
									"id": 884,
									"name": "Approval",
									"nameLocation": "594:8:5",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 883,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 878,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "619:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 884,
												"src": "603:21:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 877,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "603:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 880,
												"indexed": true,
												"mutability": "mutable",
												"name": "approved",
												"nameLocation": "642:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 884,
												"src": "626:24:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 879,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "626:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 882,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "668:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 884,
												"src": "652:23:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 881,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "652:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "602:74:5"
									},
									"src": "588:89:5"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 885,
										"nodeType": "StructuredDocumentation",
										"src": "685:119:5",
										"text": " @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
									},
									"id": 893,
									"name": "ApprovalForAll",
									"nameLocation": "816:14:5",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 892,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 887,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "847:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 893,
												"src": "831:21:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 886,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "831:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 889,
												"indexed": true,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "870:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 893,
												"src": "854:24:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 888,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "854:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 891,
												"indexed": false,
												"mutability": "mutable",
												"name": "approved",
												"nameLocation": "885:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 893,
												"src": "880:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 890,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "880:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "830:64:5"
									},
									"src": "810:85:5"
								},
								{
									"documentation": {
										"id": 894,
										"nodeType": "StructuredDocumentation",
										"src": "903:78:5",
										"text": " @dev Returns the number of tokens in ``owner``'s account."
									},
									"functionSelector": "70a08231",
									"id": 901,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "996:9:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 897,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 896,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1014:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 901,
												"src": "1006:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 895,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1006:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1005:15:5"
									},
									"returnParameters": {
										"id": 900,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 899,
												"mutability": "mutable",
												"name": "balance",
												"nameLocation": "1052:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 901,
												"src": "1044:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 898,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1044:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1043:17:5"
									},
									"scope": 976,
									"src": "987:74:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 902,
										"nodeType": "StructuredDocumentation",
										"src": "1069:137:5",
										"text": " @dev Returns the owner of the `tokenId` token.\n Requirements:\n - `tokenId` must exist."
									},
									"functionSelector": "6352211e",
									"id": 909,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "ownerOf",
									"nameLocation": "1221:7:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 905,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 904,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "1237:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 909,
												"src": "1229:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 903,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1229:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1228:17:5"
									},
									"returnParameters": {
										"id": 908,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 907,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1277:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 909,
												"src": "1269:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 906,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1269:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1268:15:5"
									},
									"scope": 976,
									"src": "1212:72:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 910,
										"nodeType": "StructuredDocumentation",
										"src": "1292:578:5",
										"text": " @dev Safely transfers `tokenId` token from `from` to `to`.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n   a safe transfer.\n Emits a {Transfer} event."
									},
									"functionSelector": "b88d4fde",
									"id": 921,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "1885:16:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 919,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 912,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "1910:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 921,
												"src": "1902:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 911,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1902:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 914,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1924:2:5",
												"nodeType": "VariableDeclaration",
												"scope": 921,
												"src": "1916:10:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 913,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1916:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 916,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "1936:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 921,
												"src": "1928:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 915,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1928:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 918,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "1960:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 921,
												"src": "1945:19:5",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 917,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1945:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1901:64:5"
									},
									"returnParameters": {
										"id": 920,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1974:0:5"
									},
									"scope": 976,
									"src": "1876:99:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 922,
										"nodeType": "StructuredDocumentation",
										"src": "1983:720:5",
										"text": " @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n are aware of the ERC721 protocol to prevent tokens from being forever locked.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\n   {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n   a safe transfer.\n Emits a {Transfer} event."
									},
									"functionSelector": "42842e0e",
									"id": 931,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "2718:16:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 929,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 924,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2743:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 931,
												"src": "2735:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 923,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2735:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 926,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2757:2:5",
												"nodeType": "VariableDeclaration",
												"scope": 931,
												"src": "2749:10:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 925,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2749:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 928,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "2769:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 931,
												"src": "2761:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 927,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2761:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2734:43:5"
									},
									"returnParameters": {
										"id": 930,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2786:0:5"
									},
									"scope": 976,
									"src": "2709:78:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 932,
										"nodeType": "StructuredDocumentation",
										"src": "2795:747:5",
										"text": " @dev Transfers `tokenId` token from `from` to `to`.\n WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n understand this adds an external call which potentially creates a reentrancy vulnerability.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 941,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "3557:12:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 939,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 934,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "3578:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 941,
												"src": "3570:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 933,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3570:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 936,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "3592:2:5",
												"nodeType": "VariableDeclaration",
												"scope": 941,
												"src": "3584:10:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 935,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3584:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 938,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3604:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 941,
												"src": "3596:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 937,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3596:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3569:43:5"
									},
									"returnParameters": {
										"id": 940,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3621:0:5"
									},
									"scope": 976,
									"src": "3548:74:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 942,
										"nodeType": "StructuredDocumentation",
										"src": "3630:464:5",
										"text": " @dev Gives permission to `to` to transfer `tokenId` token to another account.\n The approval is cleared when the token is transferred.\n Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n Requirements:\n - The caller must own the token or be an approved operator.\n - `tokenId` must exist.\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 949,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "4109:7:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 947,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 944,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "4125:2:5",
												"nodeType": "VariableDeclaration",
												"scope": 949,
												"src": "4117:10:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 943,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4117:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 946,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "4137:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 949,
												"src": "4129:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 945,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4129:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4116:29:5"
									},
									"returnParameters": {
										"id": 948,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4154:0:5"
									},
									"scope": 976,
									"src": "4100:55:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 950,
										"nodeType": "StructuredDocumentation",
										"src": "4163:324:5",
										"text": " @dev Approve or remove `operator` as an operator for the caller.\n Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n Requirements:\n - The `operator` cannot be the address zero.\n Emits an {ApprovalForAll} event."
									},
									"functionSelector": "a22cb465",
									"id": 957,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setApprovalForAll",
									"nameLocation": "4502:17:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 955,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 952,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4528:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 957,
												"src": "4520:16:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 951,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4520:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 954,
												"mutability": "mutable",
												"name": "approved",
												"nameLocation": "4543:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 957,
												"src": "4538:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 953,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4538:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4519:33:5"
									},
									"returnParameters": {
										"id": 956,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4561:0:5"
									},
									"scope": 976,
									"src": "4493:69:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 958,
										"nodeType": "StructuredDocumentation",
										"src": "4570:145:5",
										"text": " @dev Returns the account approved for `tokenId` token.\n Requirements:\n - `tokenId` must exist."
									},
									"functionSelector": "081812fc",
									"id": 965,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getApproved",
									"nameLocation": "4730:11:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 961,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 960,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "4750:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 965,
												"src": "4742:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 959,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4742:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4741:17:5"
									},
									"returnParameters": {
										"id": 964,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 963,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4790:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 965,
												"src": "4782:16:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 962,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4782:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4781:18:5"
									},
									"scope": 976,
									"src": "4721:79:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 966,
										"nodeType": "StructuredDocumentation",
										"src": "4808:142:5",
										"text": " @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n See {setApprovalForAll}"
									},
									"functionSelector": "e985e9c5",
									"id": 975,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isApprovedForAll",
									"nameLocation": "4965:16:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 971,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 968,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "4990:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 975,
												"src": "4982:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 967,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4982:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 970,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "5005:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 975,
												"src": "4997:16:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 969,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4997:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4981:33:5"
									},
									"returnParameters": {
										"id": 974,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 973,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 975,
												"src": "5038:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 972,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5038:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5037:6:5"
									},
									"scope": 976,
									"src": "4956:88:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 977,
							"src": "264:4783:5",
							"usedErrors": []
						}
					],
					"src": "111:4938:5"
				},
				"id": 5
			},
			"interfaces/IERC721Enumerable.sol": {
				"ast": {
					"absolutePath": "interfaces/IERC721Enumerable.sol",
					"exportedSymbols": {
						"IERC165": [
							745
						],
						"IERC721": [
							976
						],
						"IERC721Enumerable": [
							1007
						]
					},
					"id": 1008,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 978,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "35:24:6"
						},
						{
							"absolutePath": "interfaces/IERC721.sol",
							"file": "../interfaces/IERC721.sol",
							"id": 979,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1008,
							"sourceUnit": 977,
							"src": "63:35:6",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 981,
										"name": "IERC721",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 976,
										"src": "274:7:6"
									},
									"id": 982,
									"nodeType": "InheritanceSpecifier",
									"src": "274:7:6"
								}
							],
							"canonicalName": "IERC721Enumerable",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 980,
								"nodeType": "StructuredDocumentation",
								"src": "102:139:6",
								"text": " @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n @dev See https://eips.ethereum.org/EIPS/eip-721"
							},
							"fullyImplemented": false,
							"id": 1007,
							"linearizedBaseContracts": [
								1007,
								976,
								745
							],
							"name": "IERC721Enumerable",
							"nameLocation": "253:17:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 983,
										"nodeType": "StructuredDocumentation",
										"src": "291:84:6",
										"text": " @dev Returns the total amount of tokens stored by the contract."
									},
									"functionSelector": "18160ddd",
									"id": 988,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "390:11:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 984,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "401:2:6"
									},
									"returnParameters": {
										"id": 987,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 986,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 988,
												"src": "427:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 985,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "427:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "426:9:6"
									},
									"scope": 1007,
									"src": "381:55:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 989,
										"nodeType": "StructuredDocumentation",
										"src": "444:174:6",
										"text": " @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n Use along with {balanceOf} to enumerate all of ``owner``'s tokens."
									},
									"functionSelector": "2f745c59",
									"id": 998,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "tokenOfOwnerByIndex",
									"nameLocation": "633:19:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 994,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 991,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "661:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 998,
												"src": "653:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 990,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "653:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 993,
												"mutability": "mutable",
												"name": "index",
												"nameLocation": "676:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 998,
												"src": "668:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 992,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "668:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "652:30:6"
									},
									"returnParameters": {
										"id": 997,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 996,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "714:7:6",
												"nodeType": "VariableDeclaration",
												"scope": 998,
												"src": "706:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 995,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "706:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "705:17:6"
									},
									"scope": 1007,
									"src": "624:99:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 999,
										"nodeType": "StructuredDocumentation",
										"src": "731:167:6",
										"text": " @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n Use along with {totalSupply} to enumerate all tokens."
									},
									"functionSelector": "4f6ccce7",
									"id": 1006,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "tokenByIndex",
									"nameLocation": "913:12:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1002,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1001,
												"mutability": "mutable",
												"name": "index",
												"nameLocation": "934:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 1006,
												"src": "926:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1000,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "926:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "925:15:6"
									},
									"returnParameters": {
										"id": 1005,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1004,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1006,
												"src": "964:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1003,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "964:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "963:9:6"
									},
									"scope": 1007,
									"src": "904:69:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1008,
							"src": "243:733:6",
							"usedErrors": []
						}
					],
					"src": "35:943:6"
				},
				"id": 6
			},
			"interfaces/IERC721Metadata.sol": {
				"ast": {
					"absolutePath": "interfaces/IERC721Metadata.sol",
					"exportedSymbols": {
						"IERC165": [
							745
						],
						"IERC721": [
							976
						],
						"IERC721Metadata": [
							1034
						]
					},
					"id": 1035,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1009,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "115:24:7"
						},
						{
							"absolutePath": "interfaces/IERC721.sol",
							"file": "../interfaces/IERC721.sol",
							"id": 1010,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1035,
							"sourceUnit": 977,
							"src": "143:35:7",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1012,
										"name": "IERC721",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 976,
										"src": "349:7:7"
									},
									"id": 1013,
									"nodeType": "InheritanceSpecifier",
									"src": "349:7:7"
								}
							],
							"canonicalName": "IERC721Metadata",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1011,
								"nodeType": "StructuredDocumentation",
								"src": "182:136:7",
								"text": " @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n @dev See https://eips.ethereum.org/EIPS/eip-721"
							},
							"fullyImplemented": false,
							"id": 1034,
							"linearizedBaseContracts": [
								1034,
								976,
								745
							],
							"name": "IERC721Metadata",
							"nameLocation": "330:15:7",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1014,
										"nodeType": "StructuredDocumentation",
										"src": "364:60:7",
										"text": " @dev Returns the token collection name."
									},
									"functionSelector": "06fdde03",
									"id": 1019,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "439:4:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1015,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "443:2:7"
									},
									"returnParameters": {
										"id": 1018,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1017,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1019,
												"src": "469:13:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1016,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "469:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "468:15:7"
									},
									"scope": 1034,
									"src": "430:54:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1020,
										"nodeType": "StructuredDocumentation",
										"src": "492:62:7",
										"text": " @dev Returns the token collection symbol."
									},
									"functionSelector": "95d89b41",
									"id": 1025,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "569:6:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1021,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "575:2:7"
									},
									"returnParameters": {
										"id": 1024,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1023,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1025,
												"src": "601:13:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1022,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "601:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "600:15:7"
									},
									"scope": 1034,
									"src": "560:56:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1026,
										"nodeType": "StructuredDocumentation",
										"src": "624:92:7",
										"text": " @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token."
									},
									"functionSelector": "c87b56dd",
									"id": 1033,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "tokenURI",
									"nameLocation": "731:8:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1029,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1028,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "748:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 1033,
												"src": "740:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1027,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "740:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "739:17:7"
									},
									"returnParameters": {
										"id": 1032,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1031,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1033,
												"src": "780:13:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1030,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "780:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "779:15:7"
									},
									"scope": 1034,
									"src": "722:73:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1035,
							"src": "320:478:7",
							"usedErrors": []
						}
					],
					"src": "115:683:7"
				},
				"id": 7
			},
			"interfaces/IERC721Receiver.sol": {
				"ast": {
					"absolutePath": "interfaces/IERC721Receiver.sol",
					"exportedSymbols": {
						"IERC721Receiver": [
							1052
						]
					},
					"id": 1053,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1036,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "119:24:8"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC721Receiver",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1037,
								"nodeType": "StructuredDocumentation",
								"src": "147:156:8",
								"text": " @title ERC721 token receiver interface\n @dev Interface for any contract that wants to support safeTransfers\n from ERC721 asset contracts."
							},
							"fullyImplemented": false,
							"id": 1052,
							"linearizedBaseContracts": [
								1052
							],
							"name": "IERC721Receiver",
							"nameLocation": "315:15:8",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1038,
										"nodeType": "StructuredDocumentation",
										"src": "338:501:8",
										"text": " @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n by `operator` from `from`, this function is called.\n It must return its Solidity selector to confirm the token transfer.\n If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`."
									},
									"functionSelector": "150b7a02",
									"id": 1051,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "onERC721Received",
									"nameLocation": "854:16:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1047,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1040,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "889:8:8",
												"nodeType": "VariableDeclaration",
												"scope": 1051,
												"src": "881:16:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1039,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "881:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1042,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "916:4:8",
												"nodeType": "VariableDeclaration",
												"scope": 1051,
												"src": "908:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1041,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "908:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1044,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "939:7:8",
												"nodeType": "VariableDeclaration",
												"scope": 1051,
												"src": "931:15:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1043,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "931:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1046,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "972:4:8",
												"nodeType": "VariableDeclaration",
												"scope": 1051,
												"src": "957:19:8",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1045,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "957:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "870:113:8"
									},
									"returnParameters": {
										"id": 1050,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1049,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1051,
												"src": "1002:6:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 1048,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "1002:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1001:8:8"
									},
									"scope": 1052,
									"src": "845:165:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1053,
							"src": "305:708:8",
							"usedErrors": []
						}
					],
					"src": "119:894:8"
				},
				"id": 8
			},
			"interfaces/IError.sol": {
				"ast": {
					"absolutePath": "interfaces/IError.sol",
					"exportedSymbols": {
						"IError": [
							1065
						]
					},
					"id": 1066,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1054,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "31:24:9"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IError",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": true,
							"id": 1065,
							"linearizedBaseContracts": [
								1065
							],
							"name": "IError",
							"nameLocation": "69:6:9",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"id": 1056,
									"name": "NotEnoughAmount",
									"nameLocation": "112:15:9",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1055,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "127:2:9"
									},
									"src": "106:24:9"
								},
								{
									"id": 1058,
									"name": "AlreadyInjectToken",
									"nameLocation": "189:18:9",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1057,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "207:2:9"
									},
									"src": "183:27:9"
								},
								{
									"id": 1060,
									"name": "NotInjectToken",
									"nameLocation": "269:14:9",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1059,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "283:2:9"
									},
									"src": "263:23:9"
								},
								{
									"id": 1062,
									"name": "NotBuyer",
									"nameLocation": "321:8:9",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1061,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "329:2:9"
									},
									"src": "315:17:9"
								},
								{
									"id": 1064,
									"name": "NorSolder",
									"nameLocation": "367:9:9",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1063,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "376:2:9"
									},
									"src": "361:18:9"
								}
							],
							"scope": 1066,
							"src": "59:323:9",
							"usedErrors": [
								1056,
								1058,
								1060,
								1062,
								1064
							]
						}
					],
					"src": "31:351:9"
				},
				"id": 9
			},
			"interfaces/ITimeStruct.sol": {
				"ast": {
					"absolutePath": "interfaces/ITimeStruct.sol",
					"exportedSymbols": {
						"ITimeStruct": [
							1085
						]
					},
					"id": 1086,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1067,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "31:24:10"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "ITimeStruct",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": true,
							"id": 1085,
							"linearizedBaseContracts": [
								1085
							],
							"name": "ITimeStruct",
							"nameLocation": "69:11:10",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "ITimeStruct.tradeMes",
									"id": 1084,
									"members": [
										{
											"constant": false,
											"id": 1069,
											"mutability": "mutable",
											"name": "tradeState",
											"nameLocation": "119:10:10",
											"nodeType": "VariableDeclaration",
											"scope": 1084,
											"src": "113:16:10",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint8",
												"typeString": "uint8"
											},
											"typeName": {
												"id": 1068,
												"name": "uint8",
												"nodeType": "ElementaryTypeName",
												"src": "113:5:10",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1071,
											"mutability": "mutable",
											"name": "tradeId",
											"nameLocation": "148:7:10",
											"nodeType": "VariableDeclaration",
											"scope": 1084,
											"src": "141:14:10",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint64",
												"typeString": "uint64"
											},
											"typeName": {
												"id": 1070,
												"name": "uint64",
												"nodeType": "ElementaryTypeName",
												"src": "141:6:10",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1073,
											"mutability": "mutable",
											"name": "buyTime",
											"nameLocation": "173:7:10",
											"nodeType": "VariableDeclaration",
											"scope": 1084,
											"src": "166:14:10",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint56",
												"typeString": "uint56"
											},
											"typeName": {
												"id": 1072,
												"name": "uint56",
												"nodeType": "ElementaryTypeName",
												"src": "166:6:10",
												"typeDescriptions": {
													"typeIdentifier": "t_uint56",
													"typeString": "uint56"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1075,
											"mutability": "mutable",
											"name": "buyTotalAmount",
											"nameLocation": "199:14:10",
											"nodeType": "VariableDeclaration",
											"scope": 1084,
											"src": "191:22:10",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint128",
												"typeString": "uint128"
											},
											"typeName": {
												"id": 1074,
												"name": "uint128",
												"nodeType": "ElementaryTypeName",
												"src": "191:7:10",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1077,
											"mutability": "mutable",
											"name": "buyPrice",
											"nameLocation": "259:8:10",
											"nodeType": "VariableDeclaration",
											"scope": 1084,
											"src": "251:16:10",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint128",
												"typeString": "uint128"
											},
											"typeName": {
												"id": 1076,
												"name": "uint128",
												"nodeType": "ElementaryTypeName",
												"src": "251:7:10",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1079,
											"mutability": "mutable",
											"name": "tokenAddress",
											"nameLocation": "321:12:10",
											"nodeType": "VariableDeclaration",
											"scope": 1084,
											"src": "313:20:10",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1078,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "313:7:10",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1081,
											"mutability": "mutable",
											"name": "buyerAddress",
											"nameLocation": "352:12:10",
											"nodeType": "VariableDeclaration",
											"scope": 1084,
											"src": "344:20:10",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1080,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "344:7:10",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1083,
											"mutability": "mutable",
											"name": "solderAddress",
											"nameLocation": "383:13:10",
											"nodeType": "VariableDeclaration",
											"scope": 1084,
											"src": "375:21:10",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1082,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "375:7:10",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "tradeMes",
									"nameLocation": "94:8:10",
									"nodeType": "StructDefinition",
									"scope": 1085,
									"src": "87:317:10",
									"visibility": "public"
								}
							],
							"scope": 1086,
							"src": "59:348:10",
							"usedErrors": []
						}
					],
					"src": "31:376:10"
				},
				"id": 10
			},
			"interfaces/UniswapV3/IERC721Permit.sol": {
				"ast": {
					"absolutePath": "interfaces/UniswapV3/IERC721Permit.sol",
					"exportedSymbols": {
						"IERC165": [
							745
						],
						"IERC721": [
							976
						],
						"IERC721Permit": [
							1120
						]
					},
					"id": 1121,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1087,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "46:24:11"
						},
						{
							"absolutePath": "interfaces/IERC721.sol",
							"file": "../../interfaces/IERC721.sol",
							"id": 1088,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1121,
							"sourceUnit": 977,
							"src": "74:38:11",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1090,
										"name": "IERC721",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 976,
										"src": "269:7:11"
									},
									"id": 1091,
									"nodeType": "InheritanceSpecifier",
									"src": "269:7:11"
								}
							],
							"canonicalName": "IERC721Permit",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1089,
								"nodeType": "StructuredDocumentation",
								"src": "116:126:11",
								"text": "@title ERC721 with permit\n @notice Extension to ERC721 that includes a permit function for signature based approvals"
							},
							"fullyImplemented": false,
							"id": 1120,
							"linearizedBaseContracts": [
								1120,
								976,
								745
							],
							"name": "IERC721Permit",
							"nameLocation": "252:13:11",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1092,
										"nodeType": "StructuredDocumentation",
										"src": "284:105:11",
										"text": "@notice The permit typehash used in the permit signature\n @return The typehash for the permit"
									},
									"functionSelector": "30adf81f",
									"id": 1097,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "PERMIT_TYPEHASH",
									"nameLocation": "404:15:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1093,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "419:2:11"
									},
									"returnParameters": {
										"id": 1096,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1095,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1097,
												"src": "445:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1094,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "445:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "444:9:11"
									},
									"scope": 1120,
									"src": "395:59:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1098,
										"nodeType": "StructuredDocumentation",
										"src": "462:136:11",
										"text": "@notice The domain separator used in the permit signature\n @return The domain seperator used in encoding of permit signature"
									},
									"functionSelector": "3644e515",
									"id": 1103,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "DOMAIN_SEPARATOR",
									"nameLocation": "613:16:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1099,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "629:2:11"
									},
									"returnParameters": {
										"id": 1102,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1101,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1103,
												"src": "655:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1100,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "655:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "654:9:11"
									},
									"scope": 1120,
									"src": "604:60:11",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1104,
										"nodeType": "StructuredDocumentation",
										"src": "672:611:11",
										"text": "@notice Approve of a specific token ID for spending by spender via signature\n @param spender The account that is being approved\n @param tokenId The ID of the token that is being approved for spending\n @param deadline The deadline timestamp by which the call must be mined for the approve to work\n @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\n @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\n @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`"
									},
									"functionSelector": "7ac2ff7b",
									"id": 1119,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "permit",
									"nameLocation": "1298:6:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1117,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1106,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1323:7:11",
												"nodeType": "VariableDeclaration",
												"scope": 1119,
												"src": "1315:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1105,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1315:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1108,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "1349:7:11",
												"nodeType": "VariableDeclaration",
												"scope": 1119,
												"src": "1341:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1107,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1341:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1110,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "1375:8:11",
												"nodeType": "VariableDeclaration",
												"scope": 1119,
												"src": "1367:16:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1109,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1367:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1112,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "1400:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 1119,
												"src": "1394:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1111,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "1394:5:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1114,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "1420:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 1119,
												"src": "1412:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1113,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1412:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1116,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "1440:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 1119,
												"src": "1432:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1115,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1432:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1304:144:11"
									},
									"returnParameters": {
										"id": 1118,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1465:0:11"
									},
									"scope": 1120,
									"src": "1289:177:11",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1121,
							"src": "242:1227:11",
							"usedErrors": []
						}
					],
					"src": "46:1423:11"
				},
				"id": 11
			},
			"interfaces/UniswapV3/INonfungiblePositionManager.sol": {
				"ast": {
					"absolutePath": "interfaces/UniswapV3/INonfungiblePositionManager.sol",
					"exportedSymbols": {
						"IERC165": [
							745
						],
						"IERC721": [
							976
						],
						"IERC721Enumerable": [
							1007
						],
						"IERC721Metadata": [
							1034
						],
						"IERC721Permit": [
							1120
						],
						"INonfungiblePositionManager": [
							1319
						],
						"IPeripheryImmutableState": [
							1335
						],
						"IPeripheryPayments": [
							1361
						],
						"IPoolInitializer": [
							1380
						],
						"PoolAddress": [
							1810
						]
					},
					"id": 1320,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1122,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "31:24:12"
						},
						{
							"id": 1123,
							"literals": [
								"abicoder",
								"v2"
							],
							"nodeType": "PragmaDirective",
							"src": "57:19:12"
						},
						{
							"absolutePath": "interfaces/IERC721Metadata.sol",
							"file": "../../interfaces/IERC721Metadata.sol",
							"id": 1124,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1320,
							"sourceUnit": 1035,
							"src": "80:46:12",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "interfaces/IERC721Enumerable.sol",
							"file": "../../interfaces/IERC721Enumerable.sol",
							"id": 1125,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1320,
							"sourceUnit": 1008,
							"src": "128:48:12",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "interfaces/UniswapV3/IPoolInitializer.sol",
							"file": "../../interfaces/UniswapV3/IPoolInitializer.sol",
							"id": 1126,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1320,
							"sourceUnit": 1381,
							"src": "180:57:12",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "interfaces/UniswapV3/IERC721Permit.sol",
							"file": "../../interfaces/UniswapV3/IERC721Permit.sol",
							"id": 1127,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1320,
							"sourceUnit": 1121,
							"src": "239:54:12",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "interfaces/UniswapV3/IPeripheryPayments.sol",
							"file": "../../interfaces/UniswapV3/IPeripheryPayments.sol",
							"id": 1128,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1320,
							"sourceUnit": 1362,
							"src": "295:59:12",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "interfaces/UniswapV3/IPeripheryImmutableState.sol",
							"file": "../../interfaces/UniswapV3/IPeripheryImmutableState.sol",
							"id": 1129,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1320,
							"sourceUnit": 1336,
							"src": "356:65:12",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "libraries/PoolAddress.sol",
							"file": "../../libraries/PoolAddress.sol",
							"id": 1130,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1320,
							"sourceUnit": 1811,
							"src": "423:41:12",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1132,
										"name": "IPoolInitializer",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1380,
										"src": "694:16:12"
									},
									"id": 1133,
									"nodeType": "InheritanceSpecifier",
									"src": "694:16:12"
								},
								{
									"baseName": {
										"id": 1134,
										"name": "IPeripheryPayments",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1361,
										"src": "717:18:12"
									},
									"id": 1135,
									"nodeType": "InheritanceSpecifier",
									"src": "717:18:12"
								},
								{
									"baseName": {
										"id": 1136,
										"name": "IPeripheryImmutableState",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1335,
										"src": "742:24:12"
									},
									"id": 1137,
									"nodeType": "InheritanceSpecifier",
									"src": "742:24:12"
								},
								{
									"baseName": {
										"id": 1138,
										"name": "IERC721Metadata",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1034,
										"src": "773:15:12"
									},
									"id": 1139,
									"nodeType": "InheritanceSpecifier",
									"src": "773:15:12"
								},
								{
									"baseName": {
										"id": 1140,
										"name": "IERC721Enumerable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1007,
										"src": "795:17:12"
									},
									"id": 1141,
									"nodeType": "InheritanceSpecifier",
									"src": "795:17:12"
								},
								{
									"baseName": {
										"id": 1142,
										"name": "IERC721Permit",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1120,
										"src": "819:13:12"
									},
									"id": 1143,
									"nodeType": "InheritanceSpecifier",
									"src": "819:13:12"
								}
							],
							"canonicalName": "INonfungiblePositionManager",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1131,
								"nodeType": "StructuredDocumentation",
								"src": "468:180:12",
								"text": "@title Non-fungible token for positions\n @notice Wraps Uniswap V3 positions in a non-fungible token interface which allows for them to be transferred\n and authorized."
							},
							"fullyImplemented": false,
							"id": 1319,
							"linearizedBaseContracts": [
								1319,
								1120,
								1007,
								1034,
								976,
								745,
								1335,
								1361,
								1380
							],
							"name": "INonfungiblePositionManager",
							"nameLocation": "658:27:12",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 1144,
										"nodeType": "StructuredDocumentation",
										"src": "841:463:12",
										"text": "@notice Emitted when liquidity is increased for a position NFT\n @dev Also emitted when a token is minted\n @param tokenId The ID of the token for which liquidity was increased\n @param liquidity The amount by which liquidity for the NFT position was increased\n @param amount0 The amount of token0 that was paid for the increase in liquidity\n @param amount1 The amount of token1 that was paid for the increase in liquidity"
									},
									"id": 1154,
									"name": "IncreaseLiquidity",
									"nameLocation": "1316:17:12",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1153,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1146,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "1350:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 1154,
												"src": "1334:23:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1145,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1334:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1148,
												"indexed": false,
												"mutability": "mutable",
												"name": "liquidity",
												"nameLocation": "1367:9:12",
												"nodeType": "VariableDeclaration",
												"scope": 1154,
												"src": "1359:17:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1147,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "1359:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1150,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nameLocation": "1386:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 1154,
												"src": "1378:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1149,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1378:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1152,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nameLocation": "1403:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 1154,
												"src": "1395:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1151,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1395:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1333:78:12"
									},
									"src": "1310:102:12"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1155,
										"nodeType": "StructuredDocumentation",
										"src": "1418:423:12",
										"text": "@notice Emitted when liquidity is decreased for a position NFT\n @param tokenId The ID of the token for which liquidity was decreased\n @param liquidity The amount by which liquidity for the NFT position was decreased\n @param amount0 The amount of token0 that was accounted for the decrease in liquidity\n @param amount1 The amount of token1 that was accounted for the decrease in liquidity"
									},
									"id": 1165,
									"name": "DecreaseLiquidity",
									"nameLocation": "1853:17:12",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1164,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1157,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "1887:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 1165,
												"src": "1871:23:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1156,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1871:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1159,
												"indexed": false,
												"mutability": "mutable",
												"name": "liquidity",
												"nameLocation": "1904:9:12",
												"nodeType": "VariableDeclaration",
												"scope": 1165,
												"src": "1896:17:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1158,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "1896:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1161,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nameLocation": "1923:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 1165,
												"src": "1915:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1160,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1915:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1163,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nameLocation": "1940:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 1165,
												"src": "1932:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1162,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1932:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1870:78:12"
									},
									"src": "1847:102:12"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1166,
										"nodeType": "StructuredDocumentation",
										"src": "1955:527:12",
										"text": "@notice Emitted when tokens are collected for a position NFT\n @dev The amounts reported may not be exactly equivalent to the amounts transferred, due to rounding behavior\n @param tokenId The ID of the token for which underlying tokens were collected\n @param recipient The address of the account that received the collected tokens\n @param amount0 The amount of token0 owed to the position that was collected\n @param amount1 The amount of token1 owed to the position that was collected"
									},
									"id": 1176,
									"name": "Collect",
									"nameLocation": "2494:7:12",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1175,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1168,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "2518:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 1176,
												"src": "2502:23:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1167,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2502:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1170,
												"indexed": false,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "2535:9:12",
												"nodeType": "VariableDeclaration",
												"scope": 1176,
												"src": "2527:17:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1169,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2527:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1172,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nameLocation": "2554:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 1176,
												"src": "2546:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1171,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2546:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1174,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nameLocation": "2571:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 1176,
												"src": "2563:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1173,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2563:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2501:78:12"
									},
									"src": "2488:92:12"
								},
								{
									"documentation": {
										"id": 1177,
										"nodeType": "StructuredDocumentation",
										"src": "2588:1171:12",
										"text": "@notice Returns the position information associated with a given token ID.\n @dev Throws if the token ID is not valid.\n @param tokenId The ID of the token that represents the position\n @return nonce The nonce for permits\n @return operator The address that is approved for spending\n @return token0 The address of the token0 for a specific pool\n @return token1 The address of the token1 for a specific pool\n @return fee The fee associated with the pool\n @return tickLower The lower end of the tick range for the position\n @return tickUpper The higher end of the tick range for the position\n @return liquidity The liquidity of the position\n @return feeGrowthInside0LastX128 The fee growth of token0 as of the last action on the individual position\n @return feeGrowthInside1LastX128 The fee growth of token1 as of the last action on the individual position\n @return tokensOwed0 The uncollected amount of token0 owed to the position as of the last computation\n @return tokensOwed1 The uncollected amount of token1 owed to the position as of the last computation"
									},
									"functionSelector": "99fbab88",
									"id": 1206,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "positions",
									"nameLocation": "3774:9:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1180,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1179,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3792:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 1206,
												"src": "3784:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1178,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3784:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3783:17:12"
									},
									"returnParameters": {
										"id": 1205,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1182,
												"mutability": "mutable",
												"name": "nonce",
												"nameLocation": "3872:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 1206,
												"src": "3865:12:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint96",
													"typeString": "uint96"
												},
												"typeName": {
													"id": 1181,
													"name": "uint96",
													"nodeType": "ElementaryTypeName",
													"src": "3865:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint96",
														"typeString": "uint96"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1184,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "3900:8:12",
												"nodeType": "VariableDeclaration",
												"scope": 1206,
												"src": "3892:16:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1183,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3892:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1186,
												"mutability": "mutable",
												"name": "token0",
												"nameLocation": "3931:6:12",
												"nodeType": "VariableDeclaration",
												"scope": 1206,
												"src": "3923:14:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1185,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3923:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1188,
												"mutability": "mutable",
												"name": "token1",
												"nameLocation": "3960:6:12",
												"nodeType": "VariableDeclaration",
												"scope": 1206,
												"src": "3952:14:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1187,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3952:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1190,
												"mutability": "mutable",
												"name": "fee",
												"nameLocation": "3988:3:12",
												"nodeType": "VariableDeclaration",
												"scope": 1206,
												"src": "3981:10:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 1189,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "3981:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1192,
												"mutability": "mutable",
												"name": "tickLower",
												"nameLocation": "4012:9:12",
												"nodeType": "VariableDeclaration",
												"scope": 1206,
												"src": "4006:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1191,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "4006:5:12",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1194,
												"mutability": "mutable",
												"name": "tickUpper",
												"nameLocation": "4042:9:12",
												"nodeType": "VariableDeclaration",
												"scope": 1206,
												"src": "4036:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1193,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "4036:5:12",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1196,
												"mutability": "mutable",
												"name": "liquidity",
												"nameLocation": "4074:9:12",
												"nodeType": "VariableDeclaration",
												"scope": 1206,
												"src": "4066:17:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1195,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "4066:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1198,
												"mutability": "mutable",
												"name": "feeGrowthInside0LastX128",
												"nameLocation": "4106:24:12",
												"nodeType": "VariableDeclaration",
												"scope": 1206,
												"src": "4098:32:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1197,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4098:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1200,
												"mutability": "mutable",
												"name": "feeGrowthInside1LastX128",
												"nameLocation": "4153:24:12",
												"nodeType": "VariableDeclaration",
												"scope": 1206,
												"src": "4145:32:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1199,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4145:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1202,
												"mutability": "mutable",
												"name": "tokensOwed0",
												"nameLocation": "4200:11:12",
												"nodeType": "VariableDeclaration",
												"scope": 1206,
												"src": "4192:19:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1201,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "4192:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1204,
												"mutability": "mutable",
												"name": "tokensOwed1",
												"nameLocation": "4234:11:12",
												"nodeType": "VariableDeclaration",
												"scope": 1206,
												"src": "4226:19:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1203,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "4226:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3850:406:12"
									},
									"scope": 1319,
									"src": "3765:492:12",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"canonicalName": "INonfungiblePositionManager.MintParams",
									"id": 1229,
									"members": [
										{
											"constant": false,
											"id": 1208,
											"mutability": "mutable",
											"name": "token0",
											"nameLocation": "4302:6:12",
											"nodeType": "VariableDeclaration",
											"scope": 1229,
											"src": "4294:14:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1207,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "4294:7:12",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1210,
											"mutability": "mutable",
											"name": "token1",
											"nameLocation": "4327:6:12",
											"nodeType": "VariableDeclaration",
											"scope": 1229,
											"src": "4319:14:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1209,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "4319:7:12",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1212,
											"mutability": "mutable",
											"name": "fee",
											"nameLocation": "4351:3:12",
											"nodeType": "VariableDeclaration",
											"scope": 1229,
											"src": "4344:10:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint24",
												"typeString": "uint24"
											},
											"typeName": {
												"id": 1211,
												"name": "uint24",
												"nodeType": "ElementaryTypeName",
												"src": "4344:6:12",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1214,
											"mutability": "mutable",
											"name": "tickLower",
											"nameLocation": "4371:9:12",
											"nodeType": "VariableDeclaration",
											"scope": 1229,
											"src": "4365:15:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_int24",
												"typeString": "int24"
											},
											"typeName": {
												"id": 1213,
												"name": "int24",
												"nodeType": "ElementaryTypeName",
												"src": "4365:5:12",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1216,
											"mutability": "mutable",
											"name": "tickUpper",
											"nameLocation": "4397:9:12",
											"nodeType": "VariableDeclaration",
											"scope": 1229,
											"src": "4391:15:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_int24",
												"typeString": "int24"
											},
											"typeName": {
												"id": 1215,
												"name": "int24",
												"nodeType": "ElementaryTypeName",
												"src": "4391:5:12",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1218,
											"mutability": "mutable",
											"name": "amount0Desired",
											"nameLocation": "4425:14:12",
											"nodeType": "VariableDeclaration",
											"scope": 1229,
											"src": "4417:22:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1217,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "4417:7:12",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1220,
											"mutability": "mutable",
											"name": "amount1Desired",
											"nameLocation": "4458:14:12",
											"nodeType": "VariableDeclaration",
											"scope": 1229,
											"src": "4450:22:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1219,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "4450:7:12",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1222,
											"mutability": "mutable",
											"name": "amount0Min",
											"nameLocation": "4491:10:12",
											"nodeType": "VariableDeclaration",
											"scope": 1229,
											"src": "4483:18:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1221,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "4483:7:12",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1224,
											"mutability": "mutable",
											"name": "amount1Min",
											"nameLocation": "4520:10:12",
											"nodeType": "VariableDeclaration",
											"scope": 1229,
											"src": "4512:18:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1223,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "4512:7:12",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1226,
											"mutability": "mutable",
											"name": "recipient",
											"nameLocation": "4549:9:12",
											"nodeType": "VariableDeclaration",
											"scope": 1229,
											"src": "4541:17:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1225,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "4541:7:12",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1228,
											"mutability": "mutable",
											"name": "deadline",
											"nameLocation": "4577:8:12",
											"nodeType": "VariableDeclaration",
											"scope": 1229,
											"src": "4569:16:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1227,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "4569:7:12",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "MintParams",
									"nameLocation": "4272:10:12",
									"nodeType": "StructDefinition",
									"scope": 1319,
									"src": "4265:328:12",
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 1230,
										"nodeType": "StructuredDocumentation",
										"src": "4601:593:12",
										"text": "@notice Creates a new position wrapped in a NFT\n @dev Call this when the pool does exist and is initialized. Note that if the pool is created but not initialized\n a method does not exist, i.e. the pool is assumed to be initialized.\n @param params The params necessary to mint a position, encoded as `MintParams` in calldata\n @return tokenId The ID of the token that represents the minted position\n @return liquidity The amount of liquidity for this position\n @return amount0 The amount of token0\n @return amount1 The amount of token1"
									},
									"functionSelector": "88316456",
									"id": 1244,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "mint",
									"nameLocation": "5209:4:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1234,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1233,
												"mutability": "mutable",
												"name": "params",
												"nameLocation": "5234:6:12",
												"nodeType": "VariableDeclaration",
												"scope": 1244,
												"src": "5214:26:12",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_MintParams_$1229_calldata_ptr",
													"typeString": "struct INonfungiblePositionManager.MintParams"
												},
												"typeName": {
													"id": 1232,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1231,
														"name": "MintParams",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1229,
														"src": "5214:10:12"
													},
													"referencedDeclaration": 1229,
													"src": "5214:10:12",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_MintParams_$1229_storage_ptr",
														"typeString": "struct INonfungiblePositionManager.MintParams"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5213:28:12"
									},
									"returnParameters": {
										"id": 1243,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1236,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "5317:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 1244,
												"src": "5309:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1235,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5309:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1238,
												"mutability": "mutable",
												"name": "liquidity",
												"nameLocation": "5347:9:12",
												"nodeType": "VariableDeclaration",
												"scope": 1244,
												"src": "5339:17:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1237,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "5339:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1240,
												"mutability": "mutable",
												"name": "amount0",
												"nameLocation": "5379:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 1244,
												"src": "5371:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1239,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5371:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1242,
												"mutability": "mutable",
												"name": "amount1",
												"nameLocation": "5409:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 1244,
												"src": "5401:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1241,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5401:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5294:133:12"
									},
									"scope": 1319,
									"src": "5200:228:12",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"canonicalName": "INonfungiblePositionManager.IncreaseLiquidityParams",
									"id": 1257,
									"members": [
										{
											"constant": false,
											"id": 1246,
											"mutability": "mutable",
											"name": "tokenId",
											"nameLocation": "5486:7:12",
											"nodeType": "VariableDeclaration",
											"scope": 1257,
											"src": "5478:15:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1245,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "5478:7:12",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1248,
											"mutability": "mutable",
											"name": "amount0Desired",
											"nameLocation": "5512:14:12",
											"nodeType": "VariableDeclaration",
											"scope": 1257,
											"src": "5504:22:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1247,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "5504:7:12",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1250,
											"mutability": "mutable",
											"name": "amount1Desired",
											"nameLocation": "5545:14:12",
											"nodeType": "VariableDeclaration",
											"scope": 1257,
											"src": "5537:22:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1249,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "5537:7:12",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1252,
											"mutability": "mutable",
											"name": "amount0Min",
											"nameLocation": "5578:10:12",
											"nodeType": "VariableDeclaration",
											"scope": 1257,
											"src": "5570:18:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1251,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "5570:7:12",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1254,
											"mutability": "mutable",
											"name": "amount1Min",
											"nameLocation": "5607:10:12",
											"nodeType": "VariableDeclaration",
											"scope": 1257,
											"src": "5599:18:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1253,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "5599:7:12",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1256,
											"mutability": "mutable",
											"name": "deadline",
											"nameLocation": "5636:8:12",
											"nodeType": "VariableDeclaration",
											"scope": 1257,
											"src": "5628:16:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1255,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "5628:7:12",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "IncreaseLiquidityParams",
									"nameLocation": "5443:23:12",
									"nodeType": "StructDefinition",
									"scope": 1319,
									"src": "5436:216:12",
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 1258,
										"nodeType": "StructuredDocumentation",
										"src": "5660:830:12",
										"text": "@notice Increases the amount of liquidity in a position, with tokens paid by the `msg.sender`\n @param params tokenId The ID of the token for which liquidity is being increased,\n amount0Desired The desired amount of token0 to be spent,\n amount1Desired The desired amount of token1 to be spent,\n amount0Min The minimum amount of token0 to spend, which serves as a slippage check,\n amount1Min The minimum amount of token1 to spend, which serves as a slippage check,\n deadline The time by which the transaction must be included to effect the change\n @return liquidity The new liquidity amount as a result of the increase\n @return amount0 The amount of token0 to acheive resulting liquidity\n @return amount1 The amount of token1 to acheive resulting liquidity"
									},
									"functionSelector": "219f5d17",
									"id": 1270,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "increaseLiquidity",
									"nameLocation": "6505:17:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1262,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1261,
												"mutability": "mutable",
												"name": "params",
												"nameLocation": "6556:6:12",
												"nodeType": "VariableDeclaration",
												"scope": 1270,
												"src": "6523:39:12",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_IncreaseLiquidityParams_$1257_calldata_ptr",
													"typeString": "struct INonfungiblePositionManager.IncreaseLiquidityParams"
												},
												"typeName": {
													"id": 1260,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1259,
														"name": "IncreaseLiquidityParams",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1257,
														"src": "6523:23:12"
													},
													"referencedDeclaration": 1257,
													"src": "6523:23:12",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_IncreaseLiquidityParams_$1257_storage_ptr",
														"typeString": "struct INonfungiblePositionManager.IncreaseLiquidityParams"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6522:41:12"
									},
									"returnParameters": {
										"id": 1269,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1264,
												"mutability": "mutable",
												"name": "liquidity",
												"nameLocation": "6639:9:12",
												"nodeType": "VariableDeclaration",
												"scope": 1270,
												"src": "6631:17:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1263,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "6631:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1266,
												"mutability": "mutable",
												"name": "amount0",
												"nameLocation": "6671:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 1270,
												"src": "6663:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1265,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6663:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1268,
												"mutability": "mutable",
												"name": "amount1",
												"nameLocation": "6701:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 1270,
												"src": "6693:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1267,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6693:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6616:103:12"
									},
									"scope": 1319,
									"src": "6496:224:12",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"canonicalName": "INonfungiblePositionManager.DecreaseLiquidityParams",
									"id": 1281,
									"members": [
										{
											"constant": false,
											"id": 1272,
											"mutability": "mutable",
											"name": "tokenId",
											"nameLocation": "6778:7:12",
											"nodeType": "VariableDeclaration",
											"scope": 1281,
											"src": "6770:15:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1271,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "6770:7:12",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1274,
											"mutability": "mutable",
											"name": "liquidity",
											"nameLocation": "6804:9:12",
											"nodeType": "VariableDeclaration",
											"scope": 1281,
											"src": "6796:17:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint128",
												"typeString": "uint128"
											},
											"typeName": {
												"id": 1273,
												"name": "uint128",
												"nodeType": "ElementaryTypeName",
												"src": "6796:7:12",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1276,
											"mutability": "mutable",
											"name": "amount0Min",
											"nameLocation": "6832:10:12",
											"nodeType": "VariableDeclaration",
											"scope": 1281,
											"src": "6824:18:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1275,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "6824:7:12",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1278,
											"mutability": "mutable",
											"name": "amount1Min",
											"nameLocation": "6861:10:12",
											"nodeType": "VariableDeclaration",
											"scope": 1281,
											"src": "6853:18:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1277,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "6853:7:12",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1280,
											"mutability": "mutable",
											"name": "deadline",
											"nameLocation": "6890:8:12",
											"nodeType": "VariableDeclaration",
											"scope": 1281,
											"src": "6882:16:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1279,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "6882:7:12",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "DecreaseLiquidityParams",
									"nameLocation": "6735:23:12",
									"nodeType": "StructDefinition",
									"scope": 1319,
									"src": "6728:178:12",
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 1282,
										"nodeType": "StructuredDocumentation",
										"src": "6914:709:12",
										"text": "@notice Decreases the amount of liquidity in a position and accounts it to the position\n @param params tokenId The ID of the token for which liquidity is being decreased,\n amount The amount by which liquidity will be decreased,\n amount0Min The minimum amount of token0 that should be accounted for the burned liquidity,\n amount1Min The minimum amount of token1 that should be accounted for the burned liquidity,\n deadline The time by which the transaction must be included to effect the change\n @return amount0 The amount of token0 accounted to the position's tokens owed\n @return amount1 The amount of token1 accounted to the position's tokens owed"
									},
									"functionSelector": "0c49ccbe",
									"id": 1292,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "decreaseLiquidity",
									"nameLocation": "7638:17:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1286,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1285,
												"mutability": "mutable",
												"name": "params",
												"nameLocation": "7689:6:12",
												"nodeType": "VariableDeclaration",
												"scope": 1292,
												"src": "7656:39:12",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_DecreaseLiquidityParams_$1281_calldata_ptr",
													"typeString": "struct INonfungiblePositionManager.DecreaseLiquidityParams"
												},
												"typeName": {
													"id": 1284,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1283,
														"name": "DecreaseLiquidityParams",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1281,
														"src": "7656:23:12"
													},
													"referencedDeclaration": 1281,
													"src": "7656:23:12",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_DecreaseLiquidityParams_$1281_storage_ptr",
														"typeString": "struct INonfungiblePositionManager.DecreaseLiquidityParams"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7655:41:12"
									},
									"returnParameters": {
										"id": 1291,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1288,
												"mutability": "mutable",
												"name": "amount0",
												"nameLocation": "7758:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 1292,
												"src": "7750:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1287,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7750:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1290,
												"mutability": "mutable",
												"name": "amount1",
												"nameLocation": "7775:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 1292,
												"src": "7767:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1289,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7767:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7749:34:12"
									},
									"scope": 1319,
									"src": "7629:155:12",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"canonicalName": "INonfungiblePositionManager.CollectParams",
									"id": 1301,
									"members": [
										{
											"constant": false,
											"id": 1294,
											"mutability": "mutable",
											"name": "tokenId",
											"nameLocation": "7832:7:12",
											"nodeType": "VariableDeclaration",
											"scope": 1301,
											"src": "7824:15:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1293,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "7824:7:12",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1296,
											"mutability": "mutable",
											"name": "recipient",
											"nameLocation": "7858:9:12",
											"nodeType": "VariableDeclaration",
											"scope": 1301,
											"src": "7850:17:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1295,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "7850:7:12",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1298,
											"mutability": "mutable",
											"name": "amount0Max",
											"nameLocation": "7886:10:12",
											"nodeType": "VariableDeclaration",
											"scope": 1301,
											"src": "7878:18:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint128",
												"typeString": "uint128"
											},
											"typeName": {
												"id": 1297,
												"name": "uint128",
												"nodeType": "ElementaryTypeName",
												"src": "7878:7:12",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1300,
											"mutability": "mutable",
											"name": "amount1Max",
											"nameLocation": "7915:10:12",
											"nodeType": "VariableDeclaration",
											"scope": 1301,
											"src": "7907:18:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint128",
												"typeString": "uint128"
											},
											"typeName": {
												"id": 1299,
												"name": "uint128",
												"nodeType": "ElementaryTypeName",
												"src": "7907:7:12",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "CollectParams",
									"nameLocation": "7799:13:12",
									"nodeType": "StructDefinition",
									"scope": 1319,
									"src": "7792:141:12",
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 1302,
										"nodeType": "StructuredDocumentation",
										"src": "7941:495:12",
										"text": "@notice Collects up to a maximum amount of fees owed to a specific position to the recipient\n @param params tokenId The ID of the NFT for which tokens are being collected,\n recipient The account that should receive the tokens,\n amount0Max The maximum amount of token0 to collect,\n amount1Max The maximum amount of token1 to collect\n @return amount0 The amount of fees collected in token0\n @return amount1 The amount of fees collected in token1"
									},
									"functionSelector": "fc6f7865",
									"id": 1312,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "collect",
									"nameLocation": "8451:7:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1306,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1305,
												"mutability": "mutable",
												"name": "params",
												"nameLocation": "8482:6:12",
												"nodeType": "VariableDeclaration",
												"scope": 1312,
												"src": "8459:29:12",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_CollectParams_$1301_calldata_ptr",
													"typeString": "struct INonfungiblePositionManager.CollectParams"
												},
												"typeName": {
													"id": 1304,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1303,
														"name": "CollectParams",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1301,
														"src": "8459:13:12"
													},
													"referencedDeclaration": 1301,
													"src": "8459:13:12",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_CollectParams_$1301_storage_ptr",
														"typeString": "struct INonfungiblePositionManager.CollectParams"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8458:31:12"
									},
									"returnParameters": {
										"id": 1311,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1308,
												"mutability": "mutable",
												"name": "amount0",
												"nameLocation": "8524:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 1312,
												"src": "8516:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1307,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8516:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1310,
												"mutability": "mutable",
												"name": "amount1",
												"nameLocation": "8541:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 1312,
												"src": "8533:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1309,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8533:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8515:34:12"
									},
									"scope": 1319,
									"src": "8442:108:12",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1313,
										"nodeType": "StructuredDocumentation",
										"src": "8558:215:12",
										"text": "@notice Burns a token ID, which deletes it from the NFT contract. The token must have 0 liquidity and all tokens\n must be collected first.\n @param tokenId The ID of the token that is being burned"
									},
									"functionSelector": "42966c68",
									"id": 1318,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "burn",
									"nameLocation": "8788:4:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1316,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1315,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "8801:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 1318,
												"src": "8793:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1314,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8793:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8792:17:12"
									},
									"returnParameters": {
										"id": 1317,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8826:0:12"
									},
									"scope": 1319,
									"src": "8779:48:12",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1320,
							"src": "648:8182:12",
							"usedErrors": []
						}
					],
					"src": "31:8799:12"
				},
				"id": 12
			},
			"interfaces/UniswapV3/IPeripheryImmutableState.sol": {
				"ast": {
					"absolutePath": "interfaces/UniswapV3/IPeripheryImmutableState.sol",
					"exportedSymbols": {
						"IPeripheryImmutableState": [
							1335
						]
					},
					"id": 1336,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1321,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "31:24:13"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IPeripheryImmutableState",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1322,
								"nodeType": "StructuredDocumentation",
								"src": "59:93:13",
								"text": "@title Immutable state\n @notice Functions that return immutable state of the router"
							},
							"fullyImplemented": false,
							"id": 1335,
							"linearizedBaseContracts": [
								1335
							],
							"name": "IPeripheryImmutableState",
							"nameLocation": "162:24:13",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1323,
										"nodeType": "StructuredDocumentation",
										"src": "194:57:13",
										"text": "@return Returns the address of the Uniswap V3 factory"
									},
									"functionSelector": "c45a0155",
									"id": 1328,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "factory",
									"nameLocation": "266:7:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1324,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "273:2:13"
									},
									"returnParameters": {
										"id": 1327,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1326,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1328,
												"src": "299:7:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1325,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "299:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "298:9:13"
									},
									"scope": 1335,
									"src": "257:51:13",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1329,
										"nodeType": "StructuredDocumentation",
										"src": "316:40:13",
										"text": "@return Returns the address of WETH9"
									},
									"functionSelector": "4aa4a4fc",
									"id": 1334,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "WETH9",
									"nameLocation": "371:5:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1330,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "376:2:13"
									},
									"returnParameters": {
										"id": 1333,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1332,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1334,
												"src": "402:7:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1331,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "402:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "401:9:13"
									},
									"scope": 1335,
									"src": "362:49:13",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1336,
							"src": "152:262:13",
							"usedErrors": []
						}
					],
					"src": "31:383:13"
				},
				"id": 13
			},
			"interfaces/UniswapV3/IPeripheryPayments.sol": {
				"ast": {
					"absolutePath": "interfaces/UniswapV3/IPeripheryPayments.sol",
					"exportedSymbols": {
						"IPeripheryPayments": [
							1361
						]
					},
					"id": 1362,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1337,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "31:24:14"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IPeripheryPayments",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1338,
								"nodeType": "StructuredDocumentation",
								"src": "59:94:14",
								"text": "@title Periphery Payments\n @notice Functions to ease deposits and withdrawals of ETH"
							},
							"fullyImplemented": false,
							"id": 1361,
							"linearizedBaseContracts": [
								1361
							],
							"name": "IPeripheryPayments",
							"nameLocation": "163:18:14",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1339,
										"nodeType": "StructuredDocumentation",
										"src": "189:305:14",
										"text": "@notice Unwraps the contract's WETH9 balance and sends it to recipient as ETH.\n @dev The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\n @param amountMinimum The minimum amount of WETH9 to unwrap\n @param recipient The address receiving ETH"
									},
									"functionSelector": "49404b7c",
									"id": 1346,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "unwrapWETH9",
									"nameLocation": "509:11:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1344,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1341,
												"mutability": "mutable",
												"name": "amountMinimum",
												"nameLocation": "529:13:14",
												"nodeType": "VariableDeclaration",
												"scope": 1346,
												"src": "521:21:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1340,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "521:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1343,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "552:9:14",
												"nodeType": "VariableDeclaration",
												"scope": 1346,
												"src": "544:17:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1342,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "544:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "520:42:14"
									},
									"returnParameters": {
										"id": 1345,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "579:0:14"
									},
									"scope": 1361,
									"src": "500:80:14",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1347,
										"nodeType": "StructuredDocumentation",
										"src": "588:227:14",
										"text": "@notice Refunds any ETH balance held by this contract to the `msg.sender`\n @dev Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps\n that use ether for the input amount"
									},
									"functionSelector": "12210e8a",
									"id": 1350,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "refundETH",
									"nameLocation": "830:9:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1348,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "839:2:14"
									},
									"returnParameters": {
										"id": 1349,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "858:0:14"
									},
									"scope": 1361,
									"src": "821:38:14",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1351,
										"nodeType": "StructuredDocumentation",
										"src": "867:431:14",
										"text": "@notice Transfers the full amount of a token held by this contract to recipient\n @dev The amountMinimum parameter prevents malicious contracts from stealing the token from users\n @param token The contract address of the token which will be transferred to `recipient`\n @param amountMinimum The minimum amount of token required for a transfer\n @param recipient The destination address of the token"
									},
									"functionSelector": "df2ab5bb",
									"id": 1360,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "sweepToken",
									"nameLocation": "1313:10:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1358,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1353,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1342:5:14",
												"nodeType": "VariableDeclaration",
												"scope": 1360,
												"src": "1334:13:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1352,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1334:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1355,
												"mutability": "mutable",
												"name": "amountMinimum",
												"nameLocation": "1366:13:14",
												"nodeType": "VariableDeclaration",
												"scope": 1360,
												"src": "1358:21:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1354,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1358:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1357,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "1398:9:14",
												"nodeType": "VariableDeclaration",
												"scope": 1360,
												"src": "1390:17:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1356,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1390:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1323:91:14"
									},
									"returnParameters": {
										"id": 1359,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1431:0:14"
									},
									"scope": 1361,
									"src": "1304:128:14",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1362,
							"src": "153:1282:14",
							"usedErrors": []
						}
					],
					"src": "31:1404:14"
				},
				"id": 14
			},
			"interfaces/UniswapV3/IPoolInitializer.sol": {
				"ast": {
					"absolutePath": "interfaces/UniswapV3/IPoolInitializer.sol",
					"exportedSymbols": {
						"IPoolInitializer": [
							1380
						]
					},
					"id": 1381,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1363,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "31:24:15"
						},
						{
							"id": 1364,
							"literals": [
								"abicoder",
								"v2"
							],
							"nodeType": "PragmaDirective",
							"src": "57:19:15"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IPoolInitializer",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1365,
								"nodeType": "StructuredDocumentation",
								"src": "80:197:15",
								"text": "@title Creates and initializes V3 Pools\n @notice Provides a method for creating and initializing a pool, if necessary, for bundling with other methods that\n require the pool to exist."
							},
							"fullyImplemented": false,
							"id": 1380,
							"linearizedBaseContracts": [
								1380
							],
							"name": "IPoolInitializer",
							"nameLocation": "287:16:15",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1366,
										"nodeType": "StructuredDocumentation",
										"src": "311:654:15",
										"text": "@notice Creates a new pool if it does not exist, then initializes if not initialized\n @dev This method can be bundled with others via IMulticall for the first action (e.g. mint) performed against a pool\n @param token0 The contract address of token0 of the pool\n @param token1 The contract address of token1 of the pool\n @param fee The fee amount of the v3 pool for the specified token pair\n @param sqrtPriceX96 The initial square root price of the pool as a Q64.96 value\n @return pool Returns the pool address based on the pair of tokens and fee, will return the newly created pool address if necessary"
									},
									"functionSelector": "13ead562",
									"id": 1379,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "createAndInitializePoolIfNecessary",
									"nameLocation": "980:34:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1375,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1368,
												"mutability": "mutable",
												"name": "token0",
												"nameLocation": "1033:6:15",
												"nodeType": "VariableDeclaration",
												"scope": 1379,
												"src": "1025:14:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1367,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1025:7:15",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1370,
												"mutability": "mutable",
												"name": "token1",
												"nameLocation": "1058:6:15",
												"nodeType": "VariableDeclaration",
												"scope": 1379,
												"src": "1050:14:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1369,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1050:7:15",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1372,
												"mutability": "mutable",
												"name": "fee",
												"nameLocation": "1082:3:15",
												"nodeType": "VariableDeclaration",
												"scope": 1379,
												"src": "1075:10:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 1371,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "1075:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1374,
												"mutability": "mutable",
												"name": "sqrtPriceX96",
												"nameLocation": "1104:12:15",
												"nodeType": "VariableDeclaration",
												"scope": 1379,
												"src": "1096:20:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 1373,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "1096:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1014:109:15"
									},
									"returnParameters": {
										"id": 1378,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1377,
												"mutability": "mutable",
												"name": "pool",
												"nameLocation": "1158:4:15",
												"nodeType": "VariableDeclaration",
												"scope": 1379,
												"src": "1150:12:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1376,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1150:7:15",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1149:14:15"
									},
									"scope": 1380,
									"src": "971:193:15",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1381,
							"src": "277:890:15",
							"usedErrors": []
						}
					],
					"src": "31:1136:15"
				},
				"id": 15
			},
			"libraries/Address.sol": {
				"ast": {
					"absolutePath": "libraries/Address.sol",
					"exportedSymbols": {
						"Address": [
							1710
						]
					},
					"id": 1711,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1382,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "104:24:16"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Address",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1383,
								"nodeType": "StructuredDocumentation",
								"src": "132:69:16",
								"text": " @dev Collection of functions related to the address type"
							},
							"fullyImplemented": true,
							"id": 1710,
							"linearizedBaseContracts": [
								1710
							],
							"name": "Address",
							"nameLocation": "211:7:16",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 1397,
										"nodeType": "Block",
										"src": "1518:260:16",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1395,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"expression": {
																"id": 1391,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1386,
																"src": "1747:7:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 1392,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "code",
															"nodeType": "MemberAccess",
															"src": "1747:12:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1393,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "1747:19:16",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 1394,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1769:1:16",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1747:23:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1390,
												"id": 1396,
												"nodeType": "Return",
												"src": "1740:30:16"
											}
										]
									},
									"documentation": {
										"id": 1384,
										"nodeType": "StructuredDocumentation",
										"src": "226:1220:16",
										"text": " @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n Furthermore, `isContract` will also return true if the target contract within\n the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n which only has an effect at the end of a transaction.\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="
									},
									"id": 1398,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isContract",
									"nameLocation": "1461:10:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1387,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1386,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "1480:7:16",
												"nodeType": "VariableDeclaration",
												"scope": 1398,
												"src": "1472:15:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1385,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1472:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1471:17:16"
									},
									"returnParameters": {
										"id": 1390,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1389,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1398,
												"src": "1512:4:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1388,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1512:4:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1511:6:16"
									},
									"scope": 1710,
									"src": "1452:326:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1431,
										"nodeType": "Block",
										"src": "2782:246:16",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1413,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 1409,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "2809:4:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_Address_$1710",
																				"typeString": "library Address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_Address_$1710",
																				"typeString": "library Address"
																			}
																		],
																		"id": 1408,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2801:7:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 1407,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2801:7:16",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1410,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2801:13:16",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 1411,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "2801:21:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 1412,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1403,
																"src": "2826:6:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2801:31:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e6365",
															"id": 1414,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2834:31:16",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															},
															"value": "Address: insufficient balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															}
														],
														"id": 1406,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2793:7:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1415,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2793:73:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1416,
												"nodeType": "ExpressionStatement",
												"src": "2793:73:16"
											},
											{
												"assignments": [
													1418,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 1418,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "2885:7:16",
														"nodeType": "VariableDeclaration",
														"scope": 1431,
														"src": "2880:12:16",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1417,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "2880:4:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													null
												],
												"id": 1425,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "",
															"id": 1423,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2928:2:16",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																	"typeString": "literal_string \"\""
																}
															],
															"expression": {
																"id": 1419,
																"name": "recipient",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1401,
																"src": "2898:9:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"id": 1420,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "2898:14:16",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 1422,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 1421,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1403,
																"src": "2920:6:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "2898:29:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 1424,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2898:33:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2879:52:16"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1427,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1418,
															"src": "2950:7:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564",
															"id": 1428,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2959:60:16",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															},
															"value": "Address: unable to send value, recipient may have reverted"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															}
														],
														"id": 1426,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2942:7:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1429,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2942:78:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1430,
												"nodeType": "ExpressionStatement",
												"src": "2942:78:16"
											}
										]
									},
									"documentation": {
										"id": 1399,
										"nodeType": "StructuredDocumentation",
										"src": "1786:919:16",
										"text": " @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."
									},
									"id": 1432,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sendValue",
									"nameLocation": "2720:9:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1404,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1401,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "2746:9:16",
												"nodeType": "VariableDeclaration",
												"scope": 1432,
												"src": "2730:25:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 1400,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2730:15:16",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1403,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2765:6:16",
												"nodeType": "VariableDeclaration",
												"scope": 1432,
												"src": "2757:14:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1402,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2757:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2729:43:16"
									},
									"returnParameters": {
										"id": 1405,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2782:0:16"
									},
									"scope": 1710,
									"src": "2711:317:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1449,
										"nodeType": "Block",
										"src": "3879:98:16",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1443,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1435,
															"src": "3919:6:16",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1444,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1437,
															"src": "3927:4:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "30",
															"id": 1445,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3933:1:16",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564",
															"id": 1446,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3936:32:16",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															},
															"value": "Address: low-level call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															}
														],
														"id": 1442,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1490,
															1534
														],
														"referencedDeclaration": 1534,
														"src": "3897:21:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 1447,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3897:72:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 1441,
												"id": 1448,
												"nodeType": "Return",
												"src": "3890:79:16"
											}
										]
									},
									"documentation": {
										"id": 1433,
										"nodeType": "StructuredDocumentation",
										"src": "3036:748:16",
										"text": " @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"
									},
									"id": 1450,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nameLocation": "3799:12:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1438,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1435,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "3820:6:16",
												"nodeType": "VariableDeclaration",
												"scope": 1450,
												"src": "3812:14:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1434,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3812:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1437,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3841:4:16",
												"nodeType": "VariableDeclaration",
												"scope": 1450,
												"src": "3828:17:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1436,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3828:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3811:35:16"
									},
									"returnParameters": {
										"id": 1441,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1440,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1450,
												"src": "3865:12:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1439,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3865:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3864:14:16"
									},
									"scope": 1710,
									"src": "3790:187:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1469,
										"nodeType": "Block",
										"src": "4358:78:16",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1463,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1453,
															"src": "4398:6:16",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1464,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1455,
															"src": "4406:4:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "30",
															"id": 1465,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4412:1:16",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"id": 1466,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1457,
															"src": "4415:12:16",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 1462,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1490,
															1534
														],
														"referencedDeclaration": 1534,
														"src": "4376:21:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 1467,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4376:52:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 1461,
												"id": 1468,
												"nodeType": "Return",
												"src": "4369:59:16"
											}
										]
									},
									"documentation": {
										"id": 1451,
										"nodeType": "StructuredDocumentation",
										"src": "3985:216:16",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 1470,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nameLocation": "4216:12:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1458,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1453,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "4247:6:16",
												"nodeType": "VariableDeclaration",
												"scope": 1470,
												"src": "4239:14:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1452,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4239:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1455,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "4277:4:16",
												"nodeType": "VariableDeclaration",
												"scope": 1470,
												"src": "4264:17:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1454,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4264:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1457,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "4306:12:16",
												"nodeType": "VariableDeclaration",
												"scope": 1470,
												"src": "4292:26:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1456,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "4292:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4228:97:16"
									},
									"returnParameters": {
										"id": 1461,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1460,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1470,
												"src": "4344:12:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1459,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4344:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4343:14:16"
									},
									"scope": 1710,
									"src": "4207:229:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1489,
										"nodeType": "Block",
										"src": "4924:113:16",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1483,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1473,
															"src": "4964:6:16",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1484,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1475,
															"src": "4972:4:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 1485,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1477,
															"src": "4978:5:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564",
															"id": 1486,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4985:43:16",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															},
															"value": "Address: low-level call with value failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															}
														],
														"id": 1482,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1490,
															1534
														],
														"referencedDeclaration": 1534,
														"src": "4942:21:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 1487,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4942:87:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 1481,
												"id": 1488,
												"nodeType": "Return",
												"src": "4935:94:16"
											}
										]
									},
									"documentation": {
										"id": 1471,
										"nodeType": "StructuredDocumentation",
										"src": "4444:361:16",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"
									},
									"id": 1490,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nameLocation": "4820:21:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1478,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1473,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "4850:6:16",
												"nodeType": "VariableDeclaration",
												"scope": 1490,
												"src": "4842:14:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1472,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4842:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1475,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "4871:4:16",
												"nodeType": "VariableDeclaration",
												"scope": 1490,
												"src": "4858:17:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1474,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4858:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1477,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4885:5:16",
												"nodeType": "VariableDeclaration",
												"scope": 1490,
												"src": "4877:13:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1476,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4877:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4841:50:16"
									},
									"returnParameters": {
										"id": 1481,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1480,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1490,
												"src": "4910:12:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1479,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4910:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4909:14:16"
									},
									"scope": 1710,
									"src": "4811:226:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1533,
										"nodeType": "Block",
										"src": "5477:271:16",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1511,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 1507,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "5504:4:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_Address_$1710",
																				"typeString": "library Address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_Address_$1710",
																				"typeString": "library Address"
																			}
																		],
																		"id": 1506,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "5496:7:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 1505,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "5496:7:16",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1508,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "5496:13:16",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 1509,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "5496:21:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 1510,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1497,
																"src": "5521:5:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5496:30:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c",
															"id": 1512,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5528:40:16",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															},
															"value": "Address: insufficient balance for call"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															}
														],
														"id": 1504,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5488:7:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1513,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5488:81:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1514,
												"nodeType": "ExpressionStatement",
												"src": "5488:81:16"
											},
											{
												"assignments": [
													1516,
													1518
												],
												"declarations": [
													{
														"constant": false,
														"id": 1516,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "5586:7:16",
														"nodeType": "VariableDeclaration",
														"scope": 1533,
														"src": "5581:12:16",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1515,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "5581:4:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1518,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "5608:10:16",
														"nodeType": "VariableDeclaration",
														"scope": 1533,
														"src": "5595:23:16",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1517,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "5595:5:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1525,
												"initialValue": {
													"arguments": [
														{
															"id": 1523,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1495,
															"src": "5648:4:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"expression": {
																"id": 1519,
																"name": "target",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1493,
																"src": "5622:6:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 1520,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "5622:11:16",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 1522,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 1521,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1497,
																"src": "5641:5:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "5622:25:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 1524,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5622:31:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5580:73:16"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1527,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1493,
															"src": "5698:6:16",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1528,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1516,
															"src": "5706:7:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 1529,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1518,
															"src": "5715:10:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 1530,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1499,
															"src": "5727:12:16",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 1526,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1665,
														"src": "5671:26:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 1531,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5671:69:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 1503,
												"id": 1532,
												"nodeType": "Return",
												"src": "5664:76:16"
											}
										]
									},
									"documentation": {
										"id": 1491,
										"nodeType": "StructuredDocumentation",
										"src": "5045:242:16",
										"text": " @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 1534,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nameLocation": "5302:21:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1500,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1493,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "5342:6:16",
												"nodeType": "VariableDeclaration",
												"scope": 1534,
												"src": "5334:14:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1492,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5334:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1495,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5372:4:16",
												"nodeType": "VariableDeclaration",
												"scope": 1534,
												"src": "5359:17:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1494,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5359:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1497,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5395:5:16",
												"nodeType": "VariableDeclaration",
												"scope": 1534,
												"src": "5387:13:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1496,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5387:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1499,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "5425:12:16",
												"nodeType": "VariableDeclaration",
												"scope": 1534,
												"src": "5411:26:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1498,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5411:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5323:121:16"
									},
									"returnParameters": {
										"id": 1503,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1502,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1534,
												"src": "5463:12:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1501,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5463:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5462:14:16"
									},
									"scope": 1710,
									"src": "5293:455:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1550,
										"nodeType": "Block",
										"src": "6033:99:16",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1545,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1537,
															"src": "6070:6:16",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1546,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1539,
															"src": "6078:4:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564",
															"id": 1547,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6084:39:16",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															},
															"value": "Address: low-level static call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															}
														],
														"id": 1544,
														"name": "functionStaticCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1551,
															1580
														],
														"referencedDeclaration": 1580,
														"src": "6051:18:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 1548,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6051:73:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 1543,
												"id": 1549,
												"nodeType": "Return",
												"src": "6044:80:16"
											}
										]
									},
									"documentation": {
										"id": 1535,
										"nodeType": "StructuredDocumentation",
										"src": "5756:171:16",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 1551,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nameLocation": "5942:18:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1540,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1537,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "5969:6:16",
												"nodeType": "VariableDeclaration",
												"scope": 1551,
												"src": "5961:14:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1536,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5961:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1539,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5990:4:16",
												"nodeType": "VariableDeclaration",
												"scope": 1551,
												"src": "5977:17:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1538,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5977:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5960:35:16"
									},
									"returnParameters": {
										"id": 1543,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1542,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1551,
												"src": "6019:12:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1541,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6019:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6018:14:16"
									},
									"scope": 1710,
									"src": "5933:199:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1579,
										"nodeType": "Block",
										"src": "6486:171:16",
										"statements": [
											{
												"assignments": [
													1564,
													1566
												],
												"declarations": [
													{
														"constant": false,
														"id": 1564,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "6503:7:16",
														"nodeType": "VariableDeclaration",
														"scope": 1579,
														"src": "6498:12:16",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1563,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "6498:4:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1566,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "6525:10:16",
														"nodeType": "VariableDeclaration",
														"scope": 1579,
														"src": "6512:23:16",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1565,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "6512:5:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1571,
												"initialValue": {
													"arguments": [
														{
															"id": 1569,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1556,
															"src": "6557:4:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 1567,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1554,
															"src": "6539:6:16",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 1568,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "staticcall",
														"nodeType": "MemberAccess",
														"src": "6539:17:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) view returns (bool,bytes memory)"
														}
													},
													"id": 1570,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6539:23:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6497:65:16"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1573,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1554,
															"src": "6607:6:16",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1574,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1564,
															"src": "6615:7:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 1575,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1566,
															"src": "6624:10:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 1576,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1558,
															"src": "6636:12:16",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 1572,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1665,
														"src": "6580:26:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 1577,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6580:69:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 1562,
												"id": 1578,
												"nodeType": "Return",
												"src": "6573:76:16"
											}
										]
									},
									"documentation": {
										"id": 1552,
										"nodeType": "StructuredDocumentation",
										"src": "6140:178:16",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 1580,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nameLocation": "6333:18:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1559,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1554,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "6370:6:16",
												"nodeType": "VariableDeclaration",
												"scope": 1580,
												"src": "6362:14:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1553,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6362:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1556,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6400:4:16",
												"nodeType": "VariableDeclaration",
												"scope": 1580,
												"src": "6387:17:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1555,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6387:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1558,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "6429:12:16",
												"nodeType": "VariableDeclaration",
												"scope": 1580,
												"src": "6415:26:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1557,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6415:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6351:97:16"
									},
									"returnParameters": {
										"id": 1562,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1561,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1580,
												"src": "6472:12:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1560,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6472:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6471:14:16"
									},
									"scope": 1710,
									"src": "6324:333:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1596,
										"nodeType": "Block",
										"src": "6941:103:16",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1591,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1583,
															"src": "6980:6:16",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1592,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1585,
															"src": "6988:4:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564",
															"id": 1593,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6994:41:16",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398",
																"typeString": "literal_string \"Address: low-level delegate call failed\""
															},
															"value": "Address: low-level delegate call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398",
																"typeString": "literal_string \"Address: low-level delegate call failed\""
															}
														],
														"id": 1590,
														"name": "functionDelegateCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1597,
															1626
														],
														"referencedDeclaration": 1626,
														"src": "6959:20:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
														}
													},
													"id": 1594,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6959:77:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 1589,
												"id": 1595,
												"nodeType": "Return",
												"src": "6952:84:16"
											}
										]
									},
									"documentation": {
										"id": 1581,
										"nodeType": "StructuredDocumentation",
										"src": "6665:173:16",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"
									},
									"id": 1597,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionDelegateCall",
									"nameLocation": "6853:20:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1586,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1583,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "6882:6:16",
												"nodeType": "VariableDeclaration",
												"scope": 1597,
												"src": "6874:14:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1582,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6874:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1585,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6903:4:16",
												"nodeType": "VariableDeclaration",
												"scope": 1597,
												"src": "6890:17:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1584,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6890:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6873:35:16"
									},
									"returnParameters": {
										"id": 1589,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1588,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1597,
												"src": "6927:12:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1587,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6927:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6926:14:16"
									},
									"scope": 1710,
									"src": "6844:200:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1625,
										"nodeType": "Block",
										"src": "7397:173:16",
										"statements": [
											{
												"assignments": [
													1610,
													1612
												],
												"declarations": [
													{
														"constant": false,
														"id": 1610,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "7414:7:16",
														"nodeType": "VariableDeclaration",
														"scope": 1625,
														"src": "7409:12:16",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1609,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "7409:4:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1612,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "7436:10:16",
														"nodeType": "VariableDeclaration",
														"scope": 1625,
														"src": "7423:23:16",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1611,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "7423:5:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1617,
												"initialValue": {
													"arguments": [
														{
															"id": 1615,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1602,
															"src": "7470:4:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 1613,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1600,
															"src": "7450:6:16",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 1614,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "delegatecall",
														"nodeType": "MemberAccess",
														"src": "7450:19:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) returns (bool,bytes memory)"
														}
													},
													"id": 1616,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7450:25:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7408:67:16"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1619,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1600,
															"src": "7520:6:16",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1620,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1610,
															"src": "7528:7:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 1621,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1612,
															"src": "7537:10:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 1622,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1604,
															"src": "7549:12:16",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 1618,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1665,
														"src": "7493:26:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 1623,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7493:69:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 1608,
												"id": 1624,
												"nodeType": "Return",
												"src": "7486:76:16"
											}
										]
									},
									"documentation": {
										"id": 1598,
										"nodeType": "StructuredDocumentation",
										"src": "7052:180:16",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"
									},
									"id": 1626,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionDelegateCall",
									"nameLocation": "7247:20:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1605,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1600,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "7286:6:16",
												"nodeType": "VariableDeclaration",
												"scope": 1626,
												"src": "7278:14:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1599,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7278:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1602,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "7316:4:16",
												"nodeType": "VariableDeclaration",
												"scope": 1626,
												"src": "7303:17:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1601,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7303:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1604,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "7345:12:16",
												"nodeType": "VariableDeclaration",
												"scope": 1626,
												"src": "7331:26:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1603,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "7331:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7267:97:16"
									},
									"returnParameters": {
										"id": 1608,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1607,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1626,
												"src": "7383:12:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1606,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7383:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7382:14:16"
									},
									"scope": 1710,
									"src": "7238:332:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1664,
										"nodeType": "Block",
										"src": "8065:445:16",
										"statements": [
											{
												"condition": {
													"id": 1640,
													"name": "success",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1631,
													"src": "8080:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1662,
													"nodeType": "Block",
													"src": "8443:60:16",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1658,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1633,
																		"src": "8466:10:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	{
																		"id": 1659,
																		"name": "errorMessage",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1635,
																		"src": "8478:12:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		},
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 1657,
																	"name": "_revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1709,
																	"src": "8458:7:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bytes memory,string memory) pure"
																	}
																},
																"id": 1660,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8458:33:16",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1661,
															"nodeType": "ExpressionStatement",
															"src": "8458:33:16"
														}
													]
												},
												"id": 1663,
												"nodeType": "IfStatement",
												"src": "8076:427:16",
												"trueBody": {
													"id": 1656,
													"nodeType": "Block",
													"src": "8089:348:16",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1644,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 1641,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1633,
																		"src": "8108:10:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 1642,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"src": "8108:17:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 1643,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8129:1:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "8108:22:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1653,
															"nodeType": "IfStatement",
															"src": "8104:290:16",
															"trueBody": {
																"id": 1652,
																"nodeType": "Block",
																"src": "8132:262:16",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"id": 1647,
																							"name": "target",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 1629,
																							"src": "8337:6:16",
																							"typeDescriptions": {
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						],
																						"id": 1646,
																						"name": "isContract",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1398,
																						"src": "8326:10:16",
																						"typeDescriptions": {
																							"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																							"typeString": "function (address) view returns (bool)"
																						}
																					},
																					"id": 1648,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "functionCall",
																					"lValueRequested": false,
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "8326:18:16",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					}
																				},
																				{
																					"hexValue": "416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374",
																					"id": 1649,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "string",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "8346:31:16",
																					"typeDescriptions": {
																						"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																						"typeString": "literal_string \"Address: call to non-contract\""
																					},
																					"value": "Address: call to non-contract"
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					},
																					{
																						"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																						"typeString": "literal_string \"Address: call to non-contract\""
																					}
																				],
																				"id": 1645,
																				"name": "require",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [
																					4294967278,
																					4294967278
																				],
																				"referencedDeclaration": 4294967278,
																				"src": "8318:7:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																					"typeString": "function (bool,string memory) pure"
																				}
																			},
																			"id": 1650,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "8318:60:16",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 1651,
																		"nodeType": "ExpressionStatement",
																		"src": "8318:60:16"
																	}
																]
															}
														},
														{
															"expression": {
																"id": 1654,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1633,
																"src": "8415:10:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 1639,
															"id": 1655,
															"nodeType": "Return",
															"src": "8408:17:16"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1627,
										"nodeType": "StructuredDocumentation",
										"src": "7578:282:16",
										"text": " @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"
									},
									"id": 1665,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCallResultFromTarget",
									"nameLocation": "7875:26:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1636,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1629,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "7920:6:16",
												"nodeType": "VariableDeclaration",
												"scope": 1665,
												"src": "7912:14:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1628,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7912:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1631,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "7942:7:16",
												"nodeType": "VariableDeclaration",
												"scope": 1665,
												"src": "7937:12:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1630,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7937:4:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1633,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "7973:10:16",
												"nodeType": "VariableDeclaration",
												"scope": 1665,
												"src": "7960:23:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1632,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7960:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1635,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "8008:12:16",
												"nodeType": "VariableDeclaration",
												"scope": 1665,
												"src": "7994:26:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1634,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "7994:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7901:126:16"
									},
									"returnParameters": {
										"id": 1639,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1638,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1665,
												"src": "8051:12:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1637,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8051:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8050:14:16"
									},
									"scope": 1710,
									"src": "7866:644:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1688,
										"nodeType": "Block",
										"src": "8903:141:16",
										"statements": [
											{
												"condition": {
													"id": 1677,
													"name": "success",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1668,
													"src": "8918:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1686,
													"nodeType": "Block",
													"src": "8977:60:16",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1682,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1670,
																		"src": "9000:10:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	{
																		"id": 1683,
																		"name": "errorMessage",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1672,
																		"src": "9012:12:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		},
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 1681,
																	"name": "_revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1709,
																	"src": "8992:7:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bytes memory,string memory) pure"
																	}
																},
																"id": 1684,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8992:33:16",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1685,
															"nodeType": "ExpressionStatement",
															"src": "8992:33:16"
														}
													]
												},
												"id": 1687,
												"nodeType": "IfStatement",
												"src": "8914:123:16",
												"trueBody": {
													"id": 1680,
													"nodeType": "Block",
													"src": "8927:44:16",
													"statements": [
														{
															"expression": {
																"id": 1678,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1670,
																"src": "8949:10:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 1676,
															"id": 1679,
															"nodeType": "Return",
															"src": "8942:17:16"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1666,
										"nodeType": "StructuredDocumentation",
										"src": "8518:215:16",
										"text": " @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"
									},
									"id": 1689,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCallResult",
									"nameLocation": "8748:16:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1673,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1668,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "8780:7:16",
												"nodeType": "VariableDeclaration",
												"scope": 1689,
												"src": "8775:12:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1667,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "8775:4:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1670,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "8811:10:16",
												"nodeType": "VariableDeclaration",
												"scope": 1689,
												"src": "8798:23:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1669,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8798:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1672,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "8846:12:16",
												"nodeType": "VariableDeclaration",
												"scope": 1689,
												"src": "8832:26:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1671,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "8832:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8764:101:16"
									},
									"returnParameters": {
										"id": 1676,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1675,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1689,
												"src": "8889:12:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1674,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8889:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8888:14:16"
									},
									"scope": 1710,
									"src": "8739:305:16",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1708,
										"nodeType": "Block",
										"src": "9135:469:16",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1699,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 1696,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1691,
															"src": "9213:10:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1697,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "9213:17:16",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 1698,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "9233:1:16",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "9213:21:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1706,
													"nodeType": "Block",
													"src": "9550:47:16",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1703,
																		"name": "errorMessage",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1693,
																		"src": "9572:12:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 1702,
																	"name": "revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967277,
																		4294967277
																	],
																	"referencedDeclaration": 4294967277,
																	"src": "9565:6:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (string memory) pure"
																	}
																},
																"id": 1704,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9565:20:16",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1705,
															"nodeType": "ExpressionStatement",
															"src": "9565:20:16"
														}
													]
												},
												"id": 1707,
												"nodeType": "IfStatement",
												"src": "9209:388:16",
												"trueBody": {
													"id": 1701,
													"nodeType": "Block",
													"src": "9236:308:16",
													"statements": [
														{
															"AST": {
																"nodeType": "YulBlock",
																"src": "9397:136:16",
																"statements": [
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "9416:40:16",
																		"value": {
																			"arguments": [
																				{
																					"name": "returndata",
																					"nodeType": "YulIdentifier",
																					"src": "9445:10:16"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nodeType": "YulIdentifier",
																				"src": "9439:5:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9439:17:16"
																		},
																		"variables": [
																			{
																				"name": "returndata_size",
																				"nodeType": "YulTypedName",
																				"src": "9420:15:16",
																				"type": ""
																			}
																		]
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "9485:2:16",
																							"type": "",
																							"value": "32"
																						},
																						{
																							"name": "returndata",
																							"nodeType": "YulIdentifier",
																							"src": "9489:10:16"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "9481:3:16"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "9481:19:16"
																				},
																				{
																					"name": "returndata_size",
																					"nodeType": "YulIdentifier",
																					"src": "9502:15:16"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "9474:6:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9474:44:16"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "9474:44:16"
																	}
																]
															},
															"documentation": "@solidity memory-safe-assembly",
															"evmVersion": "london",
															"externalReferences": [
																{
																	"declaration": 1691,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "9445:10:16",
																	"valueSize": 1
																},
																{
																	"declaration": 1691,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "9489:10:16",
																	"valueSize": 1
																}
															],
															"id": 1700,
															"nodeType": "InlineAssembly",
															"src": "9388:145:16"
														}
													]
												}
											}
										]
									},
									"id": 1709,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_revert",
									"nameLocation": "9061:7:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1694,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1691,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "9082:10:16",
												"nodeType": "VariableDeclaration",
												"scope": 1709,
												"src": "9069:23:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1690,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "9069:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1693,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "9108:12:16",
												"nodeType": "VariableDeclaration",
												"scope": 1709,
												"src": "9094:26:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1692,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "9094:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9068:53:16"
									},
									"returnParameters": {
										"id": 1695,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9135:0:16"
									},
									"scope": 1710,
									"src": "9052:552:16",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 1711,
							"src": "203:9404:16",
							"usedErrors": []
						}
					],
					"src": "104:9505:16"
				},
				"id": 16
			},
			"libraries/PoolAddress.sol": {
				"ast": {
					"absolutePath": "libraries/PoolAddress.sol",
					"exportedSymbols": {
						"PoolAddress": [
							1810
						]
					},
					"id": 1811,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1712,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "46:24:17"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "PoolAddress",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1713,
								"nodeType": "StructuredDocumentation",
								"src": "74:97:17",
								"text": "@title Provides functions for deriving a pool address from the factory, tokens, and the fee"
							},
							"fullyImplemented": true,
							"id": 1810,
							"linearizedBaseContracts": [
								1810
							],
							"name": "PoolAddress",
							"nameLocation": "179:11:17",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 1716,
									"mutability": "constant",
									"name": "POOL_INIT_CODE_HASH",
									"nameLocation": "224:19:17",
									"nodeType": "VariableDeclaration",
									"scope": 1810,
									"src": "198:114:17",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 1714,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "198:7:17",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"hexValue": "307865333466313939623139623262346634376636383434323631396435353535323764323434663738613332393765613839333235663834336638376238623534",
										"id": 1715,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "246:66:17",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_102814774271675688723325049954498779091328469440286648861889194717372678376276_by_1",
											"typeString": "int_const 1028...(70 digits omitted)...6276"
										},
										"value": "0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54"
									},
									"visibility": "internal"
								},
								{
									"canonicalName": "PoolAddress.PoolKey",
									"id": 1723,
									"members": [
										{
											"constant": false,
											"id": 1718,
											"mutability": "mutable",
											"name": "token0",
											"nameLocation": "404:6:17",
											"nodeType": "VariableDeclaration",
											"scope": 1723,
											"src": "396:14:17",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1717,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "396:7:17",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1720,
											"mutability": "mutable",
											"name": "token1",
											"nameLocation": "429:6:17",
											"nodeType": "VariableDeclaration",
											"scope": 1723,
											"src": "421:14:17",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1719,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "421:7:17",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1722,
											"mutability": "mutable",
											"name": "fee",
											"nameLocation": "453:3:17",
											"nodeType": "VariableDeclaration",
											"scope": 1723,
											"src": "446:10:17",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint24",
												"typeString": "uint24"
											},
											"typeName": {
												"id": 1721,
												"name": "uint24",
												"nodeType": "ElementaryTypeName",
												"src": "446:6:17",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "PoolKey",
									"nameLocation": "377:7:17",
									"nodeType": "StructDefinition",
									"scope": 1810,
									"src": "370:94:17",
									"visibility": "public"
								},
								{
									"body": {
										"id": 1754,
										"nodeType": "Block",
										"src": "940:144:17",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1738,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1736,
														"name": "tokenA",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1726,
														"src": "955:6:17",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"id": 1737,
														"name": "tokenB",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1728,
														"src": "964:6:17",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "955:15:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1747,
												"nodeType": "IfStatement",
												"src": "951:56:17",
												"trueBody": {
													"expression": {
														"id": 1745,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"components": [
																{
																	"id": 1739,
																	"name": "tokenA",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1726,
																	"src": "973:6:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1740,
																	"name": "tokenB",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1728,
																	"src": "981:6:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"id": 1741,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": true,
															"nodeType": "TupleExpression",
															"src": "972:16:17",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_address_$_t_address_$",
																"typeString": "tuple(address,address)"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"components": [
																{
																	"id": 1742,
																	"name": "tokenB",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1728,
																	"src": "992:6:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1743,
																	"name": "tokenA",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1726,
																	"src": "1000:6:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"id": 1744,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "991:16:17",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_address_$_t_address_$",
																"typeString": "tuple(address,address)"
															}
														},
														"src": "972:35:17",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 1746,
													"nodeType": "ExpressionStatement",
													"src": "972:35:17"
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1749,
															"name": "tokenA",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1726,
															"src": "1042:6:17",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1750,
															"name": "tokenB",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1728,
															"src": "1058:6:17",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1751,
															"name": "fee",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1730,
															"src": "1071:3:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint24",
																"typeString": "uint24"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint24",
																"typeString": "uint24"
															}
														],
														"id": 1748,
														"name": "PoolKey",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1723,
														"src": "1025:7:17",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_struct$_PoolKey_$1723_storage_ptr_$",
															"typeString": "type(struct PoolAddress.PoolKey storage pointer)"
														}
													},
													"id": 1752,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "structConstructorCall",
													"lValueRequested": false,
													"names": [
														"token0",
														"token1",
														"fee"
													],
													"nodeType": "FunctionCall",
													"src": "1025:51:17",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_PoolKey_$1723_memory_ptr",
														"typeString": "struct PoolAddress.PoolKey memory"
													}
												},
												"functionReturnParameters": 1735,
												"id": 1753,
												"nodeType": "Return",
												"src": "1018:58:17"
											}
										]
									},
									"documentation": {
										"id": 1724,
										"nodeType": "StructuredDocumentation",
										"src": "472:325:17",
										"text": "@notice Returns PoolKey: the ordered tokens with the matched fee levels\n @param tokenA The first token of a pool, unsorted\n @param tokenB The second token of a pool, unsorted\n @param fee The fee level of the pool\n @return Poolkey The pool details with ordered token0 and token1 assignments"
									},
									"id": 1755,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getPoolKey",
									"nameLocation": "812:10:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1731,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1726,
												"mutability": "mutable",
												"name": "tokenA",
												"nameLocation": "841:6:17",
												"nodeType": "VariableDeclaration",
												"scope": 1755,
												"src": "833:14:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1725,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "833:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1728,
												"mutability": "mutable",
												"name": "tokenB",
												"nameLocation": "866:6:17",
												"nodeType": "VariableDeclaration",
												"scope": 1755,
												"src": "858:14:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1727,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "858:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1730,
												"mutability": "mutable",
												"name": "fee",
												"nameLocation": "890:3:17",
												"nodeType": "VariableDeclaration",
												"scope": 1755,
												"src": "883:10:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 1729,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "883:6:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "822:78:17"
									},
									"returnParameters": {
										"id": 1735,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1734,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1755,
												"src": "924:14:17",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_PoolKey_$1723_memory_ptr",
													"typeString": "struct PoolAddress.PoolKey"
												},
												"typeName": {
													"id": 1733,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1732,
														"name": "PoolKey",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1723,
														"src": "924:7:17"
													},
													"referencedDeclaration": 1723,
													"src": "924:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_PoolKey_$1723_storage_ptr",
														"typeString": "struct PoolAddress.PoolKey"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "923:16:17"
									},
									"scope": 1810,
									"src": "803:281:17",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1808,
										"nodeType": "Block",
										"src": "1435:425:17",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1771,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 1767,
																	"name": "key",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1761,
																	"src": "1454:3:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_PoolKey_$1723_memory_ptr",
																		"typeString": "struct PoolAddress.PoolKey memory"
																	}
																},
																"id": 1768,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "token0",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1718,
																"src": "1454:10:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"expression": {
																	"id": 1769,
																	"name": "key",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1761,
																	"src": "1467:3:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_PoolKey_$1723_memory_ptr",
																		"typeString": "struct PoolAddress.PoolKey memory"
																	}
																},
																"id": 1770,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "token1",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1720,
																"src": "1467:10:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1454:23:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 1766,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1446:7:17",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 1772,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1446:32:17",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1773,
												"nodeType": "ExpressionStatement",
												"src": "1446:32:17"
											},
											{
												"expression": {
													"id": 1806,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1774,
														"name": "pool",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1764,
														"src": "1489:4:17",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"hexValue": "30786666",
																										"id": 1786,
																										"isConstant": false,
																										"isLValue": false,
																										"isPure": true,
																										"kind": "number",
																										"lValueRequested": false,
																										"nodeType": "Literal",
																										"src": "1617:4:17",
																										"typeDescriptions": {
																											"typeIdentifier": "t_rational_255_by_1",
																											"typeString": "int_const 255"
																										},
																										"value": "0xff"
																									}
																								],
																								"expression": {
																									"argumentTypes": [
																										{
																											"typeIdentifier": "t_rational_255_by_1",
																											"typeString": "int_const 255"
																										}
																									],
																									"id": 1785,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"lValueRequested": false,
																									"nodeType": "ElementaryTypeNameExpression",
																									"src": "1610:6:17",
																									"typeDescriptions": {
																										"typeIdentifier": "t_type$_t_bytes1_$",
																										"typeString": "type(bytes1)"
																									},
																									"typeName": {
																										"id": 1784,
																										"name": "bytes1",
																										"nodeType": "ElementaryTypeName",
																										"src": "1610:6:17",
																										"typeDescriptions": {}
																									}
																								},
																								"id": 1787,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": true,
																								"kind": "typeConversion",
																								"lValueRequested": false,
																								"names": [],
																								"nodeType": "FunctionCall",
																								"src": "1610:12:17",
																								"tryCall": false,
																								"typeDescriptions": {
																									"typeIdentifier": "t_bytes1",
																									"typeString": "bytes1"
																								}
																							},
																							{
																								"id": 1788,
																								"name": "factory",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 1758,
																								"src": "1649:7:17",
																								"typeDescriptions": {
																									"typeIdentifier": "t_address",
																									"typeString": "address"
																								}
																							},
																							{
																								"arguments": [
																									{
																										"arguments": [
																											{
																												"expression": {
																													"id": 1792,
																													"name": "key",
																													"nodeType": "Identifier",
																													"overloadedDeclarations": [],
																													"referencedDeclaration": 1761,
																													"src": "1704:3:17",
																													"typeDescriptions": {
																														"typeIdentifier": "t_struct$_PoolKey_$1723_memory_ptr",
																														"typeString": "struct PoolAddress.PoolKey memory"
																													}
																												},
																												"id": 1793,
																												"isConstant": false,
																												"isLValue": true,
																												"isPure": false,
																												"lValueRequested": false,
																												"memberName": "token0",
																												"nodeType": "MemberAccess",
																												"referencedDeclaration": 1718,
																												"src": "1704:10:17",
																												"typeDescriptions": {
																													"typeIdentifier": "t_address",
																													"typeString": "address"
																												}
																											},
																											{
																												"expression": {
																													"id": 1794,
																													"name": "key",
																													"nodeType": "Identifier",
																													"overloadedDeclarations": [],
																													"referencedDeclaration": 1761,
																													"src": "1716:3:17",
																													"typeDescriptions": {
																														"typeIdentifier": "t_struct$_PoolKey_$1723_memory_ptr",
																														"typeString": "struct PoolAddress.PoolKey memory"
																													}
																												},
																												"id": 1795,
																												"isConstant": false,
																												"isLValue": true,
																												"isPure": false,
																												"lValueRequested": false,
																												"memberName": "token1",
																												"nodeType": "MemberAccess",
																												"referencedDeclaration": 1720,
																												"src": "1716:10:17",
																												"typeDescriptions": {
																													"typeIdentifier": "t_address",
																													"typeString": "address"
																												}
																											},
																											{
																												"expression": {
																													"id": 1796,
																													"name": "key",
																													"nodeType": "Identifier",
																													"overloadedDeclarations": [],
																													"referencedDeclaration": 1761,
																													"src": "1728:3:17",
																													"typeDescriptions": {
																														"typeIdentifier": "t_struct$_PoolKey_$1723_memory_ptr",
																														"typeString": "struct PoolAddress.PoolKey memory"
																													}
																												},
																												"id": 1797,
																												"isConstant": false,
																												"isLValue": true,
																												"isPure": false,
																												"lValueRequested": false,
																												"memberName": "fee",
																												"nodeType": "MemberAccess",
																												"referencedDeclaration": 1722,
																												"src": "1728:7:17",
																												"typeDescriptions": {
																													"typeIdentifier": "t_uint24",
																													"typeString": "uint24"
																												}
																											}
																										],
																										"expression": {
																											"argumentTypes": [
																												{
																													"typeIdentifier": "t_address",
																													"typeString": "address"
																												},
																												{
																													"typeIdentifier": "t_address",
																													"typeString": "address"
																												},
																												{
																													"typeIdentifier": "t_uint24",
																													"typeString": "uint24"
																												}
																											],
																											"expression": {
																												"id": 1790,
																												"name": "abi",
																												"nodeType": "Identifier",
																												"overloadedDeclarations": [],
																												"referencedDeclaration": 4294967295,
																												"src": "1693:3:17",
																												"typeDescriptions": {
																													"typeIdentifier": "t_magic_abi",
																													"typeString": "abi"
																												}
																											},
																											"id": 1791,
																											"isConstant": false,
																											"isLValue": false,
																											"isPure": true,
																											"lValueRequested": false,
																											"memberName": "encode",
																											"nodeType": "MemberAccess",
																											"src": "1693:10:17",
																											"typeDescriptions": {
																												"typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
																												"typeString": "function () pure returns (bytes memory)"
																											}
																										},
																										"id": 1798,
																										"isConstant": false,
																										"isLValue": false,
																										"isPure": false,
																										"kind": "functionCall",
																										"lValueRequested": false,
																										"names": [],
																										"nodeType": "FunctionCall",
																										"src": "1693:43:17",
																										"tryCall": false,
																										"typeDescriptions": {
																											"typeIdentifier": "t_bytes_memory_ptr",
																											"typeString": "bytes memory"
																										}
																									}
																								],
																								"expression": {
																									"argumentTypes": [
																										{
																											"typeIdentifier": "t_bytes_memory_ptr",
																											"typeString": "bytes memory"
																										}
																									],
																									"id": 1789,
																									"name": "keccak256",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 4294967288,
																									"src": "1683:9:17",
																									"typeDescriptions": {
																										"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																										"typeString": "function (bytes memory) pure returns (bytes32)"
																									}
																								},
																								"id": 1799,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"kind": "functionCall",
																								"lValueRequested": false,
																								"names": [],
																								"nodeType": "FunctionCall",
																								"src": "1683:54:17",
																								"tryCall": false,
																								"typeDescriptions": {
																									"typeIdentifier": "t_bytes32",
																									"typeString": "bytes32"
																								}
																							},
																							{
																								"id": 1800,
																								"name": "POOL_INIT_CODE_HASH",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 1716,
																								"src": "1764:19:17",
																								"typeDescriptions": {
																									"typeIdentifier": "t_bytes32",
																									"typeString": "bytes32"
																								}
																							}
																						],
																						"expression": {
																							"argumentTypes": [
																								{
																									"typeIdentifier": "t_bytes1",
																									"typeString": "bytes1"
																								},
																								{
																									"typeIdentifier": "t_address",
																									"typeString": "address"
																								},
																								{
																									"typeIdentifier": "t_bytes32",
																									"typeString": "bytes32"
																								},
																								{
																									"typeIdentifier": "t_bytes32",
																									"typeString": "bytes32"
																								}
																							],
																							"expression": {
																								"id": 1782,
																								"name": "abi",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 4294967295,
																								"src": "1567:3:17",
																								"typeDescriptions": {
																									"typeIdentifier": "t_magic_abi",
																									"typeString": "abi"
																								}
																							},
																							"id": 1783,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"lValueRequested": false,
																							"memberName": "encodePacked",
																							"nodeType": "MemberAccess",
																							"src": "1567:16:17",
																							"typeDescriptions": {
																								"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
																								"typeString": "function () pure returns (bytes memory)"
																							}
																						},
																						"id": 1801,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"kind": "functionCall",
																						"lValueRequested": false,
																						"names": [],
																						"nodeType": "FunctionCall",
																						"src": "1567:239:17",
																						"tryCall": false,
																						"typeDescriptions": {
																							"typeIdentifier": "t_bytes_memory_ptr",
																							"typeString": "bytes memory"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_bytes_memory_ptr",
																							"typeString": "bytes memory"
																						}
																					],
																					"id": 1781,
																					"name": "keccak256",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4294967288,
																					"src": "1535:9:17",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																						"typeString": "function (bytes memory) pure returns (bytes32)"
																					}
																				},
																				"id": 1802,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "1535:290:17",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			],
																			"id": 1780,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "1512:4:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_uint256_$",
																				"typeString": "type(uint256)"
																			},
																			"typeName": {
																				"id": 1779,
																				"name": "uint",
																				"nodeType": "ElementaryTypeName",
																				"src": "1512:4:17",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1803,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "1512:328:17",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1778,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "1504:7:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint160_$",
																		"typeString": "type(uint160)"
																	},
																	"typeName": {
																		"id": 1777,
																		"name": "uint160",
																		"nodeType": "ElementaryTypeName",
																		"src": "1504:7:17",
																		"typeDescriptions": {}
																	}
																},
																"id": 1804,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1504:347:17",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															],
															"id": 1776,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "1496:7:17",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 1775,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "1496:7:17",
																"typeDescriptions": {}
															}
														},
														"id": 1805,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1496:356:17",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1489:363:17",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 1807,
												"nodeType": "ExpressionStatement",
												"src": "1489:363:17"
											}
										]
									},
									"documentation": {
										"id": 1756,
										"nodeType": "StructuredDocumentation",
										"src": "1092:239:17",
										"text": "@notice Deterministically computes the pool address given the factory and PoolKey\n @param factory The Uniswap V3 factory contract address\n @param key The PoolKey\n @return pool The contract address of the V3 pool"
									},
									"id": 1809,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "computeAddress",
									"nameLocation": "1346:14:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1762,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1758,
												"mutability": "mutable",
												"name": "factory",
												"nameLocation": "1369:7:17",
												"nodeType": "VariableDeclaration",
												"scope": 1809,
												"src": "1361:15:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1757,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1361:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1761,
												"mutability": "mutable",
												"name": "key",
												"nameLocation": "1393:3:17",
												"nodeType": "VariableDeclaration",
												"scope": 1809,
												"src": "1378:18:17",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_PoolKey_$1723_memory_ptr",
													"typeString": "struct PoolAddress.PoolKey"
												},
												"typeName": {
													"id": 1760,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1759,
														"name": "PoolKey",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1723,
														"src": "1378:7:17"
													},
													"referencedDeclaration": 1723,
													"src": "1378:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_PoolKey_$1723_storage_ptr",
														"typeString": "struct PoolAddress.PoolKey"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1360:37:17"
									},
									"returnParameters": {
										"id": 1765,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1764,
												"mutability": "mutable",
												"name": "pool",
												"nameLocation": "1429:4:17",
												"nodeType": "VariableDeclaration",
												"scope": 1809,
												"src": "1421:12:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1763,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1421:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1420:14:17"
									},
									"scope": 1810,
									"src": "1337:523:17",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1811,
							"src": "171:1692:17",
							"usedErrors": []
						}
					],
					"src": "46:1817:17"
				},
				"id": 17
			},
			"libraries/SafeERC20.sol": {
				"ast": {
					"absolutePath": "libraries/SafeERC20.sol",
					"exportedSymbols": {
						"Address": [
							1710
						],
						"IERC20": [
							823
						],
						"IERC20Permit": [
							859
						],
						"SafeERC20": [
							2189
						]
					},
					"id": 2190,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1812,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "118:24:18"
						},
						{
							"absolutePath": "interfaces/IERC20.sol",
							"file": "../interfaces/IERC20.sol",
							"id": 1814,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2190,
							"sourceUnit": 824,
							"src": "146:48:18",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1813,
										"name": "IERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"src": "154:6:18",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "interfaces/IERC20Permit.sol",
							"file": "../interfaces/IERC20Permit.sol",
							"id": 1816,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2190,
							"sourceUnit": 860,
							"src": "196:60:18",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1815,
										"name": "IERC20Permit",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"src": "204:12:18",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "libraries/Address.sol",
							"file": "../libraries/Address.sol",
							"id": 1818,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2190,
							"sourceUnit": 1711,
							"src": "258:49:18",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1817,
										"name": "Address",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"src": "266:7:18",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "SafeERC20",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1819,
								"nodeType": "StructuredDocumentation",
								"src": "311:465:18",
								"text": " @title SafeERC20\n @dev Wrappers around ERC20 operations that throw on failure (when the token\n contract returns false). Tokens that return no value (and instead revert or\n throw on failure) are also supported, non-reverting calls are assumed to be\n successful.\n To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n which allows you to call the safe operations as `token.safeTransfer(...)`, etc."
							},
							"fullyImplemented": true,
							"id": 2189,
							"linearizedBaseContracts": [
								2189
							],
							"name": "SafeERC20",
							"nameLocation": "786:9:18",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"id": 1822,
									"libraryName": {
										"id": 1820,
										"name": "Address",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1710,
										"src": "809:7:18"
									},
									"nodeType": "UsingForDirective",
									"src": "803:26:18",
									"typeName": {
										"id": 1821,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "821:7:18",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									}
								},
								{
									"body": {
										"id": 1845,
										"nodeType": "Block",
										"src": "1097:105:18",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1834,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1826,
															"src": "1128:5:18",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$823",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 1837,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1826,
																			"src": "1158:5:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$823",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 1838,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "transfer",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 790,
																		"src": "1158:14:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 1839,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "1158:23:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 1840,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1828,
																	"src": "1183:2:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1841,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1830,
																	"src": "1187:5:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 1835,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "1135:3:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 1836,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "1135:22:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 1842,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1135:58:18",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$823",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1833,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2140,
														"src": "1108:19:18",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$823_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 1843,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1108:86:18",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1844,
												"nodeType": "ExpressionStatement",
												"src": "1108:86:18"
											}
										]
									},
									"documentation": {
										"id": 1823,
										"nodeType": "StructuredDocumentation",
										"src": "837:182:18",
										"text": " @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n non-reverting calls are assumed to be successful."
									},
									"id": 1846,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransfer",
									"nameLocation": "1034:12:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1831,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1826,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1054:5:18",
												"nodeType": "VariableDeclaration",
												"scope": 1846,
												"src": "1047:12:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$823",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 1825,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1824,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 823,
														"src": "1047:6:18"
													},
													"referencedDeclaration": 823,
													"src": "1047:6:18",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$823",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1828,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1069:2:18",
												"nodeType": "VariableDeclaration",
												"scope": 1846,
												"src": "1061:10:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1827,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1061:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1830,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1081:5:18",
												"nodeType": "VariableDeclaration",
												"scope": 1846,
												"src": "1073:13:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1829,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1073:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1046:41:18"
									},
									"returnParameters": {
										"id": 1832,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1097:0:18"
									},
									"scope": 2189,
									"src": "1025:177:18",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1872,
										"nodeType": "Block",
										"src": "1537:115:18",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1860,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1850,
															"src": "1568:5:18",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$823",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 1863,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1850,
																			"src": "1598:5:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$823",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 1864,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "transferFrom",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 822,
																		"src": "1598:18:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,address,uint256) external returns (bool)"
																		}
																	},
																	"id": 1865,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "1598:27:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 1866,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1852,
																	"src": "1627:4:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1867,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1854,
																	"src": "1633:2:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1868,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1856,
																	"src": "1637:5:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 1861,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "1575:3:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 1862,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "1575:22:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 1869,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1575:68:18",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$823",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1859,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2140,
														"src": "1548:19:18",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$823_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 1870,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1548:96:18",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1871,
												"nodeType": "ExpressionStatement",
												"src": "1548:96:18"
											}
										]
									},
									"documentation": {
										"id": 1847,
										"nodeType": "StructuredDocumentation",
										"src": "1210:231:18",
										"text": " @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n calling contract. If `token` returns no value, non-reverting calls are assumed to be successful."
									},
									"id": 1873,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "1456:16:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1857,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1850,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1480:5:18",
												"nodeType": "VariableDeclaration",
												"scope": 1873,
												"src": "1473:12:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$823",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 1849,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1848,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 823,
														"src": "1473:6:18"
													},
													"referencedDeclaration": 823,
													"src": "1473:6:18",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$823",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1852,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "1495:4:18",
												"nodeType": "VariableDeclaration",
												"scope": 1873,
												"src": "1487:12:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1851,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1487:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1854,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1509:2:18",
												"nodeType": "VariableDeclaration",
												"scope": 1873,
												"src": "1501:10:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1853,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1501:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1856,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1521:5:18",
												"nodeType": "VariableDeclaration",
												"scope": 1873,
												"src": "1513:13:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1855,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1513:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1472:55:18"
									},
									"returnParameters": {
										"id": 1858,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1537:0:18"
									},
									"scope": 2189,
									"src": "1447:205:18",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1916,
										"nodeType": "Block",
										"src": "1997:506:18",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 1900,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1887,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1885,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1881,
																			"src": "2251:5:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 1886,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2260:1:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "2251:10:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 1888,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2250:12:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1898,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"id": 1893,
																							"name": "this",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 4294967268,
																							"src": "2291:4:18",
																							"typeDescriptions": {
																								"typeIdentifier": "t_contract$_SafeERC20_$2189",
																								"typeString": "library SafeERC20"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_contract$_SafeERC20_$2189",
																								"typeString": "library SafeERC20"
																							}
																						],
																						"id": 1892,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "2283:7:18",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_address_$",
																							"typeString": "type(address)"
																						},
																						"typeName": {
																							"id": 1891,
																							"name": "address",
																							"nodeType": "ElementaryTypeName",
																							"src": "2283:7:18",
																							"typeDescriptions": {}
																						}
																					},
																					"id": 1894,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "typeConversion",
																					"lValueRequested": false,
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "2283:13:18",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"id": 1895,
																					"name": "spender",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1879,
																					"src": "2298:7:18",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				],
																				"expression": {
																					"id": 1889,
																					"name": "token",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1877,
																					"src": "2267:5:18",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IERC20_$823",
																						"typeString": "contract IERC20"
																					}
																				},
																				"id": 1890,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "allowance",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 800,
																				"src": "2267:15:18",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																					"typeString": "function (address,address) view external returns (uint256)"
																				}
																			},
																			"id": 1896,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "2267:39:18",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 1897,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2310:1:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "2267:44:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 1899,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2266:46:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "2250:62:18",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365",
															"id": 1901,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2327:56:18",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25",
																"typeString": "literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""
															},
															"value": "SafeERC20: approve from non-zero to non-zero allowance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25",
																"typeString": "literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""
															}
														],
														"id": 1884,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2228:7:18",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1902,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2228:166:18",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1903,
												"nodeType": "ExpressionStatement",
												"src": "2228:166:18"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1905,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1877,
															"src": "2425:5:18",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$823",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 1908,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1877,
																			"src": "2455:5:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$823",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 1909,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "approve",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 810,
																		"src": "2455:13:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 1910,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "2455:22:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 1911,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1879,
																	"src": "2479:7:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1912,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1881,
																	"src": "2488:5:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 1906,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "2432:3:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 1907,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "2432:22:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 1913,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2432:62:18",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$823",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1904,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2140,
														"src": "2405:19:18",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$823_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 1914,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2405:90:18",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1915,
												"nodeType": "ExpressionStatement",
												"src": "2405:90:18"
											}
										]
									},
									"documentation": {
										"id": 1874,
										"nodeType": "StructuredDocumentation",
										"src": "1660:255:18",
										"text": " @dev Deprecated. This function has issues similar to the ones found in\n {IERC20-approve}, and its usage is discouraged.\n Whenever possible, use {safeIncreaseAllowance} and\n {safeDecreaseAllowance} instead."
									},
									"id": 1917,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeApprove",
									"nameLocation": "1930:11:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1882,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1877,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1949:5:18",
												"nodeType": "VariableDeclaration",
												"scope": 1917,
												"src": "1942:12:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$823",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 1876,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1875,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 823,
														"src": "1942:6:18"
													},
													"referencedDeclaration": 823,
													"src": "1942:6:18",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$823",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1879,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1964:7:18",
												"nodeType": "VariableDeclaration",
												"scope": 1917,
												"src": "1956:15:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1878,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1956:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1881,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1981:5:18",
												"nodeType": "VariableDeclaration",
												"scope": 1917,
												"src": "1973:13:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1880,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1973:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1941:46:18"
									},
									"returnParameters": {
										"id": 1883,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1997:0:18"
									},
									"scope": 2189,
									"src": "1921:582:18",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1953,
										"nodeType": "Block",
										"src": "2786:197:18",
										"statements": [
											{
												"assignments": [
													1929
												],
												"declarations": [
													{
														"constant": false,
														"id": 1929,
														"mutability": "mutable",
														"name": "oldAllowance",
														"nameLocation": "2805:12:18",
														"nodeType": "VariableDeclaration",
														"scope": 1953,
														"src": "2797:20:18",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1928,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2797:7:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1938,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 1934,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "2844:4:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_SafeERC20_$2189",
																		"typeString": "library SafeERC20"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_SafeERC20_$2189",
																		"typeString": "library SafeERC20"
																	}
																],
																"id": 1933,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2836:7:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1932,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "2836:7:18",
																	"typeDescriptions": {}
																}
															},
															"id": 1935,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2836:13:18",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1936,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1923,
															"src": "2851:7:18",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 1930,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1921,
															"src": "2820:5:18",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$823",
																"typeString": "contract IERC20"
															}
														},
														"id": 1931,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "allowance",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 800,
														"src": "2820:15:18",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address,address) view external returns (uint256)"
														}
													},
													"id": 1937,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2820:39:18",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2797:62:18"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1940,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1921,
															"src": "2890:5:18",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$823",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 1943,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1921,
																			"src": "2920:5:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$823",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 1944,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "approve",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 810,
																		"src": "2920:13:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 1945,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "2920:22:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 1946,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1923,
																	"src": "2944:7:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1949,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1947,
																		"name": "oldAllowance",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1929,
																		"src": "2953:12:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "+",
																	"rightExpression": {
																		"id": 1948,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1925,
																		"src": "2968:5:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2953:20:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 1941,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "2897:3:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 1942,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "2897:22:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 1950,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2897:77:18",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$823",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1939,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2140,
														"src": "2870:19:18",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$823_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 1951,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2870:105:18",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1952,
												"nodeType": "ExpressionStatement",
												"src": "2870:105:18"
											}
										]
									},
									"documentation": {
										"id": 1918,
										"nodeType": "StructuredDocumentation",
										"src": "2511:183:18",
										"text": " @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful."
									},
									"id": 1954,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeIncreaseAllowance",
									"nameLocation": "2709:21:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1926,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1921,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "2738:5:18",
												"nodeType": "VariableDeclaration",
												"scope": 1954,
												"src": "2731:12:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$823",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 1920,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1919,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 823,
														"src": "2731:6:18"
													},
													"referencedDeclaration": 823,
													"src": "2731:6:18",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$823",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1923,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2753:7:18",
												"nodeType": "VariableDeclaration",
												"scope": 1954,
												"src": "2745:15:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1922,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2745:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1925,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2770:5:18",
												"nodeType": "VariableDeclaration",
												"scope": 1954,
												"src": "2762:13:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1924,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2762:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2730:46:18"
									},
									"returnParameters": {
										"id": 1927,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2786:0:18"
									},
									"scope": 2189,
									"src": "2700:283:18",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1998,
										"nodeType": "Block",
										"src": "3266:327:18",
										"statements": [
											{
												"id": 1997,
												"nodeType": "UncheckedBlock",
												"src": "3277:309:18",
												"statements": [
													{
														"assignments": [
															1966
														],
														"declarations": [
															{
																"constant": false,
																"id": 1966,
																"mutability": "mutable",
																"name": "oldAllowance",
																"nameLocation": "3310:12:18",
																"nodeType": "VariableDeclaration",
																"scope": 1997,
																"src": "3302:20:18",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 1965,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "3302:7:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1975,
														"initialValue": {
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 1971,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "3349:4:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_SafeERC20_$2189",
																				"typeString": "library SafeERC20"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_SafeERC20_$2189",
																				"typeString": "library SafeERC20"
																			}
																		],
																		"id": 1970,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "3341:7:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 1969,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "3341:7:18",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1972,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "3341:13:18",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1973,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1960,
																	"src": "3356:7:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"expression": {
																	"id": 1967,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1958,
																	"src": "3325:5:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$823",
																		"typeString": "contract IERC20"
																	}
																},
																"id": 1968,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "allowance",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 800,
																"src": "3325:15:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																	"typeString": "function (address,address) view external returns (uint256)"
																}
															},
															"id": 1974,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3325:39:18",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "3302:62:18"
													},
													{
														"expression": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1979,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1977,
																		"name": "oldAllowance",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1966,
																		"src": "3387:12:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": ">=",
																	"rightExpression": {
																		"id": 1978,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1962,
																		"src": "3403:5:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "3387:21:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																{
																	"hexValue": "5361666545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f",
																	"id": 1980,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "string",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3410:43:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a",
																		"typeString": "literal_string \"SafeERC20: decreased allowance below zero\""
																	},
																	"value": "SafeERC20: decreased allowance below zero"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	{
																		"typeIdentifier": "t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a",
																		"typeString": "literal_string \"SafeERC20: decreased allowance below zero\""
																	}
																],
																"id": 1976,
																"name": "require",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	4294967278,
																	4294967278
																],
																"referencedDeclaration": 4294967278,
																"src": "3379:7:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																	"typeString": "function (bool,string memory) pure"
																}
															},
															"id": 1981,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3379:75:18",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 1982,
														"nodeType": "ExpressionStatement",
														"src": "3379:75:18"
													},
													{
														"expression": {
															"arguments": [
																{
																	"id": 1984,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1958,
																	"src": "3489:5:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$823",
																		"typeString": "contract IERC20"
																	}
																},
																{
																	"arguments": [
																		{
																			"expression": {
																				"expression": {
																					"id": 1987,
																					"name": "token",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1958,
																					"src": "3519:5:18",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IERC20_$823",
																						"typeString": "contract IERC20"
																					}
																				},
																				"id": 1988,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "approve",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 810,
																				"src": "3519:13:18",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																					"typeString": "function (address,uint256) external returns (bool)"
																				}
																			},
																			"id": 1989,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "selector",
																			"nodeType": "MemberAccess",
																			"src": "3519:22:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes4",
																				"typeString": "bytes4"
																			}
																		},
																		{
																			"id": 1990,
																			"name": "spender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1960,
																			"src": "3543:7:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1993,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 1991,
																				"name": "oldAllowance",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1966,
																				"src": "3552:12:18",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "-",
																			"rightExpression": {
																				"id": 1992,
																				"name": "value",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1962,
																				"src": "3567:5:18",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "3552:20:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_bytes4",
																				"typeString": "bytes4"
																			},
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			},
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"expression": {
																			"id": 1985,
																			"name": "abi",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967295,
																			"src": "3496:3:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_abi",
																				"typeString": "abi"
																			}
																		},
																		"id": 1986,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberName": "encodeWithSelector",
																		"nodeType": "MemberAccess",
																		"src": "3496:22:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																			"typeString": "function (bytes4) pure returns (bytes memory)"
																		}
																	},
																	"id": 1994,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "3496:77:18",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20_$823",
																		"typeString": "contract IERC20"
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"id": 1983,
																"name": "_callOptionalReturn",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2140,
																"src": "3469:19:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$823_$_t_bytes_memory_ptr_$returns$__$",
																	"typeString": "function (contract IERC20,bytes memory)"
																}
															},
															"id": 1995,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3469:105:18",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 1996,
														"nodeType": "ExpressionStatement",
														"src": "3469:105:18"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1955,
										"nodeType": "StructuredDocumentation",
										"src": "2991:183:18",
										"text": " @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful."
									},
									"id": 1999,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeDecreaseAllowance",
									"nameLocation": "3189:21:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1963,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1958,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "3218:5:18",
												"nodeType": "VariableDeclaration",
												"scope": 1999,
												"src": "3211:12:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$823",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 1957,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1956,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 823,
														"src": "3211:6:18"
													},
													"referencedDeclaration": 823,
													"src": "3211:6:18",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$823",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1960,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "3233:7:18",
												"nodeType": "VariableDeclaration",
												"scope": 1999,
												"src": "3225:15:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1959,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3225:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1962,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3250:5:18",
												"nodeType": "VariableDeclaration",
												"scope": 1999,
												"src": "3242:13:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1961,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3242:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3210:46:18"
									},
									"returnParameters": {
										"id": 1964,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3266:0:18"
									},
									"scope": 2189,
									"src": "3180:413:18",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2045,
										"nodeType": "Block",
										"src": "3996:340:18",
										"statements": [
											{
												"assignments": [
													2011
												],
												"declarations": [
													{
														"constant": false,
														"id": 2011,
														"mutability": "mutable",
														"name": "approvalCall",
														"nameLocation": "4020:12:18",
														"nodeType": "VariableDeclaration",
														"scope": 2045,
														"src": "4007:25:18",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 2010,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "4007:5:18",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2020,
												"initialValue": {
													"arguments": [
														{
															"expression": {
																"expression": {
																	"id": 2014,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2003,
																	"src": "4058:5:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$823",
																		"typeString": "contract IERC20"
																	}
																},
																"id": 2015,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "approve",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 810,
																"src": "4058:13:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																	"typeString": "function (address,uint256) external returns (bool)"
																}
															},
															"id": 2016,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "selector",
															"nodeType": "MemberAccess",
															"src": "4058:22:18",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes4",
																"typeString": "bytes4"
															}
														},
														{
															"id": 2017,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2005,
															"src": "4082:7:18",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2018,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2007,
															"src": "4091:5:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes4",
																"typeString": "bytes4"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 2012,
															"name": "abi",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967295,
															"src": "4035:3:18",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_abi",
																"typeString": "abi"
															}
														},
														"id": 2013,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberName": "encodeWithSelector",
														"nodeType": "MemberAccess",
														"src": "4035:22:18",
														"typeDescriptions": {
															"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes4) pure returns (bytes memory)"
														}
													},
													"id": 2019,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4035:62:18",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4007:90:18"
											},
											{
												"condition": {
													"id": 2025,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "4114:45:18",
													"subExpression": {
														"arguments": [
															{
																"id": 2022,
																"name": "token",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2003,
																"src": "4139:5:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_IERC20_$823",
																	"typeString": "contract IERC20"
																}
															},
															{
																"id": 2023,
																"name": "approvalCall",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2011,
																"src": "4146:12:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_contract$_IERC20_$823",
																	"typeString": "contract IERC20"
																},
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"id": 2021,
															"name": "_callOptionalReturnBool",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2188,
															"src": "4115:23:18",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$823_$_t_bytes_memory_ptr_$returns$_t_bool_$",
																"typeString": "function (contract IERC20,bytes memory) returns (bool)"
															}
														},
														"id": 2024,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "4115:44:18",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2044,
												"nodeType": "IfStatement",
												"src": "4110:219:18",
												"trueBody": {
													"id": 2043,
													"nodeType": "Block",
													"src": "4161:168:18",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 2027,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2003,
																		"src": "4196:5:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$823",
																			"typeString": "contract IERC20"
																		}
																	},
																	{
																		"arguments": [
																			{
																				"expression": {
																					"expression": {
																						"id": 2030,
																						"name": "token",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2003,
																						"src": "4226:5:18",
																						"typeDescriptions": {
																							"typeIdentifier": "t_contract$_IERC20_$823",
																							"typeString": "contract IERC20"
																						}
																					},
																					"id": 2031,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "approve",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 810,
																					"src": "4226:13:18",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																						"typeString": "function (address,uint256) external returns (bool)"
																					}
																				},
																				"id": 2032,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "selector",
																				"nodeType": "MemberAccess",
																				"src": "4226:22:18",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes4",
																					"typeString": "bytes4"
																				}
																			},
																			{
																				"id": 2033,
																				"name": "spender",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2005,
																				"src": "4250:7:18",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"hexValue": "30",
																				"id": 2034,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "4259:1:18",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_bytes4",
																					"typeString": "bytes4"
																				},
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"expression": {
																				"id": 2028,
																				"name": "abi",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967295,
																				"src": "4203:3:18",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_abi",
																					"typeString": "abi"
																				}
																			},
																			"id": 2029,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"memberName": "encodeWithSelector",
																			"nodeType": "MemberAccess",
																			"src": "4203:22:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																				"typeString": "function (bytes4) pure returns (bytes memory)"
																			}
																		},
																		"id": 2035,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "4203:58:18",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_IERC20_$823",
																			"typeString": "contract IERC20"
																		},
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	],
																	"id": 2026,
																	"name": "_callOptionalReturn",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2140,
																	"src": "4176:19:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$823_$_t_bytes_memory_ptr_$returns$__$",
																		"typeString": "function (contract IERC20,bytes memory)"
																	}
																},
																"id": 2036,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4176:86:18",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 2037,
															"nodeType": "ExpressionStatement",
															"src": "4176:86:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"id": 2039,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2003,
																		"src": "4297:5:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$823",
																			"typeString": "contract IERC20"
																		}
																	},
																	{
																		"id": 2040,
																		"name": "approvalCall",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2011,
																		"src": "4304:12:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_IERC20_$823",
																			"typeString": "contract IERC20"
																		},
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	],
																	"id": 2038,
																	"name": "_callOptionalReturn",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2140,
																	"src": "4277:19:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$823_$_t_bytes_memory_ptr_$returns$__$",
																		"typeString": "function (contract IERC20,bytes memory)"
																	}
																},
																"id": 2041,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4277:40:18",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 2042,
															"nodeType": "ExpressionStatement",
															"src": "4277:40:18"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 2000,
										"nodeType": "StructuredDocumentation",
										"src": "3601:312:18",
										"text": " @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n to be set to zero before setting it to a non-zero value, such as USDT."
									},
									"id": 2046,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "forceApprove",
									"nameLocation": "3928:12:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2008,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2003,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "3948:5:18",
												"nodeType": "VariableDeclaration",
												"scope": 2046,
												"src": "3941:12:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$823",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 2002,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2001,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 823,
														"src": "3941:6:18"
													},
													"referencedDeclaration": 823,
													"src": "3941:6:18",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$823",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2005,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "3963:7:18",
												"nodeType": "VariableDeclaration",
												"scope": 2046,
												"src": "3955:15:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2004,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3955:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2007,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3980:5:18",
												"nodeType": "VariableDeclaration",
												"scope": 2046,
												"src": "3972:13:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2006,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3972:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3940:46:18"
									},
									"returnParameters": {
										"id": 2009,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3996:0:18"
									},
									"scope": 2189,
									"src": "3919:417:18",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2102,
										"nodeType": "Block",
										"src": "4718:262:18",
										"statements": [
											{
												"assignments": [
													2068
												],
												"declarations": [
													{
														"constant": false,
														"id": 2068,
														"mutability": "mutable",
														"name": "nonceBefore",
														"nameLocation": "4737:11:18",
														"nodeType": "VariableDeclaration",
														"scope": 2102,
														"src": "4729:19:18",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2067,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4729:7:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2073,
												"initialValue": {
													"arguments": [
														{
															"id": 2071,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2052,
															"src": "4764:5:18",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 2069,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2050,
															"src": "4751:5:18",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20Permit_$859",
																"typeString": "contract IERC20Permit"
															}
														},
														"id": 2070,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "nonces",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 852,
														"src": "4751:12:18",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view external returns (uint256)"
														}
													},
													"id": 2072,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4751:19:18",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4729:41:18"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2077,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2052,
															"src": "4794:5:18",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2078,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2054,
															"src": "4801:7:18",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2079,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2056,
															"src": "4810:5:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 2080,
															"name": "deadline",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2058,
															"src": "4817:8:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 2081,
															"name": "v",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2060,
															"src": "4827:1:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														{
															"id": 2082,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2062,
															"src": "4830:1:18",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 2083,
															"name": "s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2064,
															"src": "4833:1:18",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"expression": {
															"id": 2074,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2050,
															"src": "4781:5:18",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20Permit_$859",
																"typeString": "contract IERC20Permit"
															}
														},
														"id": 2076,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "permit",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 844,
														"src": "4781:12:18",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$__$",
															"typeString": "function (address,address,uint256,uint256,uint8,bytes32,bytes32) external"
														}
													},
													"id": 2084,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4781:54:18",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2085,
												"nodeType": "ExpressionStatement",
												"src": "4781:54:18"
											},
											{
												"assignments": [
													2087
												],
												"declarations": [
													{
														"constant": false,
														"id": 2087,
														"mutability": "mutable",
														"name": "nonceAfter",
														"nameLocation": "4854:10:18",
														"nodeType": "VariableDeclaration",
														"scope": 2102,
														"src": "4846:18:18",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2086,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4846:7:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2092,
												"initialValue": {
													"arguments": [
														{
															"id": 2090,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2052,
															"src": "4880:5:18",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 2088,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2050,
															"src": "4867:5:18",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20Permit_$859",
																"typeString": "contract IERC20Permit"
															}
														},
														"id": 2089,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "nonces",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 852,
														"src": "4867:12:18",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view external returns (uint256)"
														}
													},
													"id": 2091,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4867:19:18",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4846:40:18"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2098,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2094,
																"name": "nonceAfter",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2087,
																"src": "4905:10:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2097,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2095,
																	"name": "nonceBefore",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2068,
																	"src": "4919:11:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "+",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2096,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "4933:1:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "4919:15:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4905:29:18",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5361666545524332303a207065726d697420646964206e6f742073756363656564",
															"id": 2099,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4936:35:18",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d",
																"typeString": "literal_string \"SafeERC20: permit did not succeed\""
															},
															"value": "SafeERC20: permit did not succeed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d",
																"typeString": "literal_string \"SafeERC20: permit did not succeed\""
															}
														],
														"id": 2093,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4897:7:18",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2100,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4897:75:18",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2101,
												"nodeType": "ExpressionStatement",
												"src": "4897:75:18"
											}
										]
									},
									"documentation": {
										"id": 2047,
										"nodeType": "StructuredDocumentation",
										"src": "4344:144:18",
										"text": " @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n Revert on invalid signature."
									},
									"id": 2103,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safePermit",
									"nameLocation": "4503:10:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2065,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2050,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "4537:5:18",
												"nodeType": "VariableDeclaration",
												"scope": 2103,
												"src": "4524:18:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20Permit_$859",
													"typeString": "contract IERC20Permit"
												},
												"typeName": {
													"id": 2049,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2048,
														"name": "IERC20Permit",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 859,
														"src": "4524:12:18"
													},
													"referencedDeclaration": 859,
													"src": "4524:12:18",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20Permit_$859",
														"typeString": "contract IERC20Permit"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2052,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "4561:5:18",
												"nodeType": "VariableDeclaration",
												"scope": 2103,
												"src": "4553:13:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2051,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4553:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2054,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "4585:7:18",
												"nodeType": "VariableDeclaration",
												"scope": 2103,
												"src": "4577:15:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2053,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4577:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2056,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4611:5:18",
												"nodeType": "VariableDeclaration",
												"scope": 2103,
												"src": "4603:13:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2055,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4603:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2058,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "4635:8:18",
												"nodeType": "VariableDeclaration",
												"scope": 2103,
												"src": "4627:16:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2057,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4627:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2060,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "4660:1:18",
												"nodeType": "VariableDeclaration",
												"scope": 2103,
												"src": "4654:7:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 2059,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "4654:5:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2062,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "4680:1:18",
												"nodeType": "VariableDeclaration",
												"scope": 2103,
												"src": "4672:9:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2061,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4672:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2064,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "4700:1:18",
												"nodeType": "VariableDeclaration",
												"scope": 2103,
												"src": "4692:9:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2063,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4692:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4513:195:18"
									},
									"returnParameters": {
										"id": 2066,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4718:0:18"
									},
									"scope": 2189,
									"src": "4494:486:18",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2139,
										"nodeType": "Block",
										"src": "5441:579:18",
										"statements": [
											{
												"assignments": [
													2113
												],
												"declarations": [
													{
														"constant": false,
														"id": 2113,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "5808:10:18",
														"nodeType": "VariableDeclaration",
														"scope": 2139,
														"src": "5795:23:18",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 2112,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "5795:5:18",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2122,
												"initialValue": {
													"arguments": [
														{
															"id": 2119,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2109,
															"src": "5849:4:18",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564",
															"id": 2120,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5855:34:18",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b",
																"typeString": "literal_string \"SafeERC20: low-level call failed\""
															},
															"value": "SafeERC20: low-level call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b",
																"typeString": "literal_string \"SafeERC20: low-level call failed\""
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 2116,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2107,
																	"src": "5829:5:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$823",
																		"typeString": "contract IERC20"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20_$823",
																		"typeString": "contract IERC20"
																	}
																],
																"id": 2115,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "5821:7:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 2114,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "5821:7:18",
																	"typeDescriptions": {}
																}
															},
															"id": 2117,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5821:14:18",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 2118,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "functionCall",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1470,
														"src": "5821:27:18",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$bound_to$_t_address_$",
															"typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
														}
													},
													"id": 2121,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5821:69:18",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5795:95:18"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 2135,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2127,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 2124,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2113,
																		"src": "5909:10:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 2125,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"src": "5909:17:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 2126,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5930:1:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "5909:22:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"arguments": [
																	{
																		"id": 2130,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2113,
																		"src": "5946:10:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	{
																		"components": [
																			{
																				"id": 2132,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "5959:4:18",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_bool_$",
																					"typeString": "type(bool)"
																				},
																				"typeName": {
																					"id": 2131,
																					"name": "bool",
																					"nodeType": "ElementaryTypeName",
																					"src": "5959:4:18",
																					"typeDescriptions": {}
																				}
																			}
																		],
																		"id": 2133,
																		"isConstant": false,
																		"isInlineArray": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "TupleExpression",
																		"src": "5958:6:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_bool_$",
																			"typeString": "type(bool)"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		},
																		{
																			"typeIdentifier": "t_type$_t_bool_$",
																			"typeString": "type(bool)"
																		}
																	],
																	"expression": {
																		"id": 2128,
																		"name": "abi",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967295,
																		"src": "5935:3:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_abi",
																			"typeString": "abi"
																		}
																	},
																	"id": 2129,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberName": "decode",
																	"nodeType": "MemberAccess",
																	"src": "5935:10:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 2134,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5935:30:18",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "5909:56:18",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564",
															"id": 2136,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5967:44:18",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd",
																"typeString": "literal_string \"SafeERC20: ERC20 operation did not succeed\""
															},
															"value": "SafeERC20: ERC20 operation did not succeed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd",
																"typeString": "literal_string \"SafeERC20: ERC20 operation did not succeed\""
															}
														],
														"id": 2123,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5901:7:18",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2137,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5901:111:18",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2138,
												"nodeType": "ExpressionStatement",
												"src": "5901:111:18"
											}
										]
									},
									"documentation": {
										"id": 2104,
										"nodeType": "StructuredDocumentation",
										"src": "4988:377:18",
										"text": " @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants)."
									},
									"id": 2140,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_callOptionalReturn",
									"nameLocation": "5380:19:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2110,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2107,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "5407:5:18",
												"nodeType": "VariableDeclaration",
												"scope": 2140,
												"src": "5400:12:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$823",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 2106,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2105,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 823,
														"src": "5400:6:18"
													},
													"referencedDeclaration": 823,
													"src": "5400:6:18",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$823",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2109,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5427:4:18",
												"nodeType": "VariableDeclaration",
												"scope": 2140,
												"src": "5414:17:18",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2108,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5414:5:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5399:33:18"
									},
									"returnParameters": {
										"id": 2111,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5441:0:18"
									},
									"scope": 2189,
									"src": "5371:649:18",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 2187,
										"nodeType": "Block",
										"src": "6620:513:18",
										"statements": [
											{
												"assignments": [
													2152,
													2154
												],
												"declarations": [
													{
														"constant": false,
														"id": 2152,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "6926:7:18",
														"nodeType": "VariableDeclaration",
														"scope": 2187,
														"src": "6921:12:18",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 2151,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "6921:4:18",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 2154,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "6948:10:18",
														"nodeType": "VariableDeclaration",
														"scope": 2187,
														"src": "6935:23:18",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 2153,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "6935:5:18",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2162,
												"initialValue": {
													"arguments": [
														{
															"id": 2160,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2146,
															"src": "6982:4:18",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 2157,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2144,
																	"src": "6970:5:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$823",
																		"typeString": "contract IERC20"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20_$823",
																		"typeString": "contract IERC20"
																	}
																],
																"id": 2156,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "6962:7:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 2155,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "6962:7:18",
																	"typeDescriptions": {}
																}
															},
															"id": 2158,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6962:14:18",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 2159,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "call",
														"nodeType": "MemberAccess",
														"src": "6962:19:18",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 2161,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6962:25:18",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6920:67:18"
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 2185,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"id": 2177,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2163,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2152,
															"src": "7018:7:18",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&&",
														"rightExpression": {
															"components": [
																{
																	"commonType": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"id": 2175,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2167,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"expression": {
																				"id": 2164,
																				"name": "returndata",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2154,
																				"src": "7030:10:18",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			},
																			"id": 2165,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "length",
																			"nodeType": "MemberAccess",
																			"src": "7030:17:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 2166,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "7051:1:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "7030:22:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "||",
																	"rightExpression": {
																		"arguments": [
																			{
																				"id": 2170,
																				"name": "returndata",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2154,
																				"src": "7067:10:18",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			},
																			{
																				"components": [
																					{
																						"id": 2172,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "7080:4:18",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_bool_$",
																							"typeString": "type(bool)"
																						},
																						"typeName": {
																							"id": 2171,
																							"name": "bool",
																							"nodeType": "ElementaryTypeName",
																							"src": "7080:4:18",
																							"typeDescriptions": {}
																						}
																					}
																				],
																				"id": 2173,
																				"isConstant": false,
																				"isInlineArray": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "TupleExpression",
																				"src": "7079:6:18",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_bool_$",
																					"typeString": "type(bool)"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				},
																				{
																					"typeIdentifier": "t_type$_t_bool_$",
																					"typeString": "type(bool)"
																				}
																			],
																			"expression": {
																				"id": 2168,
																				"name": "abi",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967295,
																				"src": "7056:3:18",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_abi",
																					"typeString": "abi"
																				}
																			},
																			"id": 2169,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"memberName": "decode",
																			"nodeType": "MemberAccess",
																			"src": "7056:10:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
																				"typeString": "function () pure"
																			}
																		},
																		"id": 2174,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "7056:30:18",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"src": "7030:56:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																}
															],
															"id": 2176,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "7029:58:18",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"src": "7018:69:18",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 2182,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2144,
																		"src": "7118:5:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$823",
																			"typeString": "contract IERC20"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_IERC20_$823",
																			"typeString": "contract IERC20"
																		}
																	],
																	"id": 2181,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "7110:7:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 2180,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "7110:7:18",
																		"typeDescriptions": {}
																	}
																},
																"id": 2183,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7110:14:18",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"expression": {
																"id": 2178,
																"name": "Address",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1710,
																"src": "7091:7:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_Address_$1710_$",
																	"typeString": "type(library Address)"
																}
															},
															"id": 2179,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "isContract",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1398,
															"src": "7091:18:18",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																"typeString": "function (address) view returns (bool)"
															}
														},
														"id": 2184,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7091:34:18",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "7018:107:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 2150,
												"id": 2186,
												"nodeType": "Return",
												"src": "6998:127:18"
											}
										]
									},
									"documentation": {
										"id": 2141,
										"nodeType": "StructuredDocumentation",
										"src": "6028:497:18",
										"text": " @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants).\n This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead."
									},
									"id": 2188,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_callOptionalReturnBool",
									"nameLocation": "6540:23:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2147,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2144,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "6571:5:18",
												"nodeType": "VariableDeclaration",
												"scope": 2188,
												"src": "6564:12:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$823",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 2143,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2142,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 823,
														"src": "6564:6:18"
													},
													"referencedDeclaration": 823,
													"src": "6564:6:18",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$823",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2146,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6591:4:18",
												"nodeType": "VariableDeclaration",
												"scope": 2188,
												"src": "6578:17:18",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2145,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6578:5:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6563:33:18"
									},
									"returnParameters": {
										"id": 2150,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2149,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2188,
												"src": "6614:4:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2148,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6614:4:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6613:6:18"
									},
									"scope": 2189,
									"src": "6531:602:18",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 2190,
							"src": "778:6358:18",
							"usedErrors": []
						}
					],
					"src": "118:7020:18"
				},
				"id": 18
			},
			"libraries/TimeFee.sol": {
				"ast": {
					"absolutePath": "libraries/TimeFee.sol",
					"exportedSymbols": {
						"TimeFee": [
							2238
						]
					},
					"id": 2239,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2191,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".9"
							],
							"nodeType": "PragmaDirective",
							"src": "31:24:19"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "TimeFee",
							"contractDependencies": [],
							"contractKind": "library",
							"fullyImplemented": true,
							"id": 2238,
							"linearizedBaseContracts": [
								2238
							],
							"name": "TimeFee",
							"nameLocation": "67:7:19",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 2236,
										"nodeType": "Block",
										"src": "324:356:19",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 2204,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2200,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2198,
															"name": "stableAmount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2193,
															"src": "338:12:19",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">=",
														"rightExpression": {
															"hexValue": "313030",
															"id": 2199,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "352:9:19",
															"subdenomination": "ether",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_100000000000000000000_by_1",
																"typeString": "int_const 100000000000000000000"
															},
															"value": "100"
														},
														"src": "338:23:19",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2203,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2201,
															"name": "stableAmount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2193,
															"src": "365:12:19",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "<",
														"rightExpression": {
															"hexValue": "31303030",
															"id": 2202,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "378:10:19",
															"subdenomination": "ether",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1000000000000000000000_by_1",
																"typeString": "int_const 1000000000000000000000"
															},
															"value": "1000"
														},
														"src": "365:23:19",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "338:50:19",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"id": 2216,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2212,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2210,
																"name": "stableAmount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2193,
																"src": "447:12:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"hexValue": "31303030",
																"id": 2211,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "461:10:19",
																"subdenomination": "ether",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1000000000000000000000_by_1",
																	"typeString": "int_const 1000000000000000000000"
																},
																"value": "1000"
															},
															"src": "447:24:19",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&&",
														"rightExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2215,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2213,
																"name": "stableAmount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2193,
																"src": "475:12:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"hexValue": "3130303030",
																"id": 2214,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "488:11:19",
																"subdenomination": "ether",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10000000000000000000000_by_1",
																	"typeString": "int_const 10000000000000000000000"
																},
																"value": "10000"
															},
															"src": "475:24:19",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"src": "447:52:19",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseBody": {
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2224,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2222,
																"name": "stableAmount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2193,
																"src": "558:12:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"hexValue": "3130303030",
																"id": 2223,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "572:11:19",
																"subdenomination": "ether",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10000000000000000000000_by_1",
																	"typeString": "int_const 10000000000000000000000"
																},
																"value": "10000"
															},
															"src": "558:25:19",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"falseBody": {
															"id": 2232,
															"nodeType": "Block",
															"src": "638:35:19",
															"statements": [
																{
																	"expression": {
																		"hexValue": "30",
																		"id": 2230,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "660:1:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"functionReturnParameters": 2197,
																	"id": 2231,
																	"nodeType": "Return",
																	"src": "653:8:19"
																}
															]
														},
														"id": 2233,
														"nodeType": "IfStatement",
														"src": "555:118:19",
														"trueBody": {
															"id": 2229,
															"nodeType": "Block",
															"src": "584:50:19",
															"statements": [
																{
																	"expression": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2227,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2225,
																			"name": "stableAmount",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2193,
																			"src": "606:12:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "/",
																		"rightExpression": {
																			"hexValue": "343030",
																			"id": 2226,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "619:3:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_400_by_1",
																				"typeString": "int_const 400"
																			},
																			"value": "400"
																		},
																		"src": "606:16:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"functionReturnParameters": 2197,
																	"id": 2228,
																	"nodeType": "Return",
																	"src": "599:23:19"
																}
															]
														}
													},
													"id": 2234,
													"nodeType": "IfStatement",
													"src": "444:229:19",
													"trueBody": {
														"id": 2221,
														"nodeType": "Block",
														"src": "500:50:19",
														"statements": [
															{
																"expression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2219,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2217,
																		"name": "stableAmount",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2193,
																		"src": "522:12:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "/",
																	"rightExpression": {
																		"hexValue": "323030",
																		"id": 2218,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "535:3:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_200_by_1",
																			"typeString": "int_const 200"
																		},
																		"value": "200"
																	},
																	"src": "522:16:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"functionReturnParameters": 2197,
																"id": 2220,
																"nodeType": "Return",
																"src": "515:23:19"
															}
														]
													}
												},
												"id": 2235,
												"nodeType": "IfStatement",
												"src": "335:338:19",
												"trueBody": {
													"id": 2209,
													"nodeType": "Block",
													"src": "389:50:19",
													"statements": [
														{
															"expression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2207,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2205,
																	"name": "stableAmount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2193,
																	"src": "411:12:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"hexValue": "313030",
																	"id": 2206,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "424:3:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_100_by_1",
																		"typeString": "int_const 100"
																	},
																	"value": "100"
																},
																"src": "411:16:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"functionReturnParameters": 2197,
															"id": 2208,
															"nodeType": "Return",
															"src": "404:23:19"
														}
													]
												}
											}
										]
									},
									"id": 2237,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "fee",
									"nameLocation": "259:3:19",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2194,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2193,
												"mutability": "mutable",
												"name": "stableAmount",
												"nameLocation": "271:12:19",
												"nodeType": "VariableDeclaration",
												"scope": 2237,
												"src": "263:20:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2192,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "263:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "262:22:19"
									},
									"returnParameters": {
										"id": 2197,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2196,
												"mutability": "mutable",
												"name": "stableFee",
												"nameLocation": "314:9:19",
												"nodeType": "VariableDeclaration",
												"scope": 2237,
												"src": "306:17:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2195,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "306:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "305:19:19"
									},
									"scope": 2238,
									"src": "250:430:19",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 2239,
							"src": "59:624:19",
							"usedErrors": []
						}
					],
					"src": "31:652:19"
				},
				"id": 19
			}
		}
	}
}